/* Author: Dipali Revanwar
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var config = require('config');
var mongoose = require('mongoose');
mongoose.Promise = global.Promise;
var kyc_detail = require('../models/kyc_detail');
var kyc_history = require('../models/kyc_history');
var moment = require('moment');
//let jwt = require('jwt-simple');
//let secret = 'xxx';
var fs = require('fs');
var path = require('path');
var appRoot = path.dirname(path.dirname(require.main.filename));
module.exports.controller = function (app) {
    app.post('/kyc_details/hdfc_fetch_kyc_details', function (req, res) {
        try {
            let req_txt = {
                "mobile": (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                "name": "",
                "kyc_id": "",
                //"dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : (moment(req.body.dob).format("DD/MM/YYYY")), //"31/10/2000",
                "dob": (req.body.DOB === undefined || req.body.DOB === "" || req.body.DOB === null) ? "" : req.body.DOB,
                "ckyc_number": "",
                "pan": (req.body.PAN === undefined || req.body.PAN === "" || req.body.PAN === null) ? "" : req.body.PAN,
                "aadhaar_uid": (req.body.Aadhar === undefined || req.body.Aadhar === "" || req.body.Aadhar === null) ? "" : (req.body.Aadhar.substr(req.body.Aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": "",
                "redirect_url": ""
            };
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "token": ""
                }
            };
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            let kyc_url = "";
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get("https://ctrln-uat.hdfcergo.com/e-kyc/tgt/generate-token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("success") && data1.success === true) {
                        if (data1.hasOwnProperty("data") && data1.data.hasOwnProperty("token") && data1.data.token !== "" && data1.data.token !== null) {
                            token = data1.data.token;
                            try {
                                if (token) {
                                    args.headers.token = token;
                                    var client1 = new Client();
                                    client1.get("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-verified", args, function (data, response) {
                                        if (data) {
                                            let LM_Data = {
                                                'KYC_Obj': {
                                                    'KYC_Number': ''
                                                },
                                                'LM_Obj': {
                                                    'iskycVerified': '',
                                                    'redirect_link': '',
                                                    'status': ''
                                                },
                                                'HDFC_Obj': {
                                                    'data': ''
                                                },
                                                'tmp_Obj': ''
                                            };
                                            if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                if (data.data.iskycVerified === 1) {
                                                    kyc_id = (data.data.hasOwnProperty("kyc_id")) ? data.data.kyc_id : "";
                                                    KYC_Status = "SUCCESS";
                                                    LM_Data.KYC_Obj.KYC_Number = kyc_id;
                                                    LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                } else if (data.data.iskycVerified === 0) {
                                                    kyc_id = (data.data.hasOwnProperty("kyc_id")) ? data.data.kyc_id : "";
                                                    KYC_Status = "PENDING";
                                                    kyc_url = data.data.redirect_link;
                                                    LM_Data.HDFC_Obj.redirect_link = data.data.redirect_link;
                                                    LM_Data.tmp_Obj = LM_Data.HDFC_Obj.data;
                                                } else {
                                                    KYC_Status = "PENDING";
                                                    LM_Data.HDFC_Obj.data = data;
                                                    LM_Data.tmp_Obj = LM_Data.HDFC_Obj.data;
                                                }
                                            } else {
                                                KYC_Status = "PENDING";
                                                LM_Data.HDFC_Obj.data = data;
                                                LM_Data.tmp_Obj = LM_Data.HDFC_Obj.data;
                                            }

                                            try {
                                                let cond = {
                                                    'Insurer_Id': req.body.Insurer_Id - 0,
                                                    'PB_CRN': (req.body.PB_CRN === undefined || req.body.PB_CRN === "" || req.body.PB_CRN === null) ? "" : req.body.PB_CRN - 0,
                                                    'User_Data_Id': (req.body.User_Data_Id === undefined || req.body.User_Data_Id === "" || req.body.User_Data_Id === null) ? 0 : req.body.User_Data_Id - 0
                                                };
                                                let setObj = {
                                                    'KYC_Number': kyc_id,
                                                    'KYC_Status': KYC_Status,
                                                    'Modified_On': new Date(),
                                                    'KYC_URL': kyc_url
                                                };
                                                //var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail.update(cond, {$set: setObj}, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "HDFC", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "HDFC", "Msg": data.data, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (req.body.PB_CRN === undefined || req.body.PB_CRN === "" || req.body.PB_CRN === null) ? "" : req.body.PB_CRN - 0,
                                                    'User_Data_Id': (req.body.User_Data_Id === undefined || req.body.User_Data_Id === "" || req.body.User_Data_Id === null) ? 0 : req.body.User_Data_Id - 0,
                                                    'PAN': (req.body.PAN === undefined || req.body.PAN === "" || req.body.PAN === null) ? "" : req.body.PAN,
                                                    'Aadhaar': (req.body.Aadhar === undefined || req.body.Aadhar === "" || req.body.Aadhar === null) ? "" : req.body.Aadhar,
                                                    'DOB': (req.body.DOB === undefined || req.body.DOB === "" || req.body.DOB === null) ? "" : req.body.DOB,
                                                    'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile - 0,
                                                    'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                                                    'Insurer_Id': req.body.Insurer_Id - 0,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "HDFC", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "HDFC", "Msg": data.data, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "HDFC", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "HDFC", "Msg": data.data, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "HDFC", "Msg": "KYC fetch services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "HDFC", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "HDFC", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "HDFC", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "HDFC", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "HDFC", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "HDFC", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/hdfc_verify_kyc_details', function (req, res) {
        try {
            let objRequest = req.body;
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            var user_name = null;
            if (objRequest['Proposal_Request'].middle_name === undefined || objRequest['Proposal_Request'].middle_name === "" || objRequest['Proposal_Request'].middle_name === null) {
                user_name = ((objRequest['Proposal_Request'].first_name === undefined || objRequest['Proposal_Request'].first_name === "" || objRequest['Proposal_Request'].first_name === null) ? "" : objRequest['Proposal_Request'].first_name) + " " +
                        ((objRequest['Proposal_Request'].last_name === undefined || objRequest['Proposal_Request'].last_name === "" || objRequest['Proposal_Request'].last_name === null) ? "" : objRequest['Proposal_Request'].last_name);
            } else {
                user_name = ((objRequest['Proposal_Request'].first_name === undefined || objRequest['Proposal_Request'].first_name === "" || objRequest['Proposal_Request'].first_name === null) ? "" : objRequest['Proposal_Request'].first_name) + " " +
                        ((objRequest['Proposal_Request'].middle_name === undefined || objRequest['Proposal_Request'].middle_name === "" || objRequest['Proposal_Request'].middle_name === null) ? "" : objRequest['Proposal_Request'].middle_name) + " " +
                        ((objRequest['Proposal_Request'].last_name === undefined || objRequest['Proposal_Request'].last_name === "" || objRequest['Proposal_Request'].last_name === null) ? "" : objRequest['Proposal_Request'].last_name);
            }
            let req_txt = {
                "mobile": (objRequest.Mobile === undefined || objRequest.Mobile === "" || objRequest.Mobile === null) ? "" : objRequest.Mobile,
                "name": user_name,
                "kyc_id": user_kyc_no,
                "dob": (objRequest.DOB === undefined || objRequest.DOB === "" || objRequest.DOB === null) ? "" : objRequest.DOB,
                "ckyc_number": user_kyc_no,
                "pan": (objRequest.PAN === undefined || objRequest.PAN === "" || objRequest.PAN === null) ? "" : objRequest.PAN,
                "aadhaar_uid": (objRequest.Aadhar === undefined || objRequest.Aadhar === "" || objRequest.Aadhar === null) ? "" : (objRequest.Aadhar.substr(objRequest.Aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": (objRequest.Email === undefined || objRequest.Email === "" || objRequest.Email === null) ? "" : objRequest.Email,
                "redirect_url": ""
            };
            let args = {headers: {"token": ""}};
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get("https://ctrln-uat.hdfcergo.com/e-kyc/tgt/generate-token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("success") && data1.success === true) {
                        if (data1.hasOwnProperty("data") && data1.data.hasOwnProperty("token") && data1.data.token !== "" && data1.data.token !== null) {
                            token = data1.data.token;
                            try {
                                if (token) {
                                    args.headers.token = token;
                                    var client1 = new Client();
                                    client1.get("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-status/" + user_kyc_no, args, function (data, response) {
                                        if (data) {
                                            let LM_Data = {
                                                'KYC_Obj': {
                                                    'kyc_id': ''
                                                },
                                                'LM_Obj': {
                                                    'iskycVerified': '',
                                                    'redirect_link': '',
                                                    'status': ''
                                                },
                                                'Hdfc_Obj': {
                                                    'data': ''
                                                },
                                                'tmp_Obj': ''
                                            };
                                            if (data.hasOwnProperty("message") && data.message !== "") {
                                                KYC_Status = "PENDING";
                                                LM_Data.Hdfc_Obj.data = data.message;
                                                LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                            } else {
                                                if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                    if (data.data.iskycVerified === 1) {
                                                        KYC_Status = "VERIFIED";
                                                        LM_Data.KYC_Obj.kyc_id = user_kyc_no;
                                                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                    } else if (data.data.iskycVerified === 0) {
                                                        KYC_Status = "PENDING";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    } else {
                                                        KYC_Status = "PENDING";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    }
                                                } else {
                                                    KYC_Status = "PENDING";
                                                    LM_Data.Hdfc_Obj.data = data;
                                                    LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                }
                                            }

                                            try {
                                                //data.data.Msg.kyc_id = user_kyc_no;
                                                let queryObj = {
//                                                    'Insurer_Id': objRequest.Insurer_Id - 0,
                                                    'Search_Type': (objRequest.Verify_Search_Type === undefined || objRequest.Verify_Search_Type === "" || objRequest.Verify_Search_Type === null) ? "" : objRequest.Verify_Search_Type,
                                                    'KYC_Number': user_kyc_no,
//                                                'Mobile': (objRequest.Mobile === undefined || objRequest.Mobile === "" || objRequest.Mobile === null) ? "" : objRequest.Mobile - 0,
//                                                'PAN': (objRequest.PAN === undefined || objRequest.PAN === "" || objRequest.PAN === null) ? "" : objRequest.PAN,
//                                                'Aadhar': (objRequest.Aadhar === undefined || objRequest.Aadhar === "" || objRequest.Aadhar === null) ? "" : objRequest.Aadhar,
                                                    'KYC_Status': KYC_Status,
//                                                'DOB': (objRequest.DOB === undefined || objRequest.DOB === "" || objRequest.DOB === null) ? "" : objRequest.DOB,
//                                                'Created_On': new Date(),
                                                    'Modified_On': new Date()
//                                                'User_Data_Id': (objRequest.User_Data_Id === undefined || objRequest.User_Data_Id === "" || objRequest.User_Data_Id === null) ? 0 : objRequest.User_Data_Id - 0,
//                                                'Product_Id': (objRequest.Product_Id === undefined || objRequest.Product_Id === "" || objRequest.Product_Id === null) ? 0 : objRequest.Product_Id - 0,
//                                                'Email': (objRequest.Email === undefined || objRequest.Email === "" || objRequest.Email === null) ? "" : objRequest.Email,
//                                                'PB_CRN': (objRequest.PB_CRN === undefined || objRequest.PB_CRN === "" || objRequest.PB_CRN === null) ? "" : objRequest.PB_CRN - 0
                                                };
                                                let cond = {
                                                    'Insurer_Id': req.body.Insurer_Id - 0,
                                                    'PB_CRN': (req.body.PB_CRN === undefined || req.body.PB_CRN === "" || req.body.PB_CRN === null) ? "" : req.body.PB_CRN - 0,
                                                    'User_Data_Id': (req.body.User_Data_Id === undefined || req.body.User_Data_Id === "" || req.body.User_Data_Id === null) ? 0 : req.body.User_Data_Id - 0
                                                };
                                                console.log(cond);
                                                console.log(queryObj);
                                                
                                                var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail1.update(cond, {$set: queryObj}, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "HDFC", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "HDFC", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (objRequest.PB_CRN === undefined || objRequest.PB_CRN === "" || objRequest.PB_CRN === null) ? "" : objRequest.PB_CRN - 0,
                                                    'User_Data_Id': (objRequest.User_Data_Id === undefined || objRequest.User_Data_Id === "" || objRequest.User_Data_Id === null) ? 0 : objRequest.User_Data_Id - 0,
                                                    'PAN': (objRequest.PAN === undefined || objRequest.PAN === "" || objRequest.PAN === null) ? "" : objRequest.PAN,
                                                    'Aadhaar': (objRequest.Aadhaar === undefined || objRequest.Aadhaar === "" || objRequest.Aadhaar === null) ? "" : objRequest.Aadhaar,
                                                    'DOB': (objRequest.DOB === undefined || objRequest.DOB === "" || objRequest.DOB === null) ? "" : objRequest.DOB,
                                                    'Mobile': (objRequest.Mobile === undefined || objRequest.Mobile === "" || objRequest.Mobile === null) ? "" : objRequest.Mobile - 0,
                                                    'Email': (objRequest.Email === undefined || objRequest.Email === "" || objRequest.Email === null) ? "" : objRequest.Email,
                                                    'Insurer_Id': objRequest.Insurer_Id - 0,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "HDFC", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "HDFC", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "HDFC", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "HDFC", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "HDFC", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "HDFC", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "HDFC", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "HDFC", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "HDFC", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "HDFC", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "HDFC", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/edelweiss_fetch_kyc_details', function (req, res) {
        try {
            let ObjRequest = req.body;
            let kyc_fetch_request = "";
            let kyc_fetch_response = "";
            let vehicle_registration_type = (ObjRequest.vehicle_registration_type === undefined || ObjRequest.vehicle_registration_type === "" || ObjRequest.vehicle_registration_type === null) ? "" : ObjRequest.vehicle_registration_type;
            vehicle_registration_type = (vehicle_registration_type === "") ? "" : (vehicle_registration_type === "corporate" ? "C" : "I");
            vehicle_registration_type = "I";
            let req_txt = {
                "VISoF_Program_Name": "PB-LIBPL", //"EGI",
                "VISoF_KYC_Req_No": (ObjRequest.PB_CRN === undefined || ObjRequest.PB_CRN === "" || ObjRequest.PB_CRN === null) ? "" : ObjRequest.PB_CRN.toString(),
                "ProposerType": vehicle_registration_type, //I=Individual or C=Corporate
                "Source": "LIBPL", //"PP",
                "FirstName": (ObjRequest.Proposal_Request.first_name === undefined || ObjRequest.Proposal_Request.first_name === "" || ObjRequest.Proposal_Request.first_name === null) ? "" : ObjRequest.Proposal_Request.first_name,
                "MiddleName": (ObjRequest.Proposal_Request.middle_name === undefined || ObjRequest.Proposal_Request.middle_name === "" || ObjRequest.Proposal_Request.middle_name === null) ? "" : ObjRequest.Proposal_Request.middle_name,
                "LastName": (ObjRequest.Proposal_Request.last_name === undefined || ObjRequest.Proposal_Request.last_name === "" || ObjRequest.Proposal_Request.last_name === null) ? "" : ObjRequest.Proposal_Request.last_name,
                "DOB": (vehicle_registration_type === "I" ? ((ObjRequest.dob === undefined || ObjRequest.dob === "" || ObjRequest.dob === null) ? "" : (moment(ObjRequest.dob, "DD/MM/YYYY").format("MM/DD/YYYY"))) : ""), //"31/10/2000",
                "DOI": (vehicle_registration_type === "C" ? ((ObjRequest.date_of_incorporation === undefined || ObjRequest.date_of_incorporation === "" || ObjRequest.date_of_incorporation === null) ? "" : (moment(ObjRequest.date_of_incorporation, "DD/MM/YYYY").format("MM/DD/YYYY"))) : ""), //"31/10/2000",
                "MobileNo": (ObjRequest.Proposal_Request.mobile === undefined || ObjRequest.Proposal_Request.mobile === "" || ObjRequest.Proposal_Request.mobile === null) ? "" : ObjRequest.Proposal_Request.mobile,
                "ZIPCODE": (ObjRequest.Proposal_Request.permanent_pincode === undefined || ObjRequest.Proposal_Request.permanent_pincode === "" || ObjRequest.Proposal_Request.permanent_pincode === null) ? "" : ObjRequest.Proposal_Request.permanent_pincode,
                "Email": (ObjRequest.Proposal_Request.email === undefined || ObjRequest.Proposal_Request.email === "" || ObjRequest.Proposal_Request.email === null) ? "" : ObjRequest.Proposal_Request.email,
                "ProposerPAN": (ObjRequest.PAN === undefined || ObjRequest.PAN === "" || ObjRequest.PAN === null) ? "" : ObjRequest.PAN, //"AQNPY8223A",
                "ProposerAadhaarNumber": (ObjRequest.Aadhar === undefined || ObjRequest.Aadhar === "" || ObjRequest.Aadhar === null) ? "" : ObjRequest.Aadhar, //"",
                "ProposerCKYCNo": ""
            };
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "*/*",
                    "Authorization": "",
                    "X-Api-Key": "vmX0qzSwUy5i4dyKa0MhuaQhQ6PECsp3FqZvwRX8"
                }
            };
            let args1 = {
                headers: {
                    "Authorization": 'Basic ' + new Buffer('2r9a4a9lpvj2lp5bqbo0jhcp0l' + ':' + '1q0fbp68juvm8f221f9ckh9j7i3ktq2hkibfk88q460pvccsfmqs').toString('base64'),
                    //"Authorization": "Basic MnI5YTRhOWxwdmoybHA1YnFibzBqaGNwMGw6MXEwZmJwNjhqdXZtOGYyMjFmOWNraDlqN2kza3RxMmhraWJmazg4cTQ2MHB2Y2NzZm1xcw==",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Accept": "*/*"
                }
            };
            kyc_fetch_request = req_txt;
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            let LM_Data = {
                "KYC_Pan_No": "",
                "KYC_Number": "",
                "KYC_FullName": "",
                "KYC_Ref_No": "",
                "KYC_Redirect_URL": "",
                "KYC_Insurer_ID": "",
                "KYC_PB_CRN": ObjRequest.PB_CRN,
                "KYC_Status": KYC_Status
            };
            client.post("https://devapi.edelweissinsurance.com/oauth2/token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("access_token") && data1.access_token !== "" && data1.access_token !== null) {
                        token = data1.access_token;
                        try {
                            if (token) {
                                args.headers.Authorization = token;
                                var client1 = new Client();
                                client1.post("https://devapi.edelweissinsurance.com/signzy/e-kyc", args, function (data, response) {
                                    if (data) {
                                        kyc_fetch_response = data;
                                        if (data.hasOwnProperty("message") && data.message !== "") {
                                            LM_Data.KYC_Status = "FETCH_FAIL";
                                        } else {
                                            if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data) {
                                                if (data.data.hasOwnProperty("KYC_Status") && (data.data.KYC_Status === '1' || data.data.KYC_Status === 1)) {
                                                    if ((data.data.hasOwnProperty("VISoF_KYC_Req_No") && data.data.VISoF_KYC_Req_No !== "") && (data.data.hasOwnProperty("IC_KYC_No") && data.data.IC_KYC_No !== "")) {
                                                        kyc_id = data.data.VISoF_KYC_Req_No + "|" + data.data.IC_KYC_No;
                                                        LM_Data.KYC_Status = "FETCH_SUCCESS";
                                                        LM_Data.KYC_Number = (kyc_id && kyc_id.includes('|')) ? kyc_id.split('|')[1] : "";
                                                    } else {
                                                        if ((data.data.hasOwnProperty("VISoF_KYC_Req_No") && data.data.VISoF_KYC_Req_No !== "") && (data.data.hasOwnProperty("IC_KYC_No") && data.data.IC_KYC_No !== "")) {
                                                            kyc_id = data.data.VISoF_KYC_Req_No + "|" + data.data.IC_KYC_No;
                                                            LM_Data.KYC_Number = (kyc_id && kyc_id.includes('|')) ? kyc_id.split('|')[1] : "";
                                                            LM_Data.KYC_Redirect_URL = data.data.IC_KYC_REG_URL;
                                                        }
                                                        LM_Data.KYC_Status = "FETCH_FAIL";
                                                    }
                                                } else {
                                                    if ((data.data.hasOwnProperty("VISoF_KYC_Req_No") && data.data.VISoF_KYC_Req_No !== "") && (data.data.hasOwnProperty("IC_KYC_No") && data.data.IC_KYC_No !== "")) {
                                                        kyc_id = data.data.VISoF_KYC_Req_No + "|" + data.data.IC_KYC_No;
                                                        LM_Data.KYC_Number = (kyc_id && kyc_id.includes('|')) ? kyc_id.split('|')[1] : "";
                                                        LM_Data.KYC_Redirect_URL = data.data.IC_KYC_REG_URL;
                                                    }
                                                    LM_Data.KYC_Status = "FETCH_FAIL";
                                                }
                                            } else {
                                                if ((data.data.hasOwnProperty("VISoF_KYC_Req_No") && data.data.VISoF_KYC_Req_No !== "") && (data.data.hasOwnProperty("IC_KYC_No") && data.data.IC_KYC_No !== "")) {
                                                    kyc_id = data.data.VISoF_KYC_Req_No + "|" + data.data.IC_KYC_No;
                                                    LM_Data.KYC_Number = (kyc_id && kyc_id.includes('|')) ? kyc_id.split('|')[1] : "";
                                                }
                                                LM_Data.KYC_Status = "FETCH_FAIL";
                                            }
                                        }

                                        try {
                                            let cond = {
                                                'Insurer_Id': ObjRequest.Insurer_Id - 0,
                                                'PB_CRN': (ObjRequest.PB_CRN === undefined || ObjRequest.PB_CRN === "" || ObjRequest.PB_CRN === null) ? "" : ObjRequest.PB_CRN - 0
//                                                'User_Data_Id': (ObjRequest.User_Data_Id === undefined || ObjRequest.User_Data_Id === "" || ObjRequest.User_Data_Id === null) ? 0 : ObjRequest.User_Data_Id - 0
                                            };
                                            let setObj = {
                                                'KYC_Number': LM_Data.KYC_Number,
                                                'KYC_Full_Name' : LM_Data.KYC_FullName,
                                                'KYC_Status': LM_Data.KYC_Status,
                                                'Modified_On': new Date(),
                                                'KYC_URL': LM_Data.KYC_Redirect_URL
                                            };
                                            kyc_detail.update(cond, {$set: setObj}, function (err, users) {
                                                if (err) {
                                                    res.json({"Insurer": "Edelweiss", "Msg": err, "Status": "FAIL"});
                                                } else {
                                                    //res.json({"Insurer": "Edelweiss", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                }
                                            });
                                            let queryObj1 = {
                                                'PB_CRN': ObjRequest.PB_CRN ? ObjRequest.PB_CRN : "",
                                                'User_Data_Id': ObjRequest.User_Data_Id ? ObjRequest.User_Data_Id : "",
                                                'Insurer_Id': ObjRequest.Insurer_Id,
                                                'Product_Id': ObjRequest.Product_Id ? ObjRequest.Product_Id : "",
                                                'PAN': (ObjRequest.PAN === undefined || ObjRequest.PAN === "" || ObjRequest.PAN === null) ? "" : ObjRequest.PAN,
                                                'Aadhar': (ObjRequest.Aadhaar === undefined || ObjRequest.Aadhaar === "" || ObjRequest.Aadhaar === null) ? "" : ObjRequest.Aadhaar,
                                                'DOB': (ObjRequest.DOB === undefined || ObjRequest.DOB === "" || ObjRequest.DOB === null) ? "" : ObjRequest.DOB,
                                                'Full_Name': ObjRequest.Proposal_Request['middle_name'] === "" ? (ObjRequest.Proposal_Request['first_name'] + " " + ObjRequest.Proposal_Request['last_name']) : (ObjRequest.Proposal_Request['first_name'] + " " + ObjRequest.Proposal_Request['middle_name'] + " " + ObjRequest.Proposal_Request['last_name']),
                                                'Mobile': (ObjRequest.Mobile === undefined || ObjRequest.Mobile === "" || ObjRequest.Mobile === null) ? "" : ObjRequest.Mobile - 0,
                                                'Email': (ObjRequest.Email === undefined || ObjRequest.Email === "" || ObjRequest.Email === null) ? "" : ObjRequest.Email,
                                                'KYC_Number': LM_Data.KYC_Number,
                                                'Search_Type': ObjRequest.Search_Type ? ObjRequest.Search_Type : "",
                                                'KYC_Status': LM_Data.KYC_Status,
                                                'PAN_Doc': ObjRequest.PAN_Doc ? ObjRequest.PAN_Doc : "",
                                                'Aadhar_Doc': ObjRequest.Aadhar_Doc ? ObjRequest.Aadhar_Doc : "",
                                                'KYC_URL': LM_Data.KYC_Redirect_URL,
                                                'Created_On': new Date(),
                                                'Modified_On': new Date(),
                                                'Proposal_Request': (ObjRequest.Proposal_Request === undefined || ObjRequest.Proposal_Request === "" || ObjRequest.Proposal_Request === null) ? "" : ObjRequest.Proposal_Request,
                                                'Proposal_Id': (ObjRequest.Proposal_Id === undefined || ObjRequest.Proposal_Id === "" || ObjRequest.Proposal_Id === null) ? "" : ObjRequest.Proposal_Id,
                                                'Quote_Id': (ObjRequest.Quote_Id === undefined || ObjRequest.Quote_Id === "" || ObjRequest.Quote_Id === null) ? "" : ObjRequest.Quote_Id,
                                                'KYC_Request_Core': kyc_fetch_request,
                                                'KYC_Response_Core': kyc_fetch_response
                                            };
                                            var kyc_history1 = new kyc_history(queryObj1);
                                            kyc_history1.save(queryObj1, function (err, users) {
                                                if (err) {
                                                    res.json({"Insurer": "Edelweiss", "Msg": err, "Status": "FAIL"});
                                                } else {
                                                    //res.json({"Insurer": "Edelweiss", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                }
                                            });
                                        } catch (e) {
                                            res.json({"Insurer": "Edelweiss", "Msg": e.stack, "Status": "FAIL"});
                                        }
                                        res.json({"Insurer": "Edelweiss", "Msg": LM_Data, "Status": LM_Data.KYC_Status});
                                    } else {
                                        res.json({"Insurer": "Edelweiss", "Msg": "KYC fetch services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                    }
                                });
                            } else {
                                res.json({"Insurer": "Edelweiss", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                            }
                        } catch (e2) {
                            res.json({"Insurer": "Edelweiss", "Msg": e2.stack, "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Edelweiss", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Edelweiss", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Edelweiss", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/edelweiss_verify_kyc_details', function (req, res) {
        try {
            let objRequest = req.body;
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            //req.body.crn = 13201;//
            //user_kyc_no = 'EGI-00000113';//
            let VISoF_KYC_Req_No = "";
            let IC_KYC_No = "";
            if (user_kyc_no === "EGI-00000113") { // for testing only
                VISoF_KYC_Req_No = "13201";
                IC_KYC_No = (objRequest.user_kyc_no === undefined || objRequest.user_kyc_no === "" || objRequest.user_kyc_no === null) ? "" : objRequest.user_kyc_no;
            } else {
                VISoF_KYC_Req_No =(objRequest.PB_CRN === undefined || objRequest.PB_CRN === "" || objRequest.PB_CRN === null) ? "" : objRequest.PB_CRN.toString();
                IC_KYC_No = (objRequest.user_kyc_no === undefined || objRequest.user_kyc_no === "" || objRequest.user_kyc_no === null) ? "" : objRequest.user_kyc_no;
            }
            let req_txt = {
                "VISoF_KYC_Req_No": VISoF_KYC_Req_No,
                "IC_KYC_No": IC_KYC_No
            };
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "*/*",
                    "Authorization": "",
                    "X-Api-Key": "vmX0qzSwUy5i4dyKa0MhuaQhQ6PECsp3FqZvwRX8"
                }
            };
            let args1 = {
                headers: {
                    "Authorization": 'Basic ' + new Buffer('2r9a4a9lpvj2lp5bqbo0jhcp0l' + ':' + '1q0fbp68juvm8f221f9ckh9j7i3ktq2hkibfk88q460pvccsfmqs').toString('base64'),
                    //"Authorization": "Basic MnI5YTRhOWxwdmoybHA1YnFibzBqaGNwMGw6MXEwZmJwNjhqdXZtOGYyMjFmOWNraDlqN2kza3RxMmhraWJmazg4cTQ2MHB2Y2NzZm1xcw==",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Accept": "*/*"
                }
            };
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.post("https://devapi.edelweissinsurance.com/oauth2/token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("access_token") && data1.access_token !== "" && data1.access_token !== null) {
                        token = data1.access_token;
                        try {
                            if (token) {
                                args.headers.Authorization = token;
                                var client1 = new Client();
                                client1.get("https://devapi.edelweissinsurance.com/signzy/e-kyc-enquiry", args, function (data, response) {
                                    if (data) {
                                        let LM_Data = {
                                            'KYC_Obj': {
                                                'KYC_Number': ''
                                            },
                                            'LM_Obj': {
                                                'iskycVerified': '',
                                                'redirect_link': '',
                                                'status': ''
                                            },
                                            'Edelweiss_Obj': {
                                                'data': ''
                                            },
                                            'tmp_Obj': ''
                                        };
                                        if (data.hasOwnProperty("message") && data.message !== "") {
                                            KYC_Status = "PENDING"; //rosh
                                            LM_Data.Edelweiss_Obj.data = data.message;
                                            LM_Data.tmp_Obj = LM_Data.Edelweiss_Obj.data;
                                        } else {
                                            if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data) {
                                                if (data.data.hasOwnProperty("KYC_Status") && (data.data.KYC_Status === '1' || data.data.KYC_Status === 1)) {
                                                    if ((data.data.hasOwnProperty("VISoF_KYC_Req_No") && data.data.VISoF_KYC_Req_No !== "") && (data.data.hasOwnProperty("IC_KYC_No") && data.data.IC_KYC_No !== "")) {
                                                        kyc_id = data.data.VISoF_KYC_Req_No + "|" + data.data.IC_KYC_No;
                                                        KYC_Status = "VERIFIED";
                                                        LM_Data.KYC_Obj.KYC_Number = kyc_id;
                                                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                    } else {
                                                        KYC_Status = "PENDING"; //rosh
                                                        LM_Data.Edelweiss_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Edelweiss_Obj.data;
                                                    }
                                                } else {
                                                    KYC_Status = "PENDING"; //rosh
                                                    LM_Data.LM_Obj.iskycVerified = data.data.KYC_Status;
                                                    LM_Data.LM_Obj.status = data.data.KYC_Remark;
                                                    LM_Data.LM_Obj.redirect_link = data.data.IC_KYC_REG_URL;
                                                    LM_Data.tmp_Obj = LM_Data.LM_Obj;
                                                }
                                            } else {
                                                KYC_Status = "PENDING"; //rosh
                                                LM_Data.Edelweiss_Obj.data = data.message;
                                                LM_Data.tmp_Obj = LM_Data.Edelweiss_Obj.data;
                                            }
                                        }

                                        try {
                                            let queryObj = {
//                                                'Insurer_Id': objRequest.Insurer_Id - 0,
                                                'Search_Type': (objRequest.Verify_Search_Type === undefined || objRequest.Verify_Search_Type === "" || objRequest.Verify_Search_Type === null) ? "" : objRequest.Verify_Search_Type,
                                                'KYC_Number': user_kyc_no,
//                                                'Mobile': (objRequest.Mobile === undefined || objRequest.Mobile === "" || objRequest.Mobile === null) ? "" : objRequest.Mobile - 0,
//                                                'PAN': (objRequest.PAN === undefined || objRequest.PAN === "" || objRequest.PAN === null) ? "" : objRequest.PAN,
//                                                'Aadhar': (objRequest.Aadhar === undefined || objRequest.Aadhar === "" || objRequest.Aadhar === null) ? "" : objRequest.Aadhar,
                                                'KYC_Status': KYC_Status,
//                                                'DOB': (objRequest.DOB === undefined || objRequest.DOB === "" || objRequest.DOB === null) ? "" : objRequest.DOB,
//                                                'Created_On': new Date(),
                                                'Modified_On': new Date()
//                                                'User_Data_Id': (objRequest.User_Data_Id === undefined || objRequest.User_Data_Id === "" || objRequest.User_Data_Id === null) ? 0 : objRequest.User_Data_Id - 0,
//                                                'Product_Id': (objRequest.Product_Id === undefined || objRequest.Product_Id === "" || objRequest.Product_Id === null) ? 0 : objRequest.Product_Id - 0,
//                                                'Email': (objRequest.Email === undefined || objRequest.Email === "" || objRequest.Email === null) ? "" : objRequest.Email,
//                                                'PB_CRN': (objRequest.PB_CRN === undefined || objRequest.PB_CRN === "" || objRequest.PB_CRN === null) ? "" : objRequest.PB_CRN - 0
                                            };
                                            let cond = {
                                                'Insurer_Id': objRequest.Insurer_Id - 0,
                                                'PB_CRN': (objRequest.PB_CRN === undefined || objRequest.PB_CRN === "" || objRequest.PB_CRN === null) ? "" :objRequest.PB_CRN - 0,
                                                'User_Data_Id': (objRequest.User_Data_Id === undefined || objRequest.User_Data_Id === "" || objRequest.User_Data_Id === null) ? 0 : objRequest.User_Data_Id - 0
                                            };
                                            //var kyc_detail1 = new kyc_detail(queryObj);
                                            kyc_detail.update(cond, {$set: queryObj}, function (err, users) {
                                                if (err) {
                                                    res.json({"Insurer": "Edelweiss", "Msg": err, "Status": "FAIL"});
                                                } else {
                                                    //res.json({"Insurer": "Edelweiss", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                }
                                            });
                                            let queryObj1 = {
                                                'PB_CRN': (objRequest.PB_CRN === undefined || objRequest.PB_CRN === "" || objRequest.PB_CRN === null) ? "" : objRequest.PB_CRN - 0,
                                                'User_Data_Id': (objRequest.User_Data_Id === undefined || objRequest.User_Data_Id === "" || objRequest.User_Data_Id === null) ? 0 : objRequest.User_Data_Id - 0,
                                                'PAN': (objRequest.PAN === undefined || objRequest.PAN === "" || objRequest.PAN === null) ? "" : objRequest.PAN,
                                                'Aadhaar': (objRequest.Aadhaar === undefined || objRequest.Aadhaar === "" || objRequest.Aadhaar === null) ? "" : objRequest.Aadhaar,
                                                'DOB': (objRequest.DOB === undefined || objRequest.DOB === "" || objRequest.DOB === null) ? "" : objRequest.DOB,
                                                'Mobile': (objRequest.Mobile === undefined || objRequest.Mobile === "" || objRequest.Mobile === null) ? "" : objRequest.Mobile - 0,
                                                'Email': (objRequest.Email === undefined || objRequest.Email === "" || objRequest.Email === null) ? "" : objRequest.Email,
                                                'Insurer_Id': objRequest.Insurer_Id - 0,
                                                'KYC_Request_Core': req_txt,
                                                'KYC_Response_Core': data,
                                                'Status': "completed",
                                                'Created_On': new Date(),
                                                'Modified_On': new Date()
                                            };
                                            var kyc_history1 = new kyc_history(queryObj1);
                                            kyc_history1.save(queryObj1, function (err, users) {
                                                if (err) {
                                                    res.json({"Insurer": "Edelweiss", "Msg": err, "Status": "FAIL"});
                                                } else {
                                                    //res.json({"Insurer": "Edelweiss", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                }
                                            });
                                        } catch (e) {
                                            res.json({"Insurer": "Edelweiss", "Msg": e.stack, "Status": "FAIL"});
                                        }
                                        res.json({"Insurer": "Edelweiss", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                    } else {
                                        res.json({"Insurer": "Edelweiss", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                    }
                                });
                            } else {
                                res.json({"Insurer": "Edelweiss", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                            }
                        } catch (e2) {
                            res.json({"Insurer": "Edelweiss", "Msg": e2.stack, "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Edelweiss", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Edelweiss", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Edelweiss", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/royal_fetch_kyc_details', function (req, res) {
        try {
            let req_txt = {
                "mobile": (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                "name": "",
                "kyc_id": "",
                "dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                "ckyc_number": "",
                "pan": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                "aadhaar_uid": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : (req.body.aadhar.substr(req.body.aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": "",
                "redirect_url": ""
            };
            req_txt = {
                "token": "//YLUdYEvCYSo8z+Ju42aMNVwBrB/NivkS1bNapab8uYCyZFEy2UK7K7BOvl0Val",
                "policyNo ": "",
                "quoteNo": "BA508116VMN0392433",
                "inwardNo": "",
                "appName": "D2C",
                "proposalNo": "",
                "product": "Privatecar",
                "Lob": "",
                "customerName": "",
                "mobileNo": "9XXXXXXXXX",
                "emailId": "XXXXXXX",
                "address1": "",
                "address2": "",
                "address3": "",
                "address4": "",
                "State": "",
                "City": "",
                "pinCode": "",
                "ckycNo": "",
                "panNumber": "XXXXXXXXX",
                "aadharNumber": "",
                "dateOfBirth": "XX/XX/XXXXX",
                "eiaNumber": "",
                "customerType": "Individual",
                "gender": "",
                "drivingLincense": "",
                "passportNumber": "",
                "voterId": "",
                "userName": "",
                "uniqueId": "BA508116VMN0392433",
                "returnURL": ""
            };
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "*/*"
                }
            };
            let args1 = {
                data: {
                    "appId": "D2C",
                    "appKey": "D2C"
                },
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "*/*"
                }
            };
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.post("https://ekyc.royalsundaram.net/eKycServices/ekyc/generateKYCToken", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("errorMsg") && data1.errorMsg === "null") {
                        if (data1.hasOwnProperty("token") && data1.token !== "" && data1.token !== null) {
                            token = data1.token;
                            try {
                                if (token) {
                                    var client1 = new Client();
                                    client1.post("https://ekyc.royalsundaram.net/eKycServices/ekyc/v1/searchDownloadKYCDetails", args, function (data, response) {
                                        if (data) {
                                            if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                if (data.data.iskycVerified === 1) {
                                                    kyc_id = (data.data.hasOwnProperty("kyc_id")) ? data.data.kyc_id : "";
                                                    KYC_Status = "SUCCESS";
                                                } else if (data.data.iskycVerified === 0) {
                                                    kyc_id = (data.data.hasOwnProperty("redirect_link")) ? data.data.redirect_link : "";
                                                    KYC_Status = "FAIL";
                                                } else {
                                                    KYC_Status = "FAIL";
                                                }
                                            } else {
                                                KYC_Status = "FAIL";
                                            }

                                            try {
                                                let queryObj = {
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                                                    'KYC_Number': kyc_id,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'KYC_Status': KYC_Status,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date(),
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                                                };
                                                var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail1.save(queryObj, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Royal", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Royal", "Msg": data.data, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Royal", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Royal", "Msg": data.data, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "Royal", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "Royal", "Msg": data.data, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "Royal", "Msg": "KYC fetch services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "Royal", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "Royal", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "Royal", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Royal", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Royal", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Royal", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/royal_verify_kyc_details', function (req, res) {
        try {
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            var user_name = null;
            if (req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            } else {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) ? "" : req.body.middle_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            }
            let req_txt = {
                "mobile": (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                "name": user_name,
                "kyc_id": user_kyc_no,
                "dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                "ckyc_number": user_kyc_no,
                "pan": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                "aadhaar_uid": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : (req.body.aadhar.substr(req.body.aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                "redirect_url": ""
            };
            let args = {headers: {"token": ""}};
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            var Client = require('node-rest-client').Client;
            var client1 = new Client();
            client1.post("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-status/" + user_kyc_no, args, function (data, response) {
                if (data) {
                    let LM_Data = {
                        'KYC_Obj': {
                            'kyc_id': ''
                        },
                        'LM_Obj': {
                            'iskycVerified': '',
                            'redirect_link': '',
                            'status': ''
                        },
                        'Hdfc_Obj': {
                            'data': ''
                        },
                        'tmp_Obj': ''
                    };
                    if (data.hasOwnProperty("message") && data.message !== "") {
                        KYC_Status = "FAIL";
                        LM_Data.Hdfc_Obj.data = data.message;
                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                    } else {
                        if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                            if (data.data.iskycVerified === 1) {
                                KYC_Status = "SUCCESS";
                                LM_Data.KYC_Obj.kyc_id = user_kyc_no;
                                LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                            } else if (data.data.iskycVerified === 0) {
                                KYC_Status = "FAIL";
                                LM_Data.Hdfc_Obj.data = data;
                                LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                            } else {
                                KYC_Status = "FAIL";
                                LM_Data.Hdfc_Obj.data = data;
                                LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                            }
                        } else {
                            KYC_Status = "FAIL";
                            LM_Data.Hdfc_Obj.data = data;
                            LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                        }
                    }

                    try {
                        //data.data.Msg.kyc_id = user_kyc_no;
                        let queryObj = {
                            'Insurer_Id': req.body.insurer_id,
                            'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                            'KYC_Number': user_kyc_no,
                            'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'KYC_Status': KYC_Status,
                            'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                            'Created_On': new Date(),
                            'Modified_On': new Date(),
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                            'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                        };
                        var kyc_detail1 = new kyc_detail(queryObj);
                        kyc_detail1.save(queryObj, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "Royal", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "Royal", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                            }
                        });
                        let queryObj1 = {
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                            'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                            'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                            'Insurer_Id': req.body.insurer_id,
                            'KYC_Request_Core': req_txt,
                            'KYC_Response_Core': data,
                            'Status': "completed",
                            'Created_On': new Date(),
                            'Modified_On': new Date()
                        };
                        var kyc_history1 = new kyc_history(queryObj1);
                        kyc_history1.save(queryObj1, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "Royal", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "Royal", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                            }
                        });
                    } catch (e) {
                        res.json({"Insurer": "Royal", "Msg": e.stack, "Status": "FAIL"});
                    }
                    res.json({"Insurer": "Royal", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                } else {
                    res.json({"Insurer": "Royal", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Royal", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/bajaj_fetch_kyc_details', function (req, res) {
        try {
            let req_txt = {
                "mobile": (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                "name": "",
                "kyc_id": "",
                "dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                "ckyc_number": "",
                "pan": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                "aadhaar_uid": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : (req.body.aadhar.substr(req.body.aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": "",
                "redirect_url": ""
            };
            let vehicle_registration_type = (req.body.vehicle_registration_type === undefined || req.body.vehicle_registration_type === "" || req.body.vehicle_registration_type === null) ? "" : req.body.vehicle_registration_type;
            vehicle_registration_type = (req.body.vehicle_registration_type === "") ? "" : (req.body.vehicle_registration_type === "corporate" ? "O" : "I");
            req_txt = {
                "docTypeCode": "Z",
                "docNumber": "50088195443815", //kyc_no for verify
                "fieldType": "PROPOSAL_NUMBER", //fixed
                "fieldValue": "12345678678",
                "dob": "08-Nov-2004", //08-Nov-2004
                "appType": "KYC_WS_BROKER", //fixed
                "productCode": "3313",
                "sysType": "MAXIMUS", //-Motor, Health/Travel-"MAXIMUS",
                "locationCode": "9906",
                "userId": "CP02529865",
                "kycType": "03", //fixed
                "customerType": vehicle_registration_type, //"I-Individual, O - Organization"
                "passportFileNumber": "",
                "gender": "",
                "field1": "",
                "field2": ""
            };
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "token": ""
                }
            };
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get("https://ctrln-uat.hdfcergo.com/e-kyc/tgt/generate-token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("success") && data1.success === true) {
                        if (data1.hasOwnProperty("data") && data1.data.hasOwnProperty("token") && data1.data.token !== "" && data1.data.token !== null) {
                            token = data1.data.token;
                            try {
                                if (token) {
                                    args.headers.token = token;
                                    var client1 = new Client();
                                    client1.get("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-verified", args, function (data, response) {
                                        if (data) {
                                            if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                if (data.data.iskycVerified === 1) {
                                                    kyc_id = (data.data.hasOwnProperty("kyc_id")) ? data.data.kyc_id : "";
                                                    KYC_Status = "SUCCESS";
                                                } else if (data.data.iskycVerified === 0) {
                                                    kyc_id = (data.data.hasOwnProperty("redirect_link")) ? data.data.redirect_link : "";
                                                    KYC_Status = "FAIL";
                                                } else {
                                                    KYC_Status = "FAIL";
                                                }
                                            } else {
                                                KYC_Status = "FAIL";
                                            }

                                            try {
                                                let queryObj = {
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                                                    'KYC_Number': kyc_id,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'KYC_Status': KYC_Status,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date(),
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                                                };
                                                var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail1.save(queryObj, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Bajaj", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Bajaj", "Msg": data.data, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Bajaj", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Bajaj", "Msg": data.data, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "Bajaj", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "Bajaj", "Msg": data.data, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "Bajaj", "Msg": "KYC fetch services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "Bajaj", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "Bajaj", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "Bajaj", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Bajaj", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Bajaj", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Bajaj", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/bajaj_verify_kyc_details', function (req, res) {
        try {
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            var user_name = null;
            if (req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            } else {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) ? "" : req.body.middle_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            }
            let req_txt = {
                "mobile": (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                "name": user_name,
                "kyc_id": user_kyc_no,
                "dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                "ckyc_number": user_kyc_no,
                "pan": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                "aadhaar_uid": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : (req.body.aadhar.substr(req.body.aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                "redirect_url": ""
            };

            let args = {headers: {"token": ""}};
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get("https://ctrln-uat.hdfcergo.com/e-kyc/tgt/generate-token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("success") && data1.success === true) {
                        if (data1.hasOwnProperty("data") && data1.data.hasOwnProperty("token") && data1.data.token !== "" && data1.data.token !== null) {
                            token = data1.data.token;
                            try {
                                if (token) {
                                    args.headers.token = token;
                                    var client1 = new Client();
                                    client1.get("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-status/" + user_kyc_no, args, function (data, response) {
                                        if (data) {
                                            let LM_Data = {
                                                'KYC_Obj': {
                                                    'kyc_id': ''
                                                },
                                                'LM_Obj': {
                                                    'iskycVerified': '',
                                                    'redirect_link': '',
                                                    'status': ''
                                                },
                                                'Hdfc_Obj': {
                                                    'data': ''
                                                },
                                                'tmp_Obj': ''
                                            };
                                            if (data.hasOwnProperty("message") && data.message !== "") {
                                                KYC_Status = "FAIL";
                                                LM_Data.Hdfc_Obj.data = data.message;
                                                LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                            } else {
                                                if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                    if (data.data.iskycVerified === 1) {
                                                        KYC_Status = "SUCCESS";
                                                        LM_Data.KYC_Obj.kyc_id = user_kyc_no;
                                                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                    } else if (data.data.iskycVerified === 0) {
                                                        KYC_Status = "FAIL";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    } else {
                                                        KYC_Status = "FAIL";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    }
                                                } else {
                                                    KYC_Status = "FAIL";
                                                    LM_Data.Hdfc_Obj.data = data;
                                                    LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                }
                                            }

                                            try {
                                                //data.data.Msg.kyc_id = user_kyc_no;
                                                let queryObj = {
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                                                    'KYC_Number': user_kyc_no,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'KYC_Status': KYC_Status,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date(),
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                                                };
                                                var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail1.save(queryObj, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Bajaj", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Bajaj", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Bajaj", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Bajaj", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "Bajaj", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "Bajaj", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "Bajaj", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "Bajaj", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "Bajaj", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "Bajaj", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Bajaj", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Bajaj", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Bajaj", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/bajaj_encrypting', function (req, res) {
        try {
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            var user_name = null;
            if (req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            } else {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) ? "" : req.body.middle_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            }
            let req_txt = {
                "mobile": (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                "name": user_name,
                "kyc_id": user_kyc_no,
                "dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                "ckyc_number": user_kyc_no,
                "pan": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                "aadhaar_uid": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : (req.body.aadhar.substr(req.body.aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                "redirect_url": ""
            };

            let args = {headers: {"token": ""}};
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get("https://ctrln-uat.hdfcergo.com/e-kyc/tgt/generate-token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("success") && data1.success === true) {
                        if (data1.hasOwnProperty("data") && data1.data.hasOwnProperty("token") && data1.data.token !== "" && data1.data.token !== null) {
                            token = data1.data.token;
                            try {
                                if (token) {
                                    args.headers.token = token;
                                    var client1 = new Client();
                                    client1.get("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-status/" + user_kyc_no, args, function (data, response) {
                                        if (data) {
                                            let LM_Data = {
                                                'KYC_Obj': {
                                                    'kyc_id': ''
                                                },
                                                'LM_Obj': {
                                                    'iskycVerified': '',
                                                    'redirect_link': '',
                                                    'status': ''
                                                },
                                                'Hdfc_Obj': {
                                                    'data': ''
                                                },
                                                'tmp_Obj': ''
                                            };
                                            if (data.hasOwnProperty("message") && data.message !== "") {
                                                KYC_Status = "FAIL";
                                                LM_Data.Hdfc_Obj.data = data.message;
                                                LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                            } else {
                                                if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                    if (data.data.iskycVerified === 1) {
                                                        KYC_Status = "SUCCESS";
                                                        LM_Data.KYC_Obj.kyc_id = user_kyc_no;
                                                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                    } else if (data.data.iskycVerified === 0) {
                                                        KYC_Status = "FAIL";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    } else {
                                                        KYC_Status = "FAIL";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    }
                                                } else {
                                                    KYC_Status = "FAIL";
                                                    LM_Data.Hdfc_Obj.data = data;
                                                    LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                }
                                            }

                                            try {
                                                //data.data.Msg.kyc_id = user_kyc_no;
                                                let queryObj = {
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                                                    'KYC_Number': user_kyc_no,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'KYC_Status': KYC_Status,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date(),
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                                                };
                                                var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail1.save(queryObj, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Bajaj", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Bajaj", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Bajaj", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Bajaj", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "Bajaj", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "Bajaj", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "Bajaj", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "Bajaj", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "Bajaj", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "Bajaj", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Bajaj", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Bajaj", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Bajaj", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/liberty_fetch_kyc_details', function (req, res) {
        try {
            let vehicle_registration_type = (req.body.vehicle_registration_type === undefined || req.body.vehicle_registration_type === "" || req.body.vehicle_registration_type === null) ? "" : req.body.vehicle_registration_type;
            vehicle_registration_type = (vehicle_registration_type === "") ? "" : (vehicle_registration_type === "corporate" ? "C" : "I");
            let req_txt = {
                "Aggregator_Program_Name": "PolicyBossLandmark",
                "Aggregator_KYC_Req_No": "PolicyBossLandmark000001",
                "ProposerType": vehicle_registration_type, //(I-Individual, C-Corporate)
                "FirstName": (req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name, //"MR ANAND",
                "MiddleName": (req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) ? "" : req.body.middle_name,
                "LastName": (req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name,
                "CompanyName": "",
                "Gender": "", //"M",
                "DOB": "", //"28-02-1986",
                "DOI": "",
                "MobileNo": "",
                "Email": "",
                "ProposerPAN": "", //"AMLPV9010E",
                "ProposerAadhaarNumber": "",
                "ProposerCKYCNo": "",
                "Other_Add_FLD1": "",
                "Other_Add_FLD2": "",
                "Other_Add_FLD3": "",
                "Other_Add_FLD4": "",
                "Other_Add_FLD5": "",
                "Other_Add_FLD6": ""
            };
            let buff_enc = new Buffer(JSON.stringify(req_txt));
            let data_enc = buff_enc.toString('base64');
            let req_txt_base64 = {
                "enc_request": data_enc
            };
            let args = {
                data: req_txt_base64,
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "*/*"
                }
            };

            /*
             let data = 'c3RhY2thYnVzZS5jb20=';
             let buff = new Buffer(data, 'base64');
             let text = buff.toString('utf8');
             console.log('"' + data + '" converted from Base64 to utf8 is "' + text + '"');
             console.log("==========   ==========");
             let data1 = 'stackabuse.com';
             let buff1 = new Buffer(data1);
             let base64data1 = buff1.toString('base64');
             console.log('"' + data1 + '" converted to Base64 is "' + base64data1 + '"');
             */

            let KYC_Status = "PENDING";
            let kyc_id = 0;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.post("https://moem-uat.libertyinsurance.in/ckyc/api/Generic/VerifyKYC", args, function (data, response) {
                if (data) {

                    let buff_dec = new Buffer(data, 'base64');
                    let data_dec = buff_dec.toString('ascii');
                    console.log(data_dec);
                    if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                        if (data.data.iskycVerified === 1) {
                            kyc_id = (data.data.hasOwnProperty("kyc_id")) ? data.data.kyc_id : "";
                            KYC_Status = "SUCCESS";
                        } else if (data.data.iskycVerified === 0) {
                            kyc_id = (data.data.hasOwnProperty("redirect_link")) ? data.data.redirect_link : "";
                            KYC_Status = "FAIL";
                        } else {
                            KYC_Status = "FAIL";
                        }
                    } else {
                        KYC_Status = "FAIL";
                    }

                    try {
                        let queryObj = {
                            'Insurer_Id': req.body.insurer_id,
                            'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                            'KYC_Number': kyc_id,
                            'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'KYC_Status': KYC_Status,
                            'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                            'Created_On': new Date(),
                            'Modified_On': new Date(),
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                            'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                        };
                        var kyc_detail1 = new kyc_detail(queryObj);
                        kyc_detail1.save(queryObj, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "Liberty", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "Liberty", "Msg": data.data, "Status": KYC_Status});
                            }
                        });
                        let queryObj1 = {
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                            'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                            'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                            'Insurer_Id': req.body.insurer_id,
                            'KYC_Request_Core': req_txt,
                            'KYC_Response_Core': data,
                            'Status': "completed",
                            'Created_On': new Date(),
                            'Modified_On': new Date()
                        };
                        var kyc_history1 = new kyc_history(queryObj1);
                        kyc_history1.save(queryObj1, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "Liberty", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "Liberty", "Msg": data.data, "Status": KYC_Status});
                            }
                        });
                    } catch (e) {
                        res.json({"Insurer": "Liberty", "Msg": e.stack, "Status": "FAIL"});
                    }
                    res.json({"Insurer": "Liberty", "Msg": data.data, "Status": KYC_Status});
                } else {
                    res.json({"Insurer": "Liberty", "Msg": "KYC fetch services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });

        } catch (e1) {
            res.json({"Insurer": "Liberty", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/liberty_verify_kyc_details', function (req, res) {
        try {
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            var user_name = null;
            if (req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            } else {
                user_name = ((req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name) + " " +
                        ((req.body.middle_name === undefined || req.body.middle_name === "" || req.body.middle_name === null) ? "" : req.body.middle_name) + " " +
                        ((req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name);
            }
            let req_txt = {
                "mobile": (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                "name": user_name,
                "kyc_id": user_kyc_no,
                "dob": (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                "ckyc_number": user_kyc_no,
                "pan": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                "aadhaar_uid": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : (req.body.aadhar.substr(req.body.aadhar.length - 4)), //"last 4 digits of aadhar",
                "agent_id": "",
                "gc_cust_id": "",
                "eia_number": "",
                "email_address": (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                "redirect_url": ""
            };
            req_txt = {
                "Aggregator_KYC_Req_No": user_kyc_no,
                "IC_KYC_No ": user_kyc_no,
                "Aggregator_Return_URL": "",
                "Other_Add_FLD1": "",
                "Other_Add_FLD2": "",
                "Other_Add_FLD3": "",
                "Other_Add_FLD4": "",
                "Other_Add_FLD5": "",
                "Other_Add_FLD6": ""
            };
            let args = {headers: {"token": ""}};
            let args1 = {
                headers: {
                    "api_key": "8d399be8-0b6f-4a"
                }
            };
            let KYC_Status = "PENDING";
            let token = null;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get("https://ctrln-uat.hdfcergo.com/e-kyc/tgt/generate-token", args1, function (data1, response1) {
                if (data1) {
                    if (data1.hasOwnProperty("success") && data1.success === true) {
                        if (data1.hasOwnProperty("data") && data1.data.hasOwnProperty("token") && data1.data.token !== "" && data1.data.token !== null) {
                            token = data1.data.token;
                            try {
                                if (token) {
                                    args.headers.token = token;
                                    var client1 = new Client();
                                    client1.get("https://ctrln-uat.hdfcergo.com/e-kyc/primary/kyc-status/" + user_kyc_no, args, function (data, response) {
                                        if (data) {
                                            let LM_Data = {
                                                'KYC_Obj': {
                                                    'kyc_id': ''
                                                },
                                                'LM_Obj': {
                                                    'iskycVerified': '',
                                                    'redirect_link': '',
                                                    'status': ''
                                                },
                                                'Hdfc_Obj': {
                                                    'data': ''
                                                },
                                                'tmp_Obj': ''
                                            };
                                            if (data.hasOwnProperty("message") && data.message !== "") {
                                                KYC_Status = "FAIL";
                                                LM_Data.Hdfc_Obj.data = data.message;
                                                LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                            } else {
                                                if (data.hasOwnProperty("success") && data.success === true && data.hasOwnProperty("data") && data.data.hasOwnProperty("iskycVerified")) {
                                                    if (data.data.iskycVerified === 1) {
                                                        KYC_Status = "SUCCESS";
                                                        LM_Data.KYC_Obj.kyc_id = user_kyc_no;
                                                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                    } else if (data.data.iskycVerified === 0) {
                                                        KYC_Status = "FAIL";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    } else {
                                                        KYC_Status = "FAIL";
                                                        LM_Data.Hdfc_Obj.data = data;
                                                        LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                    }
                                                } else {
                                                    KYC_Status = "FAIL";
                                                    LM_Data.Hdfc_Obj.data = data;
                                                    LM_Data.tmp_Obj = LM_Data.Hdfc_Obj.data;
                                                }
                                            }

                                            try {
                                                //data.data.Msg.kyc_id = user_kyc_no;
                                                let queryObj = {
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                                                    'KYC_Number': user_kyc_no,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'KYC_Status': KYC_Status,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date(),
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                                                };
                                                var kyc_detail1 = new kyc_detail(queryObj);
                                                kyc_detail1.save(queryObj, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Liberty", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Liberty", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                                let queryObj1 = {
                                                    'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                                                    'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                    'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                    'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                    'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                    'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                    'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                    'Insurer_Id': req.body.insurer_id,
                                                    'KYC_Request_Core': req_txt,
                                                    'KYC_Response_Core': data,
                                                    'Status': "completed",
                                                    'Created_On': new Date(),
                                                    'Modified_On': new Date()
                                                };
                                                var kyc_history1 = new kyc_history(queryObj1);
                                                kyc_history1.save(queryObj1, function (err, users) {
                                                    if (err) {
                                                        res.json({"Insurer": "Liberty", "Msg": err, "Status": "FAIL"});
                                                    } else {
                                                        //res.json({"Insurer": "Liberty", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                    }
                                                });
                                            } catch (e) {
                                                res.json({"Insurer": "Liberty", "Msg": e.stack, "Status": "FAIL"});
                                            }
                                            res.json({"Insurer": "Liberty", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                        } else {
                                            res.json({"Insurer": "Liberty", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                        }
                                    });
                                } else {
                                    res.json({"Insurer": "Liberty", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                                }
                            } catch (e2) {
                                res.json({"Insurer": "Liberty", "Msg": e2.stack, "Status": "FAIL"});
                            }
                        } else {
                            res.json({"Insurer": "Liberty", "Msg": "KYC-Token not generated. Please try again later.", "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "Liberty", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "Liberty", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "Liberty", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.get('/kyc_details/get_kyc_status_NIU/:crn/:udid', function (req, res) {
        try {
            let crn = req.params.crn - 0;
            let udid = req.params.udid - 0;
            let kyc_detail = require('../models/kyc_detail');
            kyc_detail.findOne({'PB_CRN': crn, 'User_Data_Id': udid}).sort({Modified_On:-1}).exec(function (err, data) {
                if (err) {
                    res.json({"Msg": err, "Status": "FAIL"});
                } else {
                    if (data) {
                        res.json({"Msg": data['_doc'], "Status": data['_doc'].KYC_Status});
                    } else {
                       res.json({"Msg": "No Data Available", "Status": "NEW"});
                    }
                }
            });
        } catch (err) {
            res.json({"Msg": err.stack, "Status": "FAIL"});
        }
    });
    app.get('/kyc_details/get_kyc_status/:crn/:insurer_id', function (req, res) {
        try {
            let crn = req.params.crn - 0;
            let insurer_id = req.params.insurer_id - 0;
            let kyc_detail = require('../models/kyc_detail');
            kyc_detail.findOne({'PB_CRN': crn, 'Insurer_Id': insurer_id}).sort({Modified_On: -1}).exec(function (err, data) {
                if (err) {
                    res.json({"Msg": err, "Status": "FAIL"});
                } else {
                    if (data) {
                        res.json({"Msg": data['_doc'], "Status": data['_doc'].KYC_Status});
                    } else {
                        res.json({"Msg": "No Data Available", "Status": "NEW"});
                    }
                }
            });
        } catch (err) {
            res.json({"Msg": err.stack, "Status": "FAIL"});
        }
    });
    app.get('/kyc_details/verify_scheduler', function (req, res, next) {
        var Client = require('node-rest-client').Client;
        var client = new Client();
        let data_count = 0;
        kyc_detail.find({KYC_Status: 'FAIL'}).exec(function (err, dbRequest) {
            if (err)
                res.send("Error :" + err.stack);
            if (dbRequest.length > 0) {
                let objCallSummary = {
                    'main': {
                        'total_job': dbRequest.length,
                        'success_job_cnt': 0,
                        'fail_job_cnt': 0,
                        'verified_status_cnt': 0,
                        'pending_status_cnt': 0
                    },
                    'success_job': [],
                    'fail_job': [],
                    'verified_job': [],
                    'pending_job': []
                };

                let service_method_url = config.environment.weburl + "/postservicecall/kyc_details/search_kyc_details";
                for (let i in dbRequest) {
                    data_count++;
                    let arg_obj = dbRequest[i]['_doc'];
                    let args = {
                        data: {
                            "search_type": "VERIFY",
                            "pan": arg_obj['PAN'],
                            "dob": arg_obj['DOB'],
                            "insurer_id": arg_obj['Insurer_Id'] - 0,
                            "crn": arg_obj['PB_CRN'] - 0,
                            "user_kyc_no": "",
                            "udid": 270228 - 0,
                            "product_id": 1 - 0,
                            "secret_key": "SECRET-HZ07QRWY-JIBT-XRMQ-ZP95-J0RWP3DYRACW",
                            "client_key": "CLIENT-CNTP6NYE-CU9N-DUZW-CSPI-SH1IS4DOVHB9"
                        },
                        headers: {
                            "Content-Type": "application/json"
                        }
                    };
                    try {
                        client.post(service_method_url, args, function (data, response) {
                            if (data.Status === 'Success') {
                                objCallSummary.main.success_job_cnt++;
                                objCallSummary.success_job.push(data.Summary);
                                if (data.MSG === "Verify") {
                                    objCallSummary.main.verified_status_cnt++;
                                    objCallSummary.verified_job.push(data.Summary);
                                } else {
                                    objCallSummary.main.pending_status_cnt++;
                                    objCallSummary.pending_job.push(data.Summary);
                                }
                            } else {
                                objCallSummary.main.fail_job_cnt++;
                                var SummaryErr = {
                                    'url': service_method_url,
                                    'err': data,
                                    'status': 'api_failed'
                                };
                                objCallSummary.fail_job.push(SummaryErr);
                            }
                        });
                    } catch (ex) {
                        var SummaryErr = {
                            'url': service_method_url,
                            'err': ex.stack,
                            'status': 'api_exception'
                        };
                        console.error('Exception', 'post_call_error', ex.stack);
                        objCallSummary.fail_job.push(SummaryErr);
                    }
                    if (i === dbRequest.length - 1) {
                        res.send(objCallSummary);
                    }
                }
            } else {
                res.send("Record Not found for verify KYC");
            }
        });
    });
    
    app.post('/kyc_details/tataaig_fetch_kyc_details', function (req, res) {
        try {
            let ObjRequest = req.body;
            let proposal_request = ObjRequest.Proposal_Request;
            let tokenservice_url = ((config.environment.name !== 'Production') ? 'https://uatapigw-tataaig.auth.ap-south-1.amazoncognito.com/oauth2/token' : '');
            let grant_type = ((config.environment.name !== 'Production') ? 'client_credentials' : '');
            let scope = ((config.environment.name !== 'Production') ? 'https://api.iorta.in/write' : '');
            let client_id = ((config.environment.name !== 'Production') ? '5qdbqng8plqp1ko2sslu695n2g' : '');
            let client_secret = ((config.environment.name !== 'Production') ? 'gki6eqtltmjj37gpqq0dt52dt651o079dn6mls62ptkvsa2b45c' : '');
            let token_args = {
                "grant_type": grant_type,
                "scope": scope,
                "client_id": client_id,
                "client_secret": client_secret
            };
            let kyc_token_args = {
                data: token_args,
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            };
            function jsonToQueryString(json) {
                return  Object.keys(json).map(function (key) {
                    return encodeURIComponent(key) + '=' +
                            encodeURIComponent(json[key]);
                }).join('&');
            }
            kyc_token_args.data = jsonToQueryString(kyc_token_args.data);
            let full_name = proposal_request['middle_name'] === "" ? (proposal_request['first_name'] + " " + proposal_request['last_name']) : (proposal_request['first_name'] + " " + proposal_request['middle_name'] + " " + proposal_request['last_name']);
            let product_name_obj = {1: "motor", 10: "motor", 12: "motor", 2: "", 4: "travel"};
            let product_name = product_name_obj[ObjRequest.product_id];
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            let token = null;
            let Client = require('node-rest-client').Client;
            let client = new Client();
            let user_datas = {};
            client.post(tokenservice_url, kyc_token_args, function (token_data, response1) {
                if (token_data) {
                    if (token_data.hasOwnProperty("access_token") && token_data.access_token) {
                        token = token_data.access_token;
                        try {
                            if (token) {
                                client.get(config.environment.weburl + '/user_datas/view/' + req.body.User_Data_Id, {}, function (db_user_data, response) {
                                    if (db_user_data) {
                                        user_datas = db_user_data[0];
                                        let objProduct = {
                                            "Quote_Id": user_datas['Processed_Request']['___insurer_customer_identifier___'],
                                            "Modified_On": new Date()
                                        };
                                        kyc_detail.update({"PB_CRN": user_datas['PB_CRN'] - 0, "User_Data_Id": req.body.User_Data_Id}, {$set: objProduct}, function (err, objKyCDetails) {
                                            if (err) {
                                                res.json({"Insurer": "TATA_AIG", "Msg": 'KYC fetch services failed due to KYC Details not Updated. Please try again later.', "Status": "Fail"});
                                            } else {
                                                client.get(config.environment.weburl + '/kyc_details/get_kyc_status/' + user_datas['PB_CRN'] + '/' + req.body.udid, {}, function (db_kyc_details, response) {
                                                    if (db_kyc_details) {
                                                        let verify_kyc_service_url = ((config.environment.name !== 'Production') ? 'https://uatapigw.tataaig.com/ckyc/verify?product=' + product_name : '');
                                                        let verify_args = {
                                                            "quote_id": db_kyc_details.Quote_Id,
                                                            "id_type": (req.body.Search_Type === undefined || req.body.Search_Type === "" || req.body.Search_Type === null) ? "" : req.body.Search_Type,
                                                            "id_num": (req.body.PAN === undefined || req.body.PAN === "" || req.body.PAN === null) ? "" : req.body.PAN,
                                                            "customer_name": full_name
                                                        };
                                                        let kyc_verify_args = {
                                                            data: verify_args,
                                                            headers: {
                                                                "Content-Type": "application/json",
                                                                "Authorization": token,
                                                                "x-api-key": ((config.environment.name !== 'Production') ? 'g8hoqi8TBA2mBpxgMohdTcWxAfv6JsJ6wLztOWm4' : '')
                                                            }
                                                        };
                                                        let client1 = new Client();
                                                        client1.post(verify_kyc_service_url, kyc_verify_args, function (kyc_verify_data, response) {
                                                            if (kyc_verify_data) {
                                                                let LM_Data = {
                                                                    'KYC_Obj': {
                                                                        'kyc_id': ''
                                                                    },
                                                                    'LM_Obj': {
                                                                        'iskycVerified': '',
                                                                        'redirect_link': '',
                                                                        'status': ''
                                                                    },
                                                                    'TATA_AIG_Obj': {
                                                                        'data': ''
                                                                    },
                                                                    'tmp_Obj': ''
                                                                };
                                                                if (kyc_verify_data.hasOwnProperty("status") && kyc_verify_data.status === 200 && kyc_verify_data.hasOwnProperty('data') && kyc_verify_data.data.hasOwnProperty('ckyc_number') && kyc_verify_data.data.ckyc_number) {
                                                                    kyc_id = kyc_verify_data.data.ckyc_number;
                                                                    KYC_Status = "SUCCESS";
                                                                    LM_Data.KYC_Obj.kyc_id = kyc_id;
                                                                    LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                                                                } else {
                                                                    KYC_Status = "PENDING";
                                                                    LM_Data.TATA_AIG_Obj.data = kyc_verify_data;
                                                                    LM_Data.tmp_Obj = LM_Data.TATA_AIG_Obj.data;
                                                                }
                                                                try {
                                                                    let queryObj = {
                                                                        'Insurer_Id': req.body.insurer_id,
                                                                        'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                                                                        'KYC_Number': kyc_id,
                                                                        'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                                        'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                                        'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                                        'KYC_Status': KYC_Status,
                                                                        'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                                        'Created_On': new Date(),
                                                                        'Modified_On': new Date(),
                                                                        'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                                        'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                                                                        'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                                        'CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                                                                    };
                                                                    var kyc_detail1 = new kyc_detail(queryObj);
                                                                    kyc_detail1.save(queryObj, function (err, users) {
                                                                        if (err) {
                                                                            res.json({"Insurer": "TATA_AIG", "Msg": err, "Status": "FAIL"});
                                                                        } else {
                                                                            console.error({"Insurer": "TATA_AIG", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                                        }
                                                                    });
                                                                    let queryObj1 = {
                                                                        'CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                                                                        'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                                                                        'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                                                                        'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                                                                        'DOB': (req.body.dob === undefined || req.body.dob === "" || req.body.dob === null) ? "" : req.body.dob,
                                                                        'Mobile': (req.body.mobile === undefined || req.body.mobile === "" || req.body.mobile === null) ? "" : req.body.mobile,
                                                                        'Email': (req.body.email === undefined || req.body.email === "" || req.body.email === null) ? "" : req.body.email,
                                                                        'Insurer_Id': req.body.insurer_id,
                                                                        'KYC_Request_Core': verify_args,
                                                                        'KYC_Response_Core': kyc_verify_data,
                                                                        'Status': "completed",
                                                                        'Created_On': new Date(),
                                                                        'Modified_On': new Date()
                                                                    };
                                                                    var kyc_history1 = new kyc_history(queryObj1);
                                                                    kyc_history1.save(queryObj1, function (err, users) {
                                                                        if (err) {
                                                                            res.json({"Insurer": "TATA_AIG", "Msg": err, "Status": "FAIL"});
                                                                        } else {
                                                                            console.error({"Insurer": "TATA_AIG", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                                                        }
                                                                    });
                                                                } catch (e) {
                                                                    res.json({"Insurer": "TATA_AIG", "Msg": e.stack, "Status": "FAIL"});
                                                                }
                                                                res.json({"Insurer": "TATA_AIG", "Msg": kyc_verify_data.data, "Status": KYC_Status});
                                                            } else {
                                                                res.json({"Insurer": "TATA_AIG", "Msg": "KYC fetch services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                                                            }
                                                        });
                                                    } else {
                                                        res.json({"Insurer": "TATA_AIG", "Msg": "KYC fetch services failed due to no details available in KYC Details Database. Please try again later.", "Status": "FAIL"});
                                                    }
                                                });
                                            }
                                        });
                                    } else {
                                        res.json({"Insurer": "TATA_AIG", "Msg": "KYC fetch services failed due to no details available in user data. Please try again later.", "Status": "FAIL"});
                                    }
                                });
                            } else {
                                res.json({"Insurer": "TATA_AIG", "Msg": "Could Not Generate Token. Please try again later.", "Status": "FAIL"});
                            }
                        } catch (e2) {
                            res.json({"Insurer": "TATA_AIG", "Msg": e2.stack, "Status": "FAIL"});
                        }
                    } else {
                        res.json({"Insurer": "TATA_AIG", "Msg": "KYC-Token generation services was not successful. Please try again later.", "Status": "FAIL"});
                    }
                } else {
                    res.json({"Insurer": "TATA_AIG", "Msg": "KYC-Token generation services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "TATA_AIG", "Msg": e1.stack, "Status": "FAIL"});
        }
    });
    
    app.get('/kyc_details/tataaig_update_proposal_kyc/:udid', function (req, res) {
        let udid = req.params['udid'] - 0;
        let Client = require('node-rest-client').Client;
        let client = new Client();
        let user_datas = {};
        client.get(config.environment.weburl + '/user_datas/view/' + udid, {}, function (db_user_data, response) {
            if (db_user_data) {
                user_datas = db_user_data[0];
                var objProduct = {
                    "Proposal_Id": user_datas.Insurer_Transaction_Identifier,
                    "Modified_On": new Date()
                };
                kyc_detail.update({"PB_CRN": user_datas['PB_CRN'] - 0, "User_Data_Id": udid}, {$set: objProduct}, function (err, objKyCDetails) {
                    if (err) {
                        res.json({"Insurer": "TATA_AIG", "Msg": "tataaig_update_proposal_kyc services failed due to kyc details not updated. Please try again later.", "Status": "FAIL"});
                    } else {
                        client.get(config.environment.weburl + '/kyc_details/get_kyc_status/' + user_datas['PB_CRN'] + '/' + udid, {}, function (db_kyc_details, response) {
                            if (db_kyc_details) {
                                let obj_Kyc_details = db_kyc_details['Msg'][0];
                                let t = ((config.environment.name !== 'Production') ? '2D9D1BC5A837E7A2741C6121317E9EE6CE1D32145CBCF7084FA4493ECDA2C2804969A5473610BC2AB4FC034359C11D55F99F8AEC736D84F0EFD531DFE24FFC74F0923F1288A83121B8045A8AAA4D9F920B4D737E3A1134B824E23B1F0561D97AEA647554A31570720BDB6E4CE3D8813A1138ABF16F2A23A8E6BAB012DD07B768019A5B583351F6D36C1F6F26B5C8D474D2F701E664A96F73806EE3A5235DEFFD76CF4106F7F074A55258D75B1DDEFD38' : '');
                                let product_code = ((config.environment.name !== 'Production') ? '3121' : '');
                                let update_args = {
                                    "T": t,
                                    "product_code": product_code,
                                    "proposal_no": obj_Kyc_details.Proposal_Id,
                                    "p_ckyc_pan": obj_Kyc_details.PAN,
                                    "p_ckyc_no": obj_Kyc_details.KYC_Number,
                                    "p_ckyc_id_type": obj_Kyc_details.Search_Type,
                                    "p_ckyc_id_no": "",
                                    "timestamp": moment().format(), //"2022-12-22T05:05:30.816Z"
                                    "kyc_status": obj_Kyc_details.KYC_Status
                                };
                                let kyc_token_args = {
                                    data: update_args,
                                    headers: {
                                        "Content-Type": "application/x-www-form-urlencoded"
                                    }
                                };
                                function jsonToQueryString(json) {
                                    return  Object.keys(json).map(function (key) {
                                        return encodeURIComponent(key) + '=' +
                                                encodeURIComponent(json[key]);
                                    }).join('&');
                                }
                                update_args.data = jsonToQueryString(update_args.data);
                                let Client1 = require('node-rest-client').Client;
                                let client1 = new Client1();
                                let update_kyc_detail = ((config.environment.name !== 'Production') ? 'https://pipuat.tataaiginsurance.in/tagichubms/ws/v1/ws/getws/kycdet' : '');
                                client1.post(update_kyc_detail, kyc_token_args, function (get_update_date, response12) {
                                    if (get_update_date && get_update_date.hasOwnProperty('status') && get_update_date['status'] === "1" && get_update_date.hasOwnProperty('errcode') && get_update_date['errcode'] === "KYC002") {
                                        res.json({"Insurer": "TATA_AIG", "Msg": get_update_date, "Status": "SUCCESS"}); 
                                    } else {
                                       res.json({"Insurer": "TATA_AIG", "Msg": get_update_date, "Status": "FAIL"}); 
                                    }
                                });
                            } else {
                                res.json({"Insurer": "TATA_AIG", "Msg": "tataaig_update_proposal_kyc services failed due to no kyc details found. Please try again later.", "Status": "FAIL"});
                            }
                        });
                    }
                });
            } else {
                res.json({"Insurer": "TATA_AIG", "Msg": "tataaig_update_proposal_kyc services failed due to no details found from user data. Please try again later.", "Status": "FAIL"});
            }
        });
    });
    app.post('/kyc_details/iffco_create_kyc_details', function (req, res) {
        try {
            let req_txt = {
             "prefix": (req.body.Proposal_Request.salutation === undefined || req.body.Proposal_Request.salutation === "" || req.body.Proposal_Request.salutation === null) ? "" : req.body.Proposal_Request.salutation,
             "firstName": (req.body.Proposal_Request.first_name === undefined || req.body.Proposal_Request.first_name === "" || req.body.Proposal_Request.first_name === null) ? "" : req.body.Proposal_Request.first_name,
             "middleName": (req.body.Proposal_Request.middle_name === undefined || req.body.Proposal_Request.middle_name === "" || req.body.Proposal_Request.middle_name === null) ? "" : req.body.Proposal_Request.middle_name,
             "lastName": (req.body.Proposal_Request.last_name === undefined || req.body.Proposal_Request.last_name === "" || req.body.Proposal_Request.last_name === null) ? "" : req.body.Proposal_Request.last_name,
             "relatedPersonPrefix": "Mr.",
             "relatedPersonFirstName": (req.body.Proposal_Request.nominee_first_name === undefined || req.body.Proposal_Request.nominee_first_name === "" || req.body.Proposal_Request.nominee_first_name === null) ? "" : req.body.Proposal_Request.nominee_first_name,
             "relatedPersonMiddleName": (req.body.Proposal_Request.nominee_middle_name === undefined || req.body.Proposal_Request.nominee_middle_name === "" || req.body.Proposal_Request.nominee_middle_name === null) ? "" : req.body.Proposal_Request.nominee_middle_name,
             "relatedPersonLastName": (req.body.Proposal_Request.nominee_last_name === undefined || req.body.Proposal_Request.nominee_last_name === "" || req.body.Proposal_Request.nominee_last_name === null) ? "" : req.body.Proposal_Request.nominee_last_name,
             "gender": (req.body.Proposal_Request.gender === undefined || req.body.Proposal_Request.gender === "" || req.body.Proposal_Request.gender === null) ? "" : req.body.Proposal_Request.gender,
             "dateofBirth": (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
             "minor": moment().diff(moment(req.body.Proposal_Request.dob, 'DD/MM/YYYY'), 'years') >= 18 ? "Y" : "N",
             "addressLine1": (req.body.Proposal_Request.permanent_address_1 === undefined || req.body.Proposal_Request.permanent_address_1 === "" || req.body.Proposal_Request.permanent_address_1 === null) ? "" : req.body.Proposal_Request.permanent_address_1,
             "pinCode": (req.body.Proposal_Request.permanent_pincode === undefined || req.body.Proposal_Request.permanent_pincode === "" || req.body.Proposal_Request.permanent_pincode === null) ? "" : req.body.Proposal_Request.permanent_pincode,
             "city": (req.body.Proposal_Request.permanent_city === undefined || req.body.Proposal_Request.permanent_city === "" || req.body.Proposal_Request.permanent_city === null) ? "" : req.body.Proposal_Request.permanent_city,
             "state": (req.body.Proposal_Request.permanent_state === undefined || req.body.Proposal_Request.permanent_state === "" || req.body.Proposal_Request.permanent_state === null) ? "" : req.body.Proposal_Request.permanent_state,
             "country": "India",
             "district": (req.body.Proposal_Request.permanent_city === undefined || req.body.Proposal_Request.permanent_city === "" || req.body.Proposal_Request.permanent_city === null) ? "" : req.body.Proposal_Request.permanent_city,
             "correspondenceAddressLine1": (req.body.Proposal_Request.communication_address_1 === undefined || req.body.Proposal_Request.communication_address_1 === "" || req.body.Proposal_Request.communication_address_1 === null) ? "" : req.body.Proposal_Request.communication_address_1,
             "correspondencePinCode": (req.body.Proposal_Request.communication_pincode === undefined || req.body.Proposal_Request.communication_pincode === "" || req.body.Proposal_Request.communication_pincode === null) ? "" : req.body.Proposal_Request.communication_pincode,
             "correspondenceCity": (req.body.Proposal_Request.communication_city === undefined || req.body.Proposal_Request.communication_city === "" || req.body.Proposal_Request.communication_city === null) ? "" : req.body.Proposal_Request.communication_city,
             "correspondenceState": (req.body.Proposal_Request.communication_state === undefined || req.body.Proposal_Request.communication_state === "" || req.body.Proposal_Request.communication_state === null) ? "" : req.body.Proposal_Request.communication_state,
             "correspondenceCountry": "India",
             "correspondenceDistrict": (req.body.Proposal_Request.communication_city === undefined || req.body.Proposal_Request.communication_city === "" || req.body.Proposal_Request.communication_city === null) ? "" : req.body.Proposal_Request.communication_city,
             "kycDocuments": [
             {
             "idType": "IDENTITY_PROOF",
             "idName": "PAN",
             "idNumber": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
             "fileName": (req.body.pan_file_name === undefined || req.body.pan_file_name === "" || req.body.pan_file_name === null) ? "" : req.body.pan_file_name,
             "fileExtension": (req.body.pan_file_extension === undefined || req.body.pan_file_extension === "" || req.body.pan_file_extension === null) ? "" : req.body.pan_file_extension,
             "fileBase64": (req.body.upload_pan === undefined || req.body.upload_pan === "" || req.body.upload_pan === null) ? "" : req.body.upload_pan
             },
             {
             "idType": "ADDRESS_PROOF",
             "idName": "AADHAR CARD NUMBER",
             "idNumber": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
             "fileName": (req.body.aadhar_file_name === undefined || req.body.aadhar_file_name === "" || req.body.aadhar_file_name === null) ? "" : req.body.aadhar_file_name,
             "fileExtension": (req.body.aadhar_file_extension === undefined || req.body.aadhar_file_extension === "" || req.body.aadhar_file_extension === null) ? "" : req.body.aadhar_file_extension,
             "fileBase64": (req.body.upload_aadhar === undefined || req.body.upload_aadhar === "" || req.body.upload_aadhar === null) ? "" : req.body.upload_aadhar
             }
             ]
             };
            /*let req_txt = {
                "prefix": "Mr.",
                "firstName": "Jon",
                "middleName": "Mathew",
                "lastName": "Kee",
                "relatedPersonPrefix": "Mr.",
                "relatedPersonFirstName": "Mathew",
                "relatedPersonMiddleName": "Paul",
                "relatedPersonLastName": "Kee",
                "gender": "M",
                "dateofBirth": "01-01-1977",
                "minor": "N",
                "addressLine1": "HNO 1A",
                "pinCode": "222111",
                "city": "Hyderabad",
                "state": "Telangana",
                "country": "India",
                "district": "Hyderabad",
                "correspondenceAddressLine1": "HNO 15/2",
                "correspondencePinCode": "560035",
                "correspondenceCity": "Bangalore",
                "correspondenceState": "Karnataka",
                "correspondenceCountry": "India",
                "correspondenceDistrict": "Bangalore City",
                "kycDocuments": [
                    {
                        "idType": "IDENTITY_PROOF",
                        "idName": "PAN",
                        "idNumber": "MDAPS6418B",
                        "fileName": "PANCARD.jpeg",
                        "fileExtension": "jpeg",
                        "fileBase64": "data:@file/jpeg;base64,"
                    },
                    {
                        "idType": "ADDRESS_PROOF",
                        "idName": "DRIVING LICENSE",
                        "idNumber": "wqqw2",
                        "fileName": "DL.jpeg",
                        "fileExtension": "jpeg",
                        "fileBase64": "data:@file/jpeg;base64,"
                    }
                ]
            }*/
            let auth = 'Basic ' + Buffer.from('ITGIMOT001:partner@2020').toString('base64');
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    'Authorization': auth
                }
            };
            let upload_req_txt = {
                "firstName": (req.body.first_name === undefined || req.body.first_name === "" || req.body.first_name === null) ? "" : req.body.first_name,
                "lastName": (req.body.last_name === undefined || req.body.last_name === "" || req.body.last_name === null) ? "" : req.body.last_name,
                "dateofBirth": (req.body.birth_date === undefined || req.body.birth_date === "" || req.body.birth_date === null) ? "" : req.body.birth_date,
                "kycDocuments": [
                    {
                        "idType": "IDENTITY_PROOF",
                        "idName": "PAN",
                        "idNumber": (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                        "fileName": (req.body.pan_file_name === undefined || req.body.pan_file_name === "" || req.body.pan_file_name === null) ? "" : req.body.pan_file_name,
                        "fileExtension": (req.body.pan_file_extension === undefined || req.body.pan_file_extension === "" || req.body.pan_file_extension === null) ? "" : req.body.pan_file_extension,
                        "fileBase64": (req.body.upload_aadhar === undefined || req.body.upload_aadhar === "" || req.body.upload_aadhar === null) ? "" : req.body.upload_aadhar,
                    },
                    {
                        "idType": "ADDRESS_PROOF",
                        "idName": "AADHAR CARD NUMBER",
                        "idNumber": (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                        "fileName": (req.body.aadhar_file_name === undefined || req.body.aadhar_file_name === "" || req.body.aadhar_file_name === null) ? "" : req.body.aadhar_file_name,
                        "fileExtension": (req.body.aadhar_file_extension === undefined || req.body.aadhar_file_extension === "" || req.body.aadhar_file_extension === null) ? "" : req.body.aadhar_file_extension,
                        "fileBase64": (req.body.upload_aadhar === undefined || req.body.upload_aadhar === "" || req.body.upload_aadhar === null) ? "" : req.body.upload_aadhar,
                    }
                ]
            };
            let KYC_Status = "PENDING";
            let kyc_id = 0;
            var Client = require('node-rest-client').Client;
            var client = new Client();
            var call_upload = false;
            /* IMAGE SAVE START */
            var path = appRoot + "/tmp/kyc_documents/" + req.body.crn;
            var Kyc_doc_file_name = '';
            var doc = [];
            var aadhar_path = '';
            var pan_path = '';
            if (req.body.hasOwnProperty('upload_pan')) {
                doc.push({'doc_name': req.body.pan_file_name, 'doc_data': req.body.upload_pan});
                pan_path = "/tmp/kyc_documents/" + req.body.crn + "/" + req.body.pan_file_name;
            }
            if (req.body.hasOwnProperty('upload_aadhar')) {
                doc.push({'doc_name': req.body.aadhar_file_name, 'doc_data': req.body.upload_aadhar});
                aadhar_path = "/tmp/kyc_documents/" + req.body.crn + "/" + req.body.aadhar_file_name;
            }
            try {
                for (var i = 0; i < doc.length; i++) {
                    var doc_decoded = decodeURIComponent(doc[i]['doc_data']);
                    if (!fs.existsSync(appRoot + "/tmp/kyc_documents")) {
                        fs.mkdirSync(appRoot + "/tmp/kyc_documents");
                    }
                    if (fs.existsSync(path)) {
                        var data = doc_decoded.replace(/^data:image\/\w+;base64,/, "");
                        if (data === "") {
                             res.json({"Insurer": "IFFCO", "Msg": 'Image Unavailable', "Status": KYC_Status});
                        } else {
                            var buf = new Buffer(data, 'base64');
                            fs.writeFileSync(path + '/' + doc[i]['doc_name'], buf);
                        }
                    } else {
                        fs.mkdirSync(path);
                        var data = doc_decoded.replace(/^data:image\/\w+;base64,/, "");
                        if (data === "") {
                            res.json({"Insurer": "IFFCO", "Msg": 'Image Unavailable', "Status": KYC_Status});
                        } else {
                            var buf = new Buffer(data, 'base64');
                            fs.writeFileSync(path + '/' + Kyc_doc_file_name, buf);
                        }
                    }
                }
                req.body.Aadhar_Doc = aadhar_path;
                req.body.PAN_Doc = pan_path;

            } catch (err) {
                res.json({"Insurer": "IFFCO", "Msg": err.stack, "Status": "FAIL"});
            }
            /* IMAGE SAVE END */
            client.post("https://staging.iffcotokio.co.in/partner-services/kyc/create", args, function (data, response) {
                try {
                    let LM_Data = {
                        'KYC_Obj': {
                            'kyc_id': ''
                        },
                        'LM_Obj': {
                            'iskycVerified': '',
                            'redirect_link': '',
                            'status': ''
                        },
                        'Iffco_Obj': {
                            'data': ''
                        },
                        'tmp_Obj': ''
                    };
                    if (data.hasOwnProperty("status") && data.status === 200 && data.hasOwnProperty("result")) {
                        if (data.result.hasOwnProperty("status") && (data.result.status === 'SUCCESS' || data.result.status === 'EXISTING RECORD') && data.result.hasOwnProperty("itgiUniqueReferenceId") && data.result.itgiUniqueReferenceId) {
                            kyc_id = data.result.itgiUniqueReferenceId;
                            KYC_Status = "SUCCESS";
                            LM_Data.KYC_Obj.kyc_id = kyc_id;
                            LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                        } else {
                            call_upload = true;
                            kyc_id = data.result.itgiUniqueReferenceId;
                            KYC_Status = "FAIL";
                            LM_Data.KYC_Obj.kyc_id = kyc_id;
                            LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                            upload_req_txt.itgiUniqueReferenceId = data.result.itgiUniqueReferenceId;
                            let upload_args = {
                                data: JSON.stringify(upload_req_txt),
                                headers: {
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                }
                            };
                            client.post("https://staging.iffcotokio.co.in/partner-services/kyc/upload", upload_args, function (data, response) {
                                console.log('iffco_fetch_kyc_details upload doc api data - ' + data);
                                if (data.hasOwnProperty("status") && data.status === 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty('apiStatus') && data.result.apiStatus === "SUCCESS") {
                                    res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                } else {
                                    res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                                }
                            });
                        }
                    } else if (data && data.hasOwnProperty("status") && data.status !== 200 && data.hasOwnProperty("errors")) {
                        kyc_id = data.result.itgiUniqueReferenceId;
                        KYC_Status = "FAIL";
                        LM_Data.Iffco_Obj.data = data.errors;
                        LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;
                    } else {
                        KYC_Status = "FAIL";
                        LM_Data.Iffco_Obj.data = data;
                        LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;
                    }
                    try {
                        let queryObj = {
                            'Insurer_Id': req.body.insurer_id,
                            'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                            'KYC_Number': kyc_id,
                            'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'KYC_Status': KYC_Status,
                            'DOB': (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
                            'Created_On': new Date(),
                            'Modified_On': new Date(),
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                            'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                        };
                        var kyc_detail1 = new kyc_detail(queryObj);
                        kyc_detail1.save(queryObj, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "IFFCO", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "IFFCO", "Msg": data.data, "Status": KYC_Status});
                            }
                        });
                        let queryObj1 = {
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'DOB': (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
                            'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                            'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                            'Insurer_Id': req.body.insurer_id,
                            'KYC_Request_Core': req_txt,
                            'KYC_Response_Core': data,
                            'Status': "completed",
                            'Created_On': new Date(),
                            'Modified_On': new Date()
                        };
                        var kyc_history1 = new kyc_history(queryObj1);
                        kyc_history1.save(queryObj1, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "IFFCO", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "IFFCO", "Msg": data.data, "Status": KYC_Status});
                            }
                        });
                    } catch (e) {
                        res.json({"Insurer": "IFFCO", "Msg": e.stack, "Status": "FAIL"});
                    }
                    if (!call_upload) {
                        res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                    }
                } catch (err) {
                    res.json({"Insurer": "IFFCO", "Msg": err.stack, "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "IFFCO", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/iffco_fetch_kyc_details', function (req, res) {
        try {
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            let req_txt = {
                "firstName": (req.body.Proposal_Request.first_name === undefined || req.body.Proposal_Request.first_name === "" || req.body.Proposal_Request.first_name === null) ? "" : req.body.Proposal_Request.first_name,
                "lastName": (req.body.Proposal_Request.last_name === undefined || req.body.Proposal_Request.last_name === "" || req.body.Proposal_Request.last_name === null) ? "" : req.body.Proposal_Request.last_name,
                "dateofBirth": (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null || req.body.Proposal_Request.birth_date === "Invalid Date") ? "" : moment(req.body.Proposal_Request.birth_date, 'DD/MM/YYYY').format('DD-MM-YYYY'),
                "gender": (req.body.Proposal_Request.gender === undefined || req.body.Proposal_Request.gender === "" || req.body.Proposal_Request.gender === null) ? "" : req.body.Proposal_Request.gender
            };
            if (req.body.Proposal_Request.hasOwnProperty('pan') && req.body.Proposal_Request.pan !== undefined && req.body.Proposal_Request.pan !== "" && req.body.Proposal_Request.pan !== null) {
                req_txt['idType'] = 'PAN';
                req_txt['idNumber'] = req.body.Proposal_Request.pan;
            } else if (req.body.Proposal_Request.hasOwnProperty('aadhar') && req.body.Proposal_Request.aadhar !== undefined && req.body.Proposal_Request.aadhar !== "" && req.body.Proposal_Request.aadhar !== null) {
                req_txt['idType'] = 'AADHAR CARD NUMBER';
                req_txt['idNumber'] = req.body.Proposal_Request.aadhar;
            }
            var auth = 'Basic ' + Buffer.from('ITGIMOT001:partner@2020').toString('base64');
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    'Authorization': auth
                }
            };
            let KYC_Status = "PENDING";
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.post("https://staging.iffcotokio.co.in/partner-services/kyc/fetch", args, function (data, response) {
                if (data) {
                    let LM_Data = {
                        'KYC_Obj': {
                            'kyc_id': ''
                        },
                        'LM_Obj': {
                            'iskycVerified': '',
                            'redirect_link': '',
                            'status': ''
                        },
                        'Iffco_Obj': {
                            'data': ''
                        },
                        'tmp_Obj': ''
                    };
                    if (data.hasOwnProperty("status") && data.status === 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty("itgiUniqueReferenceId") && data.result.itgiUniqueReferenceId) {
                        //kyc_id = data.result.itgiUniqueReferenceId;
                        KYC_Status = "SUCCESS";
                        LM_Data.KYC_Obj.kyc_id = data.result.itgiUniqueReferenceId;
                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                        /*}else if (data && data.hasOwnProperty("status") && data.status === 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty("apiStatus") && data.result.apiStatus === "No Record") {
                         KYC_Status = "FAIL";
                         LM_Data.Iffco_Obj.data = data.result;
                         LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;
                         }else if (data && data.hasOwnProperty("status") && data.status !== 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty("apiStatus") && data.result.apiStatus) {
                         KYC_Status = "FAIL";
                         LM_Data.Iffco_Obj.data = data.result;
                         LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;*/
                    } else {
                        KYC_Status = "FAIL";
                        LM_Data.Iffco_Obj.data = data.result;
                        LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;
                    }

                    try {
                        //data.data.Msg.kyc_id = user_kyc_no;
                        let queryObj = {
                            'Insurer_Id': req.body.insurer_id,
                            'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                            'KYC_Number': user_kyc_no,
                            'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'KYC_Status': KYC_Status,
                            'DOB': (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
                            'Created_On': new Date(),
                            'Modified_On': new Date(),
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                            'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                        };
                        var kyc_detail1 = new kyc_detail(queryObj);
                        kyc_detail1.save(queryObj, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "IFFCO", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                            }
                        });
                        let queryObj1 = {
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'DOB': (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
                            'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                            'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                            'Insurer_Id': req.body.insurer_id,
                            'KYC_Request_Core': req_txt,
                            'KYC_Response_Core': data,
                            'Status': "completed",
                            'Created_On': new Date(),
                            'Modified_On': new Date()
                        };
                        var kyc_history1 = new kyc_history(queryObj1);
                        kyc_history1.save(queryObj1, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "IFFCO", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                            }
                        });
                    } catch (e) {
                        res.json({"Insurer": "IFFCO", "Msg": e.stack, "Status": "FAIL"});
                    }
                    res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                } else {
                    res.json({"Insurer": "IFFCO", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "IFFCO", "Msg": e1.stack, "Status": "FAIL"});
        }
    });

    app.post('/kyc_details/iffco_verify_kyc_details', function (req, res) {
        try {
            var user_kyc_no = (req.body.user_kyc_no === undefined || req.body.user_kyc_no === "" || req.body.user_kyc_no === null) ? "" : req.body.user_kyc_no;
            let req_txt = {
                "firstName": (req.body.Proposal_Request.first_name === undefined || req.body.Proposal_Request.first_name === "" || req.body.Proposal_Request.first_name === null) ? "" : req.body.Proposal_Request.first_name,
                "lastName": (req.body.Proposal_Request.last_name === undefined || req.body.Proposal_Request.last_name === "" || req.body.Proposal_Request.last_name === null) ? "" : req.body.Proposal_Request.last_name,
                "dateofBirth": (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null || req.body.Proposal_Request.birth_date === "Invalid Date") ? "" : moment(req.body.Proposal_Request.birth_date, 'DD/MM/YYYY').format('DD-MM-YYYY'),
                "gender": (req.body.Proposal_Request.gender === undefined || req.body.Proposal_Request.gender === "" || req.body.Proposal_Request.gender === null) ? "" : req.body.Proposal_Request.gender
            };
            if (req.body.Proposal_Request.hasOwnProperty('pan') && req.body.Proposal_Request.pan !== undefined && req.body.Proposal_Request.pan !== "" && req.body.Proposal_Request.pan !== null) {
                req_txt['idType'] = 'PAN';
                req_txt['idNumber'] = req.body.Proposal_Request.pan;
            } else if (req.body.Proposal_Request.hasOwnProperty('aadhar') && req.body.Proposal_Request.aadhar !== undefined && req.body.Proposal_Request.aadhar !== "" && req.body.Proposal_Request.aadhar !== null) {
                req_txt['idType'] = 'AADHAR CARD NUMBER';
                req_txt['idNumber'] = req.body.Proposal_Request.aadhar;
            }
            var auth = 'Basic ' + Buffer.from('ITGIMOT001:partner@2020').toString('base64');
            let args = {
                data: JSON.stringify(req_txt),
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    'Authorization': auth
                }
            };
            let KYC_Status = "PENDING";
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.post("https://staging.iffcotokio.co.in/partner-services/kyc/fetch", args, function (data, response) {
                if (data) {
                    let LM_Data = {
                        'KYC_Obj': {
                            'kyc_id': ''
                        },
                        'LM_Obj': {
                            'iskycVerified': '',
                            'redirect_link': '',
                            'status': ''
                        },
                        'Iffco_Obj': {
                            'data': ''
                        },
                        'tmp_Obj': ''
                    };
                    if (data.hasOwnProperty("status") && data.status === 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty("itgiUniqueReferenceId") && data.result.itgiUniqueReferenceId) {
                        //kyc_id = data.result.itgiUniqueReferenceId;
                        KYC_Status = "SUCCESS";
                        LM_Data.KYC_Obj.kyc_id = data.result.itgiUniqueReferenceId;
                        LM_Data.tmp_Obj = LM_Data.KYC_Obj;
                        /*}else if (data && data.hasOwnProperty("status") && data.status === 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty("apiStatus") && data.result.apiStatus === "No Record") {
                         KYC_Status = "FAIL";
                         LM_Data.Iffco_Obj.data = data.result;
                         LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;
                         }else if (data && data.hasOwnProperty("status") && data.status !== 200 && data.hasOwnProperty("result") && data.result.hasOwnProperty("apiStatus") && data.result.apiStatus) {
                         KYC_Status = "FAIL";
                         LM_Data.Iffco_Obj.data = data.result;
                         LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;*/
                    } else {
                        KYC_Status = "FAIL";
                        LM_Data.Iffco_Obj.data = data.result;
                        LM_Data.tmp_Obj = LM_Data.Iffco_Obj.data;
                    }

                    try {
                        //data.data.Msg.kyc_id = user_kyc_no;
                        let queryObj = {
                            'Insurer_Id': req.body.insurer_id,
                            'Search_Type': (req.body.search_type === undefined || req.body.search_type === "" || req.body.search_type === null) ? "" : req.body.search_type,
                            'KYC_Number': user_kyc_no,
                            'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'KYC_Status': KYC_Status,
                            'DOB': (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
                            'Created_On': new Date(),
                            'Modified_On': new Date(),
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'Product_Id': (req.body.product_id === undefined || req.body.product_id === "" || req.body.product_id === null) ? 0 : req.body.product_id,
                            'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn
                        };
                        var kyc_detail1 = new kyc_detail(queryObj);
                        kyc_detail1.save(queryObj, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "IFFCO", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                            }
                        });
                        let queryObj1 = {
                            'PB_CRN': (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn,
                            'User_Data_Id': (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? 0 : req.body.udid,
                            'PAN': (req.body.pan === undefined || req.body.pan === "" || req.body.pan === null) ? "" : req.body.pan,
                            'Aadhaar': (req.body.aadhar === undefined || req.body.aadhar === "" || req.body.aadhar === null) ? "" : req.body.aadhar,
                            'DOB': (req.body.Proposal_Request.birth_date === undefined || req.body.Proposal_Request.birth_date === "" || req.body.Proposal_Request.birth_date === null) ? "" : req.body.Proposal_Request.birth_date,
                            'Mobile': (req.body.Proposal_Request.mobile === undefined || req.body.Proposal_Request.mobile === "" || req.body.Proposal_Request.mobile === null) ? "" : req.body.Proposal_Request.mobile,
                            'Email': (req.body.Proposal_Request.email === undefined || req.body.Proposal_Request.email === "" || req.body.Proposal_Request.email === null) ? "" : req.body.Proposal_Request.email,
                            'Insurer_Id': req.body.insurer_id,
                            'KYC_Request_Core': req_txt,
                            'KYC_Response_Core': data,
                            'Status': "completed",
                            'Created_On': new Date(),
                            'Modified_On': new Date()
                        };
                        var kyc_history1 = new kyc_history(queryObj1);
                        kyc_history1.save(queryObj1, function (err, users) {
                            if (err) {
                                res.json({"Insurer": "IFFCO", "Msg": err, "Status": "FAIL"});
                            } else {
                                //res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                            }
                        });
                    } catch (e) {
                        res.json({"Insurer": "IFFCO", "Msg": e.stack, "Status": "FAIL"});
                    }
                    res.json({"Insurer": "IFFCO", "Msg": LM_Data.tmp_Obj, "Status": KYC_Status});
                } else {
                    res.json({"Insurer": "IFFCO", "Msg": "KYC verify services failed due to technical issue. Please try again later.", "Status": "FAIL"});
                }
            });
        } catch (e1) {
            res.json({"Insurer": "IFFCO", "Msg": e1.stack, "Status": "FAIL"});
        }
    });
//    app.post('/bajaj_enc', function (req, res) {
//        // encode
//        let token = jwt.encode(req.body, secret, 'HS512');
//        res.send(token);
//    });
//
//    app.post('/bajaj_dec', function (req, res) {
//        // decode
//        let decoded = jwt.decode(req.body.token, secret, false, 'HS512');
//        res.send(decoded);
//    });
};

var express = require('express');
var config = require('config');
var bitly_access_token = config.environment.arr_bitly_access_token[Math.floor(Math.random() * config.environment.arr_bitly_access_token.length)];
var geoip = require('geoip-lite');
var sleep = require('system-sleep');
var MongoClient = require('mongodb').MongoClient;
var moment = require('moment');
const objMongoDB = null;
var path = require('path');
const bodyParser = require('body-parser');
var appRoot = path.dirname(path.dirname(require.main.filename));
var sess;
var Users = [];
var Sync_Contact = require('../models/sync_contact');
let obj_RsaData;
var autoIncrement = require("mongodb-autoincrement");
var post_sale = ["Policy not received", "Post Sale Query", "Endorsement", "Claim Related", "Received policy copy, CRN is not marked as sell", "Done payment but not received policy copy"];
var Base = require('../libs/Base');
var fs = require('fs');
var router = express.Router();
var https = require('https');
var corp_lead = require('../models/corporate_lead');
var formidable = require('formidable');
var form = new formidable.IncomingForm();
var User_Data = require('../models/user_data');
var lazy_pay_log = require('../models/lazy_pay_log');
const crypto = require('crypto');
let Client = require('node-rest-client').Client;
let client = new Client();
var kyc_detail = require('../models/kyc_detail');
var kyc_history = require('../models/kyc_history');
var emailtocc = {
    "Product Input Page": {
        "Make Model Variant not available": [{
                "to": "quotesupport@policyboss.com",
                "cc": "techsupport@policyboss.com"
            }]
    },
    "Quotation": [{
            "to": "quotesupport@policyboss.com",
            "cc": "techsupport@policyboss.com"
        }],
    "Proposal": [{
            "to": "",
            "cc": "techsupport@policyboss.com"
        }],
    "Policy not received": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com;susanna.lobo@landmarkinsurance.in"
        }],
    "Post Sale Query": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com;susanna.lobo@landmarkinsurance.in"
        }],
    "Endorsement": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com;susanna.lobo@landmarkinsurance.in"
        }],
    "Claim Related": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com;susanna.lobo@landmarkinsurance.in"
        }],
    "Finmart": [{
            "to": "pramod.parit@policyboss.com",
            "cc": "techsupport@policyboss.com"
        }],
    "Received policy copy, CRN is not marked as sell": [{
            "to": "nikita.jadhav@policyboss.com;jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com;susanna.lobo@landmarkinsurance.in"
        }],
    "Done payment but not received policy copy": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com;susanna.lobo@landmarkinsurance.in"
        }],
    "Sign up issue": [{
            "to": "",
            "cc": "techsupport@policyboss.com"
        }],
    "Login issue": [{
            "to": "",
            "cc": "techsupport@policyboss.com"
        }]
}

var store_path = appRoot + "/tmp/ticketing";
var mongojs = require('mongojs');
var myDb = mongojs(config.db.connection + ':27017/' + config.db.name);
const  multipart = require('connect-multiparty');
const  multipartMiddleware = multipart({uploadDir: './tmp/ticketing'});
var mongoose = require('mongoose');
mongoose.Promise = global.Promise;

var const_arr_insurer = {
    "Insurer_1": "Bajaj",
    "Insurer_4": "FutureGenerali",
    "Insurer_16": "RahejaQBE",
    "Insurer_3": "Chola",
    "Insurer_19": "UniversalSompo",
    "Insurer_47": "DHFL",
    "Insurer_13": "Oriental",
    "Insurer_11": "TataAIG",
    "Insurer_44": "Digit",
    "Insurer_46": "Edelweiss",
    "Insurer_45": "Acko",
    "Insurer_5": "HdfcErgo",
    "Insurer_6": "IciciLombard",
    "Insurer_10": "RoyalSundaram",
    "Insurer_33": "LibertyVideocon",
    "Insurer_2": "Bharti",
    "Insurer_9": "Reliance",
    "Insurer_14": "United",
    "Insurer_30": "Kotak",
    "Insurer_7": "IffcoTokio",
    "Insurer_12": "NewIndia"
};
var emailtocc = {
    "Product Input Page": {
        "Make Model Variant not available": [{
                "to": "savio.lobo@landmarkinsurance.in,ashish.hatia@policyboss.com",
                "cc": "techsupport@policyboss.com"
            }]
    },
    "Quotation": [{
            "to": "quotesupport@policyboss.com",
            "cc": "techsupport@policyboss.com"
        }],
    "Proposal": [{
            "to": "",
            "cc": "techsupport@policyboss.com"
        }],
    "Policy not received": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com,susanna.lobo@landmarkinsurance.in"
        }],
    "Post Sale Query": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com,susanna.lobo@landmarkinsurance.in"
        }],
    "Endorsement": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com,susanna.lobo@landmarkinsurance.in"
        }],
    "Claim Related": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com,susanna.lobo@landmarkinsurance.in"
        }],
    "Finmart": [{
            "to": "pramod.parit@policyboss.com",
            "cc": "techsupport@policyboss.com"
        }],
    "Received policy copy, CRN is not marked as sell": [{
            "to": "nikita.jadhav@policyboss.com,jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com,susanna.lobo@landmarkinsurance.in"
        }],
    "Done payment but not received policy copy": [{
            "to": "jyoti.sharma@policyboss.com",
            "cc": "techsupport@policyboss.com,susanna.lobo@landmarkinsurance.in"
        }],
    "Sign up issue": [{
            "to": "",
            "cc": "techsupport@policyboss.com"
        }],
    "Login issue": [{
            "to": "",
            "cc": "techsupport@policyboss.com"
        }]
};

router.post('/signuptest', function (req, res) {
    if (!req.body.id || !req.body.password) {
        res.status("400");
        res.send("Invalid details!");
    } else {
        Users.filter(function (user) {
            if (user.id === req.body.id) {
                res.render('signup', {
                    message: "User Already Exists! Login or choose another user id"});
            }
        });
        var newUser = {id: req.body.id, password: req.body.password};
        Users.push(newUser);
        req.session.user = newUser;
        res.send(req.session.user);
    }
});

router.post('/product_share/product_share_url', function (req, res) {
    try {
        var product_share = require('../models/product_share');
        var product_share_history = require('../models/product_share_history');
        var objReq = req.body;
        var ss_id = objReq['ss_id'] - 0;
        var fba_id = objReq['fba_id'] - 0;
        var sub_fba_id = objReq['sub_fba_id'] - 0;
        var product_id = objReq['product_id'] - 0;
        var product_name = "";
        var send_url, URL = "";
        var msg = "";
        if (product_id === 17)
        {
            msg = "Beat The Pandemic by choosing Corona Insurance along with wellness benefits such as Doctor on Call, Message Relay and more.\n\n";
            msg += "Ensure no unplanned medical event disrupts the safety of your family.\n\n";
            msg += "Stay Safe, Insure Online\n";
        } else if (product_id === 23)
        {
            msg = "Secure your good health via a health insurance offering hosp. Upto SI, 405 day care treatments, life long renewablity and much more.\n\n";
            msg += "No Medicals up to age 50.\n\n";
            msg += "Stay Safe, Stay Healthy, Stay Insured\n";
        } else
        {
            msg = "Let's beat the threat of Corona Virus together, by minimizing risk from personal interactions.\n\n";
            msg += "In case you intend to purchase any insurance product, contact me or click here!\n\n";
            msg += "Stay Safe, Make Insurance Payments/ Purchase Online!\n";
        }
        if (ss_id === 0 || product_id === 0 || product_id === "") {
            res.json({'Msg': "Ss_id,Fba_id,Product_id is Required", 'URL': "", 'Status': "Failure"});
        } else
        {
            if (product_id === 1) {
                product_name = "Car";
                URL = "https://www.policyboss.com/car-insurance?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPCI";
            } else if (product_id === 10) {
                product_name = "Bike";
                URL = "https://www.policyboss.com/two-wheeler-insurance?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPTW";
            } else if (product_id === 2) {
                product_name = "Health";
                URL = "https://www.policyboss.com/Health/?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPHI";
            } else if (product_id === 12) {
                product_name = "CV";
                URL = "https://www.policyboss.com/commercial-vehicle-insurance/commercial-vehicle-insurance.html?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPCV";
            } else if (product_id === 17) {
                product_name = "Corona Care";
                URL = 'http://horizon.policyboss.com/wellness_product?ss_id=' + ss_id + '&fba_id=' + fba_id + '&sub_fba_id=' + sub_fba_id;
            } else if (product_id === 23) {
                product_name = "Group Health Care";
                URL = 'http://horizon.policyboss.com/kotak-group-health-care?ss_id=' + ss_id + '&fba_id=' + fba_id + '&sub_fba_id=' + sub_fba_id;
            } else if (product_id === 3) {
                product_name = "Group Health Care";
                URL = ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com/' : 'http://qa-horizon.policyboss.com/') + 'hdfc-life-sanchay?ss_id=' + ss_id + '&fba_id=' + fba_id + '&sub_fba_id=' + sub_fba_id;
            } else if (product_id === 22) {
                product_name = "Hospi Fund";
                URL = "https://www.policyboss.com/Health/?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPHI";
            }
            var Client = require('node-rest-client').Client;
            var client = new Client();
            var bitlyURL;
            if (product_id === 17 || product_id === 23 || product_id === 3)
            {
                bitlyURL = "https://api-ssl.bitly.com/v3/shorten?access_token=" + config.environment.bitly_access_token + '&longUrl=' + encodeURIComponent(URL);
            } else
            {
                bitlyURL = config.environment.shorten_url + '?longUrl=' + encodeURIComponent(URL);
            }
            var pro_share = new product_share();
            product_share.find({"ss_id": ss_id, "fba_id": fba_id, "product_id": product_id}, function (err, dbData) {
                if (dbData.length > 0) {
                    var count = parseInt(dbData[0]._doc['Share_Count']) + 1;
                    send_url = dbData[0]._doc['URL'];
                    var objProduct = {
                        "Share_Count": count,
                        "Modified_On": new Date()
                    };
                    product_share.update({"ss_id": ss_id, "fba_id": fba_id, "product_id": product_id}, {$set: objProduct}, function (err, objproduct_share) {
                        if (err) {
                            res.json({'Msg': err, 'URL': "", 'Status': "Failure"});
                        } else {
                            var objproduct_share_history = new product_share_history();
                            for (var key in req.body) {
                                objproduct_share_history[key] = req.body[key];
                            }
                            objproduct_share_history.Created_On = new Date();
                            objproduct_share_history.Modified_On = new Date();
                            objproduct_share_history.URL = send_url;
                            objproduct_share_history.save(function (err1) {
                                if (err1) {
                                    res.json({'Msg': err1, 'URL': "", 'Status': "Failure"});
                                } else {
                                    res.json({'Msg': msg, 'URL': send_url, 'Status': "Success"});
                                }
                            });
                        }
                    });
                } else
                {
                    client.get(bitlyURL, function (data, response) {
                        console.log('Bitly-', data);
                        if (product_id === 17 || product_id === 23 || product_id === 3)
                        {
                            if (data && data.status_code === 200) {
                                send_url = data.data.url;
                            }
                        } else {
                            if (data && data.Short_Url !== "") {
                                send_url = data.Short_Url;
                            }
                        }
                        for (var key in req.body) {
                            pro_share[key] = req.body[key];
                        }
                        pro_share.Created_On = new Date();
                        pro_share.Modified_On = new Date();
                        pro_share.Share_Count = 1;
                        pro_share.URL = send_url;
                        pro_share.save(function (err) {
                            if (err) {
                                res.json({'Msg': err, 'URL': "", 'Status': "Failure"});
                            } else {
                                var objproduct_share_history = new product_share_history();
                                for (var key in req.body) {
                                    objproduct_share_history[key] = req.body[key];
                                }
                                objproduct_share_history.Created_On = new Date();
                                objproduct_share_history.Modified_On = new Date();
                                objproduct_share_history.URL = send_url;
                                objproduct_share_history.save(function (err1) {
                                    if (err1) {
                                        res.json({'Msg': err1, 'URL': "", 'Status': "Failure"});
                                    } else {
                                        res.json({'Msg': msg, 'URL': send_url, 'Status': "Success"});
                                    }
                                });
                            }
                        });
                    });
                }
            });
            //});
        }

    } catch (e) {
        res.json({'Msg': e, 'URL': "", 'Status': "Failure"});
    }
});

router.post('/save_lead_tele_support', function (req, res) {
    try {
        var objRequest = req.body;
        var lead_tele_support = require('../models/lead_tele_support');

        var objlead_tele_support = new lead_tele_support();
        for (var key in req.body) {
            objlead_tele_support[key] = req.body[key];
        }
        objlead_tele_support.Created_On = new Date();
        objlead_tele_support.Modified_On = new Date();
        objlead_tele_support.save(function (err1) {
            if (err1) {
                res.json({'Msg': '', Status: 'Fail'});
            } else {
                res.json({'Msg': 'Saved Succesfully!!!', Status: 'Success'});
            }
        });


    } catch (errex) {
        res.json({'Msg': 'error', Error_Msg: errex.stack, Status: 'Fail'});
    }
});

router.post('/online_agreement', function (req, res) {
    var online_agreement = require('../models/sync_contact_agreement');
    var objonline_agreement = new online_agreement();
    for (var key in req.body) {
        objonline_agreement[key] = req.body[key];
    }
    objonline_agreement.Created_On = new Date();
    objonline_agreement.Modified_On = new Date();
    objonline_agreement.save(function (err1) {
        if (err1) {
            res.json({'Status': "Failure"});
        } else {
            res.json({'Status': "Success"});
        }
    });
});


router.post('/lead_allocation', function (req, res) {
    var lead_allocation = require('../models/lead_allocation');
    //var objdata = new lead_allocation();
    var ObjRequest = req.body.request_json;

    var objArray = [];
    try {
        //for (var i in  ObjRequest) {
        var objdata = {};
        //for (var key in ObjRequest[i]) {
        for (var key in ObjRequest) {
            if (key === "Lead_Id" || key === "Caller_Id") {
                objdata[key] = parseInt(ObjRequest[key]);
            } else {
                objdata[key] = ObjRequest[key];
            }

        }
        objdata.Created_On = new Date();
        objdata.Modified_On = new Date();
        //objArray.push(objdata);
        var objModel = new lead_allocation(objdata);
        objModel.save(function (err, objDbUserData) {
            if (err) {
                res.json({'Status': "Failure"});
            } else {
                res.json({'Status': "Success"});
            }
        });
        //}
    } catch (e) {
        res.json({'Status': "Failure", 'Error': e});
    }
});
router.post('/lead_disposition_save', function (req, res) {
    var lead_disposition = require('../models/lead_disposition');

    var formidable = require('formidable');
    var form = new formidable.IncomingForm();
    var fs = require('fs');
    form.parse(req, function (err, fields, files) {
        console.log(fields);
        var pdf_web_path = "";
        if (files.hasOwnProperty('disposition_file')) {

            var pdf_file_name = files['disposition_file'].name;
            var path = appRoot + "/tmp/disposition/";
            var pdf_sys_loc_horizon = path + fields["lead_id"] + '/' + pdf_file_name;
            pdf_web_path = config.environment.downloadurl + "/disposition/" + fields["lead_id"] + '/' + pdf_file_name;
            var oldpath = files.disposition_file.path;
            if (fs.existsSync(path + fields["lead_id"]))
            {

            } else
            {
                fs.mkdirSync(path + fields["lead_id"]);
            }
            fs.readFile(oldpath, function (err, data) {
                if (err) {
                    console.error('Read', err);
                }
                console.log('File read!');

                // Write the file
                fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                    if (err) {
                        console.error('Write', err);
                    }
                });
                // Delete the file
                fs.unlink(oldpath, function (err) {
                    if (err)
                        throw err;
                    console.log('File deleted!');
                });
            });

        }
        var arg = {
            Lead_Id: fields["lead_id"],
            Status: fields["dsp_status"],
            Sub_Status: fields["dsp_substatus"],
            Created_On: new Date(),
            Modified_On: new Date(),
            Remark: fields["dsp_remarks"],
            // ss_id: req.obj_session.user.ss_id,
            Is_Latest: 1,
            // fba_id: req.obj_session.user.fba_id,
            File_Name: pdf_web_path,
            Lead_Status: fields["Lead_Status"],
            Customer_Name: fields["Customer_Name"],
            Customer_Mobile: fields["Customer_Mobile"],
            Policy_Expiry_Date: fields["Policy_expiry_date"],
            Next_Call_Date: fields["Next_Call_Date"]
        };
        var dispositionObj = new lead_disposition(arg);
        dispositionObj.save(function (err) {
            if (err)
                throw err;
            res.json({'Msg': 'Fail'});

            console.log('File uploaded and moved!');
            var lead = require('../models/leads');
            var objData = {'lead_disposition': fields["dsp_status"],
                'lead_subdisposition': fields["dsp_substatus"],
                'lead_disposition_assigned_on': new Date()
            };
            lead.update({'Lead_Id': fields["lead_id"]}, {$set: objData}, {multi: false}, function (err, numAffected) {
            });
            res.json({'Msg': 'Success'});
        });
    });

});
router.get('/get_lead_disposition_data/:lead_id', function (req, res) {
    try {
        var lead_id = parseInt(req.params.lead_id);
        var lead_disposition = require('../models/lead_disposition');

        lead_disposition.find({"Lead_Id": lead_id}, function (err, dblead) {
            if (err) {
                res.json(err);
            } else {
                res.json(dblead);
            }
        });

    } catch (e) {
    }
});
router.get('/get_lead_disposition_data/:lead_id', function (req, res) {
    try {
        var lead_id = parseInt(req.params.lead_id);
        var lead_disposition = require('../models/lead_disposition');

        lead_disposition.find({"Lead_Id": lead_id}, function (err, dblead) {
            if (err) {
                res.json(err);
            } else {
                res.json(dblead);
            }
        });

    } catch (e) {
    }
});
router.get('/get_lead_allocation/:udid', function (req, res) {
    try {
        var caller_id = parseInt(req.params.udid);
        var lead_allocations = require('../models/lead_allocation');

        lead_allocations.find({"Caller_Id": caller_id}, function (err, dblead) {
            if (err) {
                res.json(err);
            } else {
                res.json(dblead);
            }
        });

    } catch (e) {

    }


});
router.post('/get_lead_data', LoadSession, function (req, res, next) {
    try {

        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'Lead_Id Customer_Name Product_Id mobile policy_expiry_date Created_On Make_Name Model_Name Variant_Name VehicleCity_RTOCode lead_type lead_assigned_on lead_disposition_assigned_on lead_disposition lead_subdisposition',
            sort: {'Created_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

        }
        var filter = obj_pagination.filter;

        var ObjRequest = req.body;

        filter["ss_id"] = ObjRequest.ss_id - 0;
        filter["fba_id"] = ObjRequest.fba_id - 0;

        var fromDate = ObjRequest["from_date"] !== undefined ? ObjRequest["from_date"] : "";
        var toDate = ObjRequest["to_date"] !== undefined ? ObjRequest["to_date"] : "";

        if (ObjRequest.lead_type !== "" && ObjRequest.lead_type !== undefined) {
            filter["lead_type"] = ObjRequest.lead_type;
        }
        if (ObjRequest.lead_assigned !== "" && ObjRequest.lead_assigned !== undefined) {
            filter["lead_assigned"] = ObjRequest.lead_assigned;
        }
        if (ObjRequest.lead_disposition !== "" && ObjRequest.lead_disposition !== undefined) {
            filter["lead_disposition"] = ObjRequest.lead_disposition;
        }
        if (ObjRequest.lead_subdisposition !== "" && ObjRequest.lead_subdisposition !== undefined) {
            filter["lead_subdisposition"] = ObjRequest.lead_subdisposition;
        }
        if (ObjRequest.lead_status !== "" && ObjRequest.lead_status !== undefined) {
            filter["lead_status"] = ObjRequest.lead_status;
        }
        if (ObjRequest.src_ssid !== "" && ObjRequest.src_ssid !== undefined) {
            filter["ss_id"] = ObjRequest.src_ssid;
        }
        if (ObjRequest.name !== "" && ObjRequest.name !== undefined) {
            filter["Customer_Name"] = new RegExp(req.body.name, 'i');
        }
        if (ObjRequest.mobile !== "" && ObjRequest.mobile !== undefined) {
            filter["mobile"] = req.body.mobile;
        }
        if (ObjRequest.src_crn !== "" && ObjRequest.src_crn !== undefined) {
            filter["PB_CRN"] = req.body.src_crn;
        }
        if (fromDate !== "" && toDate !== "") {
            filter["policy_expiry_date"] = {$gte: fromDate, $lt: toDate};

        }
        var lead = require('../models/leads');
        console.error('HorizonLeadList', filter, req.body);
        lead.paginate(filter, optionPaginate).then(function (user_datas) {
            res.json(user_datas);
        });
    } catch (e) {
        console.log(e);
        res.json({'Msg': 'error', 'Status': 'fail'});
    }
});

router.get('/create_lead_request/:lead_id', function (req, res, next) {
    var lead_id = parseInt(req.params.lead_id);
    var moment = require('moment');
    try {
        if (lead_id) {
            var lead = require('../models/leads');
            lead.findOne({Lead_Id: lead_id}).exec(function (err, dblead) {
                console.log(dblead);
                var ObjLead = dblead._doc;
                var data1 = {
                    "product_id": ObjLead.Product_Id,
                    "vehicle_id": ObjLead.Vehicle_ID,
                    "rto_id": ObjLead.VehicleCity_Id,
                    "vehicle_insurance_type": ObjLead.vehicle_insurance_type === "R" ? "renew" : "new",
                    "vehicle_manf_date": ObjLead.vehicle_manf_date,
                    "vehicle_registration_date": ObjLead.vehicle_registration_date,
                    "policy_expiry_date": ObjLead.policy_expiry_date,
                    "prev_insurer_id": ObjLead.prev_insurer_id,
                    "vehicle_registration_type": "individual",
                    "vehicle_ncb_current": ObjLead.vehicle_ncb_current,
                    "is_claim_exists": ObjLead.is_claim_exists,
                    "method_type": "Premium",
                    "execution_async": "yes",
                    "electrical_accessory": 0,
                    "non_electrical_accessory": 0,
                    "registration_no": ObjLead.registration_no,
                    "is_llpd": "no",
                    "is_antitheft_fit": "no",
                    "voluntary_deductible": 0,
                    "is_external_bifuel": 0,
                    "is_aai_member": "no",
                    "external_bifuel_type": "no",
                    "external_bifuel_value": 0,
                    "pa_owner_driver_si": "1500000",
                    "is_having_valid_dl": "no",
                    "is_pa_od": "yes",
                    "is_opted_standalone_cpa": "yes",
                    "pa_named_passenger_si": 0,
                    "pa_unnamed_passenger_si": 0,
                    "pa_paid_driver_si": 0,
                    "vehicle_expected_idv": 0,
                    "vehicle_insurance_subtype": "1CH_0TP",
                    "first_name": ObjLead.Customer_Name.split(' ')[0],
                    "middle_name": ObjLead.Customer_Name.split(' ').length > 2 ? ObjLead.Customer_Name.split(' ')[1] : "",
                    "last_name": ObjLead.Customer_Name.split(' ').length === 3 ? ObjLead.Customer_Name.split(' ')[2] : ObjLead.Customer_Name.split(' ')[1],
                    "email": "",
                    "mobile": ObjLead.mobile,
                    "crn": "",
                    "ss_id": ObjLead.ss_id,
                    "fba_id": ObjLead.fba_id,
                    "geo_lat": 0,
                    "geo_long": 0,
                    "agent_source": "",
                    "ip_address": "",
                    "app_version": "",
                    "mac_address": "",
                    "secret_key": "SECRET-HZ07QRWY-JIBT-XRMQ-ZP95-J0RWP3DYRACW",
                    "client_key": "CLIENT-CNTP6NYE-CU9N-DUZW-CSPI-SH1IS4DOVHB9",
                    "is_financed": "no",
                    "is_oslc": "no",
                    "oslc_si": 0,
                    "is_inspection_done": "no"
                };
                if (ObjLead.vehicle_insurance_type === "R") {
                    var expiry_date = ObjLead.policy_expiry_date.split('-');
                    // var expiry_date_new = expiry_date[2] + "-" + expiry_date[1] + "-" + expiry_date[0];
                    var selectedDate = new Date(expiry_date);
                    var now = new Date();
                    now.setHours(0);
                    now.setMinutes(0);
                    now.setSeconds(0, 0);
                    if (selectedDate < now) {
                        data1["is_breakin"] = "yes";
                    } else {
                        data1["is_breakin"] = "no";
                    }
                    data1[ "is_policy_exist"] = "yes";
                } else {
                    data1["is_breakin"] = "no";
                    data1[ "is_policy_exist"] = "no";
                }
                var args = {
                    data: data1,
                    headers: {
                        "Content-Type": "application/json"
                    }
                };
                var url_api = config.environment.weburl + '/quote/premium_initiate';
                var Client = require('node-rest-client').Client;
                var client = new Client();
                client.post(url_api, args, function (data, response) {
                    console.log(data);
                    res.json(data);
                });

            });
        }
    } catch (e) {
        console.log(e);
        res.json({'Msg': 'error', 'Status': 'fail'});
    }
});

router.post('/get_variant', function (req, res, next) {
    try {
        var Product_Id_New = req.body['product_id'] - 0;
        var Insurer_ID = req.body['insurer_id'] - 0;
        var Insurer_Vehicle_Model_Name = req.body['model_name'];
        var Insurer_Vehicle_FuelType = req.body['fuel_type'];
        var Insurer_Vehicle_CubicCapacity = req.body['cubic_capacity'];
        var Insurer_Vehicle_Model_Code = req.body['model_code'] ? req.body['model_code'] : '';
        var args = {"Product_Id_New": Product_Id_New, "Insurer_ID": Insurer_ID, "Insurer_Vehicle_Model_Name": Insurer_Vehicle_Model_Name, "Insurer_Vehicle_CubicCapacity": Insurer_Vehicle_CubicCapacity, "Insurer_Vehicle_FuelType": Insurer_Vehicle_FuelType};
        var new_args = {"_id": 0, "Insurer_Vehicle_Code": 1, "Insurer_Vehicle_Variant_Name": 1, "Insurer_Vehicle_Variant_Code": 1, Insurer_Vehicle_CubicCapacity: 1};
        if (Insurer_Vehicle_Model_Code) {
            args['Insurer_Vehicle_Model_Code'] = Insurer_Vehicle_Model_Code;
        }
        if (Insurer_ID == 17) {
            args['Insurer_Vehicle_CubicCapacity'] = args['Insurer_Vehicle_CubicCapacity'] - 0;
        }
        var Vehicles_Insurer = require('../models/vehicles_insurer');
        Vehicles_Insurer.find(args, new_args, function (err, dbData) {
            if (err) {
                res.json({msg: 'fail', data: ''});
            } else {
                res.json({msg: 'success', data: dbData});
            }
        });
    } catch (e) {
        res.json({msg: 'fail', data: '', error: e});
    }
});

router.post('/ticket/getEndorsementDetails', function (req, res) {
    try
    {
        var Base = require('../libs/Base');
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);
        var optionPaginate = {
            sort: {'Modified_On': -1}
        };
        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var filter = obj_pagination.filter;
        filter["Category"] = req.body.Category;
        filter["Product"] = parseInt(req.body.Product);
        filter["Insurer_Id"] = parseInt(req.body.insurer_id);
        var days = (req.body.hasOwnProperty('days')) ? req.body.days - 0 : 1;
        const startOfMonth = moment().format('YYYY-MM-DD');
        const currentOfMonth = moment().format('YYYY-MM-DD');
        const startDate = new Date(startOfMonth + "T00:00:00Z");
        const currentDate = new Date(currentOfMonth + "T23:59:59Z");
        filter["Created_On"] = {$gte: startDate, $lt: currentDate};
        var user_details = require('../models/user_details');
        user_details.paginate(filter, optionPaginate).then(function (dbTicket) {
            res.json(dbTicket);
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/ticket/endoUpdateUserDatas', function (req, res) {
    try {
        let userDataRes = "";
        var objRequest = req.body;
        var arg = {
            "PB_CRN": objRequest['crn'] - 0,
            "Last_Status": /.*TRANS_SUCCESS.*/
        };
        var request = objRequest['update_request'];
        User_Data.find(arg, function (err, getData) {
            if (err) {
                res.send(err);
            } else {
                if (getData.length > 0) {
                    if (objRequest['update'] === "yes") {
                        if (request.hasOwnProperty('contact_name') && request.contact_name) {
                            var namearray = request['contact_name'].split(" ");
                            console.log('namearray', namearray);
                            request.middle_name = "";
                            for (var i = 2; i < namearray.length; i++) {
                                request.middle_name = namearray[i - 1];
                                if (objRequest['product_id'] === "2") {
                                    request.member_1_middle_name = namearray[i - 1];
                                }
                            }
                            request.first_name = request['contact_name'].split(' ')[0];
                            if (objRequest['product_id'] === "2") {
                                request.member_1_first_name = request['contact_name'].split(' ')[0];
                            }
                            request.last_name = namearray.length === 1 ? "" : namearray[namearray.length - 1];
                            if (objRequest['product_id'] === "2") {
                                request.member_1_last_name = namearray.length === 1 ? "" : namearray[namearray.length - 1];
                            }
                        }
                        if (request.permanent_address_1 && request.permanent_address_2 && request.permanent_address_3) {
                            var address = request.permanent_address_1 + ',' + request.permanent_address_2 + ',' + request.permanent_address_3;
                            request['communication_address'] = request.communication_address_1 + ", " + request.communication_address_2 +
                                    ", " + request.communication_address_3 + ", " + getData[0]['_doc']['Erp_Qt_Request_Core']['___communication_city___'] +
                                    ", " + getData[0]['_doc']['Erp_Qt_Request_Core']['___communication_state___'] + ", " + getData[0]['_doc']['Erp_Qt_Request_Core']['___communication_pincode___'];
                            if (objRequest['product_id'] === "2" && getData[0]._doc.hasOwnProperty('Erp_Qt_Request_Core') && getData[0]._doc['Erp_Qt_Request_Core']['___same_as_for_nominee___'] === true) {
                                request.nominee_address = address;
                            }
                        }
                        if (request.nominee_relation) {
                            request.nominee_relation_text = request.nominee_relation;
                        }
                        if (request.nominee_birth_date) {
                            var nominee_age = moment().diff(request.nominee_birth_date, 'years');
                            request.nominee_age = nominee_age;
                        }
                        if (request.registration_no) {
                            var reg_no = request.registration_no.split('-');
                            request.registration_no_4 = reg_no[3];
                            request.erp_registration_no = reg_no[0] + reg_no[1] + reg_no[2] + reg_no[3];
                        }
                        request.customer_email = request.email;
                        var update_data = {};
                        for (var i in request) {
                            if (i === "variant_name") {
                                if ((getData[0]['_doc']['Insurer_Id']) === 46) {
                                    var ins_detail = "edelweiss_data";
                                }
                                if ((getData[0]['_doc']['Insurer_Id']) === 17) {
                                    var ins_detail = "sbigeneral_data";
                                }

                                var insurer_data = JSON.parse(getData[0]['_doc']['Transaction_Data'][ins_detail]);
                                insurer_data['___dbmaster_insurer_vehicle_variant_name___'] = request[i];
                                update_data['Transaction_Data.' + ins_detail] = JSON.stringify(insurer_data);
                                update_data['Processed_Request.___dbmaster_insurer_vehicle_variant_name___'] = request[i];
                                update_data['Erp_Qt_Request_Core.___pb_variant_name___'] = request[i];
                            } else {
                                update_data['Erp_Qt_Request_Core.___' + i + '___'] = request[i];
                            }
                        }
                        console.log(update_data);
                        User_Data.update(arg, {$set: update_data}, function (err, numAffected) {
                            console.log('UserDataUpdated', err, numAffected);
                            if (err) {
                                throw err;
                            } else {
                                userDataRes = getData[0]['_doc'];
                                var endorsement_ticket_history = require('../models/endorsement_ticket_history');
                                var endorsement_data = {
                                    "CRN": parseInt(objRequest.crn),
                                    "Insurer_Id": parseInt(objRequest.insurer_id),
                                    "Product_Id": parseInt(objRequest.product_id),
                                    "Endorsement_data": JSON.stringify(objRequest),
                                    "Created_on": new Date(),
                                    "Modified_on": ""
                                };
                                console.log(JSON.stringify(objRequest));
                                let endorsement_ticket_history_log = new endorsement_ticket_history(endorsement_data);
                                endorsement_ticket_history_log.save(function (err, res1) {
                                    if (err) {
                                        res.json({'Status': 'Fail'});
                                    } else {
                                        if (userDataRes.hasOwnProperty('Pdf_Request') && userDataRes.Pdf_Request) {
                                            var pdf_request = userDataRes['Pdf_Request'];
                                            var args = {
                                                data: pdf_request,
                                                headers: {
                                                    "Content-Type": "application/json",
                                                    'client_key': userDataRes.Erp_Qt_Request_Core['___client_key___'],
                                                    'secret_key': userDataRes.Erp_Qt_Request_Core['___secret_key___']
                                                }
                                            };
                                        } else {
                                            var args = {
                                                data: {
                                                    "search_reference_number": userDataRes.Erp_Qt_Request_Core['___search_reference_number___'],
                                                    "api_reference_number": userDataRes.Verification_Request['api_reference_number'].split('_')[0],
                                                    "policy_number": userDataRes.Transaction_Data.policy_number,
                                                    "transaction_id": userDataRes.Transaction_Data.transaction_id,
                                                    "transaction_amount": userDataRes.Transaction_Data.transaction_amount,
                                                    "pg_reference_number_1": userDataRes.Transaction_Data.pg_reference_number_1,
                                                    "client_key": userDataRes.Erp_Qt_Request_Core['___client_key___'],
                                                    "secret_key": userDataRes.Erp_Qt_Request_Core['___secret_key___'],
                                                    "insurer_id": userDataRes.Erp_Qt_Request_Core['___insurer_id___'],
                                                    "email": request['email'],
                                                    "mobile": request['mobile'],
                                                    "method_type": "Pdf",
                                                    "execution_async": "no"
                                                },
                                                headers: {
                                                    "Content-Type": "application/json",
                                                    'client_key': userDataRes.Erp_Qt_Request_Core['___client_key___'],
                                                    'secret_key': userDataRes.Erp_Qt_Request_Core['___secret_key___']
                                                }
                                            };
                                        }
                                        var ins_name = {
                                            "46": 'Edelweiss',
                                            "17": 'SBI'
                                        };
                                        var email_arg = {
                                            "crn": userDataRes.Erp_Qt_Request_Core['___crn___'],
                                            "contact_name": request['contact_name'],
                                            "email": request['email'],
                                            "product_id": userDataRes.Erp_Qt_Request_Core['___product_id___']
                                        };
                                        var Client = require('node-rest-client').Client;
                                        var client = new Client();
                                        client.post(config.environment.weburl + '/quote/pdf_initiate', args, function (data, response) {
                                            console.log(data);
                                            if (data.hasOwnProperty('Policy')) {
                                                if (data['Policy']['pdf_status'] === "SUCCESS" && data['Policy']['policy_url'] !== "" && data['Policy']['policy_url'] !== undefined) {
                                                    try {
                                                        //email process
                                                        /*
                                                         var objEmail = {
                                                         '___crn___': email_arg['crn'],
                                                         '___insurer_name___': ins_name[data['Insurer_Id']],
                                                         '___contact_name___': email_arg['contact_name'],
                                                         '___short_url___': data['Policy']['policy_url']
                                                         };
                                                         var fs = require('fs');
                                                         var email_data = '';
                                                         email_data = fs.readFileSync(appRoot + '/resource/email/Policy_Success.html').toString();
                                                         var objProduct = {
                                                         '1': 'Car',
                                                         '2': 'Health',
                                                         '10': 'TW',
                                                         '12': 'CV'
                                                         };
                                                         var product_short_name = objProduct[email_arg['product_id']];
                                                         var sub = (config.environment.name.toString() === 'Production' ? "" : ('[' + config.environment.name.toString().toUpperCase() + ']')) + '[' + product_short_name + '] Successful Transaction for CRN : ' + email_arg['crn'];
                                                         email_data = email_data.replaceJson(objEmail);
                                                         var Email = require('../models/email');
                                                         var objModelEmail = new Email();
                                                         var arr_bcc = [config.environment.notification_email];
                                                         var emailto = email_arg['email'];
                                                         var email_agent = '';
                                                         objModelEmail.send('customercare@policyboss.com', emailto, sub, email_data, email_agent, arr_bcc.join(','), email_arg['crn'] - 0);
                                                         */
                                                        res.json({'Msg': 'Sucess', 'Data': data});
                                                        //email process end
                                                    } catch (e) {
                                                        console.error('Exception', 'Success Email', e);
                                                    }
                                                } else {
                                                    res.json({'Msg': 'Fail'});
                                                }
                                            } else {
                                                res.json({'Msg': 'Fail'});
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    } else {
                        var data = getData[0]['_doc']['Erp_Qt_Request_Core'];
                        var qtdata = {};
                        var erpqt_data = {
                            "salutation": "",
                            "contact_name": "",
                            "first_name": "",
                            "middle_name": "",
                            "last_name": "",
                            "birth_date": "",
                            "email": "",
                            "mobile": "",
                            "permanent_address_1": "",
                            "permanent_address_2": "",
                            "permanent_address_3": "",
                            "is_reg_addr_comm_addr_same": "",
                            "communication_address_1": "",
                            "communication_address_2": "",
                            "communication_address_3": "",
                            "nominee_name": "",
                            "nominee_relation": "",
                            "nominee_birth_date": "",
                            "registration_no": "",
                            "registration_no_1": "",
                            "registration_no_2": "",
                            "registration_no_3": "",
                            "registration_no_4": "",
                            "engine_number": "",
                            "chassis_number": "",
                            "is_financed": "",
                            "financial_agreement_type": "",
                            "financial_institute_name": "",
                            "financial_institute_code": "",
                            "financial_institute_city": ""
                        };
                        for (var k in erpqt_data) {
                            qtdata['___' + k + '___'] = data['___' + k + '___'];
                        }
                        if ((getData[0]['_doc']['Insurer_Id']) === 46) {
                            var ins_detail = "edelweiss_data";
                        }
                        if ((getData[0]['_doc']['Insurer_Id']) === 17) {
                            var ins_detail = "sbigeneral_data";
                        }

                        if ((getData[0]['_doc']).hasOwnProperty('Transaction_Data') && (getData[0]['_doc'])['Transaction_Data'] && (getData[0]['_doc'])['Transaction_Data'].hasOwnProperty(ins_detail)) {
                            var insurer_Data = JSON.parse((getData[0]['_doc'])['Transaction_Data'][ins_detail]);
                            console.log('log');
                            for (var j in insurer_Data) {
                                if ((j.toString()).includes("___dbmaster_insurer_vehicle"))
                                    qtdata[j] = insurer_Data[j];
                            }

                        }
                        res.json(qtdata);
                    }
                } else {
                    res.json({'msg': 'No data found'});
                }
            }
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/raiseticket', multipartMiddleware, function (req, res, next) {
    try {
        var objRequest = req.body;
        var product_id = 0;
        var path = appRoot + "/tmp/ticketing/";
        var Ticket_id = objRequest["Ticket_Id"];
        var isticket_created;
        var Is_Customer = objRequest['Is_Customer'] === undefined ? false : objRequest['Is_Customer'];
        console.log(objRequest);
        console.error(objRequest);
        var offical_email_id = "";

        if ((objRequest['ss_id'] > 0 && objRequest['ss_id'] !== 5) || Is_Customer === true) {
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get(config.environment.weburl + '/posps/dsas/view/' + objRequest['ss_id'], {}, function (data, response) {
                if (data['status'] === 'SUCCESS' || Is_Customer) {
                    objRequest['agent'] = data;
                    var agentdetails = objRequest['agent']['EMP'];
                    if (objRequest["Product"] === "CAR") {
                        product_id = 1;
                    } else if (objRequest["Product"] === "BIKE") {
                        product_id = 10;
                    } else if (objRequest["Product"] === "HEALTH") {
                        product_id = 2;
                    }

                    if (data['user_type'] === "FOS") {
                        if (data.EMP.Email_Id) {
                            offical_email_id = data.EMP.Email_Id;
                        }
                        if (data.RM.rm_details.email) {
                            offical_email_id += offical_email_id === "" ? data.RM.rm_details.email : "," + data.RM.rm_details.email;
                        }
                    } else if (data['user_type'] === "POSP") {
                        if (data.POSP.Email_Id) {
                            offical_email_id = data.POSP.Email_Id;
                        }
                        if (data.RM.rm_details.email) {
                            offical_email_id += offical_email_id === "" ? data.RM.rm_details.email : "," + data.RM.rm_details.email;
                        }
                    } else if (data['user_type'] === "EMP") {
                        if (data.EMP.Email_Id) {
                            offical_email_id = data.EMP.Email_Id;
                        }
                    } else if (data['user_type'] === "MISP") {
                        if (data.EMP.Email_Id) {
                            offical_email_id = data.EMP.Email_Id;
                        }
                        if (data.EMP.Reporting_Email_ID) {
                            offical_email_id += offical_email_id === "" ? data.EMP.Reporting_Email_ID : ',' + data.EMP.Reporting_Email_ID;
                        }
                    }

                    var file_obj = [];
                    var file_ext = [];
                    for (var i = 1; i <= 4; i++) {
                        if (objRequest["file_" + i] !== null && objRequest["file_" + i] !== "" && objRequest["file_" + i] !== undefined) {
                            file_obj.push(decodeURIComponent(objRequest["file_" + i]));
                        }
                    }
                    for (var i = 1; i <= 4; i++) {
                        if (objRequest["file_ext_" + i] !== null && objRequest["file_ext_" + i] !== "" && objRequest["file_" + i] !== undefined) {
                            file_ext.push(objRequest["file_ext_" + i]);
                        }
                    }
                    console.log(file_obj);
                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                        if (err)
                            throw err;

                        autoIncrement.getNextSequence(db, 'tickets', function (err1, autoIndex) {
                            var tickets = db.collection('tickets');
                            var agg = [
                                // Group by the grouping key, but keep the valid values
                                {"$group": {
                                        "_id": "$Ticket_Id",
                                        "docId": {"$last": "$_id"},
                                        "Ticket_Id": {"$last": "$Ticket_Id"},
                                        "Category": {"$last": "$Category"},
                                        "SubCategory": {"$last": "$SubCategory"},
                                        "From": {"$last": "$From"},
                                        "To": {"$last": "$To"},
                                        "Status": {"$last": "$Status"},
                                        "Created_by": {"$last": "$Created_by"},
                                        "Created_On": {"$last": "$Created_On"},
                                        "Modified_On": {"$last": "$Modified_On"},
                                        "CRN": {"$last": "$CRN"},
                                        "Mobile_No": {"$last": "$Mobile_No"},
                                        "Vehicle_No": {"$last": "$Vehicle_No"},
                                        "Remark": {"$last": "$Remark"},
                                        "ss_id": {"$last": "$ss_id"},
                                        "SubCategory_level2": {"$last": "$SubCategory_level2"},
                                        "Product": {"$last": "$Product"}
                                    }},
                                // Then sort
                                {"$sort": {"Created_On": -1}}

                            ];
                            console.log(agg);
                            //tickets.aggregate(agg, function (err1, dbTicket1) {
                            if (err1) {
                                throw err1;
                            } else {

                                tickets.find({"$or": [{"CRN": (objRequest.CRN).toString()}, {"CRN": parseInt(objRequest.CRN)}], "Category": objRequest.Category}).toArray(function (err, crn_cat_exist) {
                                    if ((crn_cat_exist.length === 0 && objRequest.hasOwnProperty('CRN') && objRequest.CRN !== "") ||
                                            ((crn_cat_exist.length > 0 || crn_cat_exist.length === 0) && (objRequest.CRN === "" || objRequest.CRN === undefined))) {
                                        //if (dbTicket1.length > 0) {
                                        //   debugger;
                                        //}
                                        var todayDate = new Date();

                                        var NewTicket_Id;

                                        if (Ticket_id === "") {
                                            //create new ticket id.
                                            NewTicket_Id = objRequest["Product"].substring(0, 2).toString().toUpperCase() + objRequest["Category"].substring(0, 2).toString().toUpperCase() + autoIndex;
                                            isticket_created = 1;
                                        } else {
                                            NewTicket_Id = Ticket_id;
                                            isticket_created = 0;
                                        }
                                        tickets.findOne({"Ticket_Id": Ticket_id}, {sort: {"Modified_On": -1}}, function (err, dbticket) {
                                            console.log(dbticket);
                                            var arg = {};

                                            arg = {
                                                Ticket_Id: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                                Product: dbticket !== null ? dbticket['Product'] : product_id,
                                                Category: dbticket !== null ? dbticket["Category"] : objRequest["Category"],
                                                SubCategory: dbticket !== null ? dbticket["SubCategory"] : objRequest["SubCategory"],
                                                Proposal_Error_Msg: objRequest["Proposal_Error_Msg"],
                                                From: dbticket !== null ? dbticket["From"] : (Is_Customer === true ? objRequest["Created_By"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') '),
                                                To: dbticket !== null ? dbticket["To"] : (Is_Customer === true ? objRequest["Created_By"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') '),
                                                Status: objRequest["Status"] === "0" ? dbticket["Status"] : objRequest["Status"],
                                                Created_By: dbticket !== null ? dbticket["Created_By"] : (Is_Customer === true ? objRequest["Created_By"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') '),
                                                Modified_By: agentdetails.Emp_Id,
                                                Created_On: dbticket !== null ? dbticket["Created_On"] : todayDate,
                                                Modified_On: todayDate,
                                                CRN: dbticket !== null ? dbticket["CRN"] : objRequest["CRN"] - 0,
                                                Mobile_No: dbticket !== null ? dbticket["Mobile_No"] : objRequest["Mobile_No"],
                                                Vehicle_No: dbticket !== null ? dbticket["Vehicle_No"] : objRequest["Vehicle_No"],
                                                Remark: objRequest["Remark"],
                                                ss_id: dbticket !== null ? dbticket["ss_id"] : agentdetails.Emp_Id,
                                                SubCategory_level2: objRequest["SubCategory_level2"],
                                                CRN_owner: dbticket !== null ? dbticket["CRN_owner"] : objRequest["CRN_owner"],
                                                IsActive: 1,
                                                fba_id: dbticket !== null ? dbticket["fba_id"] : agentdetails.FBA_ID,
                                                CRN_fba_id: dbticket !== null ? dbticket["CRN_fba_id"] : objRequest["CRN_fba_id"],
                                                channel: dbticket !== null ? dbticket["channel"] : objRequest["channel"],
                                                subchannel: dbticket !== null ? dbticket["subchannel"] : objRequest["subchannel"],
                                                UploadFiles: dbticket !== null ? dbticket["UploadFiles"] : "",
                                                Ticket_Code: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                                Agent_Email_Id: Is_Customer === true ? objRequest["Agent_Email"] : offical_email_id,
                                                Transaction_On: dbticket !== null ? dbticket["Transaction_On"] : objRequest["Transaction_On"],
                                                Source: objRequest["Source"],
                                                RM_Email_Id: dbticket !== null ? dbticket["RM_Email_Id"] : objRequest["rm_email_id"]
                                            };
                                            var filecount = 0;
                                            if (dbticket !== null) {
                                                var objticket = {};
                                                objticket['IsActive'] = 0;

                                                tickets.updateMany({'Ticket_Id': NewTicket_Id}, {$set: {"IsActive": 0}}, function (err, numAffected) {
                                                    if (err) {
                                                        res.json({Msg: 'Ticket_Not_Saved', Details: err});
                                                    } else {
                                                        //res.json({Msg: 'Success_Created', Details: numAffected});
                                                    }
                                                });

                                                for (var j = 1 in dbticket["UploadFiles"]) {
                                                    if (dbticket["UploadFiles"][j] !== null) {
                                                        filecount = dbticket["UploadFiles"]["file_count"];
                                                    }
                                                }
                                            }

                                            tickets.insertOne(arg, function (err, res1) {
                                                if (err)
                                                    throw err;
                                                if (res1["insertedCount"] > 0) {

                                                    //user_details
                                                    var userdetails = {
                                                        data: {
                                                            "Ticket_id": NewTicket_Id,
                                                            "isticket_created": isticket_created,
                                                            "Modified_By": agentdetails.Emp_Id
                                                        },
                                                        headers: {
                                                            "Content-Type": "application/json"
                                                        }
                                                    };

                                                    var url_api = config.environment.weburl + '/tickets/user_details';
                                                    var Client = require('node-rest-client').Client;
                                                    var client = new Client();
                                                    //client.post(url_api, userdetails, function (data, response) {
                                                    //if (data.Status === "error") {
                                                    //throw err;
                                                    //} else {
                                                    //console.log(response);
                                                    //Upload documnent
                                                    if (file_obj.length > 0 && objRequest["Source"] === "policyboss") {
                                                        var objfile = {
                                                            "file_1": null,
                                                            "file_2": null,
                                                            "file_3": null,
                                                            "file_4": null};
                                                        var objdata = {'UploadFiles': objfile};
                                                        if (!fs.existsSync(appRoot + "/tmp/ticketing/" + NewTicket_Id)) {
                                                            fs.mkdirSync(appRoot + "/tmp/ticketing/" + NewTicket_Id);
                                                        }

                                                        var doc_prefix = "";
                                                        for (var i in file_obj) {
                                                            var data = file_obj[i].replace(/^data:image\/\w+;base64,/, "");
                                                            if (data === "") {
                                                                res1.json({'msg': 'Something Went Wrong'});
                                                            } else {
                                                                if (i == 0) {
                                                                    doc_prefix = objRequest["doc_prefix"] !== "" && objRequest["doc_prefix"] !== undefined ? objRequest["doc_prefix"] + "_" : "";
                                                                }
                                                                var buf = new Buffer(data, 'base64');
                                                                fs.writeFile(path + '/' + NewTicket_Id + '/' + doc_prefix + NewTicket_Id + '_file_' + (parseInt(filecount) + 1) + '.' + file_ext[i], buf);
                                                                objdata.UploadFiles["file_" + (parseInt(filecount) + 1)] = config.environment.downloadurl + '/ticketing/' + NewTicket_Id + '/' + doc_prefix + NewTicket_Id + '_file_' + (parseInt(filecount) + 1) + '.' + file_ext[i];
                                                                objdata.UploadFiles["file_count"] = (parseInt(filecount) + 1);
                                                                //fs.writeFile(path + '/' + NewTicket_Id + '_file_' + i + '.' + file_ext[i], buf);
                                                                //objdata.UploadFiles[i] = config.environment.weburl + '/tmp/ticketing/' + NewTicket_Id + '_file_' + i + '.' + file_ext[i];
                                                            }
                                                        }
                                                        tickets.findAndModify({'Ticket_Id': NewTicket_Id}, [["Modified_On", -1]], {$set: objdata}, {}, function (err, numAffected) {
                                                            console.log('UserDataUpdated', err, numAffected);
                                                            if (err) {
                                                                objdata['Msg'] = err;
                                                            } else {
                                                                objdata['Msg'] = numAffected;

                                                            }
                                                        });
                                                    } else {
                                                        //movefilelocation(req.files.uploads, NewTicket_Id, objRequest["doc_prefix"]);
                                                    }

                                                    var Insurer_name = objRequest["Insurer_Id"] !== "" ? const_arr_insurer["Insurer_" + objRequest["Insurer_Id"]] : "";
                                                    //Send Mail
                                                    var Email = require('../models/email');
                                                    var objModelEmail = new Email();
                                                    var environment = config.environment.name === 'Production' ? "" : "QA-";
                                                    if (objRequest["CRN"] !== "" || objRequest["CRN"] !== null || objRequest["CRN"] !== undefined) {
                                                        var subject = "[TICKET] " + NewTicket_Id + " - " + objRequest["CRN"] + " " + environment + objRequest["Product"] + '-' + objRequest["Category"] + '-' + objRequest["SubCategory"];
                                                    } else {
                                                        var subject = "[TICKET] " + NewTicket_Id + " " + environment + objRequest["Product"] + '-' + objRequest["Category"] + '-' + objRequest["SubCategory"];
                                                    }
                                                    var rm_emailid = dbticket !== null ? dbticket["RM_Email_Id"] : objRequest["rm_email_id"];
                                                    var cc = 'techsupport@policyboss.com';
                                                    cc += rm_emailid !== "" ? ";" + rm_emailid : '';
                                                    var mail_content = '<html><body>' +
                                                            'Ticket is created.' +
                                                            '<p></p>Ticket No - ' + NewTicket_Id +
                                                            '<p></p>CRN  - ' + objRequest["CRN"] +
                                                            '<p></p>Status  - ' + objRequest["Status"] +
                                                            '<p></p>Product  - ' + objRequest["Product"] +
                                                            '<p></p>Remarks  - ' + objRequest["Remark"] +
                                                            '<p></p>You will be notified once ticket is resolved.' +
                                                            '<p></p>You can check ticket status in my ticket section.' +
                                                            '</body></html>';
                                                    var email_id;
                                                    if (Is_Customer) {
                                                        email_id = objRequest["Agent_Email"];
                                                    } else {
                                                        email_id = agentdetails.Email_Id;
                                                    }
                                                    if (objRequest["Category"] === "Quotation") {
                                                        email_id += ";quotesupport@policyboss.com";
                                                    }
                                                    if (post_sale.indexOf(objRequest["Category"]) >= 0) {
                                                        if (agentdetails.Email_Id !== "jyoti.sharma@policyboss.com") {
                                                            email_id += ";jyoti.sharma@policyboss.com";
                                                        }

                                                        cc += ";susanna.lobo@landmarkinsurance.in";
                                                    }
                                                    if (email_id !== null || email_id !== undefined) {
                                                        objModelEmail.send('noreply@policyboss.com', email_id, subject, mail_content, cc, config.environment.notification_email, objRequest["CRN"]);
                                                    }

                                                    if (Ticket_id === "") {
                                                        res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is created.', 'Created_On': moment(todayDate).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Insurer_Name': Insurer_name, 'Product_Name': objRequest['Product']});
                                                    } else {
                                                        res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is updated.', 'Created_On': moment(todayDate).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Insurer_Name': Insurer_name, 'Product_Name': objRequest['Product']});
                                                    }

                                                    //}
                                                    //});
                                                    //user_details end
                                                } else {
                                                    res.json({'Status': "Fail", 'Msg': "No Ticket raised"});
                                                }
                                                //console.log(res);
                                            });
                                        });
                                    } else {
                                        res.json({'Status': "exist", 'Msg': 'Ticket for this CRN under this category is already created'});
                                    }
                                });
                            }
                        });
                    });
                    //res.json({'Status': "Inserted Succefully"});
                } else {
                    objRequest['agent'] = 'NA';
                }
            });
        }
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});

router.post('/admin_raiseticket', LoadSession1, function (req, res, next) {
    try {
        var product_id = 0;
        var fields = req.fields;
        var files = req.files;
        var objRequest;
        objRequest = fields;

        var Ticket_id = objRequest["Ticket_Id"];
        if (objRequest["Product"] === "CAR") {
            product_id = 1;
        } else if (objRequest["Product"] === "BIKE") {
            product_id = 10;
        } else if (objRequest["Product"] === "HEALTH") {
            product_id = 2;
        } else if (objRequest["Product"] === "CV") {
            product_id = 12;
        }

        //console.log(file_obj);
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            if (err)
                throw err;
            var autoIncrement = require("mongodb-autoincrement");
            autoIncrement.getNextSequence(db, 'tickets', function (err1, autoIndex) {
                if (err1) {
                    throw err1;
                } else {
                    var tickets = db.collection('tickets');
                    var todayDate = new Date();
                    var isticket_created;
                    var NewTicket_Id;
                    var offical_email_id;
                    if (req.obj_session.user.hasOwnProperty('profile') && req.obj_session.user.profile.hasOwnProperty('Official_Email') && req.obj_session.user.profile.Official_Email) {
                        offical_email_id = req.obj_session.user.profile.Official_Email;
                    } else {
                        offical_email_id = req.obj_session.user.email;
                    }
                    tickets.find({"CRN": objRequest.CRN, "Category": objRequest.Category}).toArray(function (err, crn_cat_exist) {
                        if (err) {
                            throw err;
                        } else {
                            if ((crn_cat_exist.length === 0 && objRequest.CRN !== "") || ((crn_cat_exist.length > 0 || crn_cat_exist.length === 0) && objRequest.CRN === "")) {
                                if (Ticket_id === "") {
                                    //create new ticket id.
                                    NewTicket_Id = objRequest["Product"].substring(0, 2).toString().toUpperCase() + objRequest["Category_Name"].substring(0, 2).toString().toUpperCase() + autoIndex;
                                    isticket_created = 1;
                                } else {
                                    NewTicket_Id = Ticket_id;
                                    isticket_created = 0;
                                }
                                tickets.findOne({"Ticket_Id": Ticket_id}, {sort: {"Modified_On": -1}}, function (err, dbticket) {
                                    //console.log(dbticket);
                                    var arg = {};
                                    arg = {
                                        Ticket_Id: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                        Product: dbticket !== null ? dbticket['Product'] : product_id,
                                        Category: dbticket !== null ? dbticket["Category"] : objRequest["Category_Name"],
                                        SubCategory: dbticket !== null ? dbticket["SubCategory"] : objRequest["SubCategory"],
                                        From: dbticket !== null ? dbticket["From"] : req.obj_session.user.fullname + "(" + req.obj_session.user.uid + ")",
                                        To: dbticket !== null ? dbticket["To"] : req.obj_session.user.fullname + "(" + req.obj_session.user.uid + ")",
                                        Status: objRequest["Status"] === "0" ? dbticket["Status"] : objRequest["Status"],
                                        Created_By: dbticket !== null ? dbticket["Created_By"] : req.obj_session.user.fullname,
                                        Modified_By: req.obj_session.user.ss_id,
                                        Created_On: dbticket !== null ? dbticket["Created_On"] : todayDate,
                                        Modified_On: todayDate,
                                        CRN: dbticket !== null ? dbticket["CRN"] : objRequest["CRN"],
                                        Mobile_No: dbticket !== null ? dbticket["Mobile_No"] : objRequest["Mobile_No"],
                                        Vehicle_No: dbticket !== null ? dbticket["Vehicle_No"] : objRequest["Vehicle_No"],
                                        Remark: objRequest["txt_remark"],
                                        ss_id: req.obj_session.user.ss_id,
                                        CRN_owner: dbticket !== null ? dbticket["CRN_owner"] : objRequest["CRN_owner"],
                                        IsActive: 1,
                                        fba_id: req.obj_session.user.fba_id,
                                        CRN_fba_id: dbticket !== null ? dbticket["CRN_fba_id"] : objRequest["CRN_fba_id"],
                                        channel: dbticket !== null ? dbticket["channel"] : objRequest["channel"],
                                        subchannel: dbticket !== null ? dbticket["subchannel"] : objRequest["subchannel"],
                                        //UploadFiles: dbticket !== null ? dbticket["UploadFiles"] : "",
                                        Modified_By_Name: req.obj_session.user.fullname,
                                        Ticket_Code: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                        Agent_Email_Id: dbticket !== null ? dbticket['Agent_Email_Id'] : offical_email_id,
                                        Transaction_On: dbticket !== null ? dbticket["Transaction_On"] : objRequest["Transaction_On"],
                                        Source: objRequest["Source"],
                                        RM_Email_Id: objRequest["rm_email_id"],
                                        RM_Agent_Name: dbticket !== null ? dbticket["RM_Agent_Name"] : objRequest["rm_agent_name"],
                                        Insurer_Id: objRequest["insurer_id"] !== "" ? parseInt(objRequest["insurer_id"]) : ""
                                    };

                                    tickets.insertOne(arg, function (err, res1) {
                                        if (err)
                                            throw err;
                                        if (res1["insertedCount"] > 0) {
                                            //user_details

                                            var user_details = db.collection('user_details');
                                            if (dbticket === null) {
                                                autoIncrement.getNextSequence(db, 'user_details', function (err1, autoIndex) {
                                                    var arg = {
                                                        Ticket_Id: autoIndex,
                                                        Ticket_code: NewTicket_Id,
                                                        Product: product_id,
                                                        Category: objRequest["Category_Name"],
                                                        SubCategory: objRequest["SubCategory"],
                                                        From: req.obj_session.user.fullname + "(" + req.obj_session.user.uid + ")",
                                                        To: req.obj_session.user.fullname + "(" + req.obj_session.user.uid + ")",
                                                        Status: objRequest["Status"],
                                                        Created_By: req.obj_session.user.fullname,
                                                        Created_On: todayDate,
                                                        Modified_By: req.obj_session.user.ss_id,
                                                        Modified_On: todayDate,
                                                        CRN: objRequest["CRN"],
                                                        Mobile_No: objRequest["Mobile_No"],
                                                        Vehicle_No: objRequest["Vehicle_No"],
                                                        Remark: objRequest["txt_remark"],
                                                        ss_id: req.obj_session.user.ss_id,
                                                        CRN_owner: objRequest["CRN_owner"],
                                                        fba_id: req.obj_session.user.fba_id,
                                                        CRN_fba_id: objRequest["CRN_fba_id"],
                                                        channel: objRequest["channel"],
                                                        subchannel: objRequest["subchannel"],
                                                        Agent_Email_Id: offical_email_id,
                                                        Transaction_On: objRequest["Transaction_On"],
                                                        Source: objRequest["Source"],
                                                        RM_Email_Id: objRequest["rm_email_id"],
                                                        RM_Agent_Name: objRequest["rm_agent_name"] !== "" ? objRequest["rm_agent_name"] : "",
                                                        Insurer_Id: objRequest["insurer_id"] !== "" ? parseInt(objRequest["insurer_id"]) : ""
                                                    };
                                                    user_details.insert(arg, function (err, res1) {
                                                        if (err) {
                                                            throw err;
                                                        } else {
                                                            console.log('user_detailsInsert', err, res1);
                                                            //                                                            res.json({'Status': 'Inserted'});
                                                        }
                                                    });
                                                });
                                            } else {
                                                var objticket = {
                                                    "Modified_By": objRequest["Modified_By"] - 0,
                                                    "Status": dbticket['Status'],
                                                    "Modified_On": todayDate,
                                                    "Remark": objRequest["txt_remark"]
                                                };
                                                user_details.update({'Ticket_code': Ticket_id}, {$set: objticket}, function (err, numAffected) {
                                                    console.log('user_detailsUpdate', err, numAffected);
                                                    //                                                    res.json({'Status': 'Updated'});
                                                });
                                            }

                                            //Upload documnent
                                            var objfile = {
                                                "file_1": null,
                                                "file_2": null,
                                                "file_3": null,
                                                "file_4": null};
                                            var objdata = {'UploadFiles': objfile};
                                            if (files !== null) {
                                                if (!fs.existsSync(appRoot + "/tmp/ticketing/" + NewTicket_Id)) {
                                                    fs.mkdirSync(appRoot + "/tmp/ticketing/" + NewTicket_Id);
                                                }

                                                var pdf_file_name = "";

                                                for (var i in files) {
                                                    var doc_prefix = objRequest["doc_prefix"] !== "" ? objRequest["doc_prefix"] + "_" : "";
                                                    pdf_file_name = i + "." + files[i].name.split('.')[1];
                                                    var pdf_sys_loc_horizon = appRoot + "/tmp/ticketing/" + NewTicket_Id + "/" + doc_prefix + req.obj_session.user.ss_id + "_" + pdf_file_name;
                                                    var pdf_web_path_horizon = config.environment.downloadurl + "/ticketing/" + NewTicket_Id + "/" + doc_prefix + req.obj_session.user.ss_id + "_" + pdf_file_name;
                                                    objdata.UploadFiles[i] = pdf_web_path_horizon;
                                                    var oldpath = files[i].path;
                                                    fs.readFile(oldpath, function (err, data) {
                                                        if (err)
                                                        {
                                                            console.error('Read', err);
                                                        }
                                                        console.log('File read!');

                                                        // Write the file
                                                        fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                                                            if (err)
                                                            {
                                                                console.error('Write', err);
                                                            }
                                                        });
                                                        // Delete the file
                                                        fs.unlink(oldpath, function (err) {
                                                            if (err)
                                                                throw err;
                                                            console.log('File deleted!');
                                                        });
                                                    });
                                                    sleep(1000);
                                                }
                                                tickets.update({'Ticket_Id': NewTicket_Id}, {$set: objdata}, function (err, numAffected) {
                                                    console.log('TicketUpdated', err, numAffected);
                                                    if (err) {
                                                        objdata['Msg'] = err;
                                                    } else {
                                                        objdata['Msg'] = numAffected;
                                                    }
                                                });
                                            }

                                            var product_name;
                                            if (product_id === 1) {
                                                product_name = "CAR";
                                            } else if (product_id === 10) {
                                                product_name = "BIKE";
                                            } else if (product_id === 2) {
                                                product_name = "HEALTH";
                                            } else if (product_id === 12) {
                                                product_name = "CV";
                                            }

                                            var Insurer_Name = objRequest["insurer_id"] !== "" ? const_arr_insurer["Insurer_" + objRequest["insurer_id"]] : "";

                                            var Email = require('../models/email');
                                            var objModelEmail = new Email();
                                            var environment = config.environment.name === 'Production' ? "" : "QA-";
                                            var cc = "";

                                            var to = "";
                                            var Insurer_Name = objRequest["insurer_id"] !== "" ? const_arr_insurer["Insurer_" + objRequest["insurer_id"]] : "";
                                            if (offical_email_id !== null || offical_email_id !== undefined) {
                                                to = offical_email_id;
                                            }
                                            if (emailtocc.hasOwnProperty(objRequest["Category_Name"])) {
                                                if (objRequest["Category_Name"] === "Product Input Page") {
                                                    if (emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["to"] !== "")
                                                    {
                                                        to += "," + emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["to"];
                                                    }
                                                    if (emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["cc"] !== "")
                                                    {
                                                        cc += objRequest["rm_email_id"] !== "" ? "," + objRequest["rm_email_id"] : '' + emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["cc"];
                                                    }
                                                } else {

                                                    if (emailtocc[objRequest["Category_Name"]][0]["to"] !== "")
                                                    {
                                                        to += "," + emailtocc[objRequest["Category_Name"]][0]["to"];
                                                    }
                                                    if (emailtocc[objRequest["Category_Name"]][0]["cc"] !== "")
                                                    {
                                                        cc += objRequest["rm_email_id"] !== "" ? "," + objRequest["rm_email_id"] : '' + emailtocc[objRequest["Category_Name"]][0]["cc"];
                                                    }
                                                }
                                            }

                                            if (objRequest["CRN"] !== "" && objRequest["CRN"] !== null && objRequest["CRN"] !== undefined) {
                                                var subject = "[TICKET] " + NewTicket_Id + "-" + objRequest["CRN"] + "  " + environment + " " + product_name + '-' + objRequest["Category_Name"] + '-' + objRequest["SubCategory"];
                                            } else {
                                                var subject = "[TICKET] " + NewTicket_Id + "  " + environment + " " + product_name + '-' + objRequest["Category_Name"] + '-' + objRequest["SubCategory"];
                                            }
                                            var mail_content = '<html><body>' +
                                                    'Ticket is created.' +
                                                    '<p></p>Ticket No - ' + NewTicket_Id +
                                                    '<p></p>CRN  - ' + objRequest["CRN"] +
                                                    '<p></p>Status  - ' + objRequest["Status"] +
                                                    '<p></p>Product  - ' + product_name +
                                                    '<p></p>Remarks  - ' + objRequest["txt_remark"] +
                                                    '<p></p>You will be notified once ticket is resolved.' +
                                                    '<p></p>You can check ticket status in my ticket section.' +
                                                    '</body></html>';
                                            if (offical_email_id !== null || offical_email_id !== undefined) {
                                                objModelEmail.send('noreply@policyboss.com', to, subject, mail_content, cc, config.environment.notification_email, objRequest["CRN"]);
                                            }

                                            if (Ticket_id === "") {
                                                res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is created.', 'Created_On': moment(objRequest["Created_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), "Product_Name": product_name, 'Insurer_Name': Insurer_Name});
                                            } else {
                                                res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is updated.', 'Created_On': moment(objRequest["Created_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), "Product_Name": product_name, 'Insurer_Name': Insurer_Name});
                                            }

                                        } else {
                                            //console.log(response);
                                        }

                                        ////console.log(res);
                                    });
                                });
                            } else {
                                res.json({'Status': "exist", 'Msg': 'Ticket for this CRN under this category is already created'});
                            }
                        }
                    });
                }
            });
        });

        //res.json({'Status': "Inserted Succefully"});
    } catch (err) {
        console.log(err);
        console.error("catch" + err);
        return res.send(err.stack);
    }
});
router.get('/tickets/getCRNdetails/:CRN', function (req, res) {
    try {
        var CRN = req.params['CRN'];
        var user_data = require('../models/user_data');
        var ObjArrResponse = [];
        var objResponse = {};

        //MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        user_data.find({'PB_CRN': CRN}).exec(function (err, dbUsers) {
            if (err)
                throw err;

            if (dbUsers.length > 0) {
                for (var i in dbUsers) {
                    var user_data = dbUsers[i]._doc;

                    objResponse['Product'] = user_data['Product_Id'];
                    objResponse['Insurer_Id'] = user_data['Insurer_Id'] === undefined ? "" : user_data['Insurer_Id'];
                    objResponse['Last_Status'] = user_data['Last_Status'];
                    objResponse['Vehicle_No'] = user_data['Premium_Request']['registration_no'];
                    objResponse['Mobile_No'] = user_data['Premium_Request']['mobile'];
                    objResponse['ss_id'] = user_data['Premium_Request']['ss_id'];
                    objResponse['fba_id'] = user_data['Premium_Request']['fba_id'];
                    objResponse['subchannel'] = user_data['Premium_Request']['posp_sources'] - 0 === 0 ? user_data['Premium_Request']['subchannel'] !== "" && user_data['Premium_Request']['subchannel'] !== undefined && user_data['Premium_Request']['subchannel'] !== null ? user_data['Premium_Request']['subchannel'] : get_search_source(user_data) : get_search_source(user_data);
                    objResponse['channel'] = user_data['Premium_Request']['posp_sources'] - 0 === 0 ? user_data['Premium_Request']['channel'] !== "" && user_data['Premium_Request']['channel'] !== undefined && user_data['Premium_Request']['channel'] !== null ? user_data['Premium_Request']['channel'] : get_channel(objResponse['subchannel']) : get_channel(objResponse['subchannel']);
                    objResponse['transaction_on'] = user_data['Created_On'];
                    objResponse['Customer_Name'] = user_data['Premium_Request']['first_name'] + ' ' + user_data['Premium_Request']['middle_name'] + ' ' + user_data['Premium_Request']['last_name'];
                    objResponse['rm_email_id'] = user_data['Premium_Request']['posp_reporting_email_id'] !== 0 ? user_data['Premium_Request']['posp_reporting_email_id'] : "";
                    objResponse['rm_agent_name'] = user_data['Premium_Request']['posp_reporting_agent_name'] !== "" && user_data['Premium_Request']['posp_reporting_agent_name'] !== undefined ? user_data['Premium_Request']['posp_reporting_agent_name'] : "";
                }
                ObjArrResponse.push(objResponse);
            }
            res.json(ObjArrResponse);
        });
        //});
    } catch (err) {
        console.log(err);
        return res.send(err.stack);
    }
});

router.post('/rsa_data', function (req, res, next) {
    try {
        let sync_contact_id = (req.body.hasOwnProperty('sync_contact_id')) ? req.body['sync_contact_id'] - 0 : 0;
        let ipaddress = (req.body.hasOwnProperty('ip_address')) ? req.body['ip_address'] : "0.0.0.0";
        let reg_no = (req.body.hasOwnProperty('reg_no')) ? req.body['reg_no'] : "";
        let name = (req.body.hasOwnProperty('name')) ? req.body['name'] : "";
        let mobile_no = (req.body.hasOwnProperty('mobile_no')) ? req.body['mobile_no'] : "";
        let email = (req.body.hasOwnProperty('email')) ? req.body['email'] : "";
        let state_city = (req.body.hasOwnProperty('state_city')) ? req.body['state_city'] : "";
        obj_RsaData = {
            "sync_contact_id": sync_contact_id,
            "ipaddress": ipaddress,
            "reg_no": reg_no,
            "name": name,
            "mobile_no": mobile_no,
            "email": email,
            "state_city": state_city
        };
        let obj_req = {
            "rsa_request": {
                "TransactionID": "12345",
                "Token": "globsjks_%qwrwr",
                "UserID": "Z2F1cmF2LmFyb3JhQGdsb2JhbGFzc3VyZS5jb20=",
                "Password": "QXNzaXN0QDEyMw==",
                "CustomerName": name,
                "CustomerEmail": email,
                "MobileNo": mobile_no,
                "RegistrationNo": reg_no,
                "State": state_city.split('_')[0].replace(/-/g, ' '),
                "City": state_city.split('_')[1].replace(/-/g, ' ')
            },
            "is_rsa_issued": 0
        };
        Sync_Contact.update({'sync_contact_id': obj_RsaData['sync_contact_id']}, {$set: obj_req}, function (err, numAffected) {
            console.log(err);
        });
        var args = {
            data: obj_req['rsa_request'],
            headers: {
                "Content-Type": "application/json"
            }
        };
        console.log(obj_req['rsa_request']);
        //sync_contact_id = sync_contact_id;
        var url_api = 'https://uatrsa.globalassure.com/API/RSA/APISaveCertificate';
        var Client = require('node-rest-client').Client;
        var client = new Client();
        client.post(url_api, args, function (data, response) {
            console.log(data);
            let obj_res = {
                "rsa_response": {},
                "is_rsa_issued": 0
            };
            obj_res['rsa_response'] = data;
            if (data.status === "Success") {
                obj_res['is_rsa_issued'] = 1;
                Sync_Contact.update({'sync_contact_id': obj_RsaData['sync_contact_id']}, {$set: obj_res}, function (err, numAffected) {
                    console.log(err);
                });
                obj_res['err'] = 0;
                var pdf_file_name = "RSA_" + data.CertificateNo + ".pdf"
                var pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pdf_file_name;
                var pdf_web_path_portal = config.environment.downloadurl + config.pb_config.pdf_web_loc + pdf_file_name;
                var binary = new Buffer(data.CertificateFile, 'base64');
                fs.writeFileSync(pdf_sys_loc_horizon, binary);
                obj_res['rsa_response']['CertificateFile'] = pdf_web_path_portal;
                var Email = require('../models/email');
                var objModelEmail = new Email();
                var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-PolicyBoss.com - RSA Certificate Number:' + data.CertificateNo;
                email_body = '<html><body><p>Hi,</p><BR/><p>Please find the attachment of RSA Certificate File.</p>'
                        + '<BR><p>Certificate Number : ' + data.CertificateNo + '</p><BR><p>RSA Certificate File: ' + pdf_web_path_portal + ' </p></body></html>';
                var arrTo = ['narayan.tilve@Kotak.com', 'prathmesh.hode@Kotak.com', 'kgi.operations@Kotak.com', 'nikita.naik@Kotak.com'];
                var arrCc = ['abhijeet.pendharkar@Kotak.com', 'atish.sonawane@Kotak.com', 'pranab.chavan@kotak.com', 'Jayesh.Kerkar@kotak.com', 'rohan.talla@Kotak.com', 'gaurav.dhuri@Kotak.com'];
                if (config.environment.name === 'Production') {
                    //objModelEmail.send('noreply@landmarkinsurance.co.in', arrTo.join(','), sub, email_body, arrCc.join(','), config.environment.notification_email, ''); //UAT
                } else {
                    objModelEmail.send('noreply@landmarkinsurance.co.in', obj_RsaData['email'], sub, email_body, '', '', '');
                }
            } else {
                Sync_Contact.update({'sync_contact_id': obj_RsaData['sync_contact_id']}, {$set: obj_res}, function (err, numAffected) {
                    console.log(err);
                });
                obj_res['err'] = 1;
            }
            res.send(obj_res);
            ////Sync_Contact.update({'sync_contact_id': sync_contact_id_new}, {$set: obj_is_rsa_camp}, function (err, numAffected) {
            //console.log(data);
            //});
        });
    } catch (e) {
        let obj_res = {
            'err': 1,
            'err_list': e.stack
        };
        res.send(obj_res);
    }

});

router.post('/get_sync_all_data', LoadSession, function (req, res) {
    try {

        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'mobileno name Created_On ss_id',
            sort: {'Created_On': 1},
            //populate: null,
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

        }
        var filter = obj_pagination.filter;
        var ObjRequest = req.body;

        filter[ "ss_id"] = ObjRequest.ss_id - 0;

        if (req.body.mobileno !== undefined) {
            filter["mobileno"] = req.body.mobileno;
        }
        var sync_contact_erp_data = require('../models/sync_contact');
        console.error('HorizonSaleSearch', filter, req.body);
        sync_contact_erp_data.paginate(filter, optionPaginate).then(function (user_datas) {
            //console.error('UserDataSearch', filter, optionPaginate, user_datas);
            res.json(user_datas);
        });
    } catch (e) {
        console.error(e);
        res.json({"Msg": "error"});
    }
});
router.post('/get_sync_match_data', LoadSession, function (req, res) {
    try {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'mobile name policy_expiry_date make model erp_qt rto_city registration_no Created_On',
            sort: {'Created_On': 1},
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

        }
        var filter = obj_pagination.filter;

        var ObjRequest = req.body;

        filter["ss_id"] = ObjRequest.ss_id - 0;
        filter["fba_id"] = ObjRequest.fba_id - 0;
        filter["Is_Lead_Created"] = 1;

        if (req.body.mobile !== undefined) {
            filter["mobile"] = req.body.mobile;
        }
        var sync_contact_erp_data = require('../models/sync_contact_erp_data');
        console.error('HorizonSaleSearch', filter, req.body);
        sync_contact_erp_data.paginate(filter, optionPaginate).then(function (user_datas) {
            //console.error('UserDataSearch', filter, optionPaginate, user_datas);
            res.json(user_datas);
        });
    } catch (e) {
        console.error(e);
        res.json({"Msg": "error"});
    }
});

router.post('/ticket/search11', function (req, res) {
    try
    {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'Ticket_code Product Category SubCategory From Created_On Modified_On Status CRN Remark Ageing Close_Date Agent_Email_Id',
            sort: {'Created_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

        }
        var Condition = obj_pagination.filter;
        var objRequest = req.body;
        var objResponse = [];
        var mysort = "";
        var roleType = objRequest.role_type;
        if (objRequest["Category"] !== "") {
            objCategory = (objRequest.Category).split(',');
        }
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(objRequest["from_date"] === "" ? today : objRequest["from_date"]).format("YYYY-MM-D");
        var toDate = moment(objRequest["to_date"] === "" ? today : objRequest["to_date"]).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        console.log('DateRange', 'from', dateFrom, 'to', dateTo);

        if (objRequest["search_by"] !== "CurrentDate") {
            if (objRequest["search_by"] === "ticketid") {
                //Condition["Ticket_Id"] = objRequest["search_byvalue"];
                Condition["Ticket_Id"] = new RegExp(objRequest["search_byvalue"], 'i');
            } else if (objRequest["search_by"] === "CRN") {
                Condition["CRN"] = objRequest["search_byvalue"];
            } else {
                if (roleType === "tickets") {
                    Condition = {"ss_id": objRequest.ss_id - 0,
                        "Created_On": {$gte: dateFrom, $lt: dateTo}
                    };
                } else {
                    Condition = {"Category": {$in: objCategory},
                        "Modified_On": {$gte: dateFrom, $lt: dateTo}
                    };
                }
                if (objRequest["status"] !== "") {
                    Condition["Status"] = objRequest["status"];
                }
            }
            mysort = {Modified_On: -1};
        } else {
            if (roleType === "tickets") {
                Condition = {"ss_id": objRequest.ss_id - 0,
                    "Created_On": {$gte: dateFrom, $lt: dateTo}
                };
            } else {
                Condition = {"Category": {$in: objCategory},
                    "Modified_On": {$gte: dateFrom, $lt: dateTo}
                };
            }
            if (objRequest["status"] !== "") {
                Condition["Status"] = objRequest["status"];
            }
        }
        //var tickets = require('../models/ticket');
        var tickets = require('../models/user_details');
        console.error('HorizonTicketSearch', Condition, req.body);
        tickets.paginate(Condition, optionPaginate).then(function (dbTicket) {
            console.log(dbTicket);
            for (var i in dbTicket.docs) {
                var productname = "";
                // var Create;
                if (dbTicket.docs[i]["Product"] === 1) {
                    productname = "CAR";
                } else if (dbTicket.docs[i]["Product"] === 10) {
                    productname = "BIKE";
                } else if (dbTicket.docs[i]["Product"] === 2) {
                    productname = "HEALTH";
                }
                var Action_name = "";
                if (objRequest["Category"] === "") {
                    Action_name = "Action";
                } else {
                    if (dbTicket.docs[i]["Status"] === "Open" && objRequest["role_type"] !== "tickets") {
                        Action_name = "Start";
                    } else {
                        Action_name = "Action";
                    }
                }

                var Obj = {
                    "Ticket_Id": dbTicket.docs[i]['Ticket_code'],
                    "Product": productname,
                    "Category": dbTicket.docs[i]['Category'],
                    "SubCategory": dbTicket.docs[i]['SubCategory'],
                    "Status": dbTicket.docs[i]['Status'],
                    "Created_By": dbTicket.docs[i]['Created_By'],
                    "From": dbTicket.docs[i]['From'],
                    "Mobile_No": dbTicket.docs[i]['Mobile_No'] === undefined ? "" : dbTicket.docs[i]['Mobile_No'],
                    "Vehicle_No": dbTicket.docs[i]['Vehicle_No'] === undefined ? "" : dbTicket.docs[i]['Vehicle_No'],
                    "Remark": dbTicket.docs[i]['Remark'] === undefined ? "" : dbTicket.docs[i]['Remark'],
                    "CRN": dbTicket.docs[i]['CRN'],
                    "Created_On_UI": moment(dbTicket.docs[i]['Created_On']).format("DD/MM/YYYY"),
                    "Created_On": dbTicket.docs[i]['Created_On'],
                    "SubCategory_level2": dbTicket.docs[i]['SubCategory_level2'],
                    "ss_id": dbTicket.docs[i]['ss_id'],
                    "Action_name": Action_name,
                    "Modified_On_UI": moment(dbTicket.docs[i]['Modified_On']).format("DD/MM/YYYY"),
                    "Modified_On": dbTicket.docs[i]['Modified_On'],
                    "UploadFiles": dbTicket.docs[i]['UploadFiles'],
                    "Agent_Email_Id": dbTicket.docs[i]['Agent_Email_Id'],
                    "Ageing": dbTicket.docs[i]['Status'] === "Resolved" ? parseInt((dbTicket.docs[i]['Modified_On'] - dbTicket.docs[i]['Created_On']) / (1000 * 60 * 60 * 24)) : "",
                    "Close_Date": dbTicket.docs[i]['Status'] === "Resolved" ? moment(dbTicket.docs[i]['Modified_On']).format("DD/MM/YYYY") : ""
                };
                objResponse.push(Obj);
            }
            dbTicket.docs = objResponse;
            res.json(dbTicket);
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});

router.post('/ticket/search890', function (req, res) {
    try
    {
        var objRequest = req.body;
        var objResponse = [];
        var mysort = "";
        var roleType = objRequest["role_type"];
        if (objRequest["Category"] !== "") {
            objCategory = objRequest["Category"].split(',');
        }
        ss_id = objRequest["ss_id"] - 0;

        var Condition = {};
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(objRequest["from_date"] === "" ? today : objRequest["from_date"]).format("YYYY-MM-D");
        var toDate = moment(objRequest["to_date"] === "" ? today : objRequest["to_date"]).format("YYYY-MM-D");

        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);

        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);

        console.log('DateRange', 'from', dateFrom, 'to', dateTo);

        if (objRequest["search_by"] !== "CurrentDate") {
            if (objRequest["search_by"] === "ticketid") {
                //Condition["Ticket_Id"] = objRequest["search_byvalue"];
                Condition["Ticket_Id"] = new RegExp(objRequest["search_byvalue"], 'i');
            } else if (objRequest["search_by"] === "CRN") {
                Condition["CRN"] = parseInt(objRequest["search_byvalue"]);
            } else {
                if (roleType === "tickets") {
                    Condition = {"ss_id": ss_id,
                        "Created_On": {$gte: dateFrom, $lt: dateTo}
                    };
                } else {
                    Condition = {"Category": {$in: objCategory},
                        "Modified_On": {$gte: dateFrom, $lt: dateTo}
                    };
                }
                if (objRequest["status"] !== "") {
                    Condition["Status"] = objRequest["status"];
                }
            }
            mysort = {Modified_On: -1};
        } else {
            if (roleType === "tickets") {
                Condition = {"ss_id": ss_id,
                    "Created_On": {$gte: dateFrom, $lt: dateTo}
                };
            } else {
                Condition = {"Category": {$in: objCategory},
                    "Modified_On": {$gte: dateFrom, $lt: dateTo}
                };
            }
            if (objRequest["status"] !== "") {
                Condition["Status"] = objRequest["status"];
            }
        }
        console.log(Condition);
        var agg = [
            // Group by the grouping key, but keep the valid values
            {"$group": {
                    "_id": "$Ticket_Id",
                    "docId": {"$last": "$_id"},
                    "Ticket_Id": {"$last": "$Ticket_Id"},
                    "Category": {"$last": "$Category"},
                    "SubCategory": {"$last": "$SubCategory"},
                    "channel": {"$last": "$channel"},
                    "subchannel": {"$last": "$subchannel"},
                    "From": {"$last": "$From"},
                    "To": {"$last": "$To"},
                    "Status": {"$last": "$Status"},
                    "Created_By": {"$last": "Created_By"},
                    "Created_On": {"$last": "$Created_On"},
                    "Modified_On": {"$last": "$Modified_On"},
                    "CRN": {"$last": "$CRN"},
                    "Mobile_No": {"$last": "$Mobile_No"},
                    "Vehicle_No": {"$last": "$Vehicle_No"},
                    "Remark": {"$last": "$Remark"},
                    "ss_id": {"$last": "$ss_id"},
                    "SubCategory_level2": {"$last": "$SubCategory_level2"},
                    "Product": {"$last": "$Product"},
                    "UploadFiles": {"$last": "$UploadFiles"},
                    "Agent_Email_Id": {"$last": "$Agent_Email_Id"}
                }},
            {"$match": Condition},
            // Then sort
            {"$sort": {"Modified_On": -1}}
        ];

        var tickets = require('../models/ticket');
        tickets.aggregate(agg, function (err, dbTicket) {
            if (err) {
                throw err;
            } else {
                console.log(dbTicket);
                for (var i in dbTicket) {
                    var productname = "";
                    // var Create;
                    if (dbTicket[i]["Product"] === 1) {
                        productname = "CAR";
                    } else if (dbTicket[i]["Product"] === 10) {
                        productname = "BIKE";
                    } else if (dbTicket[i]["Product"] === 2) {
                        productname = "HEALTH";
                    }
                    var Action_name = "";
                    if (objRequest["Category"] === "") {
                        Action_name = "Action";
                    } else {
                        if (dbTicket[i]["Status"] === "Open" && objRequest["role_type"] !== "tickets") {
                            Action_name = "Start";
                        } else {
                            Action_name = "Action";
                        }
                    }

                    var Obj = {
                        "Ticket_Id": dbTicket[i]['Ticket_Id'],
                        "Product": productname,
                        "Category": dbTicket[i]['Category'],
                        "SubCategory": dbTicket[i]['SubCategory'],
                        "channel": dbTicket[i]['channel'],
                        "subchannel": dbTicket[i]['subchannel'],
                        "Status": dbTicket[i]['Status'],
                        "Created_By": dbTicket[i]['Created_By'],
                        "From": dbTicket[i]['From'],
                        "Mobile_No": dbTicket[i]['Mobile_No'],
                        "Vehicle_No": dbTicket[i]['Vehicle_No'],
                        "Remark": dbTicket[i]['Remark'],
                        "CRN": dbTicket[i]['CRN'],
                        "Created_On_UI": moment(dbTicket[i]['Created_On']).format("DD/MM/YYYY"),
                        "Created_On": dbTicket[i]['Created_On'],
                        "SubCategory_level2": dbTicket[i]['SubCategory_level2'],
                        "ss_id": dbTicket[i]['ss_id'],
                        "Action_name": Action_name,
                        "Modified_On_UI": moment(dbTicket[i]['Modified_On']).format("DD/MM/YYYY"),
                        "Modified_On": dbTicket[i]['Modified_On'],
                        "UploadFiles": dbTicket[i]['UploadFiles'],
                        "Agent_Email_Id": dbTicket[i]['Agent_Email_Id'],
                        "Ageing": dbTicket[i]['Status'] === "Resolved" ? parseInt((dbTicket[i]['Modified_On'] - dbTicket[i]['Created_On']) / (1000 * 60 * 60 * 24)) : "",
                        "Close_Date": dbTicket[i]['Status'] === "Resolved" ? moment(dbTicket[i]['Modified_On']).format("DD/MM/YYYY") : ""
                    };
                    objResponse.push(Obj);
                }
                res.json(objResponse);
            }
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});

router.post('/sync_contacts/razor_payment_history', LoadSession, function (req, res) {
    try {
        var Base = require('../libs/Base');
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);
        var optionPaginate = {
            select: 'Lead_Count Total_Premium Email Mobile Name Transaction_Status Created_On Ss_Id Fba_ID Plan',
            sort: {'Created_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

        }
        var filter = obj_pagination.filter;

        var ObjRequest = req.body;

        filter["Ss_Id"] = req.obj_session.user.ss_id;
        filter["Fba_ID"] = req.obj_session.user.fba_id;
        filter["Transaction_Status"] = "Success";
        if (req.body.name !== undefined) {
            filter["Name"] = new RegExp(req.body.name, 'i');
        }

        var razorpay_payment = require('../models/razorpay_payment');
        console.error('Horizonrazorpay_payment', filter, req.body);
        razorpay_payment.paginate(filter, optionPaginate).then(function (razorpay_payment) {
            //console.error('UserDataSearch', filter, optionPaginate, user_datas);
            res.json(razorpay_payment);
        });
    } catch (e) {
        console.error(e);
        res.json({"Msg": "error"});
    }
});
router.post('/sync_contact_import', agent_details_pre_form, function (req, res) {
    try {
        const vCardFiles = req.files['sync_file'].path;//appRoot + "/tmp/" + "2020-08-19 12-36-59.vcf";   
        var vcard = require('vcard-json');
        var sync_contact = require('../models/sync_contact');
        var syncPospSummary = {
            'Message': '',
            'Status': '',
            'StatusNo': 0,
            'Inserted_Count': 0
        };

        let syncContact = [];
        var ss_id = req.agent['EMP'].Emp_Id;
        var fba_id = req.agent['EMP'].FBA_ID;
        var mobile_list = [];
        var exist_contact = [];

        vcard.parseVcardFile(vCardFiles, function (err, vcard) {
            console.log(vcard);
            if (ss_id > 0 && ss_id !== 5)
            {
                for (var i in vcard)
                {
                    if (vcard[i].phone.length > 0) {
                        for (var j in vcard[i].phone) {
                            mobile_list.push(vcard[i].phone[j].value.replace(/-/g, '').slice(-10));
                        }
                    }
                }
                var cond = {
                    "mobileno": {
                        "$in": mobile_list
                    },
                    'ss_id': ss_id
                };

                MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err1, db) {
                    var sync_contacts = db.collection('sync_contacts');
                    sync_contacts.find(cond).toArray(function (err2, dbItems) {
                        if (err2) {
                            syncPospSummary.Message = err2;
                            syncPospSummary.Status = 'Error';
                            syncPospSummary.StatusNo = 1;
                            res.json(syncPospSummary);
                        } else {
                            for (let i in dbItems) {
                                exist_contact.push(dbItems[i]['mobileno']);
                            }
                            for (var i in vcard) {
                                try {

                                    for (var j in vcard[i].phone) {
                                        var objRequest = {};
                                        let mobileno = vcard[i].phone[j].value.replace(/-/g, '').slice(-10).toString();
                                        let name = vcard[i].fullname.toString();
                                        var index = syncContact.findIndex(x => x.mobileno === mobileno);
                                        var is_duplicate = "";
                                        if (syncContact.length > 0 && index > 0) {
                                            is_duplicate = syncContact[index]['mobileno'];
                                        }
                                        if (is_duplicate === "") {
                                            if (exist_contact.indexOf(mobileno) > -1)
                                            {
                                                objRequest['name'] = name;
                                                objRequest['Modified_On'] = new Date();
                                                objRequest['raw_data'] = vcard[i];
                                                let myquery = {mobileno: mobileno, ss_id: ss_id};
                                                let newvalues = {$set: objRequest};
                                                Sync_Contact.update(myquery, newvalues, {multi: false}, function (err, numAffected) {
                                                    if (err)
                                                    {
                                                        console.error('Exception', 'Contact_Sync_Save_Err', err);
                                                    }
                                                });

                                            } else {
                                                objRequest['mobileno'] = mobileno;
                                                objRequest['name'] = name;
                                                objRequest['ss_id'] = ss_id;
                                                objRequest['fba_id'] = fba_id;
                                                objRequest['channel'] = req.agent['channel'];
                                                objRequest['Created_On'] = new Date();
                                                objRequest['Modified_On'] = new Date();
                                                objRequest['Short_Code'] = randomString(10);
                                                objRequest['raw_data'] = vcard[i];
                                                objRequest['source'] = "horizon";
                                                syncContact.push(objRequest);
                                            }
                                        }
                                    }
                                } catch (e) {
                                    console.error('Exception', 'sync_contact', 'data_process_loop', e.stack);
                                }
                            }
                        }
                        if (syncContact.length > 0) {
                            sync_contact.insertMany(syncContact, function (err, users) {
                                if (err) {
                                    syncPospSummary.Message = err;
                                    syncPospSummary.Status = 'Error';
                                    syncPospSummary.StatusNo = 1;
                                    syncPospSummary.Inserted_Count = users.length;
                                    res.json(syncPospSummary);
                                } else {
                                    syncPospSummary.Message = 'Contact Added Successfully.';
                                    syncPospSummary.Status = 'success';
                                    syncPospSummary.StatusNo = 0;
                                    syncPospSummary.Inserted_Count = users.length;
                                    res.json(syncPospSummary);
                                }
                            });
                        } else {
                            syncPospSummary.Message = 'No record added';
                            syncPospSummary.Status = 'Error';
                            syncPospSummary.StatusNo = 1;
                            syncPospSummary.Inserted_Count = 0;
                            res.json(syncPospSummary);
                        }
                    });
                });
            }
        });
    } catch (e) {
        console.error(e);
    }
});


router.post('/tickets', LoadSession, function (req, res) {
    var objBase = new Base();
    var Ticket = require('../models/ticket');
    var obj_pagination = objBase.jqdt_paginate_process(req.body);

    var optionPaginate = {
        select: '',
        sort: {'Modified_On': 'desc'},
        //populate: null,
        lean: true,
        page: 1,
        limit: 10
    };

    if (obj_pagination) {
        optionPaginate['page'] = obj_pagination.paginate.page;
        optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

    }
    var filter = obj_pagination.filter;
    console.error('Filter', req.body);
    if (req.body['search[value]'] !== '' && req.body['search[value]'] !== undefined) {
        if (isNaN(req.body['search[value]'])) {
            filter = {
                $or: [
                    {'Request_Unique_Id': new RegExp(req.body['search[value]'], 'i')},
                    {'Posp_Unique_Id': new RegExp(req.body['search[value]'], 'i')},
                    {'Method_Type': new RegExp(req.body['search[value]'], 'i')},
                    {'Error_Code': new RegExp(req.body['search[value]'], 'i')}
                ]
            };
        } else {
            filter = {'Product_Id': parseInt(req.body['Product_Id'])};
        }
    } else {
        filter = {};
        filter['ss_id'] = 0;
        if (req.body['page_action'] === 'all') {
            delete filter.ss_id;
        }
        if (req.body['page_action'] === 'channel') {
            filter['ss_id'] = req.obj_session.user.role_detail.channel;
        }
        if (req.body['page_action'] === 'my') {
            filter['ss_id'] = req.obj_session.user.ss_id - 0;
//                if (req.obj_session.hasOwnProperty('users_assigned')) {
//                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
//                    var arr_ssid = combine_arr.split(',').filter(Number).map(Number);
//                    filter['ss_id'] = {$in: arr_ssid};
//                } else {
//                    filter['ss_id'] = req.obj_session.user.ss_id - 0;
//                }
        }

        if (typeof req.body['Col_Name'] === 'string' && req.body['Col_Name'] !== '' && req.body['txtCol_Val'] !== '') {
            filter[req.body['Col_Name']] = (req.body['Col_Name'] === 'Ss_Id') ? req.body['txtCol_Val'] - 0 : req.body['txtCol_Val'];
        }
        if (req.body['Last_Status_Group'] !== '') {
            var objStatusSummary = {
                'Lead/Cordinated/Registered': [1, 2, 3],
                'DocumentUpload/Verified': [4, 5],
                'Doc_Declined_Before_Certification': [6],
                'TrainingSchedule': [7, 10, 15],
                'TrainingPass': [8, 11, 16],
                'TrainingFail': [9, 12, 17],
                'Certified': [13, 14, 18],
                'Doc_Declined_After_Certification': [6]
            };
            if (objStatusSummary.hasOwnProperty(req.body['Last_Status_Group'])) {
                var arr_last_status = [];
                for (var k in objStatusSummary[req.body['Last_Status_Group']]) {
                    arr_last_status.push(objStatusSummary[req.body['Last_Status_Group']][k].toString())
                }
                filter['Last_Status'] = {$in: arr_last_status};
            }
        }
    }


    Ticket.paginate(filter, optionPaginate).then(function (posps) {
        console.log(obj_pagination.filter, optionPaginate, posps);
        res.json(posps);
    });
});
router.post('/add_corp_lead', function (req, res) {
    var contact_name = req.body.contact_name;
    var mobile = req.body.mobile;
    var email = req.body.email;
    var product = req.body.product;
    var message = req.body.message;
    var ip_address = req.body.ip_address === undefined ? "" : req.body.ip_address;
    var search_parameter = req.body.search_parameter === undefined ? "" : ((Object.keys(req.body.search_parameter).length === 0) ? "" : req.body.search_parameter);

    var arg = {
        Contact_Name: contact_name,
        Mobile_No: parseInt(mobile),
        Email_Id: email,
        Product: product,
        Message: message,
        IP_Address: ip_address,
        Created_On: new Date(),
        Search_Parameter: search_parameter
    };
    let obj_content = {
        Contact_Name: contact_name,
        Mobile_No: mobile,
        Email_Id: email,
        Remarks: message
    };

    let mail_content = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>CORP LEAD</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
    mail_content += objectToHtml(obj_content);
    mail_content += '</body></html>';

    var corp_lead = require('../models/corp_lead');
    let corp_lead_log = new corp_lead(arg);
    corp_lead_log.save(function (err, res1) {
        if (err) {
            res.json({'Status': 'Fail'});
        } else {
            if (res1.hasOwnProperty('_doc')) {
                var Email = require('../models/email');
                var objModelEmail = new Email();
                if (config.environment.name === 'Production') {
                    var to = "sagar.tejuja@landmarkinsurance.in,manish.hingorani@landmarkinsurance.in";
                    var cc = "marketing@policyboss.com";
                } else {
                    var to = "roshani.prajapati@policyboss.com";
                    var cc = "roshaniprajapati567@gmail.com,anuj.singh@policyboss.com";
                }
                var subject = "[CorpLeadId-" + res1['_doc']['Corp_Id'] + "]Product-" + res1['_doc']['Product'];
                objModelEmail.send('noreply@policyboss.com', to, subject, mail_content, cc, config.environment.notification_email);
                res.json({'Status': 'Success'});
            }
        }
    });
});
function agent_details_pre_form(req, res, next) {
    var formidable = require('formidable');
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
        var ss_id = 0;
        if (fields.hasOwnProperty('ss_id') && fields['ss_id'] > 0) {
            ss_id = fields['ss_id'] - 0;
        }

        if (ss_id > 0) {
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get(config.environment.weburl + '/posps/dsas/view/' + ss_id.toString(), {}, function (data, response) {
                if (data['status'] === 'SUCCESS') {
                    req.agent = data;
                    req.files = files;
                } else {
                    //res.send('AGENT_NOT_EXIST<br>' + '<pre>' + JSON.stringify(req.query, undefined, 2) + '</pre>');
                }
                return next();
            });
        } else {
            return next();
        }
    });
}


router.post('/protectme_pre_submission', function (req, res, next) {
    try {
        var objRequest = req.body;
        var filehtml = appRoot + "/resource/request_file/Protect_Me_Well/protectmewell-pre-submission.html";
        var html2 = fs.readFileSync(filehtml, 'utf8');
        var replacedata = {
            '___customer_name___': objRequest.customer_name,
            '___redirection_link___': "horizon.policyboss.com:5000/pmw/" + objRequest

        };
        html2 = html2.toString().replaceJson(replacedata);

        var Email = require('../models/email');
        var objModelEmail = new Email();
        let subject = "Protect Me Well";
        let to = objRequest.email;
        let crn = objRequest.crn;
        objModelEmail.send('noreply@policyboss.com', to, subject, html2, "", config.environment.notification_email, crn);

    } catch (e) {
        res.json({msg: 'fail', url: '', error: e});
    }
});

router.get('/protectme_pdf/:UID', function (req, res, next) {
    try {
        var User_Data_Id = req.params['UID'] - 0;
        var protect_me_well = require('../models/protect_me_well_detail');
        protect_me_well.findOne({"User_Data_Id": User_Data_Id}, function (err, dbData) {
            if (err) {
                res.json({msg: 'fail', url: ''});
            } else {
                var url = dbData._doc.protect_me_link_url;
                res.json({msg: 'success', url: url});
            }
        });
    } catch (e) {
        res.json({msg: 'fail', url: '', error: e});
    }
});

router.get('/pmw/:pmw_id', function (req, res, next) {
    try {
        let pmw_id = req.params['pmw_id'];
        let User_Data_Id = pmw_id.split("_")[0] - 0;
        //let SRN = pmw_id.split("_")[1];
        let protect_me_well = require('../models/protect_me_well_detail');
        var http = require('http');
        var Client = require('node-rest-client').Client;
        var client = new Client();
        let ip_address = "";
        var url_click = config.environment.name === 'Production' ? "https://www.policyboss.com/ProtectMeWell/?pmwid=" + pmw_id : "http://qa.policyboss.com/ProtectMeWell/?pmwid=" + pmw_id;
        http.get('http://bot.whatismyipaddress.com', function (res1, req) {
            res1.setEncoding('utf8');
            res1.on('data', function (chunk) {
                // You can process streamed parts here...
                ip_address = chunk;
                console.log(ip_address);
            });

            client.get(config.environment.weburl + '/user_datas/view/' + User_Data_Id, function (data, err) {
                if (data.length > 0) {
                    data = data['0'];
                    console.log(data);
                    var age = calculateAge(new Date(data["Proposal_Request_Core"]["birth_date"]));
                    console.log("age=====" + age);
                    var objData = {
                        "User_Data_Id": data["User_Data_Id"],
                        "Request_Unique_Id": data["Request_Unique_Id"],
                        "Name": data["Proposal_Request_Core"]["first_name"] + " " + data["Proposal_Request_Core"]["middle_name"] + " " + data["Proposal_Request_Core"]["last_name"],
                        "Mobile": data["Proposal_Request_Core"]["mobile"],
                        "Email": data["Proposal_Request_Core"]["email"],
                        "Age": age,
                        "DOB": data["Proposal_Request_Core"]["birth_date"],
                        "Address": data["Proposal_Request_Core"]["permanent_address_1"] + " " + data["Proposal_Request_Core"]["permanent_address_2"] + " " + data["Proposal_Request_Core"]["permanent_address_3"] + " " + data["Proposal_Request_Core"]["locality"] + " " + data["Proposal_Request_Core"]["permanent_pincode"] + " " + data["Proposal_Request_Core"]["district"],
                        "is_protect_me_visited": 1,
                        "is_protect_issued": 0,
                        "Created_On": new Date(),
                        "Modified_On": new Date()
                    };
                    protect_me_well.findOne({"User_Data_Id": User_Data_Id}, function (err, dbData) {
                        if (err) {

                        } else {
                            if (dbData)
                            {
                                if (dbData._doc.hasOwnProperty('protect_me_link_url') && (dbData._doc["protect_me_link_url"] !== null || dbData._doc["protect_me_link_url"] !== ""))
                                {
                                    return res.redirect(dbData._doc["protect_me_link_url"]);
                                } else
                                {
                                    var obj_res = {};
                                    let obj_visted_history = {
                                        "ip_address": ip_address,
                                        "date_time": new Date()
                                    };
                                    obj_res["protect_me_link_history"] = obj_visted_history;
                                    protect_me_well.updateOne({'User_Data_Id': User_Data_Id}, {$set: {'is_protect_me_visited': parseInt(dbData._doc["is_protect_me_visited"]) + 1}}, function (err, numAffected) {
                                        console.log(err);
                                    });
                                    protect_me_well.updateOne({'User_Data_Id': User_Data_Id}, {$addToSet: obj_res}, function (err, numAffected) {
                                        console.log(err);
                                        return res.redirect(url_click);
                                    });
                                }
                            } else {
                                let obj_visted_history = [{
                                        "ip_address": ip_address,
                                        "date_time": new Date()
                                    }];
                                objData["protect_me_link_history"] = obj_visted_history;

                                protect_me_well.insertMany(objData, function (err, users) {
                                    if (err) {
                                        res.json({'Msg': '', Status: 'Fail'});
                                    } else {
                                        console.log(url_click);
                                        return res.redirect(url_click);
                                        //res.json({'Msg': 'Saved Succesfully!!!', Status: 'Success'});
                                    }
                                });
                            }
                        }
                    });
                }

            });
        });
    } catch (e) {
        res.send(e.stack);
    }
});
router.post('/update_ticket', LoadSession1, function (req, res, next) {
    try {
        console.error("req.fields");
        console.error(req.fields);
        console.error("fields");
        console.error(fields);
        var fields = req.fields;
        var files = req.files;
        var objRequest;
        objRequest = fields;
        var offical_email_id;
        if (req.obj_session.user.hasOwnProperty('profile') && req.obj_session.user.profile.hasOwnProperty('Official_Email') && req.obj_session.user.profile.Official_Email) {
            offical_email_id = req.obj_session.user.profile.Official_Email;
        } else {
            offical_email_id = req.obj_session.user.email;
        }
        //var objRequest = req.body;
        var Ticket_id = objRequest["Ticket_Id"];

        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            if (err)
                throw err;
            var tickets = db.collection('tickets');
            tickets.findOne({"Ticket_Id": Ticket_id}, {sort: {"Modified_On": -1}}, function (err, dbticket) {
                //console.log(dbticket);
                var todayDate = new Date();
                var arg = {};
                arg = {
                    Ticket_Id: dbticket['Ticket_Id'],
                    Product: dbticket['Product'],
                    Category: dbticket["Category"],
                    SubCategory: dbticket["SubCategory"],
                    From: dbticket["From"],
                    To: dbticket["To"],
                    Status: objRequest["Status"],
                    Created_By: dbticket["Created_By"],
                    Modified_By: req.obj_session.user.ss_id,
                    Created_On: dbticket["Created_On"],
                    Modified_On: todayDate,
                    CRN: dbticket["CRN"],
                    Mobile_No: dbticket["Mobile_No"],
                    Vehicle_No: dbticket["Vehicle_No"],
                    Remark: objRequest["Remark"],
                    ss_id: dbticket["ss_id"],
                    CRN_owner: dbticket["CRN_owner"],
                    IsActive: 1,
                    fba_id: dbticket["fba_id"],
                    CRN_fba_id: dbticket["CRN_fba_id"],
                    channel: dbticket["channel"],
                    subchannel: dbticket["subchannel"],
                    //UploadFiles: dbticket["UploadFiles"],
                    Modified_By_Name: req.obj_session.user.fullname,
                    Ticket_Code: dbticket['Ticket_Id'],
                    Agent_Email_Id: dbticket['Agent_Email_Id'],
                    Transaction_On: dbticket["Transaction_On"],
                    Source: objRequest["Source"],
                    RM_Email_Id: dbticket["RM_Email_Id"],
                    RM_Agent_Name: dbticket["RM_Agent_Name"],
                    Pincode: dbticket["Pincode"],
                    Insurer_Id: dbticket["Insurer_Id"]
                };
                if (files !== undefined && JSON.stringify(files) !== "{}") {

                    var DocName = files['uploadfile']['name'].split(".")[0].replace(/ /g, '');
                    var extension = files['uploadfile']['name'].split(".")[1];
                    var pdf_sys_loc_horizon = appRoot + "/tmp/ticketing/" + dbticket['Ticket_Id'] + "/Resolver/" + req.obj_session.user.ss_id + "_" + DocName + "." + extension;
                    var pdf_web_path_horizon = config.environment.downloadurl + "/ticketing/" + dbticket['Ticket_Id'] + "/Resolver/" + req.obj_session.user.ss_id + "_" + DocName + "." + extension;

                    var oldpath = files['uploadfile']['path'];
                    var dir = appRoot + "/tmp/ticketing/" + dbticket['Ticket_Id'] + "/Resolver";

                    if (!fs.existsSync(appRoot + "/tmp/ticketing/" + dbticket['Ticket_Id'])) {
                        fs.mkdirSync(appRoot + "/tmp/ticketing/" + dbticket['Ticket_Id']);
                    }

                    if (!fs.existsSync(dir)) {
                        fs.mkdirSync(dir);
                    }
                    if (fs.existsSync(dir)) {
                        fs.readFile(oldpath, function (err, data) {
                            if (err)
                                throw err;
                            // Write the file
                            fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                                if (err)
                                    throw err;
                            });
                            // Delete the file
                            fs.unlink(oldpath, function (err) {
                                if (err)
                                    throw err;
                            });
                        });
                    }
                    sleep(1000);

                    var objfile = {
                        "file_1": pdf_web_path_horizon
                    };
                    arg['UploadFiles'] = objfile;
                }
                tickets.insertOne(arg, function (err, res1) {
                    if (err)
                        throw err;
                    if (res1["insertedCount"] > 0) {
                        //user_details
                        var objticket = {
                            "Modified_By": req.obj_session.user.ss_id,
                            "Status": objRequest["Status"],
                            "Modified_On": todayDate,
                            "Remark": objRequest["Remark"]
                        };
                        var user_details = db.collection('user_details');
                        user_details.update({'Ticket_code': Ticket_id}, {$set: objticket}, function (err, numAffected) {
                            console.log('user_detailsUpdate', err, numAffected);
                            //res.json({'Status': 'Updated'});
                        });
                        var product_name;
                        if (dbticket["Product"] === 1) {
                            product_name = "CAR";
                        } else if (dbticket["Product"] === 10) {
                            product_name = "BIKE";
                        } else if (dbticket["Product"] === 2) {
                            product_name = "HEALTH";
                        } else if (dbticket["Product"] === 12) {
                            product_name = "CV";
                        }
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        var environment = config.environment.name === 'Production' ? "" : "QA-";
                        var cc = '';
                        var to = "";

                        if (offical_email_id !== null || offical_email_id !== undefined) {
                            to = offical_email_id;
                        }

                        if (emailtocc.hasOwnProperty(dbticket["Category_Name"])) {
                            if (dbticket["Category_Name"] === "Product Input Page") {
                                if (emailtocc[dbticket["Category_Name"]][dbticket["SubCategory"]][0]["to"] !== "")
                                {
                                    to += "," + emailtocc[dbticket["Category_Name"]][dbticket["SubCategory"]][0]["to"];
                                }
                                if (emailtocc[dbticket["Category_Name"]][dbticket["SubCategory"]][0]["cc"] !== "")
                                {
                                    cc += dbticket["RM_Email_Id"] !== "" ? "," + dbticket["RM_Email_Id"] : '' + emailtocc[dbticket["Category_Name"]][dbticket["SubCategory"]][0]["cc"];
                                }
                            } else {

                                if (emailtocc[dbticket["Category_Name"]][0]["to"] !== "")
                                {
                                    to += "," + emailtocc[dbticket["Category_Name"]][0]["to"];
                                }
                                if (emailtocc[dbticket["Category_Name"]][0]["cc"] !== "")
                                {
                                    cc += dbticket["RM_Email_Id"] !== "" ? "," + dbticket["RM_Email_Id"] : '' + emailtocc[dbticket["Category_Name"]][0]["cc"];
                                }
                            }
                        }



                        if (objRequest["CRN"] !== "" && objRequest["CRN"] !== null && objRequest["CRN"] !== undefined) {
                            var subject = "[TICKET] " + Ticket_id + " - " + dbticket["CRN"] + " " + environment + " " + product_name + '-' + dbticket["Category"] + '-' + dbticket["SubCategory"];
                        } else {
                            var subject = "[TICKET] " + Ticket_id + " " + environment + " " + product_name + '-' + dbticket["Category"] + '-' + dbticket["SubCategory"];
                        }

                        var Insurer_Name = dbticket["Insurer_Id"] !== "" ? const_arr_insurer["Insurer_" + dbticket["Insurer_Id"]] : "";
                        var mail_content = '<html><body>' +
                                'Ticket is created.' +
                                '<p></p>Ticket No - ' + Ticket_id +
                                '<p></p>CRN  - ' + dbticket["CRN"] +
                                '<p></p>Status  - ' + objRequest["Status"] +
                                '<p></p>Product  - ' + product_name +
                                '<p></p>Remarks  - ' + objRequest["Remark"] +
                                '<p></p>You will be notified once ticket is resolved.' +
                                '<p></p>You can check ticket status in my ticket section.' +
                                '</body></html>';
                        if (offical_email_id !== null || offical_email_id !== undefined) {
                            objModelEmail.send('noreply@policyboss.com', to, subject, mail_content, cc, config.environment.notification_email, dbticket["CRN"]);
                        }

                        if (Ticket_id === "") {
                            res.json({'Status': "Success", 'Ticket_Id': Ticket_id, 'CRN': dbticket["CRN"], 'Category': dbticket["Category"], 'SubCategory': dbticket["SubCategory"], 'Msg': 'Ticket is created.', 'Created_On': moment(dbticket["Created_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(dbticket["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Product_name': product_name, 'Insurer_name': Insurer_Name});
                        } else {
                            res.json({'Status': "Success", 'Ticket_Id': Ticket_id, 'CRN': dbticket["CRN"], 'Category': dbticket["Category"], 'SubCategory': dbticket["SubCategory"], 'Msg': 'Ticket is updated.', 'Created_On': moment(dbticket["Created_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(dbticket["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Product_name': product_name, 'Insurer_name': Insurer_Name});
                        }
                    }
                });
            });

        });
    } catch (err) {
        console.log(err);
        console.error("catch" + err);
        return res.send(err.stack);
    }

});
router.get('/getprotectmedata/:UID', function (req, res, next) {
    var User_Data_Id = req.params['UID'] - 0;
    var Client = require('node-rest-client').Client;
    var client = new Client();
    client.get(config.environment.weburl + '/user_datas/view/' + User_Data_Id, function (data, err) {
        if (data.length > 0) {
            data = data['0'];
            var age = calculateAge(new Date(data["Proposal_Request_Core"]["birth_date"]));
            return res.json({
                "User_Data_Id": data["User_Data_Id"],
                "Name": data["Proposal_Request_Core"]["first_name"] + " " + data["Proposal_Request_Core"]["middle_name"] + " " + data["Proposal_Request_Core"]["last_name"],
                "Mobile": data["Proposal_Request_Core"]["mobile"],
                "Email": data["Proposal_Request_Core"]["email"],
                "Age": age,
                "DOB": data["Proposal_Request_Core"]["birth_date"],
                "Gender": data["Proposal_Request_Core"]["gender"],
                "Marital": data["Proposal_Request_Core"]["marital"],
                "Location": data["Proposal_Request_Core"]["permanent_city"]
            });
        }
    });
});
router.get('/tickets/getticketingSubCategory/:category/:product_id', function (req, res) {
    try {

        var obj = [];
        var category_id = req.params['category'] - 0;
        var productid = parseInt(req.params['product_id']);
        var cache_key = 'live_tickets_getticketingSubCategory_' + category_id + '_' + productid;
        var arr = {};
        if (productid !== null && productid !== "" && productid !== 0) {
            arr = {"Category_Id": category_id,
                "Product_Id": {$in: [productid]}
            };
        } else {
            arr = {"Category_Id": category_id
            };
        }
        if (fs.existsSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log").toString();
            var obj_cache_content = JSON.parse(cache_content);
            res.json(obj_cache_content);
        } else {
            var dbticketing_subcategory = myDb.collection('ticketing_subcategory');
            dbticketing_subcategory.find(arr).toArray(function (err, dbsubCategory) {
                if (err) {
                    res.send(err);
                } else {
                    console.log(dbsubCategory);
                    for (var i in dbsubCategory) {
                        // obj.push(dbsubCategory[i]['SubCategory']);
                        obj.push({
                            key: dbsubCategory[i]['SubCategory_Id'] + ':' + dbsubCategory[i]['Product_Id'],
                            value: dbsubCategory[i]['SubCategory'],
                            category_id: dbsubCategory[i]['Category_Id'],
                            subcategory_id: dbsubCategory[i]['SubCategory_Id'],
                            error_code: dbsubCategory[i]['Error_Code'],
                            product: dbsubCategory[i]['Product_Id']
                        });
                    }
                    fs.writeFile(appRoot + "/tmp/cachemaster/" + cache_key + ".log", JSON.stringify(obj), function (err) {
                        if (err) {
                            return console.error(err);
                        }
                    });
                    res.json(obj);
                }
            });
        }
    } catch (err) {
        console.log(err);
        return res.send(err.stack);
    }
});
router.get('/getticketing_category/:product_id/:source?', function (req, res) {
    try {

        var resobj = {};
        var obj = [];
        var objproduct = [];
        var productid = req.params["product_id"];
        var source = req.params["source"];
        var cache_key = 'live_tickets_getticketing_category_' + productid + '_' + source;

        var arr = {};
        if (productid !== null && productid !== "" && productid !== "0") {
            arr["Product_Id"] = {$in: [productid]};
        }
        if (source !== null && source !== "" && source !== undefined) {
            arr["Display_Source"] = {$in: [source]};
        }

        if (fs.existsSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log").toString();
            var obj_cache_content = JSON.parse(cache_content);
            res.json(obj_cache_content);
        } else {
            var dbticketing_category = myDb.collection('ticketing_category');
            //db.collection('ticketing_category').find(arr).toArray(function (err, dbCategory) {
            dbticketing_category.find(arr).toArray(function (err, dbCategory) {
                if (err) {
                    res.send(err);
                } else {
                    console.log(dbCategory);
                    for (var i in dbCategory) {
                        // obj.push(dbCategory[i]['Category_Id'] + ':' + dbCategory[i]['Category']);
                        obj.push({
                            key: dbCategory[i]['Category_Id'] + ':' + dbCategory[i]['Product_Id'],
                            value: dbCategory[i]['Category']
                        });
                        //objproduct.push(dbCategory[i]['Category_Id'] + ':' + dbCategory[i]['Product_Id']);
                    }
                    fs.writeFile(appRoot + "/tmp/cachemaster/" + cache_key + ".log", JSON.stringify(obj), function (err) {
                        if (err) {
                            return console.error(err);
                        }
                    });
                    res.json(obj);
                }
            });
        }
        // });
    } catch (err) {
        console.log(err);
        return res.send(err.stack);
    }
});
router.post('/get_lms_data_list', function (req, res) {
    try {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'Product_name Sub_product_name Customer_name Mobile_no Created_On',
            sort: {'Created_On': 1},
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var filter = obj_pagination.filter;
        if (req.body.mobile !== undefined) {
            filter["Mobile_no"] = parseInt(req.body.mobile);
        }
        if (req.body.customerName !== undefined) {
            filter["Customer_name"] = req.body.customerName;
        }
        if (req.body.Product_type !== undefined && req.body.Product_type !== "-- Select Product Type --") {
            filter["Product_name"] = req.body.Product_type;
        }
        if (req.body.SubProduct_type !== undefined && req.body.SubProduct_type !== "-- Select Sub-Product Type --") {
            filter["Sub_product_name"] = req.body.SubProduct_type;
        }
        var lms_data = require('../models/lms_data');
        console.error('HorizonSaleSearch', filter, req.body);
        lms_data.paginate(filter, optionPaginate).then(function (user_datas) {
            //console.error('UserDataSearch', filter, optionPaginate, user_datas);
            res.json(user_datas);
        });
    } catch (e) {
        console.error(e);
        res.json({"Msg": "error"});
    }
});
router.post('/lms_lead_save', function (req, res) {
    try {
        var lms_data = require('../models/lms_data');
        var objRequest = req.body;
        var Lead_Id = objRequest['Lead_Id'];
        if (Lead_Id !== null && Lead_Id !== "" && Lead_Id !== undefined) {
            lms_data.update({'Lead_Id': Lead_Id}, objRequest, function (err, numaffected) {
                res.json({"Msg": "Lead Updated Successfully.", "Status": "Success"});
            });
        } else {
            var lms_dataobj = new lms_data(objRequest);
            lms_dataobj.save(function (err) {
                res.json({"Msg": "Lead Created Successfully.", "Status": "Success"});
            });
        }
    } catch (e) {
        console.log(e);
        res.json({"Msg": e, "Status": "Fail"});
    }
});

router.get('/lms_product_types', function (req, res) {
    var lms_product_type = require('../models/lms_product_type');
    lms_product_type.find(function (err, dbProductData) {
        if (err) {

        } else {
            if (dbProductData) {
                console.log(dbProductData);
                res.send(dbProductData);
            }
        }
    });
});

router.get('/lms_sub_product_types/:product_type', function (req, res) {
    var lms_sub_product_type = require('../models/lms_sub_product_type');
    if (req.params.product_type) {
        lms_sub_product_type.find({lm_product_id: parseInt(req.params.product_type)}, function (err, dbSubProductData) {
            if (err) {

            } else {
                if (dbSubProductData) {
                    console.log(dbSubProductData);
                    res.send(dbSubProductData);
                }
            }
        });
    } else {
        res.send('Invalid Product Type');
    }
});
router.post('/lms_lead_datas', function (req, res) {
    try {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);
        var optionPaginate = {
            select: 'Lead_Id Customer_name Mobile_no Email Product_name Sub_product_name Status Product_id Sub_product_id',
            sort: {'Created_On': 1},
            lean: true,
            page: 1,
            limit: 10
        };
        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var filter = obj_pagination.filter;
        if (req.body.Created_by !== undefined) {
            filter["Created_by"] = req.body.Created_by;
        }
        if (req.body.mobile !== undefined) {
            filter["Mobile_no"] = parseInt(req.body.mobile);
        }
        if (req.body.customerName !== undefined) {
            filter["Customer_name"] = req.body.customerName;
        }
        if (req.body.Product_type !== undefined && req.body.Product_type !== "-- Select Product Type --") {
            filter["Product_name"] = req.body.Product_type;
        }
        if (req.body.SubProduct_type !== undefined && req.body.SubProduct_type !== "-- Select Sub-Product Type --") {
            filter["Sub_product_name"] = req.body.SubProduct_type;
        }
        var lms_datas = require('../models/lms_data');

        lms_datas.paginate(filter, optionPaginate).then(function (lms_datas) {
            res.json(lms_datas);
        });
    } catch (e) {
        console.log(e);
        res.json({"Msg": e});
    }
});
router.get('/lms_forms_master/:product_type/:sub_product_type', function (req, res) {
    try {
        var product_id = parseInt(req.params['product_type']);
        var subproduct_id = parseInt(req.params['sub_product_type']);
        var Conditions = {"lms_product_id": {$in: [0, product_id]}, "lms_sub_product_id": {$in: [0, subproduct_id]}};
        var resultArray = {"basic": null
            , "full": null
            , "global": null};
        var basicmaster = [];
        var fullmaster = [];
        var globalmaster = [];
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var lms_forms_master = db.collection('lms_forms_master').find(Conditions, {_id: 0});
            lms_forms_master.forEach(function (doc, err) {

                if (doc.form_category === "basic") {
                    basicmaster.push(doc);
                } else if (doc.form_category === "full") {
                    fullmaster.push(doc);
                } else {
                    globalmaster.push(doc);
                }

            }, function () {
                resultArray["basic"] = basicmaster;
                resultArray["full"] = fullmaster;
                resultArray["global"] = globalmaster;
                res.json(resultArray);
            });
        });

    } catch (e) {
        console.log(e);
        res.json({"Msg": e});
    }
});
router.get('/get_lms_lead_data/:lead_id', function (req, res) {
    try {
        var Lead_Id = req.params['lead_id'];
        var Condition = {};
        if (Lead_Id !== null || Lead_Id !== "") {
            Condition = {"Lead_Id": Lead_Id};
        }

        var lms_datas = require('../models/lms_data');
        lms_datas.find(Condition, function (err, dblmsData) {
            if (err) {

            } else {
                if (dblmsData) {
                    console.log(dblmsData);
                    res.send(dblmsData);
                }
            }
        });
    } catch (e) {
        console.log(e);
        res.json({"Msg": e});
    }
});

router.post('/admin_inspection_list', LoadSession, function (req, res) {
    try {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);
        var optionPaginate = {
            select: 'Product_Id PB_CRN Request_Unique_Id Report_Summary Premium_Request Premium_Summary Proposal_Request Last_Status Created_On Modified_On Client_Id Transaction_Data Erp_Qt_Request_Core Status_History Insurer_Id User_Data_Id Transaction_Data ERP_CS Service_Log_Unique_Id Proposal_History Premium_List',
            sort: {'Modified_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };
        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var filter = obj_pagination.filter;

        var Product_Id = req.body.ProductID - 0;
        var Fba_Id = req.body.fbaid - 0;
        var Type = req.body.Type;
        var Ss_Id = req.body.ss_id - 0;
        //var Mobile = (req.params.hasOwnProperty('Mobile')) ? req.params.Mobile : 0;
        var Sub_Fba_Id = req.body.sub_fba_id;
        if (Ss_Id && Type) {
            var Condition = {
                "Product_Id": Product_Id
                        //"Last_Status": ""
            };

            //agent condition
            if (Ss_Id) { //10859
                if (Ss_Id === 10859 && Product_Id === 2) {
                    //Condition['Premium_Request.ss_id'] = 0;
                } else if (Ss_Id === 5417) {
                    //Condition['Premium_Request.ss_id'] = 0;
                } else if (Ss_Id === 7844 || Ss_Id === 8048 || Ss_Id === 12311) {
                    Condition['Premium_Request.posp_sources'] = 1;
                } else if (Ss_Id === 8304) {
                    Condition['Premium_Request.posp_sources'] = 2;
                } else if (Type === 'INSPECTION' && (Ss_Id === 822)) {
                } else {
                    if (Ss_Id === 5) {
                        Condition['Premium_Request.fba_id'] = Fba_Id;
                    } else if (Ss_Id !== 5) {
                        //Condition['Premium_Request.ss_id'] = Ss_Id;
                        if (Sub_Fba_Id > 0) {
                            Condition['Premium_Request.sub_fba_id'] = Sub_Fba_Id;
                        }
                    }
                }
            }

            if (Product_Id === 22) { //hospicash 
                Condition['Premium_Request.is_hospi'] = "yes";
                Condition['Product_Id'] = 2;
            } else if (Product_Id === 23) //Group health Insurance 
            {
                Condition['Premium_Request.is_ghi'] = "yes";
                Condition['Product_Id'] = 2;
            } else if (Product_Id === 42) //Shortteam Policy
            {
                Condition['Premium_Request.is_short_term_policy'] = "yes";
                Condition['Product_Id'] = 2;
            } else {

            }
            if (req.obj_session.user.role_detail.role.indexOf('SuperAdmin') > -1) {
            } else if (req.obj_session.user.role_detail.role.indexOf('ChannelHead') > -1) {
                var arr_ch_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                channel = req.obj_session.user.role_detail.channel;
                filter['$or'] = [
                    {'channel': channel},
                    {'ss_id': {$in: arr_ch_ssid}}
                ];
            } else {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);

                }
                arr_ssid.push(req.obj_session.user.ss_id);
                filter['ss_id'] = {$in: arr_ssid};
            }
            //type condition
            var ObjSummaryStatus = {
                'SEARCH': ['SEARCH', 'ADDON_QUOTE_APPLY', 'ADDON_PROPOSAL_AGENT_APPLY', 'BUY_NOW_AGENT'],
                'LINK_SENT': ['PROPOSAL_LINK_SENT', 'BUY_NOW_CUSTOMER', 'ADDON_PROPOSAL_CUSTOMER_APPLY', 'ADDON_QUOTE_APPLY', 'ADDON_PROPOSAL_AGENT_APPLY', 'BUY_NOW_AGENT'],
                'PAYMENT_PENDING': ['PROPOSAL_SUBMIT', 'PROPOSAL_EXCEPTION'],
                'POLICY_PENDING': ['VERIFICATION_EXCEPTION', 'TRANS_MANUAL_PAYPASS', 'TRANS_PAYPASS'],
                'FAIL': ['TRANS_FAIL'],
                'SELL': ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY']
            };
            var ObjSummaryCondition = {
                'QUOTE': ['SEARCH', 'ADDON_PROPOSAL_CUSTOMER_APPLY', 'ADDON_QUOTE_APPLY', 'ADDON_PROPOSAL_AGENT_APPLY'],
                'APPLICATION': ['PROPOSAL_LINK_SENT', 'BUY_NOW_CUSTOMER', 'BUY_NOW_AGENT', 'PROPOSAL_SUBMIT', 'PROPOSAL_EXCEPTION', 'TRANS_FAIL', 'PROPOSAL_SAVE_AGENT'],
                'COMPLETE': ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY', 'VERIFICATION_EXCEPTION', 'TRANS_MANUAL_PAYPASS', 'TRANS_PAYPASS'],
                'INSPECTION': ['INSPECTION_SCHEDULED', 'INSPECTION_APPROVED', 'INSPECTION_REJECTED', 'INSPECTION_EXCEPTION', 'INSPECTION_REINSPECTION', 'INSPECTION_SUBMITTED'],
                'INSPECTION_SUBMITTED': ['INSPECTION_SUBMITTED'],
                'PENDING_PAYMENT': ['PROPOSAL_SUBMIT', 'PROPOSAL_EXCEPTION', 'TRANS_FAIL'],
                'SENDLINK': ['PROPOSAL_LINK_SENT'],
                'PROPOSALSUBMIT': ['PROPOSAL_SUBMIT', 'PROPOSAL_EXCEPTION']
            };
            if (Type === 'SEARCH') {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['QUOTE']};
            }
            if (Type === 'APPLICATION') {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['APPLICATION']};
            }
            if (Type === 'SELL') {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['COMPLETE']};
            }
            if (Type === 'INSPECTION' && (Ss_Id !== 822)) {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['INSPECTION']};
            }

            if (Type === 'INSPECTION' && (Ss_Id === 822)) {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['INSPECTION_SUBMITTED']};
            }
            if (Type === 'PENDING_PAYMENT') {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['PENDING_PAYMENT']};
            }
            if (Type === 'SENDLINK') {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['SENDLINK']};
            }
            if (Type === 'PROPOSALSUBMIT') {
                Condition['Last_Status'] = {$in: ObjSummaryCondition['PROPOSALSUBMIT']};
            }

            if (req.body.crn !== "" && req.body.crn !== undefined) {
                Condition['PB_CRN'] = parseInt(req.body.crn);
            }
            if (req.body.mobile !== undefined && req.body.mobile > 0) {
                Condition['Premium_Request.mobile'] = req.body.mobile;
            }
            if (req.body.regNo !== "" && req.body.regNo !== undefined) {
                Condition['Premium_Request.registration_no'] = req.body.regNo;
            }
            if (req.body.email !== "" && req.body.email !== undefined) {
                Condition['Premium_Request.email'] = req.body.email;
            }


            User_Data.paginate(Condition, optionPaginate).then(function (dbUsers) {
                try {
                    res.json(dbUsers);
                } catch (e1) {
                    console.error('Exception', 'QuickList1', e1);
                }
            });
        } else {
            res.json({'msg': 'ss_id is empty'});
        }
    } catch (e) {
        console.error('Exception', 'QuickList', e);
    }
});

router.post('/compare_quotes_pdf', function (req, res) {
    var objRequest = req.body;

    var fileshare = appRoot + "/resource/request_file/compare_quote.html";
    var formatted = moment(new Date()).format('DD-MM-YYYYh:mm:ss');
    var datetime = formatted.replace(/-/g, "");
    datetime = datetime.replace(/:/g, "");
    const now = new Date();
    var quotedate = moment(new Date()).format('YYYY-MM-DD');
    var pdf_file_path_policy = appRoot + '/tmp/' + objRequest.CRN + '.pdf';
    var sharePdfLink = config.environment.weburl + '/tmp/' + objRequest.CRN + '.pdf';
    var HTML_pdf_file_path_policy = appRoot + '/tmp/' + objRequest.CRN + '.html';
    //var html = fs.readFileSync('./resource/request_file/Finmart/TW_Web/Quote_Share.html', 'utf8');     //local path
    var html = fs.readFileSync(fileshare, 'utf8');
    var options = {format: 'Letter'};
    var share_div = "";
    var insurer_list = objRequest.insurer_list;

//        var addondiv ='
//                <div class="fieldv">
    //      <span >___addon_name___</span>
    //     <span>₹ ___addon_value___</span>
    //    </div>//


});

router.post('/ticket/getticketList', LoadSession, function (req, res) {
    try
    {

        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'Ticket_code channel subchannel Category SubCategory Product CRN Status From Created_By Created_On Modified_On Agent_Email_Id Remark Source',
            sort: {'Modified_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }

        let objRequest = req.body;
        let filter = obj_pagination.filter;

        if (req.obj_session.user.role_detail.role.indexOf('SuperAdmin') > -1) {
        } else if (req.obj_session.user.role_detail.role.indexOf('ChannelHead') > -1) {
            let arr_ch_ssid = [];
            if (req.obj_session.hasOwnProperty('users_assigned')) {
                arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
            }
            arr_ch_ssid.push(req.obj_session.user.ss_id);
            channel = req.obj_session.user.role_detail.channel;
            filter['$or'] = [
                {'channel': channel},
                {'ss_id': {$in: arr_ch_ssid}}
            ];
        } else {
            let arr_ssid = [];
            if (req.obj_session.hasOwnProperty('users_assigned')) {
                var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                arr_ssid = combine_arr.split(',').filter(Number).map(Number);

            }
            arr_ssid.push(req.obj_session.user.ss_id);
            //filter['ss_id'] = {$in: arr_ssid};
            filter['$or'] = [
                {'lead_assigned_ssid': {$in: arr_ssid}},
                {'ss_id': {$in: arr_ssid}}
            ];
        }






        let objResponse = [];
        let mysort = "";
        let roleType = objRequest["role_type"];
        if (objRequest["Category"] !== "") {
            objCategory = objRequest["Category"].split(',');
        }
        ss_id = objRequest["ss_id"] - 0;

        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(objRequest["from_date"] === "" ? today : objRequest["from_date"]).format("YYYY-MM-D");
        var toDate = moment(objRequest["to_date"] === "" ? today : objRequest["to_date"]).format("YYYY-MM-D");

        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);

        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);

        console.log('DateRange', 'from', dateFrom, 'to', dateTo);

        if (objRequest["search_by"] !== "CurrentDate") {
            if (objRequest["search_by"] === "ticketid") {
                //filter["Ticket_Id"] = objRequest["search_byvalue"];
                filter["Ticket_code"] = new RegExp(objRequest["search_byvalue"], 'i');
            } else if (objRequest["search_by"] === "CRN") {
                //filter["CRN"] = parseInt(objRequest["search_byvalue"]);
                filter = {"$or": [{"CRN": (objRequest["search_byvalue"]).toString()}, {"CRN": parseInt(objRequest["search_byvalue"])}]};
            } else {
                if (roleType === "tickets") {
                    /* filter = {"ss_id": ss_id,
                     "Created_On": {$gte: dateFrom, $lt: dateTo}
                     };*/
//                    filter["Created_On"] = {$gte: dateFrom, $lt: dateTo};
                } else {
                    /* filter = {"Category": {$in: objCategory},
                     "Modified_On": {$gte: dateFrom, $lt: dateTo}
                     };*/
                    filter["Category"] = {$in: objCategory};
                    //filter["Modified_On"] = {$gte: dateFrom, $lt: dateTo};
                }
                if (objRequest["status"] !== "") {
                    filter["Status"] = objRequest["status"];
                }
            }
            mysort = {Modified_On: -1};
        } else {
            if (roleType === "tickets") {
                /* filter = {"ss_id": ss_id,
                 "Created_On": {$gte: dateFrom, $lt: dateTo}
                 };*/
                filter["Created_On"] = {$gte: dateFrom, $lt: dateTo};
            } else {
                /*filter = {"Category": {$in: objCategory},
                 "Modified_On": {$gte: dateFrom, $lt: dateTo}
                 };*/
                filter["Category"] = {$in: objCategory};
                filter["Modified_On"] = {$gte: dateFrom, $lt: dateTo};
            }
            if (objRequest["status"] !== "") {
                filter["Status"] = objRequest["status"];
            }
        }
        console.log(filter);
        var user_details = require('../models/user_details');
        if (objRequest.hasOwnProperty('source')) {
            if (objRequest.source === "PolicyBoss") {
                user_details.find(filter).exec(function (err, dbtickets) {
                    res.json(dbtickets);
                });
            }
        } else {
            user_details.paginate(filter, optionPaginate).then(function (dbTicket) {
                res.json(dbTicket);
            });
        }

    } catch (err) {
        console.log(err.stack);
        return res.send({'msg': 'error'});
    }
});
router.post('/wallets/getAccountDetails', function (req, res) {
    try
    {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'agent_name Merchant_Id bank_account_no ifsc wallet_amount SS_ID FBA_ID Channel',
            sort: {'Created_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };
        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var objRequest = req.body;
        var filter = obj_pagination.filter;
        //ss_id = objRequest["ss_id"] - 0;
        filter = {
            //"SS_ID": ss_id
        };
        console.log(filter);
        var agent_wallet = require('../models/agent_wallet');
        agent_wallet.paginate(filter, optionPaginate).then(function (dbTicket) {
            res.json(dbTicket);
        });

    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/wallets/getTransactionDetails', function (req, res) {
    try
    {
        var objRequest = req.body;
        var filter = {
            "rzp_customer_id": objRequest["rzp_customer_id"]
        };
        if (objRequest["transaction_type"] == "CREDIT") {
            filter['transaction_type'] = {$in: ['CREDIT', 'ADD']};
        } else {
            filter['transaction_type'] = {$in: ['DEBIT', 'DEDUCT']};
        }
        console.log(filter);
        var rzp_wallet_history = require('../models/rzp_wallet_history');
        rzp_wallet_history.find(filter, function (err, dblmsData) {
            if (err) {
                throw err;
            } else {
                res.json({'msg': 'sucress', "data": dblmsData});
            }
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/disposition/dialer_disposition_status_update', function (req, res) {
    try {
        var ObjRequest = req.body;
        var lead_disposition = require('../models/lead_disposition');
        var disposition_history = require('../models/disposition_history');
        var lead = require('../models/leads');

        lead_disposition.find({User_Data_Id: ObjRequest["Cust_ID"]}, function (err, dblmsData) {
            if (err) {
                throw err;
            } else {
                if (Object.keys(dblmsData).length > 0) {
                    var Update_arg = {
                        Status: ObjRequest["Disposition"],
                        Sub_Status: ObjRequest["Sub_Disposition"],
                        Modified_On: new Date(),
                        Remark: ObjRequest["Call Remarks"],
                        Customer_Mobile: ObjRequest["mobile_number"],
                        Next_Call_Date: new Date(ObjRequest["Call_Back_Date"]),
                        Dialer_Request_Core: ObjRequest
                    };
                    lead_disposition.update({'User_Data_Id': ObjRequest["Cust_ID"]}, {$set: Update_arg}, {multi: false}, function (err, numAffected) {
                        if (err)
                            throw err;
                        res.json({'Msg': 'Success'});
                    });
                } else {
                    var arg = {
                        User_Data_Id: ObjRequest["Cust_ID"],
                        Status: ObjRequest["Disposition"],
                        Sub_Status: ObjRequest["Sub_Disposition"],
                        Created_On: new Date(),
                        Modified_On: new Date(),
                        Remark: ObjRequest["Call Remarks"],
                        Is_Latest: 1,
                        Customer_Mobile: ObjRequest["mobile_number"],
                        Next_Call_Date: new Date(ObjRequest["Call_Back_Date"]),
                        Dialer_Request_Core: ObjRequest
                    };
                    var dispositionObj = new lead_disposition(arg);
                    dispositionObj.save(function (err) {
                        console.error(err);
                        if (err)
                            throw err;

                        res.json({'Msg': 'Success'});
                    });
                }

                //Lead Update 

                var objLeadData = {'lead_disposition': ObjRequest["Disposition"],
                    'lead_subdisposition': ObjRequest["Sub_Disposition"],
                    'lead_disposition_assigned_on': new Date()
                };
                lead.update({'User_Data_Id': ObjRequest["Cust_ID"]}, {$set: objLeadData}, {multi: false}, function (err, numAffected) {
                    if (err)
                        throw err;

                });
            }
        });
        //Lead End

        //Disposition history
        var objDispostion = {
            "UDID": ObjRequest["Cust_ID"],
            "PB_CRN": "",
            "Status": ObjRequest["Disposition"],
            "SubStatus": ObjRequest["Sub_Disposition"],
            "Created_On": new Date(),
            "Modified_On": new Date(),
            "Remark": ObjRequest["Call Remarks"],
            "ss_id": 0,
            "IsLatest": 1,
            "fba_id": 0,
            "User_Data": ObjRequest,
            "File_Name": ""
        };
        var disposition = new disposition_history(objDispostion);
        disposition.save(function (err) {
            console.error(err);
            if (err)
                throw err;

            res.json({'Msg': 'Success'});
        });
        //Disposition history End
    } catch (e) {
        console.error(e);
        res.json({'Msg': 'Fail', 'Error': e});

    }
});
router.post('/fetch_pospLead_data', LoadSession, function (req, res, next) {
    try {
        var Base = require('../libs/Base');
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'Campgin_name Enqiry_name Mobile Email Date',
            lean: true,
            page: 1,
            limit: 10
        };

        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var filter = obj_pagination.filter;
        console.error('HorizonLeadList', filter, req.body);
        var ObjRequest = req.body;

        if (ObjRequest.camp_Name !== "" && ObjRequest.camp_Name !== undefined) {
            filter["Campgin_name"] = ObjRequest.camp_Name;
        }

        var lead = require('../models/posp_lead');
        console.error('HorizonPOSPList', filter, req.body);
        lead.paginate(filter, optionPaginate).then(function (user_datas) {
            res.json(user_datas);
        });
    } catch (e) {
        console.error(e);
        res.json({'Msg': 'error', 'Status': 'fail'});
    }
});
router.post('/create_campaignPosp', function (req, res) {
    try {
        var ObjRequest = req.body;
        console.log("data = " + ObjRequest);
        var posp_reequipment_campaign = require('../models/posp_reequipment_campaign');
        var MongoClient = require('mongodb').MongoClient;
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            if (err)
                throw err;
            var obj = {
                "Campaign_name": ObjRequest.camp_name,
                "Description": ObjRequest.description,
                "Start_date": ObjRequest.start_date,
                "End_date": ObjRequest.end_date,
                "Status": "Active"
            };
            var campaigns_obj = new posp_reequipment_campaign(obj);
            campaigns_obj.save(function (err1) {
                if (err1)
                    res.json({'Msg': "Fail to add campaign"});
                else {
                    res.json({'Msg': "campaign added"});
                }
            });
        });
    } catch (e) {
        console.error(e);
        res.json({'Msg': 'Fail', 'Error': e});

    }
});
router.post('/update_pospEnquiry_data', function (req, res, next) {
    var objRequest = req.body;
    var camp_id = objRequest["campaign_id"];
    let file = "";
    let file_ext = "";
    var sleep = require('system-sleep');
    var fs = require('fs');
    var path1 = require('path');
    var MongoClient = require('mongodb').MongoClient;
    var appRoot = path1.dirname(path1.dirname(require.main.filename));
    let path = appRoot + "/tmp/posp_enquiry_data";
    file = decodeURIComponent(objRequest["file"]);
    file_ext = objRequest["file_ext"];
    let fileName = path + '/posp_enquiry_data.' + file_ext;
    var data = file.replace(/^data:image\/\w+;base64,/, "");
    if (data === "") {
    } else {
        let buf = new Buffer(data, 'base64');
        fs.writeFile(fileName, buf);
    }
    sleep(5000);
    let file_excel = appRoot + "/tmp/posp_enquiry_data/posp_enquiry_data." + file_ext;
    let XLSX = require('xlsx');
    let workbook = XLSX.readFile(file_excel);
    let sheet_name_list = workbook.SheetNames;
    var requestObj = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);
    try {
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var posp_enquiry = db.collection('posp_enquiries');
            if (requestObj.length > 0) {
                for (var k in requestObj) {
                    requestObj[k]["Source"] = "POSP-WEB";
                    requestObj[k]["Campgin_Id"] = parseInt(camp_id);
                }
            }
            console.log(requestObj);
            posp_enquiry.insertMany(requestObj, function (err, res1) {
                if (err) {
                    res.json({'Status': "error"});
                } else {
                    res.json({'Status': "Success"});
                }
            });
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/save_FOS_Data', function (req, res) {
    try {
        var ObjRequest = req.body;
        var fos_registration = require('../models/fos_onboarding');

        fos_registration.find({ss_id: parseInt(ObjRequest["ss_id"])}, function (err, dblmsData) {
            if (err) {
                throw err;
            } else {
                if (dblmsData.length > 0) {
                    res.json({'Msg': 'ss_id already exist', 'Status': 'error'});
                } else {
                    var arg = {
                        'Full_Name': ObjRequest['name'],
                        'Mobile': parseInt(ObjRequest['mobile']),
                        'Email': ObjRequest['email'],
                        'Pan': ObjRequest['pan'],
                        'Aadhar': parseInt(ObjRequest['aadhar']),
                        'Gst': ObjRequest['gst'],
                        'Address_1': ObjRequest['address_1'],
                        'Address_2': ObjRequest['address_2'],
                        'Address_3': ObjRequest['address_3'],
                        'Pincode': parseInt(ObjRequest['pincode']),
                        'City': ObjRequest['city'],
                        'State': ObjRequest['state'],
                        'Account_No': parseInt(ObjRequest['accountNo']),
                        "IFSC_Code": ObjRequest['IFSCCode'],
                        "MICR_Code": parseInt(ObjRequest['MICRCode']),
                        "Bank_Name": ObjRequest['bankName'],
                        "Branch": ObjRequest['branch'],
                        "Bank_City": ObjRequest['bankCity'],
                        "Account_Type": ObjRequest['account'],
                        "Pan_Card": ObjRequest['pancard'],
                        "Aadhar_Card_Front": ObjRequest['aadharcardfront'],
                        "Aadhar_Card_Back": ObjRequest['Aadharcardback'],
                        "Cancelled_Chq": ObjRequest['cancelledchq'],
                        "Gst_Certification": ObjRequest['gstcertification'],
                        "ss_id": parseInt(ObjRequest['ss_id']),
                        "level": "Level1",
                        "status": "Waiting for approved"
                    };
                    var MongoClient = require('mongodb').MongoClient;
                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                        if (err)
                            throw err;
                        var fos_registrations = db.collection('fos_onboardings');
                        fos_registrations.insertOne(arg, function (err, result) {
                            if (err) {
                                res.json({'Msg': 'Data not added', 'Status': 'error'});
                            } else {
                                res.json({'Msg': 'Data Added Successfully', 'Status': 'Success'});
                            }
                        });
                    });
                }
            }
        });
    } catch (e) {
        console.error(e);
        res.json({'Msg': 'Fail', 'Error': e});
    }
});
router.post('/updateFOSStatus', function (req, res) {
    try {
        var ObjRequest = req.body;
        var fos_registration = require('../models/fos_onboarding');
        var chech_level;
        if (ObjRequest["approver_level"] === "Level2") {
            chech_level = "Level2";
        } else {
            chech_level = ObjRequest["level"];
        }
        var obj = {
            "level": chech_level,
            "status": ObjRequest["status"]
        };
        fos_registration.update({ss_id: parseInt(ObjRequest["ss_id"])}, {$set: obj}, function (err, dblmsData) {
            if (err) {
                res.json({'Msg': 'Fail to Update status', 'Status': 'error'});
            } else {
                res.json({'Msg': 'Status Updated', 'Status': 'success'});
            }
        });
    } catch (e) {
        console.error(e);
        res.json({'Msg': 'Fail', 'Error': e});
    }
});
router.post('/chola_pdf_initiate_service', LoadSession, function (req, res, next) {
    try {
        var Client = require('node-rest-client').Client;
        var client = new Client();
        var service_method_urlT = '';
        var Token = "";
        let obj_cred = {
            'grant_type': 'password',
            'username': "ptrn_lanmarkP",
            'password': "pt1L@Nm#krn"
        };
        var argsT = {
            data: obj_cred,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };
        argsT.headers.Authorization = 'Basic ' + new Buffer("OeShRu4AJFl0l1hB0wMMGd0s274a" + ':' + "vSksOzpnmbx28s5lKiMuRdCBtL8a").toString('base64');
        service_method_urlT = 'https://services.cholainsurance.com/endpoint/token';

        client.post(service_method_urlT, argsT, function (dataT) {
            console.log(dataT);
            Token = dataT["access_token"];
            var ObjRequest = req.body;
            var qs_url = ObjRequest.policy_url;

            const fetch = require('node-fetch');
            var myHeaders1 = new fetch.Headers();
            myHeaders1.append("Authorization", "Bearer " + Token);

            var requestOptions = {
                method: 'GET',
                headers: myHeaders1,
                redirect: 'follow'
            };
            var pdf_response, pdf_error, pdf_success;
            fetch(qs_url, requestOptions)
                    .then(response => response.text())
                    .then(result => pdf_success = result)
                    .catch(error => pdf_error = error);
            sleep(2000);
            if (pdf_success === null || pdf_success === "" || pdf_success === undefined) {
                pdf_response = pdf_error;
            } else {
                pdf_response = pdf_success;
            }
            console.log(pdf_response);
            res.send(pdf_response);
        });
        sleep(1000);
    } catch (e) {
        console.error(e);
        res.json({'Msg': e.stack, 'Status': 'fail'});
    }
});
router.post('/finmart_raiseticket', function (req, res) {
    try {
        var formidable = require('formidable');
        var form = new formidable.IncomingForm();
        form.parse(req, function (err, fields, files) {
            var objRequest = fields;
            var updateobjRequest = {};
            var product_id = 0;
            var Ticket_id = objRequest["Ticket_Id"];
            var isticket_created = 0;
            var Is_Customer = Boolean(parseInt(objRequest['Is_Customer']));
            console.error("Is_Customer " + Is_Customer);

            console.log(objRequest);
            var ss_id = parseInt(objRequest['ss_id']);
            console.error("ss_id " + ss_id);
            if (ss_id > 0 && objRequest['ss_id'] !== 5 || Is_Customer === true) {
                var Client = require('node-rest-client').Client;
                var client = new Client();
                client.get(config.environment.weburl + '/posps/dsas/view/' + ss_id, {}, function (data, response) {
                    if (data['status'] === 'SUCCESS' || Is_Customer === true) {
                        objRequest['agent'] = data;
                        var agentdetails = objRequest['agent']['EMP'];
                        if (objRequest["Product"] === "CAR") {
                            product_id = 1;
                        } else if (objRequest["Product"] === "BIKE") {
                            product_id = 10;
                        } else if (objRequest["Product"] === "HEALTH") {
                            product_id = 2;
                        } else if (objRequest["Product"] === "CV") {
                            product_id = 12;
                        } else if (objRequest["Product"] === "FL") {
                            product_id = 0;
                        }

                        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                            if (err)
                                throw err;

                            autoIncrement.getNextSequence(db, 'tickets', function (err1, autoIndex) {
                                var tickets = db.collection('tickets');
                                var agg = [
                                    // Group by the grouping key, but keep the valid values
                                    {"$group": {
                                            "_id": "$Ticket_Id",
                                            "docId": {"$last": "$_id"},
                                            "Ticket_Id": {"$last": "$Ticket_Id"},
                                            "Category": {"$last": "$Category"},
                                            "SubCategory": {"$last": "$SubCategory"},
                                            "From": {"$last": "$From"},
                                            "To": {"$last": "$To"},
                                            "Status": {"$last": "$Status"},
                                            "Created_by": {"$last": "$Created_by"},
                                            "Created_On": {"$last": "$Created_On"},
                                            "Modified_On": {"$last": "$Modified_On"},
                                            "CRN": {"$last": "$CRN"},
                                            "Mobile_No": {"$last": "$Mobile_No"},
                                            "Vehicle_No": {"$last": "$Vehicle_No"},
                                            "Remark": {"$last": "$Remark"},
                                            "ss_id": {"$last": "$ss_id"},
                                            "SubCategory_level2": {"$last": "$SubCategory_level2"},
                                            "Product": {"$last": "$Product"}
                                        }},
                                    // Then sort
                                    {"$sort": {"Created_On": -1}}

                                ];
                                console.log(agg);
                                //tickets.aggregate(agg, function (err1, dbTicket1) {
                                if (err1) {
                                    throw err1;
                                } else {
                                    tickets.find({"CRN": objRequest.CRN, "Category": objRequest.Category}).toArray(function (err, crn_cat_exist) {
                                        if ((crn_cat_exist.length === 0 && objRequest.CRN !== "") || (crn_cat_exist.length > 0 && objRequest.CRN === "")) {
                                            var todayDate = new Date();

                                            var NewTicket_Id;
                                            var productname = "";
                                            if (objRequest["Category"] === "Finmart") {
                                                productname = "FM";
                                            } else {
                                                productname = objRequest["Product"].substring(0, 2).toString().toUpperCase();
                                            }

                                            if (Ticket_id === "") {
                                                //create new ticket id.
                                                NewTicket_Id = productname + objRequest["Category"].substring(0, 2).toString().toUpperCase() + autoIndex;
                                                isticket_created = 1;
                                            } else {
                                                NewTicket_Id = Ticket_id;
                                                isticket_created = 0;
                                            }
                                            tickets.findOne({"Ticket_Id": Ticket_id}, {sort: {"Modified_On": -1}}, function (err, dbticket) {
                                                console.log(dbticket);

                                                var arg = {};

                                                arg = {
                                                    Ticket_Id: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                                    Product: dbticket !== null ? dbticket['Product'] : product_id,
                                                    Category: dbticket !== null ? dbticket["Category"] : objRequest["Category"],
                                                    SubCategory: dbticket !== null ? dbticket["SubCategory"] : objRequest["SubCategory"],
                                                    From: dbticket !== null ? dbticket["From"] : Is_Customer === true ? objRequest["Agent_Name"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') ',
                                                    To: dbticket !== null ? dbticket["To"] : Is_Customer === true ? objRequest["Agent_Name"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') ',
                                                    Status: (objRequest["Status"] === "0" || objRequest["Status"] === undefined) ? dbticket["Status"] : objRequest["Status"],
                                                    Created_By: dbticket !== null ? dbticket["Created_By"] : Is_Customer === true ? objRequest["Agent_Name"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') ',
                                                    Modified_By: agentdetails.Emp_Id,
                                                    Created_On: dbticket !== null ? dbticket["Created_On"] : (objRequest["Created_On"] === "" ? todayDate : objRequest["Created_On"]),
                                                    Modified_On: todayDate,
                                                    CRN: dbticket !== null ? dbticket["CRN"] : objRequest["CRN"],
                                                    Mobile_No: dbticket !== null ? dbticket["Mobile_No"] : objRequest["Mobile_No"],
                                                    Vehicle_No: dbticket !== null ? dbticket["Vehicle_No"] : objRequest["Vehicle_No"],
                                                    Remark: objRequest["Remark"],
                                                    ss_id: dbticket !== null ? dbticket["ss_id"] : agentdetails.Emp_Id,
                                                    SubCategory_level2: objRequest["SubCategory_level2"],
                                                    CRN_owner: dbticket !== null ? dbticket["CRN_owner"] : objRequest["CRN_owner"],
                                                    IsActive: 1,
                                                    fba_id: dbticket !== null ? dbticket["fba_id"] : agentdetails.FBA_ID,
                                                    CRN_fba_id: dbticket !== null ? dbticket["CRN_fba_id"] : objRequest["CRN_fba_id"],
                                                    channel: dbticket !== null ? dbticket["channel"] : objRequest["channel"],
                                                    subchannel: dbticket !== null ? dbticket["subchannel"] : objRequest["subchannel"],
                                                    UploadFiles: "",
                                                    Ticket_Code: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                                    Agent_Email_Id: Is_Customer === true ? objRequest["Agent_Email"] : agentdetails.Email_Id,
                                                    Transaction_On: dbticket !== null ? dbticket['Transaction_On'] : objRequest["Transaction_On"],
                                                    Source: objRequest["Source"],
                                                    RM_Email_Id: dbticket !== null ? dbticket["RM_Email_Id"] : objRequest["rm_email_id"],
                                                    Agent_Name: dbticket !== null ? dbticket["Agent_Name"] : objRequest["Agent_Name"],
                                                    Pincode: dbticket !== null ? dbticket["Pincode"] : objRequest["Pincode"] - 0,
                                                    Insurer_Id: dbticket !== null ? dbticket["insurer_id"] : objRequest["Insurer_Id"] !== "" ? parseInt(objRequest["Insurer_Id"]) : ""
                                                };

                                                if (dbticket !== null) {
                                                    updateobjRequest = dbticket;
                                                    var objticket = {};
                                                    objticket['IsActive'] = 0;

                                                    tickets.updateMany({'Ticket_Id': NewTicket_Id}, {$set: {"IsActive": 0}}, function (err, numAffected) {
                                                        if (err) {
                                                            res.json({Msg: 'Ticket_Not_Saved', Details: err});
                                                        } else {
                                                            //res.json({Msg: 'Success_Created', Details: numAffected});
                                                        }
                                                    });
                                                }

                                                tickets.insertOne(arg, function (err, res1) {
                                                    if (err)
                                                        throw err;
                                                    if (res1["insertedCount"] > 0) {

                                                        //user_details start
                                                        var user_details = db.collection('user_details');
                                                        if (isticket_created === 1) {
                                                            autoIncrement.getNextSequence(db, 'user_details', function (err1, autoIndex) {
                                                                var arg = {
                                                                    Ticket_Id: autoIndex,
                                                                    Ticket_code: NewTicket_Id,
                                                                    Product: objRequest["Product"],
                                                                    Category: objRequest["Category"],
                                                                    Status: objRequest["Status"],
                                                                    Created_By: Is_Customer === true ? objRequest["Agent_Name"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') ',
                                                                    Created_On: objRequest["Created_On"] === "" ? todayDate : objRequest["Created_On"],
                                                                    Modified_By: agentdetails.Emp_Id - 0,
                                                                    Modified_On: todayDate,
                                                                    CRN: objRequest["CRN"],
                                                                    ss_id: objRequest["ss_id"] - 0,
                                                                    CRN_owner: objRequest["CRN_owner"],
                                                                    fba_id: objRequest["fba_id"],
                                                                    CRN_fba_id: objRequest["CRN_fba_id"],
                                                                    channel: objRequest["channel"],
                                                                    subchannel: objRequest["subchannel"],
                                                                    Source: objRequest["Source"],
                                                                    RM_Email_Id: objRequest["rm_email_id"],
                                                                    Agent_Name: objRequest["Agent_Name"],
                                                                    Pincode: objRequest["Pincode"] - 0,
                                                                    Transaction_On: objRequest["Transaction_On"],
                                                                    Insurer_Id: objRequest["Insurer_Id"],
                                                                    Agent_Email_Id: Is_Customer === true ? objRequest["Agent_Email"] : agentdetails.Email_Id
                                                                };
                                                                user_details.insertOne(arg, function (err, res1) {
                                                                    if (err) {
                                                                        throw err;
                                                                    } else {
                                                                        console.log('user_detailsInsert', err, res1);
                                                                    }
                                                                });
                                                            });
                                                        } else {
                                                            var objticket = {
                                                                "Modified_By": objRequest["Modified_By"] - 0,
                                                                "Status": objRequest['Status'],
                                                                "Modified_On": todayDate
                                                            };
                                                            user_details.update({'Ticket_code': NewTicket_Id}, {$set: objticket}, function (err, numAffected) {
                                                                console.log('user_detailsUpdate', err, numAffected);
                                                            });
                                                        }
                                                        //user_details end
                                                        //mg  
                                                        if (objRequest['fileupload_flag'] === 'Multiple') {
                                                            var objfile = {};
                                                            for (var i = 0; i < 4; i++) {
                                                                var doc_prefix = objRequest["doc_prefix_" + i] !== "" ? objRequest["doc_prefix_" + i] + "_" : "";
                                                                if (objRequest['file_path_' + i] !== "" && objRequest['file_name_' + i] !== "" && objRequest['file_path_' + i] !== undefined) {
                                                                    var source = objRequest['file_path_' + i];
                                                                    var DocName = objRequest['file_name_' + i];
                                                                    var extension = source.split(".");
                                                                    console.error("source  " + source);
                                                                    console.error("DocName  " + DocName);
                                                                    var pdf_web_path_horizon = config.environment.downloadurl + "/ticketing/" + NewTicket_Id + '/' + doc_prefix + DocName + "." + extension[extension.length - 1];
                                                                    console.error("pdf_web_path_horizon  " + pdf_web_path_horizon);

                                                                    move(source, NewTicket_Id, DocName, doc_prefix, function (err) {

                                                                    });
                                                                    objfile["file_" + i] = pdf_web_path_horizon;
                                                                    console.log(objfile);
                                                                }
                                                            }
                                                            var objdata = {'UploadFiles': objfile};
                                                            console.log("objdata : ", objdata);
                                                            tickets.findAndModify({'Ticket_Id': NewTicket_Id}, [["Modified_On", -1]], {$set: objdata}, {}, function (err, numAffected) {
                                                                console.log('UserDataUpdated', err, numAffected);
                                                                if (err) {
                                                                    objdata['Msg'] = err;
                                                                } else {
                                                                    objdata['Msg'] = numAffected;

                                                                }
                                                            });
                                                        } else {
                                                            var doc_prefix = objRequest["doc_prefix"] !== "" ? objRequest["doc_prefix"] + "_" : "";
                                                            if (objRequest['file_path'] !== "" && objRequest['file_name'] !== "" && objRequest['file_path'] !== undefined) {
                                                                var source = objRequest['file_path'];
                                                                var DocName = objRequest['file_name'];
                                                                var extension = source.split(".");
                                                                console.error("source  " + source);
                                                                console.error("DocName  " + DocName);
                                                                var pdf_web_path_horizon = config.environment.downloadurl + "/ticketing/" + NewTicket_Id + '/' + doc_prefix + DocName + "." + extension[extension.length - 1];
                                                                console.error("pdf_web_path_horizon  " + pdf_web_path_horizon);
                                                                move(source, NewTicket_Id, DocName, doc_prefix, function (err) {

                                                                });
                                                                var objfile = {
                                                                    "file_1": pdf_web_path_horizon
                                                                };
                                                                var objdata = {'UploadFiles': objfile};

                                                                tickets.findAndModify({'Ticket_Id': NewTicket_Id}, [["Modified_On", -1]], {$set: objdata}, {}, function (err, numAffected) {
                                                                    console.log('UserDataUpdated', err, numAffected);
                                                                    if (err) {
                                                                        objdata['Msg'] = err;
                                                                    } else {
                                                                        objdata['Msg'] = numAffected;

                                                                    }
                                                                });
                                                            }
                                                        }
                                                        //Send Mail
                                                        var Email = require('../models/email');
                                                        var objModelEmail = new Email();
                                                        var environment = config.environment.name === 'Production' ? "" : "QA-";
                                                        var category = Ticket_id === "" ? objRequest["Category"] : updateobjRequest["Category"];
                                                        var subcategory = Ticket_id === "" ? objRequest["SubCategory"] : updateobjRequest["SubCategory"];
                                                        var crn = Ticket_id === "" ? objRequest["CRN"] : updateobjRequest["CRN"];
                                                        var product = Ticket_id === "" ? objRequest["Product"] : updateobjRequest["Product"];
                                                        var status = Ticket_id === "" ? objRequest["Status"] : updateobjRequest["Status"];

                                                        var Created_On = updateobjRequest["Created_On"];
                                                        var Transaction_On = Ticket_id === "" ? objRequest["Transaction_On"] : updateobjRequest["Transaction_On"];
                                                        var rm_emailid = "";
                                                        rm_emailid = Ticket_id === "" ? objRequest["rm_email_id"] : updateobjRequest["RM_Email_Id"];
                                                        var cc = '';
                                                        var to = "";

                                                        if (agentdetails.Email_Id !== null && agentdetails.Email_Id !== undefined) {
                                                            to = agentdetails.Email_Id;
                                                        } else if (Is_Customer) {
                                                            to = objRequest["Agent_Email"];
                                                        }

                                                        if (emailtocc.hasOwnProperty(objRequest["Category_Name"])) {
                                                            if (objRequest["Category_Name"] === "Product Input Page") {
                                                                if (emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["to"] !== "")
                                                                {
                                                                    to += "," + emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["to"];
                                                                }
                                                                if (emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["cc"] !== "")
                                                                {
                                                                    cc += rm_emailid !== "" ? "," + rm_emailid : '' + emailtocc[objRequest["Category_Name"]][objRequest["SubCategory"]][0]["cc"];
                                                                }
                                                            } else {

                                                                if (emailtocc[objRequest["Category_Name"]][0]["to"] !== "")
                                                                {
                                                                    to += "," + emailtocc[objRequest["Category_Name"]][0]["to"];
                                                                }
                                                                if (emailtocc[objRequest["Category_Name"]][0]["cc"] !== "")
                                                                {
                                                                    cc += rm_emailid !== "" ? "," + rm_emailid : '' + emailtocc[objRequest["Category_Name"]][0]["cc"];
                                                                }
                                                            }
                                                        }

                                                        var Insurer_Name = objRequest["Insurer_Id"] !== "" ? const_arr_insurer["Insurer_" + objRequest["Insurer_Id"]] : "";
                                                        var product = "";
                                                        if (category === "Finmart") {
                                                            //to += ";pramod.parit@policyboss.com";
                                                        } else {
                                                            product = "-" + objRequest["Product"];
                                                        }

                                                        if (crn !== "" && crn !== null && crn !== undefined) {
                                                            var subject = "[TICKET] " + NewTicket_Id + " - " + crn + " " + environment + product + '-' + category + '-' + subcategory;
                                                        } else {
                                                            var subject = "[TICKET] " + NewTicket_Id + " " + environment + product + '-' + category + '-' + subcategory;
                                                        }

                                                        var mail_content = '<html><body>' +
                                                                'Ticket is created.' +
                                                                '<p></p>Ticket No - ' + NewTicket_Id +
                                                                '<p></p>CRN  - ' + crn +
                                                                '<p></p>Status  - ' + status +
                                                                '<p></p>Product  - ' + product +
                                                                '<p></p>Remarks  - ' + objRequest["Remark"] +
                                                                '<p></p>You will be notified once ticket is resolved.' +
                                                                '<p></p>You can check ticket status in my ticket section.' +
                                                                '</body></html>';

                                                        if (to !== "") {
                                                            // objModelEmail.send('noreply@policyboss.com', to, subject, mail_content, cc, config.environment.notification_email, crn);

                                                        }
                                                        if (Ticket_id === "") {
                                                            res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is created.', 'Created_On': moment(todayDate).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Insurer_Name': Insurer_Name, "Product_Name": objRequest["Product"]});
                                                        } else {
                                                            res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': crn, 'Category': category, 'SubCategory': subcategory, 'Msg': 'Ticket is updated.', 'Created_On': moment(Created_On).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(Transaction_On).format("YYYY-MM-DD HH:mm:ss"), 'Insurer_Name': Insurer_Name, "Product_Name": objRequest["Product"]});
                                                        }


                                                    } else {
                                                        res.json({'Status': "Fail", 'Msg': "No Ticket raised"});
                                                    }
                                                    //console.log(res);
                                                });
                                            });
                                        } else {
                                            res.json({'Status': "exist", 'Msg': 'Ticket for this CRN under this category is already created'});
                                        }
                                    });
                                }
                            });
                        });
                    } else {
                        res.json({'Status': "Fail", 'Msg': "Ss Id is 0"});
                    }
                });
            } else {
                res.json({'Status': "Fail", 'Msg': ""});
            }
        });
    } catch (err) {
        return res.send(err.stack);
    }
});
router.post('/lazy_pay_log/check_eligibility', function (req, res) {
    try {
        var gender = req.body.gender === "M" ? "male" : req.body.gender === "F" ? "female" : "other";
        var request_page = req.body.request_page === "quote" ? "quote" : "proposal";
        if (request_page === "quote") {
            var line1 = req.body.city;
            var line2 = req.body.state;
            var pincode = req.body.pincode.toString();
        } else {
            var line1 = req.body.permanent_address_1 + " " + req.body.permanent_address_2 + " " + req.body.permanent_address_3;
            var line2 = req.body.city_name + "," + req.body.state_name;
            var pincode = req.body.permanent_pincode;
        }
        var db_arg = {
            'PB_CRN': parseInt(req.body.crn),
            'User_Data_Id': parseInt(req.body.udid),
            'Customer Name': req.body.contact_name,
            "Customer_Mobile": parseInt(req.body.mobile),
            "PAN_Card": req.body.pan,
            "Date_of_Birth": req.body.birth_date,
            "Request_Page": request_page,
            "Status": "",
            "LazyPay_Request": "",
            "LazyPay_Response": "",
            "LazyPay_Request_Core": "",
            "Created_On": new Date(),
            "Modified_On": ""
        };

        const str_content = req.body.mobile.toString() + req.body.final_premium.toString() + "INR";//<mobile+amount+currency>
//                    const key = (config.environment.name !== 'Production' ? "898816000f6073d5789e67356a713862d5ffdcf7" : ""); //old
        const key = (config.environment.name !== 'Production' ? "73017b15be7d5954adb1182c59caa8b49c84f9d8" : "c7e6f6f7c28fc11ed1ac2176c13b68bcd9e6d318"); //new

        const hash = crypto.createHmac('sha1', key)
                .update(str_content)
                .digest('hex');
        console.log('LazyPay signature : ', hash);
        args = {
            headers: {
                "Content-Type": "application/json",
//                            "accessKey": (config.environment.name !== 'Production' ? "BI2HN64L6JLMSY0NYFJ3" : ""), //old
                "accessKey": (config.environment.name !== 'Production' ? "P6K6A03MS039NA5MHSOK" : "OYAAE1M92CW5MMAH65IR"), //new
                "signature": hash
            },
            data: {
                "userDetails": {
                    "firstName": req.body.first_name,
                    "middleName": req.body.middle_name,
                    "lastName": req.body.last_name,
                    "mobile": req.body.mobile.toString(),
                    "pan": req.body.pan,
                    "dob": req.body.birth_date,
                    "gender": gender,
                    "email": req.body.email,
                    "address": {
                        "line1": line1,
                        "line2": line2,
                        "pincode": pincode
                    }
                },
                "amount": {
                    "value": req.body.final_premium.toString(),
                    "currency": "INR"
                },
                "cbpConsent": {
                    "value": true,
                    "consentTime": moment().utc().format("YYYY-MM-DD HH:mm:ss")
                }
            }
        };
        let url = (config.environment.name !== 'Production' ? "https://sboxapi.lazypay.in" : "https://api.lazypay.in") + "/api/lazypay/cof/v0/eligibility";
        process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;
        db_arg.LazyPay_Request = JSON.stringify(args.data); // store request
        db_arg.LazyPay_Request_Core = JSON.stringify(args); // store all request
        client.post(url, args, function (data) {
            if (data) {
                if (data.hasOwnProperty('isEligible') && data['isEligible'] === true) {
                    db_arg.Status = "Success";
                } else {
                    db_arg.Status = "Fail";
                }
                db_arg.LazyPay_Response = JSON.stringify(data);
                let add_lazy_pay_log = new lazy_pay_log(db_arg);
                add_lazy_pay_log.save(function (err, res1) {
                    if (err) {
                        console.log("Failed");
                    } else {
                        console.log("Inserted Sucessfully");
                    }
                });
                res.json({'Response': data});
            }
        });
    } catch (err) {
        console.log(err);
        res.json({'Response': err.stack});
    }
});
router.post('/erp_health_journey', function (req, res, next) {
    try {
        var Client = require('node-rest-client').Client;
        var objClient = new Client();
        objClient.get(config.environment.weburl + '/clients', {}, function (data, response) {
            if (data) {
                if (data.hasOwnProperty(req.body.client_key) && req.body.secret_key === data[req.body.client_key]['Secret_Key'] && data[req.body.client_key]['Is_Active'] === true) {
                    var Preferred_Data = {
                        'User_Data_Id': req.body.User_Data_Id,
                        'Plan_Name': req.body.Plan_Name,
                        'Plan_Id': req.body.Plan_Id,
                        'Insurer_Id': req.body.Insurer_Id,
                        'Insurer_Name': req.body.Insurer_Name,
                        'Preferred_On': new Date()
                    };
                    var User_Data = require('../models/user_data');
                    var ud_cond = {'User_Data_Id': req.body.User_Data_Id};
                    User_Data.findOne(ud_cond, function (err, dbUserData) {
                        if (err) {

                        } else {
                            if (dbUserData) {
                                User_Data.update({'User_Data_Id': dbUserData['User_Data_Id']}, {$set: {"Preferred_Plan_Data": Preferred_Data}}, function (err, numAffected) {
                                    console.log('UserDataPolicyDataUpdate', err, numAffected);
                                    res.json({'Msg': 'SUCCESS'});
                                });
                            } else {
                                res.json({'Msg': 'Udid_Not_Found'});
                            }
                        }
                    });
                } else {
                    res.json({'Msg': 'Not Authorized'});
                }
            }
        });
    } catch (e) {
        console.error('erp_health_journey', 'exception', e);
    }
});

router.post('/standalone_payments/customer_data', function (req, res) {
    try {
        var standalon_payment = require('../models/standalone_payment');
        let objReq = req.body;
        if (objReq && objReq.vehicle_reg_no) {
            standalon_payment.findOne({'vehicle_reg_no': objReq.vehicle_reg_no, 'status': 'Success'}, function (err, objDbData) {
                if (err) {
                    res.json({
                        Status: 'Error',
                        Msg: err.stack
                    });
                } else {
                    if (objDbData && objDbData.status && objDbData.status === "Success") {
                        res.json({
                            Status: 'Fail',
                            Msg: 'Payment Already Completed'
                        });
                    } else {
                        if (objDbData && objDbData._doc) {
                            objDbData['cc'] = objReq.cc;
                            objDbData['premium_amount'] = objReq.premium_amount;
                            objDbData['name'] = objReq.name;
                            objDbData['mobile'] = objReq.mobile;
                            objDbData['email'] = objReq.email;
                            objDbData['address'] = objReq.address;
                            objDbData['Modefied_On'] = new Date();
                            objDbData['insurer_id'] = objReq.insurer_id;
                            objReq = objDbData;
                        } else {
                            objReq.status = 'Pending';
                            objReq.product_id = 10;
                            objReq.Created_On = new Date();
                            objReq.Modefied_On = new Date();
                        }
                        var spObj = new standalon_payment(objReq);
                        spObj.save(function (err, spData) {
                            if (err) {
                                res.json({
                                    Status: 'Error',
                                    Msg: err.stack
                                });
                            }
                            if (spData && spData._doc) {
                                var Payment = {};
                                var merchant_key = ((config.environment.name === 'Production') ? 'o7LxX9fJ' : 'BC50nb');
                                var salt = ((config.environment.name === 'Production') ? 'c6ob2Q7Wb4' : 'Bwxo1cPe');
                                var merchant_id = ((config.environment.name === 'Production') ? ((spData.insurer_id && spData.insurer_id == 17) ? '6867635' : '6756734') : '4825050');//SBI-6867635//Edelweiss-6756734
                                var amount = (((config.environment.testing_ssid).indexOf(parseInt(spData.QData.ss_id)) > -1) ? '2' : spData.premium_amount);//spData.premium_amount;
                                var productinfo = {paymentParts: [{name: 'splitId1', merchantId: merchant_id, value: amount, commission: '0.00', description: 'splitId1 summary'}]};
                                var hashSequence = 'key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10';
                                var str = hashSequence.split('|');
                                var txnid = spData.vehicle_reg_no;
                                var hash_string = '';
                                for (var hash_var in str) {
                                    if (str[hash_var] === "key")
                                    {
                                        hash_string = hash_string + merchant_key;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "txnid")
                                    {
                                        hash_string = hash_string + txnid;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "amount")
                                    {
                                        hash_string = hash_string + amount;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "productinfo")
                                    {
                                        hash_string = hash_string + JSON.stringify(productinfo);
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "firstname")
                                    {
                                        hash_string = hash_string + spData.name;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "email")
                                    {
                                        hash_string = hash_string + spData.email;
                                        hash_string = hash_string + '|';
                                    } else
                                    {
                                        hash_string = hash_string + '';
                                        hash_string = hash_string + '|';
                                    }
                                }
                                hash_string = hash_string + salt;
                                var crypto = require('crypto');
                                var hash = crypto.createHash("sha512").update(hash_string).digest("hex").toLowerCase();
                                var pg_data = {
                                    'firstname': spData.name,
                                    'lastname': '',
                                    'surl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/standalone_payment_status/' + txnid + '/' + spData.standalone_payment_id, //
                                    'phone': spData.mobile,
                                    'key': merchant_key,
                                    'hash': hash,
                                    'curl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/standalone_payment_status/' + txnid + '/' + spData.standalone_payment_id, //
                                    'furl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/standalone_payment_status/' + txnid + '/' + spData.standalone_payment_id, //
                                    'txnid': txnid,
                                    'productinfo': JSON.stringify(productinfo),
                                    'amount': amount,
                                    'email': spData.email,
                                    'SALT': salt,
                                    'service_provider': "payu_paisa"
                                };
                                Payment.pg_data = pg_data;
                                Payment.pg_url = ((config.environment.name === 'Production') ? 'https://secure.payu.in/_payment' : 'https://test.payu.in/_payment');
                                Payment.pg_redirect_mode = 'POST';
                                standalon_payment.update({'vehicle_reg_no': txnid, 'standalone_payment_id': spData.standalone_payment_id}, {$set: {'pg_data': Payment}}, {multi: false}, function (err, numAffected) {

                                });
                                res.json({
                                    Status: 'Success',
                                    Msg: Payment
                                });
                            } else {
                                res.json({
                                    Status: 'Fail',
                                    Msg: spData
                                });
                            }
                        });
                    }
                }
            });
        } else {
            res.json({
                Status: 'Fail',
                Msg: ''
            });
        }
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }

});
router.post('/standalone_payments/pg', function (req, res) {
    try {
        let objReq = req.body;
        let reg_no = objReq.reg_no;
        let pg_id = objReq.pg_id - 0;

        this.objReq = objReq;
        var standalon_payment = require('../models/standalone_payment');
        standalon_payment.findOne({'vehicle_reg_no': reg_no, 'standalone_payment_id': pg_id}, function (err, dataSP) {
            try {
                if (dataSP && dataSP._doc && dataSP._doc.hasOwnProperty('Horizon_Status') && (dataSP._doc['Horizon_Status'] === "PAYMENT_SUCCESS" || dataSP._doc['Horizon_Status'] === "FASTLANE_DONE"
                        || dataSP._doc['Horizon_Status'] === "PREMIUM_SEARCH" || dataSP._doc['Horizon_Status'] === "PREMIUM_EXCEPTION" || dataSP._doc['Horizon_Status'] === "PREMIUM_SUCCESS"
                        || dataSP._doc['Horizon_Status'] === "PROPOSAL_EXCEPTION" || dataSP._doc['Horizon_Status'] === "PROPOSAL_SUCCESS" || dataSP._doc['Horizon_Status'] === "VERIFICATION_EXCEPTION"
                        || dataSP._doc['Horizon_Status'] === "VERIFICATION_SUCCESS" || dataSP._doc['Horizon_Status'] === "TRANS_SUCCESS_WO_POLICY" || dataSP._doc['Horizon_Status'] === "TRANS_SUCCESS_WITH_POLICY")) {
                    res.json({
                        Status: 'Success',
                        Msg: ''
                    });
                } else {
                    var objRequset = this.objReq;
                    var reg_no = objRequset.reg_no;
                    var pg_id = objRequset.pg_id - 0;
                    var status = 'Fail';
                    var pg_status = "PAYMENT_FAIL";
                    if (objRequset && objRequset.pg_post && objRequset.pg_post.status && objRequset.pg_post.status === "success") {
                        pg_status = "PAYMENT_SUCCESS";
                        status = 'Success';
                    }
                    standalon_payment.update({'vehicle_reg_no': reg_no, 'standalone_payment_id': pg_id}, {$set: {'pg_get': objRequset.pg_get, 'pg_post': objRequset.pg_post, 'status': status, Horizon_Status: pg_status}}, {multi: false}, function (err, numAffected) {
                        if (err) {
                            res.json({
                                Status: 'Error',
                                Msg: err.stack
                            });
                        } else {
                            if (numAffected && numAffected.nModified > 0) {
                                res.json({
                                    Status: 'Success',
                                    Msg: numAffected
                                });
                            } else {
                                res.json({
                                    Status: 'Fail',
                                    Msg: numAffected
                                });
                            }
                        }
                    });
                }

            } catch (e) {
                res.json({
                    Status: 'Error',
                    Msg: e.stack
                });
            }
        });
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }

});
router.post('/standalone_payments/save_logs', function (req, res) {
    try {
        var pg_id = req.body['standalone_payment_id'] ? req.body['standalone_payment_id'] - 0 : 0;
        var reg_no = req.body['vehicle_reg_no'] ? req.body['vehicle_reg_no'] : "";
        req.body['Modefied_On'] = new Date();
        if (isNaN(pg_id) === false && pg_id > 0 && reg_no !== "") {
            if (req.body && req.body.is_fastlane === false && req.body.email) {
                var Email = require('../models/email');
                var objModelEmail = new Email();
                var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-PolicyBoss.com-' + reg_no + ' EDELWEISS TWO WHEELER SATP QUICK ';
                email_body = '<html><body><p>Hi,</p><BR/><p>Please find the below URL to fill the rquired data to proceed further</p>'
                        + '<BR><p>URL : ' + (config.environment.portalurl) + '/TwoWheeler/vehicleDetails.html?pg_id=' + pg_id + ' </p></body></html>';
                objModelEmail.send('noreply@policyboss.com', req.body.email, sub, email_body, '', '', ''); //UAT
            }
            var standalon_payment = require('../models/standalone_payment');
            standalon_payment.update({'vehicle_reg_no': reg_no, 'standalone_payment_id': pg_id}, {$set: req.body}, {multi: false}, function (err, numAffected) {
                if (err) {
                    res.json({
                        Status: 'Error',
                        Msg: err.stack
                    });
                } else {
                    if (numAffected && numAffected.nModified > 0) {
                        res.json({
                            Status: 'Success',
                            Msg: numAffected
                        });
                    } else {
                        res.json({
                            Status: 'Fail',
                            Msg: numAffected
                        });
                    }
                }
            });
        } else {
            res.json({
                Status: 'Fail',
                Msg: pg_id
            });
        }
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }
});


router.post('/getFilterFinalAdvisory', function (req, res) {
    try {
        let Client = require('node-rest-client').Client;
        let client = new Client();
        let objReq = req.body;
        let filterBenefits = objReq.filter_benefits.split(",");
        let insurer_id = parseInt(objReq.insurer_id);
        let plan_id = parseInt(objReq.plan_id);
        var health_si = objReq.health_si;
        let is_existing = objReq.is_existing;
        let ScoreMaster = [];
        let planBenefits = [];
        if (fs.existsSync(appRoot + "/tmp/cachemaster/advisory_score_master.log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachemaster/advisory_score_master.log").toString();
            ScoreMaster = JSON.parse(cache_content);
        } else {
            MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                if (err)
                    throw err;
                let score_master = db.collection('health_benefits_score_master');
                score_master.find({}, {_id: 0}).toArray(function (err, scoreMaster) {
                    if (err) {
                        res.send(err);
                    } else {
                        ScoreMaster = scoreMaster;
                        fs.writeFile(appRoot + "/tmp/cachemaster/advisory_score_master.log", JSON.stringify(scoreMaster), function (err) {
                            if (err) {
                                return console.error(err);
                            }
                        });
                    }
                });
            });
            sleep(500);
        }
        let insWeight = require('../resource/request_file/AdvisoryInsurerWeight.json');

        let final_advisory = 0;
        let insWtIndex = insWeight.findIndex(a => a.Insurer_Id === insurer_id);
        let url = "https://horizon.policyboss.com:5443/benefits/" + insurer_id + "/" + plan_id + "/undefined/" + health_si;
        client.get(url, function (data, response) {
            if (data.length > 0) {
                let total_score = 0;
                let wt_percent = insWeight[insWtIndex].Weightage_Percent / 100;
                for (let j = 0; j < data.length; j++) {
                    let objKey = ScoreMaster.findIndex(s => s['Feature Key'].toUpperCase() === data[j].Benefit_Key.toUpperCase() && s['Feature Value'].toUpperCase() === data[j].Benefit_Value.toUpperCase());
                    if (objKey > -1) {
                        for (let b = 0; b < filterBenefits.length; b++) {
                            if (filterBenefits[b].trim() === ScoreMaster[objKey]['Feature Key']) {
                                total_score += ScoreMaster[objKey]['FeatureWeightedScore'];
                                final_advisory += ScoreMaster[objKey]['Feature Score'];
                            }
                        }
                        planBenefits.push(data[j]);
                    }
                }
                let final_score = Number(((final_advisory / filterBenefits.length) * wt_percent).toFixed(1));
                final_advisory = final_score > 5 ? 5 : final_score;
                total_score = Number(total_score.toFixed(1));
                res.json({"Insurer_Id": insurer_id, "Plan_Id": plan_id, "Final_Advisory": final_advisory, "Is_Existing": is_existing, "Benefits": planBenefits});
            } else {
                res.json({"Msg": "Not found"});
            }
        });
    } catch (ex) {
        console.error('Exception in Filter Advisory Score-', ex);
    }
});
function LoadSession(req, res, next) {
    try {
        var objRequestCore = req.body;
        if (req.method == "GET") {
            objRequestCore = req.query;
        }
        objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
        if (objRequestCore.hasOwnProperty('session_id') && objRequestCore['session_id'] != '') {
            var Session = require('../models/session');
            Session.findOne({"_id": objRequestCore['session_id']}, function (err, dbSession) {
                if (err) {
                    res.send(err);
                } else {
                    if (dbSession) {
                        dbSession = dbSession._doc;
                        var obj_session = JSON.parse(dbSession['session']);
                        req.obj_session = obj_session;
                        return next();
                    } else {
                        return res.status(401).json({'Msg': 'Session Expired.Not Authorized'});
                    }
                }
            });
        } else {
            return next();
        }
    } catch (e) {
        console.error('Exception', 'GetReportingAssignedAgent', e);
        return next();

    }
}

function LoadSession_formidable(req, res, next) {

    try {

        var formidable = require('formidable');
        var form = new formidable.IncomingForm();
        form.parse(req, function (err, fields, files) {
            var objRequestCore = fields;
            var objRequestCoreFiles = files;
            if (req.method == "GET") {
                objRequestCore = req.query;
            }
            objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
            if (objRequestCore.hasOwnProperty('session_id') && objRequestCore['session_id'] != '') {
                var Session = require('../models/session');
                Session.findOne({"_id": objRequestCore['session_id']}, function (err, dbSession) {
                    if (err) {
                        res.send(err);
                    } else {
                        if (dbSession) {
                            dbSession = dbSession._doc;
                            var obj_session = JSON.parse(dbSession['session']);

                            req.obj_session = obj_session;
                            req.fields = objRequestCore;
                            req.files = objRequestCoreFiles;
                            return next();
                        } else {
                            return res.status(401).json({'Msg': 'Session Expired.Not Authorized'});
                        }
                    }
                });
            } else {
                return next();
            }
        });
    } catch (e) {
        console.error('Exception', 'LoadSession', e);
        return next();

    }
}
function randomString(length, chars) {
    chars = chars || '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var result = '';
    for (var i = length; i > 0; --i)
        result += chars[Math.floor(Math.random() * chars.length)];
    return result;
}
function jsonToQueryString(json) {
    return  Object.keys(json).map(function (key) {
        return encodeURIComponent(key) + '=' +
                encodeURIComponent(json[key]);
    }).join('&');
}
function stringToQueryJSON(json) {
    var jsonstring = decodeURIComponent(json);

    return JSON.parse(jsonstring);
}



function calculateAge(birthday) {
    var ageDifMs = Date.now() - birthday.getTime();
    var ageDate = new Date(ageDifMs);
    return Math.abs(ageDate.getUTCFullYear() - 1970);
}

function LoadSession1(req, res, next) {

    try {

        var formidable = require('formidable');
        var form = new formidable.IncomingForm();
        form.parse(req, function (err, fields, files) {
            var objRequestCore = fields;
            var objRequestCoreFiles = files;
            if (req.method == "GET") {
                objRequestCore = req.query;
            }
            objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
            if (objRequestCore.hasOwnProperty('session_id') && objRequestCore['session_id'] != '') {
                var Session = require('../models/session');
                Session.findOne({"_id": objRequestCore['session_id']}, function (err, dbSession) {
                    if (err) {
                        res.send(err);
                    } else {
                        if (dbSession) {
                            dbSession = dbSession._doc;
                            var obj_session = JSON.parse(dbSession['session']);

                            req.obj_session = obj_session;
                            req.fields = objRequestCore;
                            req.files = objRequestCoreFiles;
                            return next();
                        } else {
                            return res.status(401).json({'Msg': 'Session Expired.Not Authorized'});
                        }
                    }
                });
            } else {
                return next();
            }
        });
    } catch (e) {
        console.error('Exception', 'LoadSession', e);
        return next();

    }
}
function file_saved(files, Corporate_Lead_Id) {
    // files

    let file_name = "";
    if (files.hasOwnProperty('Floater_Location_list')) {

        file_name = files['Floater_Location_list'].name;
        let path = appRoot + "/tmp/corporate_lead/";
        let pdf_sys_loc_horizon = path + Corporate_Lead_Id + '/' + file_name;
        let oldpath = files['Floater_Location_list'].path;
        console.error('pdf_sys_loc_horizon_lms', pdf_sys_loc_horizon);
        console.error('oldpath_lms', oldpath);
        if (fs.existsSync(path + Corporate_Lead_Id))
        {
        } else
        {
            fs.mkdirSync(path + Corporate_Lead_Id);
        }
        fs.readFile(oldpath, function (err, data) {
            if (err) {
                console.error('Read', err);
            }
            console.log('File read!');
            console.error('File read_lms');
            // Write the file
            fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                if (err) {
                    console.error('Write', err);
                } else {
                    console.error('Writefile');
                }
            });
            // Delete the file
            fs.unlink(oldpath, function (err) {
                if (err)
                    throw err;
                console.log('File deleted!');
                console.error('File deleted_lms');
            });
        });



    }
    return file_name;
}
function isEmpty(obj) {
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop))
            return false;
    }

    return true;
}
function movefilelocation(objfiles, NewTicket_Id, doc_prefix) {
    var objfile = {
        "file_1": null,
        "file_2": null,
        "file_3": null,
        "file_4": null};
    var objdata = {'UploadFiles': objfile};

    for (var i in objfiles) {
        if (i === "0") {
            doc_prefix = doc_prefix !== "" && doc_prefix !== undefined ? doc_prefix + "_" : "";
        }
        var source = objfiles[i]['path'];
        var DocName = objfiles[i]['originalFilename'].split('.')[0];
        var extension = source.split(".");
        console.error("source  " + source);
        console.error("DocName  " + DocName);
        var pdf_web_path_horizon = config.environment.downloadurl + "/tmp/ticketing/" + NewTicket_Id + '/' + doc_prefix + DocName + "." + extension[extension.length - 1];
        console.error("pdf_web_path_horizon  " + pdf_web_path_horizon);
        move(source, NewTicket_Id, DocName, doc_prefix, function (err) {

        });
        var a = parseInt(i) + 1;
        objdata.UploadFiles["file_" + a] = pdf_web_path_horizon;
    }

    console.log(objdata);
    var tickets = require('../models/ticket');
    tickets.update({'Ticket_Id': NewTicket_Id}, {$set: {"UploadFiles": objdata['UploadFiles']}}, function (err, numAffected) {
        console.log('TicketUpdated', err, numAffected);
        if (err) {
            objdata['Msg'] = err;
        } else {
            objdata['Msg'] = numAffected;
        }
    });

}
function move(oldPath, ticketid, newname, doc_prefix, cb) {
    ensureExists(store_path + "/" + ticketid, 0777, function (err) {
        if (err) // handle folder creation error
            cb(err);
        else // we're all good
        {
            console.error("oldPath " + oldPath)
            getNewName(oldPath, newname, ticketid, doc_prefix, function (newFilePath) {
                fs.rename(oldPath, newFilePath, (err) => {
                    if (err)
                        cb(err);
                    //console.log('Rename complete!');
                    cb();
                });
                return newFilePath;
            });

        }
    });
//    getNewName(oldPath, newname, ticketid, function (newFilePath) {
//        fs.rename(oldPath, newFilePath, (err) => {
//            if (err)
//                cb(err);
//            //console.log('Rename complete!');
//            cb();
//        });
//    });


}

function ensureExists(path, mask, cb) {
    if (typeof mask == 'function') { // allow the `mask` parameter to be optional
        cb = mask;
        mask = 0777;
    }
    fs.mkdir(path, mask, function (err) {
        if (err) {
            if (err.code == 'EEXIST')
                cb(null); // ignore the error if the folder already exists
            else
                cb(err); // something else went wrong
        } else
            cb(null); // successfully created folder
    });
}
function get_search_source(user) {
    var client_key_val = '';
    try {
        client_key_val = 'PB-Direct';
        var agent_id = 0;
        var fba_id = 0;
        var posp_sources = 0;

        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
            posp_sources = user['Premium_Request']['posp_sources'] - 0;
            var ss_id = (user['Premium_Request']['ss_id'] - 0);
            fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
            if (posp_sources === 1) {
                if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                    client_key_val = 'DC-POSP';
                    if ([8279, 6328, 9627, 6425].indexOf(ss_id) > -1) {
                        client_key_val = 'FINPEACE';
                    }
                } else if (ss_id !== 5) {
                    client_key_val = 'DC-NON-POSP';
                } else if (ss_id === 5) {
                    client_key_val = 'DC-FBA';
                }
            } else if (posp_sources === 2) {
                if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                    client_key_val = 'SM-POSP';
                } else if (ss_id === 5) {
                    client_key_val = 'SM-FBA';
                } else {
                    client_key_val = 'SM-NON-POSP';
                }
            } else if (posp_sources === 8) {
                if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                    client_key_val = 'GS-POSP';
                } else if (ss_id === 5) {
                    client_key_val = 'GS-FBA';
                } else {
                    client_key_val = 'GS-NON-POSP';
                }
            } else if (posp_sources === 3) {
                if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                    client_key_val = 'ND-POSP';
                } else if (ss_id === 5) {
                    client_key_val = 'ND-FBA';
                } else {
                    client_key_val = 'ND-NON-POSP';
                }
            } else {
                if (user['Premium_Request']['posp_category'] === 'FOS') {
                    client_key_val = 'SM-FOS';
                } else if (user['Premium_Request']['posp_category'] === 'GS-FOS') {
                    client_key_val = 'GS-FOS';
                } else if (user['Premium_Request']['posp_category'] === 'RBS') {
                    client_key_val = 'RBS';
                } else {
                    client_key_val = 'PB-SS';
                }
            }
        } else if (user['Premium_Request']['user_source'] === 'tars') {
            client_key_val = 'BOT';
        }
    } catch (e) {
        console.error(e.stack);
    }
    return client_key_val;
}
function get_channel(channel) {
    var channel_key = "";
    var objSwitchUserType = {
        'DC-POSP': ['DC-POSP'],
        'DC-NON-POSP': ['DC-NON-POSP'],
        'SM-POSP': ['SM-POSP'],
        'SM-NON-POSP': ['SM-NON-POSP'],
        'SM-FOS': ['SM-FOS'],
        'RBS': ['RBS'],
        'PB-SS': ['PB-SS'],
        'GS-All': ['GS-FOS', 'GS-POSP', 'GS-NON-POSP', 'GS-FBA'],
        'DC-All': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA'],
        'SM-All': ['SM-POSP', 'SM-NON-POSP', 'SM-FBA']
    };

    channel_key = objSwitchUserType[channel];
    for (var i in objSwitchUserType) {
        for (var k in objSwitchUserType[i])
        {
            if (objSwitchUserType[i][k] === channel) {
                channel_key = i;
            }
        }

    }
    return channel_key;

}

function getNewName(oldPath, newname, ticketid, doc_prefix, cb) {
    var extension = oldPath.split(".");
    var filename = newname + '.' + extension[extension.length - 1];
    var newFilePath = store_path + "/" + ticketid + '/' + doc_prefix + filename;
    console.error("newFilePath " + newFilePath);
    cb(newFilePath);
}

function objectToHtml(objSummary) {
    var msg = '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Corp Lead</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow: 1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
    var row_inc = 0;
    for (var k in objSummary) {
        if (row_inc === 0) {
            msg += '<tr>';
            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Details</th>';
            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Value</th>';
            msg += '</tr>';
        }
        msg += '<tr>';
        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + k + '</td>';
        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + objSummary[k] + '</td>';
        msg += '</tr>';
        row_inc++;
    }
    msg += '</table></div>';
    return msg;
}
router.post('/posp_callback', function (req, res) {
    try {
        var posp_callback = require('../models/posp_callback');
        posp_callback.find({"Posp_Enquiry_Id": req.body.posp_enquiry_id}, function (err, data) {
            if (err) {
                res.send(err);
            } else {
                if (data.length > 0) {//update into existing
                    let db_Data = data[0]._doc;
                    let Visited_History = db_Data.hasOwnProperty('Visited_History') ? db_Data.Visited_History : [];
                    Visited_History.unshift(new Date());
                    let Visited_Count = db_Data.hasOwnProperty('Visited_Count') ? db_Data.Visited_Count + 1 : 1;
                    let objFresh_Quote = {
                        'Visited_History': Visited_History,
                        'Visited_Count': Visited_Count,
                        'Visited_On': new Date(),
                        'Modified_On': new Date(),
                        'Call_Time': req.body.call_time,
                        'Remark': req.body.remark,
                        'Ip_Address': req.body.ip_address
                    };
                    posp_callback.update({'Posp_Enquiry_Id': req.body.posp_enquiry_id - 0}, {$set: objFresh_Quote}, function (err, numAffected) {
                        console.log('msg - ' + numAffected);
                        res.json({'Msg': "Data Updated Successfully", 'Status': "Success"});
                    });
                } else {//insert new
                    var callback_data = {
                        'Posp_Enquiry_Id': req.body.posp_enquiry_id,
                        'Name': req.body.name,
                        'Mobile': req.body.mobile,
                        'Call_Time': req.body.call_time,
                        'Remark': req.body.remark,
                        'Status': 'InProgress',
                        'Ip_Address': req.body.ip_address,
                        'Visited_History': [new Date()],
                        'Visited_On': new Date(),
                        'Visited_Count': 1,
                        'Created_On': new Date(),
                        'Modified_On': new Date()
                    };
                    var posp_callback_data = new posp_callback(callback_data);
                    posp_callback_data.save(function (err1, dbrespnse) {
                        if (err1) {
                            res.json({'Msg': err1, 'Status': "Error"});
                        } else {
                            res.json({'Msg': "Data Inserted Successfully", 'Status': "Success"});
                        }
                    });
                }

                var subject = "POSP Sheduled call back";
                var mail_content = '<html><body><p>Dear Team,</p><BR/><p>Please find the sheduled call back details for posp enquiry.</p>'
                        + '<p>Name - ' + req.body.name + '<br>Mobile - ' + req.body.mobile + '<br>Callback Time - ' + req.body.call_time + '<br>Remarks - ' + req.body.remark + '</p></body></html>';
                var Email = require('../models/email');
                var objModelEmail = new Email();
                if (config.environment.name === 'Production') {
                    var arrTo = ['anuj.singh@policyboss.com'];
                    var arrCc = ['ashish.hatia@policyboss.com'];
                    var arrBcc = [config.environment.notification_email];
                } else {
                    var arrTo = ['anuj.singh@policyboss.com'];
                    var arrCc = ['ashish.hatia@policyboss.com', 'kevin.monteiro@policyboss.com'];
                    var arrBcc = [config.environment.notification_email];
                }
                objModelEmail.send('noreply@landmarkinsurance.co.in', arrTo.join(','), subject, mail_content, arrCc.join(','), arrBcc.join(','), '');
            }
        });
    } catch (e) {
        res.json({'Msg': e.stack, 'Status': "Error"});
    }
});
router.post('/app_visitor/save_data', function (req, res) {
    let AppVisitors = require('../models/app_visitor');
    req.body.Created_On = new Date();
    req.body.Modified_On = new Date();
    let AppVisitors_data = new AppVisitors(req.body);
    AppVisitors_data.save(function (err, objDB) {
        if (err) {
            res.json({'Msg': err, 'Status': "Error"});
        } else {
            res.json({
                'Msg': "Data Inserted Successfully",
                'Status': "Success",
                "visitor_Id": objDB._doc.visitor_Id
            });
        }
    });
});
router.post('/app_visitor/update_data/:visitorId', (req, res) => {
    try {
        let id = req.params.visitorId - 0;
        let AppVisitors = require('../models/app_visitor');
        let lastVisitedUrl = req.body.Last_Visited_Url;
        let ss_id = (req.body['ss_id'] === undefined ? '' : parseInt(req.body['ss_id']));
        let fba_id = (req.body['fba_id'] === undefined ? '' : parseInt(req.body['fba_id']));
        let app_type = (req.body['app_type'] === undefined ? '' : req.body['app_type']);
        let device_type = (req.body['device_type'] === undefined ? '' : req.body['device_type']);
        let user_agent = (req.body['user_agent'] === undefined ? '' : req.body['user_agent']);
        let objData = {
            "Modified_On": new Date(),
            "Last_Activity_On": new Date(),
            "Last_Visited_Url": lastVisitedUrl,
            "ss_id": ss_id,
            "fba_id": fba_id,
            "app_type": app_type,
            "device_type": device_type,
            "user_agent": user_agent
        };
        let cond = {
            "visitor_Id": id
        };
        AppVisitors.update(cond, {$set: objData}, function (err, numAffected) {
            if (err) {
                res.json({'Status': 'Fail', 'Msg': 'Error In Updation for Remove' + err});
            } else {
                if (numAffected && numAffected.nModified > 0) {
                    res.json({
                        Status: 'Success',
                        Msg: 'Visitor Updated Succesfully'
                    });
                } else {
                    res.json({
                        Status: 'Fail',
                        Msg: 'Visitor Not Updated'
                    });
                }
            }
        });
    } catch (e) {
        res.send(e.stack);
    }
});
router.post('/save_content_data', function (req, res) {
    var obj = {
        "Title": req.body['title'],
        "Header": req.body['header'],
        "Metadata": req.body['Metadata'],
        "URL": req.body['URL'],
        "Content": req.body['Content'],
        "Keywords": req.body['Keywords'],
        "Description": req.body['Description']
    };
    var save_type;
    var current_date = new Date();
    var version_val = moment(current_date).format('DDMMYYYYkkmmss');  //ddmmyyyyhhmmss
    var objData = {
        "ss_id": parseInt(req.body['ss_id']),
        "fba_id": parseInt(req.body['fba_id']),
        "Created_On": current_date,
        "Modified_On": current_date,
        "Created_By": parseInt(req.body['ss_id']),
        "Is_Active": 1,
        "Is_Preview": 1,
        "Version": parseInt(version_val),
        "Title": req.body['title'],
        "URL": req.body['URL']
    };
    if (req.body['data_val'] === "save") {
        objData['Status'] = "Preview";
        objData['Draft_Data'] = obj;
    } else if (req.body['data_val'] === "edit_save") {
        objData['Draft_Data'] = obj;
        objData['Status'] = "Preview";
    }/*else{
     objData['Draft_Data'] = obj;
     objData['Final_Data'] = obj;
     }*/
    save_type = req.body['data_val'];
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        if (err)
            throw err;
        var content_management = db.collection('content_managements');
        autoIncrement.getNextSequence(db, 'content_managements', function (err1, autoIndex) {
            if (err1)
                throw err;
            if (save_type === "save") {
                objData.Content_Id = autoIndex;
                content_management.insertOne(objData, function (err, data1) {
                    if (err) {
                        res.json({'Msg': 'Error in data save', Status: 'Fail'});
                    } else {
                        res.json({'Msg': 'Data Saved Succesfully!!!', Status: 'Success'});
                    }
                });
            } else if (save_type === "publish") {
                var obj = {
                    "ss_id": parseInt(req.body['ss_id']),
                    "Draft_Data.Title": req.body['title']
                };
                content_management.find(obj).toArray(function (err, data1) {
                    if (data1.length > 0) {
                        var objFinal = {
                            "Final_Data": data1[0]['Draft_Data'],
                            "Status": "Publish"
                        };
                        content_management.update({'ss_id': parseInt(req.body['ss_id']), 'Draft_Data.Title': req.body['title']}, {$set: objFinal}, function (err, numAffected) {
                            if (err) {
                                res.json({'Msg': 'Data not found, Please save data first'});
                            } else {
                                res.json({'Msg': 'Data Publish Succesfully !!!'});
                            }
                        });
                    } else {
                        res.json({'Msg': 'Data not found, Please save data first'});
                    }
                });
            } else if (save_type === "edit_save") {
                objData.Content_Id = autoIndex;
                content_management.insertOne(objData, function (err, data1) {
                    if (err) {
                        res.json({'Msg': 'Error in data save', Status: 'Fail'});
                    } else {
                        var obj = {
                            "ss_id": parseInt(req.body['ss_id']),
                            "Draft_Data.Title": req.body['old_title_val']
                        };
                        content_management.find(obj).toArray(function (err, data1) {
                            if (data1.length > 0) {
                                var objeditsave = {
                                    "Status": "Draft"
                                };
                                content_management.update({'ss_id': parseInt(req.body['ss_id']), 'Draft_Data.Title': req.body['old_title_val']}, {$set: objeditsave}, function (err, numAffected) {
                                    if (err) {
                                        res.json({'Msg': 'Data not found, Please save data first'});
                                    } else {
                                        res.json({'Msg': 'Data Saved Succesfully!!!', Status: 'Success'});
                                    }
                                });
                            } else {
                                res.json({'Msg': ''});
                            }
                        });
                    }
                });
            } else if (save_type === "edit_publish") {
                var obj = {
                    "ss_id": parseInt(req.body['ss_id']),
                    "Draft_Data.Title": req.body['title']
                };
                content_management.find(obj).toArray(function (err, data1) {
                    if (data1.length > 0) {
                        var objFinal = {
                            "Final_Data": data1[0]['Draft_Data'],
                            "Status": "Publish"
                        };
                        content_management.update({'ss_id': parseInt(req.body['ss_id']), 'Draft_Data.Title': req.body['title']}, {$set: objFinal}, function (err, numAffected) {
                            if (err) {
                                res.json({'Msg': 'Data not found, Please save data first'});
                            } else {
                                var obj = {
                                    "ss_id": parseInt(req.body['ss_id']),
                                    "Draft_Data.Title": req.body['old_title_val']
                                };
                                content_management.find(obj).toArray(function (err, data1) {
                                    if (data1.length > 0) {
                                        var objeditpublish = {
                                            "Status": "Archived"
                                        };
                                        content_management.update({'ss_id': parseInt(req.body['ss_id']), 'Draft_Data.Title': req.body['old_title_val']}, {$set: objeditpublish}, function (err, numAffected) {
                                            if (err) {
                                                res.json({'Msg': 'Data not found, Please save data first'});
                                            } else {
                                                res.json({'Msg': 'Data Publish Succesfully !!!'});
                                            }
                                        });
                                    } else {
                                        res.json({'Msg': 'Error'});
                                    }
                                });
                            }
                        });
                    } else {
                        res.json({'Msg': 'Data not found, Please save data first'});
                    }
                });
            }
        });
    });
});
router.post('/getContentDetails', function (req, res) {
    try
    {
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);

        var optionPaginate = {
            select: 'ss_id Draft_Data fba_id Is_Preview Is_Active Final_Data Status',
            sort: {'Created_On': -1},
            lean: true,
            page: 1,
            limit: 10
        };
        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var objRequest = req.body;
        var filter = obj_pagination.filter;
        var ss_id = parseInt(objRequest["ss_id"]);
        filter = {
            "ss_id": ss_id
        };
        console.log(filter);
        var content_management = require('../models/content_management');
        content_management.paginate(filter, optionPaginate).then(function (dbTicket) {
            res.json(dbTicket);
        });

    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/get_review_data', function (req, res) {
    var objData = {
        "ss_id": parseInt(req.body['ss_id']),
        "Draft_Data.Title": req.body['title']
    };
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        if (err)
            throw err;
        var content_management = db.collection('content_managements');
        content_management.find(objData).toArray(function (err, data1) {
            if (data1.length > 0) {
                var fs = require('fs');
                var appRoot = path.dirname(path.dirname(require.main.filename));
                var html_file_path = appRoot + "/resource/request_file/CMS/content_management.html"; //for UAT
                var html_pdf_file_path = appRoot + "/resource/request_file/CMS/" + "Content_Management_" + data1[0].ss_id + "_" + data1[0].Content_Id + '.html';
                var htmlPol = fs.readFileSync(html_file_path, 'utf8');
                var replacecorporatedata = {
                    '___title_val___': data1[0].Draft_Data.Title,
                    '___header_val___': data1[0].Draft_Data.Header,
                    '___name_val___': data1[0].Draft_Data.name,
                    '___mobile___': data1[0].Draft_Data.mobile,
                    '___email___': data1[0].Draft_Data.email
                };
                htmlPol = htmlPol.toString().replaceJson(replacecorporatedata);

                var request_html_file = fs.writeFileSync(html_pdf_file_path, htmlPol);
                res.send({html_pdf_file_path});
                //res.redirect(html_pdf_file_path);
            } else {
                res.json({'msg': 'Data not found, Please save data first'});
            }
        });
    });
});
router.post('/my_cart_list_1', function (req, res) {
    try {
        var Base = require('../libs/Base');
        var objBase = new Base();
        var obj_pagination = objBase.jqdt_paginate_process(req.body);
        var optionPaginate = {
            sort: {'Cart_Id': 1}
        };
        if (obj_pagination) {
            optionPaginate['page'] = obj_pagination.paginate.page;
            optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);
        }
        var filter = obj_pagination.filter;
        var objRequest = req.body;
        var ss_id = objRequest["ss_id"] - 0;
        filter['Ss_Id'] = ss_id;
        filter['Payment_Status'] = "PAYMENT_PENDING";
        var add_to_cart = require('../models/add_to_cart');
        add_to_cart.paginate(filter, optionPaginate).then(function (dbCartData) {
            res.json(dbCartData);
        });
    } catch (e) {
        res.json(e);
    }
});
router.post('/cart_payment', function (req, res) {
    try {
        var Payment = {};
        var merchant_key = ((config.environment.name === 'Production') ? 'o7LxX9fJ' : 'BC50nb');
        var salt = ((config.environment.name === 'Production') ? 'c6ob2Q7Wb4' : 'Bwxo1cPe');
        var merchant_id = ((config.environment.name === 'Production') ? '6756734' : '4825050');
        var amount = ((config.environment.name === 'Production') ? req.body.amount : "2");
        var pay_data = req.body.pay_data;
        let pay_data_string = '';
        for (let i = 0; i <= pay_data.length - 1; i++) {
            pay_data_string += pay_data[i].PB_CRN + "_" + pay_data[i].Proposal_Id + ",";
        }
        pay_data_string = pay_data_string.substring(0, pay_data_string.length - 1);
        console.log(pay_data_string);
        var productinfo = {paymentParts: [{name: 'splitId1', merchantId: merchant_id, value: amount, commission: '0.00', description: 'splitId1 summary'}]};
        var hashSequence = 'key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10';
        var str = hashSequence.split('|');
        var txnid = Math.floor(Date.now() + Math.random() * 1000000000);
        var hash_string = '';
        for (var hash_var in str) {
            if (str[hash_var] === "key")
            {
                hash_string = hash_string + merchant_key;
                hash_string = hash_string + '|';
            } else if (str[hash_var] === "txnid")
            {
                hash_string = hash_string + txnid;
                hash_string = hash_string + '|';
            } else if (str[hash_var] === "amount")
            {
                hash_string = hash_string + amount;
                hash_string = hash_string + '|';
            } else if (str[hash_var] === "productinfo")
            {
                hash_string = hash_string + JSON.stringify(productinfo);
                hash_string = hash_string + '|';
            } else if (str[hash_var] === "firstname")
            {
                hash_string = hash_string + req.body.firstname;
                hash_string = hash_string + '|';
            } else if (str[hash_var] === "email")
            {
                hash_string = hash_string + req.body.email;
                hash_string = hash_string + '|';
            } else if (str[hash_var] === "udf1")
            {
                hash_string = hash_string + pay_data_string;
                hash_string = hash_string + '|';
            } else
            {
                hash_string = hash_string + '';
                hash_string = hash_string + '|';
            }
        }
        hash_string = hash_string + salt;
        console.log(hash_string);
        var crypto = require('crypto');
        var hash = crypto.createHash("sha512").update(hash_string).digest("hex").toLowerCase();
        var pg_data = {
            'firstname': req.body.firstname,
            'lastname': req.body.lastname,
            'surl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/cart_transaction/' + req.body.ss_id + '/success/' + txnid,
            'phone': req.body.mobile,
            'key': merchant_key,
            'hash': hash,
            'curl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/cart_transaction/' + req.body.ss_id + '/cancel/' + txnid,
            'furl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/cart_transaction/' + req.body.ss_id + '/fail/' + txnid,
            'txnid': txnid,
            'productinfo': JSON.stringify(productinfo),
            'amount': amount,
            'email': req.body.email,
            'udf1': pay_data_string,
            'SALT': salt,
            'service_provider': "payu_paisa"
        };
        Payment.pg_data = pg_data;
        Payment.pg_url = ((config.environment.name === 'Production') ? 'https://secure.payu.in/_payment' : 'https://test.payu.in/_payment');
        Payment.pg_redirect_mode = 'POST';
        res.json({
            Status: 'Success',
            Msg: Payment
        });
    } catch (e) {
        res.json(e);
    }
});
function execute_post(url, args) {
    let Client = require('node-rest-client').Client;
    let client = new Client();
    client.post(url, args, function (data, response) {
        console.error('/inspections.js execute_post() : ');
    });
}
router.post('/my_cart_pay', function (req, res) {
    try {
        let objReq = req.body;
        //let data = [];
        let crn = [];
        let proposal_Id = [];
        let data_string = req.body.payment_response.hasOwnProperty('udf1') ? req.body.payment_response.udf1 : "";
        if (data_string !== "") {
            data_string = data_string.split(',');
            data_string.forEach(element => {
                let obj = {'PB_CRN': (element.split('_')[0] - 0), 'Proposal_Id': (element.split('_')[1] - 0)};
                //data.push(obj);
                crn.push(obj.PB_CRN);
                proposal_Id.push(obj.Proposal_Id);
            });
        }

        let cond = {"Payment_Status": {$in: ["PAYMENT_PENDING"]}};
        cond['Ss_Id'] = (objReq.hasOwnProperty('ss_id')) ? objReq.ss_id - 0 : 0;
        cond['PB_CRN'] = {$in: crn};
        cond['Proposal_Id'] = {$in: proposal_Id};
        console.log("my_cart_pay : cond : ", cond);
        //update Payment_Status to SUCCESS then run verification and pdf
        var add_to_cart = require('../models/add_to_cart');
        add_to_cart.find(cond).exec(function (err1, dbUsers) {
            if (err1) {
                res.send(err1);
            } else {
                try {
                    if (dbUsers.length > 0) {
                        console.error('Log', 'my_cart_pay no. of records fetched', dbUsers.length);
                        let  objCSSummary = [];
                        for (let k in dbUsers) {
                            let temp_proposal_id = dbUsers[k]['_doc']['Proposal_Id'];
                            let temp_crn = dbUsers[k]['_doc']['PB_CRN'];
                            let temp_proposal_data = dbUsers[k]['_doc']['Proposal_Request_Core'];

                            let verification_request = {
                                "search_reference_number": temp_proposal_data.search_reference_number,
                                "api_reference_number": temp_proposal_data.api_reference_number,
                                "client_key": temp_proposal_data.client_key,
                                "secret_key": temp_proposal_data.secret_key,
                                "insurer_id": temp_proposal_data.insurer_id,
                                "method_type": "Verification",
                                "crn": temp_crn,
                                "ss_id": ((objReq.hasOwnProperty('ss_id')) ? objReq.ss_id - 0 : 0),
                                "execution_async": "no",
                                "pg_url": "http://qa-horizon.policyboss.com/transaction-status/" + temp_proposal_data.udid + "/" + temp_crn + "/" + temp_proposal_id,
                                "pg_get": {},
                                "pg_post": objReq.payment_response,
                                "pg_redirect_mode": "POST"
                            };
                            let args = {
                                data: verification_request,
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            };
                            objCSSummary.push(temp_crn);
                            console.error('/postservicecall/my_cart_pay_status - POST calling Request : ', JSON.stringify(args));
                            let url_api = config.environment.weburl + '/postservicecall/my_cart_pay_status';
                            execute_post(url_api, args);
                            sleep(2000);
                        }
                        res.json(objCSSummary);
                    } else {
                        res.json({'/my_cart_pay ': 'NO DATA AVAILABLE'});
                    }
                } catch (ex) {
                    console.error('Exception in my_cart_pay() for inspectionSchedules db details : ', ex);
                    res.send(ex, dbUsers);
                }
            }
        });
    } catch (e) {
        res.json({'Msg': "my_cart_pay - Exception", 'Status': "Failure"});
    }
});
router.post('/my_cart_pay_status', function (req, res) {
    let objInsurerProduct = req.body;
    let Error_Msg = "";
    let service_url = "";
    try {
        if (config.environment.name.toString() === 'Production') {
            service_url = "http://horizon.policyboss.com:5000/quote/verification_initiate";
        } else {
//          service_url = "http://localhost:3000/quote/verification_initiate";
            service_url = "http://qa-horizon.policyboss.com:3000/quote/verification_initiate";
        }

        let args = {
            data: objInsurerProduct,
            headers: {
                "Content-Type": "application/json"
            }
        };

        let Client = require('node-rest-client').Client;
        process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;
        let client = new Client();
        client.post(service_url, args, function (data, response) {
            console.log('Service Response in my_cart_pay_status() : ', JSON.stringify(data));
            if (data) {
                console.error('my_cart_pay_status() /verification_initiate response : ', data);
                try {
                    var verification_status;
                    if (data['Error_Code'] === "") {
                        verification_status = "SUCCESS";
                    } else {
                        verification_status = "FAILURE";
                    }
                    var add_to_cart = require('../models/add_to_cart');
                    let today = new Date();
                    let proposal_id = objInsurerProduct['pg_url'].split('/').pop();
                    let myquery = {PB_CRN: objInsurerProduct['crn'], Ss_Id: objInsurerProduct['ss_id'], Proposal_Id: proposal_id - 0};
                    let newvalues = {Payment_Status: verification_status, Modified_On: today};
                    add_to_cart.updateOne(myquery, newvalues, function (uperr, upres) {
                        if (uperr) {
                            Error_Msg = uperr;
                            throw uperr;
                        } else {
                            console.log("my_cart_pay_status() Status Updated for : ", objInsurerProduct['insurer_id'], ", CRN : ", objInsurerProduct['crn']);
                            console.log("my_cart_pay_status() : proposal_id : ", proposal_id, upres);
                        }
                    });
                } catch (ex4) {
                    Error_Msg = ex4;
                    console.error('Exception in my_cart_pay_status() for DB updating : ', ex4);
                }
            } else {
                console.error('Error in service my_cart_pay_status() : ', Error_Msg);
            }
        });
    } catch (e) {
        console.error('Exception in my_cart_pay_status() for mailing : ', e);
        res.json({'Status': e});
    }
});
router.post('/add_to_cart', function (req, res) {
    try {
        var obj = req.body;
        var ssid = ((isNaN(obj.ss_id)) ? 0 : parseInt(obj.ss_id));
        var Proposal_Request = obj['Summary'];
        var currentDate = new Date();
        var temp_cart_id = 0;
        var obj1 = {
            MyCart_Request: obj,
            Ss_Id: ssid,
            Payment_Status: "PAYMENT_PENDING",
            Service_Log_Unique_Id: Proposal_Request.Service_Log_Unique_Id_Core,
            Request_Unique_Id: Proposal_Request.Request_Unique_Id_Core,
            PB_CRN: ((isNaN(obj['Quote_Request']['crn'])) ? 0 : parseInt(obj['Quote_Request']['crn'])),
            Product_Id: obj['Summary']['Product_Id'],
            Insurer_Id: obj['Summary']['Insurer_Id'],
            Proposal_Id: obj.Proposal_Id,
            User_Data_Id: Proposal_Request.User_Data_Id,
            Created_On: currentDate,
            Modified_On: currentDate
        };

        var current_Insurer_Id = parseInt(obj1.Insurer_Id);
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var arg = {
                "PB_CRN": parseInt(obj1.PB_CRN),
                "User_Data_Id": parseInt(obj1.User_Data_Id),
                "Insurer_Id": parseInt(obj1.Insurer_Id),
                "Product_Id": parseInt(obj1.Product_Id),
                "Request_Unique_Id": obj1.Request_Unique_Id,
                "Service_Log_Unique_Id": obj1.Service_Log_Unique_Id
            };

            try {
                User_Data.find(arg, function (err, getData) {
                    if (err) {
                        res.json({Msg: err});
                    } else {
                        let Proposal_Request_Core = null;
                        if (getData.length > 0) {
                            Proposal_Request_Core = getData[0]['_doc']['Proposal_Request_Core'];
                            obj1.Proposal_Request_Core = Proposal_Request_Core;

                            if (err) {
                                console.log(err);
                                res.json({Msg: err});
                            } else {
                                var add = require('../models/add_to_cart');
                                add.find({"Ss_Id": ssid, "Insurer_Id": current_Insurer_Id, "Payment_Status": "PAYMENT_PENDING"}, function (err, addresponse) {
                                    if (err) {
                                        res.json(err);
                                    } else {
                                        if (addresponse.length > 0) {
                                            obj1.Cart_Id = addresponse[0]['_doc']['Cart_Id'];
                                            var AddToCart = db.collection('add_to_carts');
                                            AddToCart.insert(obj1, function (err, response) {
                                                if (err) {
                                                    res.json({Msg: err});
                                                } else if (response.insertedCount !== 0) {
                                                    res.json({Msg: "Success"});
                                                } else if (response.insertedCount === 0) {
                                                    res.json({Msg: "Fail"});
                                                }
                                            });
                                        } else {
                                            var mysort = {Cart_Id: -1};
                                            var add1 = db.collection('add_to_carts');
                                            add1.find({}, {_id: 0, Cart_Id: 1}).sort(mysort).limit(1).toArray(function (err, result) {
                                                if (err)
                                                {
                                                    return res.json({'Msg': err});
                                                } else {
                                                    temp_cart_id = (result['length'] > 0) ? (result[0]['Cart_Id'] - 0) : 0;
                                                    temp_cart_id = temp_cart_id + 1;

                                                    var AddToCart = db.collection('add_to_carts');
                                                    obj1.Cart_Id = temp_cart_id;
                                                    AddToCart.insert(obj1, function (err, response) {
                                                        if (err) {
                                                            res.json({Msg: err});
                                                        } else if (response.insertedCount !== 0) {
                                                            res.json({Msg: "Success"});
                                                        } else if (response.insertedCount === 0) {
                                                            res.json({Msg: "Fail"});
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        } else {
                            res.json({Msg: "Failed to Add to Cart"});
                        }
                    }
                });
            } catch (er) {
                console.log("/add_to_cart error2 " + er);
                res.json({Msg: er});
            }
        });
    } catch (err) {
        console.log("/add_to_cart error1 " + err);
        res.json({Msg: err});
    }
});
router.post('/remove_from_cart', function (req, res) {
    try {
        let obj = req.body;
        let add_to_cart = require('../models/add_to_cart');
        let cond = {'Ss_Id': obj['Ss_Id'] - 0, 'PB_CRN': obj['PB_CRN'] - 0, 'Proposal_Id': obj['Proposal_Id'] - 0};
        //console.log(cond);
        let dataUpdate = {"Payment_Status": "REMOVED"};
        add_to_cart.update(cond, {$set: dataUpdate}, function (err, numAffected) {
            if (err) {
                res.json({'Status': 'Fail', 'Msg': 'Error In Updation for Remove' + err});
            } else {
                if (numAffected && numAffected.nModified > 0) {
                    res.json({
                        Status: 'Success',
                        Msg: 'Data Updated Succesfully'
                    });
                } else {
                    res.json({
                        Status: 'Fail',
                        Msg: 'Data Not Updated'
                    });
                }
            }
        });
    } catch (er) {
        console.log("/remove_from_cart " + er);
    }
});
router.post('/ContactUs', function (req, res) {
    try {
        var contactus = require('../models/contactus');
        var Email = require('../models/email');
        var objModelEmail = new Email();
        var data = req.body;

        var args = {
            "Name": data['ContactName'],
            "Mobile": data['ContactMobile'],
            "City": data['ContactCity'],
            "Info_About": data['ContactselectCity'],
            "Comment": data['Contactcomment'],
            "Created_On": new Date(),
            "Modified_On": new Date()
        };

        var contact = new contactus(args);
        contact.save(function (err, resdata) {
            if (err) {
                res.json({'Status': 'Error', 'Msg': err.stack});
            } else {
                var arrCc = ['pramod.parit@policyboss.com'];
                var arrTo = ['enquiry@policyboss.com'];
                var remark = "LANDMARK INSURANCE";
                var subject = "Contact Us Customer Data";
                var mail_content = '<html> <body>Dear Team,<br /><p> Please find the Customer details</p><br/><br/>'
                        + '<table><tr><td style =\""font-size:12px;line-height:1.5em;\""><fieldset> <legend><b>Customer Details</b>:</legend><br/>'
                        + '<p>Name - ' + args['Name'] + '<br>Mobile - ' + args['Mobile']
                        + '<br>City : ' + args['City']
                        + '<br>Product : ' + args['Info_About']
                        + '<br>Comments : ' + args['Comment']
                        + '</fieldset><td/><tr/></table><br/><br/>'
                        + 'Regards,<br />policyboss.com<br />'
                        + 'Landmark Insurance Brokers Pvt. Ltd.<br /><b>Address</b> '
                        + ': Ground Floor & First Floor,<br/>'
                        + ' E-Shape Building, Ashok Silk Mills Compound,'
                        + '<br/> 202 L.B.S Marg, Ghatkopar (West), Mumbai- 400 086';

                objModelEmail.send('noreply@landmarkinsurance.co.in', arrTo.join(','), subject, mail_content, arrCc.join(','), '', '', '');
                res.json({'Status': 'Success', 'Msg': resdata.Visitor_Number});
            }
        });
    } catch (ex) {
        console.log("error:", ex);
        res.json({'Status': 'Error', 'Msg': ex.stack});
    }
});
router.post('/feedback', function (req, res) {
    try {
        var Email = require('../models/email');
        var objModelEmail = new Email();
        var obj = JSON.parse(JSON.stringify(req.body));
        var feedback = require('../models/feedback');
        args = {
            "FeedbackId": obj["feedback_id"],
            "ComplaintId": obj["complain_id"],
            "Name": obj["Name"],
            "Email": obj["Email"],
            "Mobile": obj["Mobile"],
            "Policy_No": obj["Policy_No"],
            "Message": obj["Message"],
            "Service_Id": obj["ServiceId"],
            "Category_Type": obj["Category_Type"],
            "Nature_Of_Feedback_Complain": obj["Nature_Of_Feedback_Complain"],
            "Service_Claim_Type": obj["ServiceClaimType"],
            "Created_On": new Date(),
            "Modified_On": new Date()
        };

        var feedback_data = new feedback(args);
        feedback_data.save(function (err, resdata) {
            if (err) {
                res.json({'Status': 'Error', 'Msg': err.stack});
            } else {
                var feedId = resdata.FeedId;
                var _ServiceType = args['Nature_Of_Feedback_Complain'] === "ServiceRelated" ? "Service" : "Claim";
                feedback.update({"FeedId": feedId}, {$set: {'FeedbackId': "MUM-" + feedId + "-C"}}, function (err, objFeed) {
                    if (err) {
                        res.json({'Status': 'Error', 'Msg': err.stack});
                    } else {
                        res.json({'Status': 'Success', 'Msg': 'Data saved successfully', 'Feeback_Ref': "MUM-" + feedId + "-C"});
                        if (args['Category_Type'] === "Feedback") {
                            var subject = "Thank You for your feedback. Your Feedback\ " + _ServiceType + " ID is : MUM-" + feedId + '-C';
                            var mail_content = '<html><body><p>Dear ' + args['Name'] + ',</p>'
                                    + '<p>Thank You for sharing your feedback with us.</p></br>'
                                    + '<p>Our customer care team will evaluate the details shared by you & will reach out to you for further '
                                    + 'inputs(if required).</br>We value your Patronage and Your Feedback reference number is <b> '
                                    + 'MUM-' + feedId + '-C.</b></br>'
                                    + '<table><tr><td style =\""font-size:12px;line-height:1.5em;\""><fieldset> <legend><b>Customer Details</b>:</legend><br/>'
                                    + 'Name : ' + args['Name'] + '<br/>'
                                    + 'Email : ' + args['Email'] + '<br/>'
                                    + 'Mobile : ' + args['Mobile'] + '<br/>'
                                    + 'FeedBack : ' + _ServiceType + ' : ' + args['Message'] + '<br/>'
                                    + '</fieldset><td/><tr/></table><br/><br/>'
                                    + 'Regards,<br/>'
                                    + 'Team Customer Care <br/>'
                                    + 'Landmark Insurance Brokers Pvt. Ltd.<br/>'
                                    + '<b> Contact</b> : 18004194199 <br/>'
                                    + '<img src="https://policyboss.com/images/POSP/policyboss.png"><br/><br/>'
                                    + '</p></body></html>';

                            var arrBcc = ['customercare@policyboss.com', 'headcare@policyboss.com', 'pramod.parit@policyboss.com'];
                            objModelEmail.send('noreply@landmarkinsurance.co.in', args['Email'], subject, mail_content, '', arrBcc.join(','), '', '');
                        }
                        if (args['Category_Type'] === "Complaint") {
                            var subject = "Thank You for your Complaint. Your Complaint\ " + _ServiceType + " ID is : MUM-" + feedId + "-C";
                            var mail_content = '<html><body><p>Dear ' + args['Name'] + ' ,</p>'
                                    + '<p>Thank You for sharing your concern with us.</br>'
                                    + 'Our customer care executive reach out to you within 24 working hours to understand it better and resolve it as per your satisfaction<br>'
                                    + 'Your Complaint ID is <b> MUM-' + feedId + '-C</b></br>'
                                    + 'Use it for future reference.</br></br>'
                                    + '<table><tr><td style =\""font-size:12px;line-height:1.5em;\""><fieldset> <legend><b>Customer Details</b>:</legend><br/>'
                                    + 'Name : ' + args['Name'] + '<br/>'
                                    + 'Email : ' + args['Email'] + '<br/>'
                                    + 'Mobile : ' + args['Mobile'] + '<br/>'
                                    + 'FeedBack : ' + _ServiceType + ' : ' + args['Message'] + '<br/>'
                                    + '</fieldset><td/><tr/></table><br/><br/>'
                                    + 'Regards,<br/>'
                                    + 'Team Customer Care <br/>'
                                    + 'Landmark Insurance Brokers Pvt. Ltd.<br/>'
                                    + '<b> Contact</b> : 18004194199 <br/>'
                                    + '<img src="https://policyboss.com/images/POSP/policyboss.png"><br/><br/>'
                                    + '</p></body></html>';

                            var arrBcc = ['customercare@policyboss.com', 'headcare@policyboss.com', 'pramod.parit@policyboss.com'];
                            objModelEmail.send('noreply@landmarkinsurance.co.in', args['Email'], subject, mail_content, '', arrBcc.join(','), '', '');
                        }
                    }
                });
            }
        });
    } catch (ex) {
        res.json({'Status': 'Error', 'Msg': ex.stack});
    }
});
router.post('/claim_save_center', function (req, res) {
    try {
        var Email = require('../models/email');
        var objModelEmail = new Email();
        var data = req.body;
        console.log("claim data" + data);
        var claim_intimitation = require('../models/claim_intimitation');
        args = {
            "PolicyNumber": data["PolicyNumber"],
            "Product_ID": data["Product_ID"],
            "Product_name": data["product_name"],
            "Customer_Name": data["Customer_Name"],
            "Contact_Mobile": data["Contact_Mobile"],
            "Email_Id": data["Email_Id"],
            "Insurer_Id": data["Insurer_ID"],
            "Insurer_Company": data["Insurer_name"],
            "LostDate": data["LostDate"],
            "Brief": data["Remarks"],
            "ProductInsuranceMapping_Id": "",
            "IsActive": 1,
            "Other_Contact_No": "", //data["Other_Contact_No"],
            "CreatedBy": "", //data["CreatedBy"],
            "Claim_Source_Master_ID": "", //data["Claim_Source_Master_ID"],
            "Created_On": new Date(),
            "Modified_On": new Date()
        };

        var claim = new claim_intimitation(args);
        claim.save(function (err, resdata) {
            if (err) {
                res.json({'Status': 'Error', 'Msg': err.stack});
            } else {
                var remark = "LANDMARK INSURANCE";
                var subject = "Claim Assistance Required For Policy Number : " + args['PolicyNumber'];

                var mail_content = '<html><body><p style="color:#fff;font-size:13px;font-family:Verdana;">Dear Claim Manager,<br /></p><BR/>'
                        + 'The following customer has applied for claim assistance through our website on date ' + args['LostDate'] + ':' + ' </br></br>'
                        + '<table><tr><td style =\""font-size:12px;line-height:1.5em;\""><b>Customer Details:</b></td></tr>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:200px;">Customer Name - </td>'
                        + '<td style="color:#F0FF;font-size:14px;font-family:Verdana;">' + args['Customer_Name'] + '</td></tr>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:60px;">Mobile No. - </td>'
                        + '<td style="color:#F0FF;font-size:14px;font-family:Verdana;">' + args['Contact_Mobile'] + '</td></tr>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:60px;">Email  -</td> '
                        + '<td style="color:#F0FF;font-size:14px;font-family:Verdana;">' + args['Email_Id'] + '</td></tr>'
                        + '<tr><td><img src="https://policyboss.com/images/logo_email_quote.gif"><td/><tr/></table><br/><br/>'
                        + '<table><tr><td style =\""font-size:12px;line-height:1.5em;width:200px;\""><b>Claim Assistance  Details:</b></td></tr>'
                        //+ '<br><p style="padding-left:10px;padding-top:8px;font-size:15px;font-weight:bold;"><strong>Claim Assistance  Details:</strong></p>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:150px;">Product ID - </td>'
                        + '<td style="color:#0FFF;font-size:14px;font-family:Verdana;">' + args['Product_name'] + '</td></tr>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:60px;">Insurer Company - </td>'
                        + '<td style="color:#F0FF;font-size:14px;font-family:Verdana;">' + args['Insurer_Company'] + '</td></tr>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:60px;">Policy Number  - </td>'
                        + '<td style="color:#FCFF;font-size:14px;font-family:Verdana;">' + args['PolicyNumber'] + '</td></tr>'
                        + '<tr><td style="color:#DBFE6C;font-size:12px;font-family:Verdana;width:150px;">LOSS Date  - </td>'
                        + '<td style="color:#FF0F;font-size:14px;font-family:Verdana;">' + args['LostDate'] + '<td/><tr/></table><br/>'
                        + '<p style="font-size:14px;padding-left:5px;padding-bottom:5px;font-family:Verdana">'
                        + '<span>BRIEF DETAIL OF LOSS : ' + args['Brief'] + '</span>.<br/>'
                        + '</p></body></html>';

                var arrTo = ['claims.mumbai@policyboss.com'];
                var arrCC = ['Shailendra.tewari@policyboss.com'];
                objModelEmail.send('noreply@landmarkinsurance.co.in ', arrTo.join(','), subject, mail_content, arrCC.join(','), '', '', '');
                res.json({'Status': 'Success', 'Msg': 'Data saved successfully'});
            }
        });
    } catch (ex) {
        res.json({'Status': 'Error', 'Msg': ex.stack});
    }


});
router.post('/empdata/upload_emp_data', function (req, res, next) {
    var objRequest = req.body;
    let file = "";
    let file_ext = "";
    let path = appRoot + "/tmp/emp_data/";
    file = decodeURIComponent(objRequest["file"]);
    file_ext = objRequest["file_ext"];
    let fileName = path + '/emp_data.' + file_ext;
    //console.log(NewTicket_Id + ' - Folder Already Exist');
    //for (var i in file_obj) {
    var data = file.replace(/^data:image\/\w+;base64,/, "");
    if (data === "") {
//res1.json({'msg': 'Something Went Wrong'});
    } else {
        let buf = new Buffer(data, 'base64');
        fs.writeFile(fileName, buf);
    }
//}
    sleep(5000);
    let file_excel = appRoot + "/tmp/emp_data/emp_data.xlsx";
    let XLSX = require('xlsx');
    let workbook = XLSX.readFile(file_excel);
    let sheet_name_list = workbook.SheetNames;
    var objRequest = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);
    console.log(objRequest);
    try {
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var emp_data = db.collection('emp_datas');
            emp_data.insertMany(objRequest, function (err, res1) {
                if (err)
                    throw err;
                res.json({'Status': "Success", 'Msg': "emp_data Data inserted"});
            });
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/kyc_details/save_kyc_details', function (req, res) {
    try {
        let ObjRequest = req.body;
        let crn = ObjRequest.crn - 0;
        let insurer_id = ObjRequest.insurer_id - 0;
        let udid = ObjRequest.udid - 0;
        let full_name = ObjRequest.Proposal_Request['middle_name'] === "" ? (ObjRequest.Proposal_Request['first_name'] + " " + ObjRequest.Proposal_Request['last_name']) : (ObjRequest.Proposal_Request['first_name'] + " " + ObjRequest.Proposal_Request['middle_name'] + " " + ObjRequest.Proposal_Request['last_name']);
        let proposal_request = ObjRequest.hasOwnProperty('Proposal_Request') && ObjRequest.Proposal_Request ? ObjRequest.Proposal_Request : {};
        let saveObj = {
            'Insurer_Id': insurer_id,
            'PAN_Doc': "",
            'Aadhar_Doc': "",
            'Search_Type': (ObjRequest.search_type === undefined || ObjRequest.search_type === "" || ObjRequest.search_type === null) ? "" : ObjRequest.search_type,
            'KYC_Number': "",
            'Mobile': (proposal_request.mobile === undefined || proposal_request.mobile === "" || proposal_request.mobile === null) ? "" : proposal_request.mobile - 0,
            'PAN': (proposal_request.pan === undefined || proposal_request.pan === "" || proposal_request.pan === null) ? "" : proposal_request.pan,
            'Aadhar': (proposal_request.aadhar === undefined || proposal_request.aadhar === "" || proposal_request.aadhar === null) ? "" : proposal_request.aadhar,
            'KYC_Status': "PENDING",
            'DOB': (proposal_request.birth_date === undefined || proposal_request.birth_date === "" || proposal_request.birth_date === null) ? "" : proposal_request.birth_date,
            'Created_On': new Date(),
            'Modified_On': new Date(),
            'User_Data_Id': udid,
            'Product_Id': (ObjRequest.product_id === undefined || ObjRequest.product_id === "" || ObjRequest.product_id === null) ? 0 : ObjRequest.product_id - 0,
            'Email': (proposal_request.email === undefined || proposal_request.email === "" || proposal_request.email === null) ? "" : proposal_request.email,
            'PB_CRN': (ObjRequest.crn === undefined || ObjRequest.crn === "" || ObjRequest.crn === null) ? "" : ObjRequest.crn - 0,
            'Proposal_Request': proposal_request,
            'Proposal_Id': ObjRequest.hasOwnProperty('Proposal_Id') ? ObjRequest.Proposal_Id : "",
            'Quote_Id': ObjRequest.hasOwnProperty('Quote_Id') ? ObjRequest.Quote_Id : "",
            'KYC_URL': "",
            'KYC_Ref_No': "",
            'Full_Name': full_name,
            'KYC_Full_Name': "",
            'proposal_page_url': ObjRequest.hasOwnProperty('proposal_url') ? ObjRequest.proposal_url : "",
            'service_log_id': proposal_request.hasOwnProperty('slid') ? proposal_request.slid : ""
        };
        let updateObj = {
            'PAN_Doc': "",
            'Aadhar_Doc': "",
            'Search_Type': (ObjRequest.search_type === undefined || ObjRequest.search_type === "" || ObjRequest.search_type === null) ? "" : ObjRequest.search_type,
            'KYC_Number': "",
            'Mobile': (proposal_request.mobile === undefined || proposal_request.mobile === "" || proposal_request.mobile === null) ? "" : proposal_request.mobile - 0,
            'PAN': (proposal_request.pan === undefined || proposal_request.pan === "" || proposal_request.pan === null) ? "" : proposal_request.pan,
            'Aadhar': (proposal_request.aadhar === undefined || proposal_request.aadhar === "" || proposal_request.aadhar === null) ? "" : proposal_request.aadhar,
//            'KYC_Status': "PENDING",
            'DOB': (proposal_request.birth_date === undefined || proposal_request.birth_date === "" || proposal_request.birth_date === null) ? "" : proposal_request.birth_date,
            'Modified_On': new Date(),
            'Email': (proposal_request.email === undefined || proposal_request.email === "" || proposal_request.email === null) ? "" : proposal_request.email,
            'Proposal_Request': proposal_request,
            'Proposal_Id': ObjRequest.hasOwnProperty('Proposal_Id') ? ObjRequest.Proposal_Id : "",
            'Quote_Id': ObjRequest.hasOwnProperty('Quote_Id') ? ObjRequest.Quote_Id : "",
            'KYC_URL': "",
            'KYC_Ref_No': "",
            'Full_Name': full_name,
            'KYC_Full_Name': "",
            'proposal_page_url': ObjRequest.hasOwnProperty('proposal_url') ? ObjRequest.proposal_url : "",
            'service_log_id': proposal_request.hasOwnProperty('slid') ? proposal_request.slid : ""
        };
        kyc_detail.findOne({'PB_CRN': crn, 'Insurer_Id': insurer_id}).sort({Modified_On: -1}).exec(function (err, db_svae_kyc_detail) {
            if (err) {
                res.json({"Msg": err, "Status": "FAIL"});
            } else {
                if (db_svae_kyc_detail) {
                    kyc_detail.update({"PB_CRN": crn, "Insurer_Id": insurer_id}, {$set: updateObj}, function (err, db_update_kyc_detail) {
                        if (err) {
                            res.json({"Msg": err, "Status": "FAIL"});
                        } else {
                            let url_api = config.environment.weburl + '/postservicecall/kyc_details/search_kyc_details/' + (crn) + '/' + (udid) + '/' + (insurer_id);
                            client.get(url_api, function (data, response) {
                                if (data) {
                                    res.json(data.Msg);
                                } else {
                                    res.json({"Msg": "/search_kyc_details/ service issue", "Status": "FAIL"});
                                }
                            });
                        }
                    });
                } else {
                    let kyc_detail1 = new kyc_detail(saveObj);
                    kyc_detail1.save(saveObj, function (err, users) {
                        if (err) {
                            res.json({"Msg": err, "Status": "FAIL"});
                        } else {
                            let url_api = config.environment.weburl + '/postservicecall/kyc_details/search_kyc_details/' + (req.body.crn - 0) + '/' + (req.body.udid - 0) + '/' + (req.body.insurer_id - 0);
                            client.get(url_api, function (data, response) {
                                if (data) {
                                    res.json(data.Msg);
                                } else {
                                    res.json({"Msg": "/search_kyc_details/ service issue", "Status": "FAIL"});
                                }
                            });
                        }
                    });
                }
            }
        });
    } catch (e1) {
        res.json({"Msg": e1.stack, "Status": "FAIL"});
    }
});
router.get('/kyc_details/verifiy_kyc_details/:crn/:insurer_id/:kyc_no', function (req, res) {
    try {
        let kyc_no = req.params['kyc_no'];
        client.get(config.environment.weburl + '/kyc_details/get_kyc_status/' + req.params.crn + '/' + req.params.insurer_id, {}, function (get_db_kyc_details, response) {
            let verfiy_args = get_db_kyc_details['Msg'];
            verfiy_args['user_kyc_no'] = kyc_no;
            verfiy_args['Verify_Search_Type'] = "VERIFY";
            let tmp_url_api = {
                '1': 'bajaj_verify_kyc_details',
                '5': 'hdfc_verify_kyc_details',
                '10': 'royal_verify_kyc_details',
                '33': 'liberty_verify_kyc_details',
                '46': 'edelweiss_verify_kyc_details',
                '7': 'iffco_verify_kyc_details',
                '3': 'chola_verify_kyc_details',
                '4': 'future_verify_kyc_details',
                '9': 'reliance_verify_kyc_details',
                '11': 'tataaig_verify_kyc_details',
                '44': 'digit_verify_kyc_details',
                '6': 'icici_verify_kyc_details'
            };
            let insurer_api_name = tmp_url_api[verfiy_args.Insurer_Id];
//            if (get_db_kyc_details && get_db_kyc_details.Status === "FETCH_SUCCESS") {
//                let data = {};
//                data.KYC_Number = kyc_no;
//                res.json({"Insurer": insurer_api_name, "Msg": data, "Status": "FETCH_SUCCESS"});
//            } else 
            if ([5].indexOf(parseInt(verfiy_args.Insurer_Id) > -1) || (get_db_kyc_details && get_db_kyc_details.Status === "FETCH_SUCCESS")) {
                let args = {
                    data: verfiy_args,
                    headers: {
                        "Content-Type": "application/json"
                    }
                };
                if (insurer_api_name === undefined) {
                    res.json({"Msg": "KYC Process is Under Construction.....", "Status": "NEW"});
                } else {
                    let url_api = config.environment.weburl + '/kyc_details/' + insurer_api_name;
                    client.post(url_api, args, function (data, response) {
                        if (data) {
                            res.json(data['Msg']);
                        } else {
                            res.json({"Insurer": insurer_api_name, "Msg": "Verify service issue", "Status": "FAIL"});
                        }
                    });
                }
            } else {
                res.json({"Msg": "/verifiy_kyc_details no details available", "Status": "FAIL"});
            }
        });
    } catch (e) {
        res.json({"Msg": e.stack, "Status": "FAIL"});
    }
});
router.get('/kyc_details/search_kyc_details/:crn/:udid/:insurer_id', function (req, res) {
    try {
        let crn = (req.params.crn === undefined || req.params.crn === "" || req.params.crn === null) ? "" : req.params.crn - 0;
        let udid = (req.params.udid === undefined || req.params.udid === "" || req.params.udid === null) ? "" : req.params.udid - 0;
        let insurer_id = (req.params.insurer_id === undefined || req.params.insurer_id === "" || req.params.insurer_id === null) ? "" : req.params.insurer_id - 0;
        let tmp_url_api = {
            '1': 'bajaj_fetch_kyc_details',
            '5': 'hdfc_fetch_kyc_details',
            '10': 'royal_fetch_kyc_details',
            '33': 'liberty_fetch_kyc_details',
            '46': 'edelweiss_fetch_kyc_details',
            '7': 'iffco_fetch_kyc_details',
            '3': 'chola_fetch_kyc_details',
            '4': 'future_fetch_kyc_details',
            '9': 'reliance_fetch_kyc_details',
            '11': 'tataaig_fetch_kyc_details',
            '44': 'digit_fetch_kyc_details',
            '6': 'icici_fetch_kyc_details'
        };
        let insurer_api_name = tmp_url_api[insurer_id];
        let kyc_detail = require('../models/kyc_detail');
        kyc_detail.find({'PB_CRN': crn, 'Insurer_Id': insurer_id}).sort({Modified_On: -1}).exec(function (err, data) {
            if (err) {
                res.json({"Msg": err, "Status": "/kyc_details/search_kyc_details FAIL"});
            } else {
                if (data && data.length > 0) {
                    if (insurer_api_name === undefined) {
                        res.json({"Msg": "KYC Process is Under Construction.....", "Status": "FAIL"});
                    } else {
                        let args = {
                            data: data[0]['_doc'],
                            headers: {
                                "Content-Type": "application/json"
                            }
                        }; //pls comment - issue - multiple records
                        let url_api = config.environment.weburl + '/kyc_details/' + insurer_api_name;
                        client.post(url_api, args, function (data, response) {
                            if (data) {
                                if (data.Status === "FETCH_SUCCESS") {
                                    res.json({"Insurer": insurer_api_name, "Msg": data.Msg, "Status": "SUCCESS"});
                                } else {
                                    res.json({"Insurer": insurer_api_name, "Msg": data.Msg, "Status": "FAIL"}); // roshani
                                }
                            } else {
                                res.json({"Insurer": insurer_api_name, "Msg": "Verify service issue", "Status": "FAIL"});
                            }
                        });
                    }
                } else {
                    res.json({"Msg": 'KYC_DETAILS :: No Record Found', "Status": "NEW"});
                }
            }
        });
    } catch (e1) {
        res.json({"Msg": e1.stack, "Status": "FAIL"});
    }
});
router.post('/kyc_details/create_kyc_details', function (req, res) {
    try {
        let ObjRequest = req.body;
        let crn = (req.body.crn === undefined || req.body.crn === "" || req.body.crn === null) ? "" : req.body.crn - 0;
        let udid = (req.body.udid === undefined || req.body.udid === "" || req.body.udid === null) ? "" : req.body.udid - 0;
        let insurer_id = (req.body.insurer_id === undefined || req.body.insurer_id === "" || req.body.insurer_id === null) ? "" : req.body.insurer_id - 0;
        let full_name = ObjRequest.Proposal_Request['middle_name'] === "" ? (ObjRequest.Proposal_Request['first_name'] + " " + ObjRequest.Proposal_Request['last_name']) : (ObjRequest.Proposal_Request['first_name'] + " " + ObjRequest.Proposal_Request['middle_name'] + " " + ObjRequest.Proposal_Request['last_name']);
        let proposal_request = ObjRequest.hasOwnProperty('Proposal_Request') && ObjRequest.Proposal_Request ? ObjRequest.Proposal_Request : {};
        let tmp_url_api = {
            '7': 'iffco_create_kyc_details',
            '1': 'bajaj_create_kyc_details',
            '44': 'digit_create_kyc_details'
        };
        let insurer_api_name = tmp_url_api[insurer_id];
        let kyc_detail = require('../models/kyc_detail');
        let saveObj = {
            'Insurer_Id': insurer_id,
            'PAN_Doc': (ObjRequest.pan_image === undefined || ObjRequest.pan_image === "" || ObjRequest.pan_image === null) ? "" : ObjRequest.pan_image,
            'Aadhar_Doc': (ObjRequest.aadhar_image === undefined || ObjRequest.aadhar_image === "" || ObjRequest.aadhar_image === null) ? "" : ObjRequest.aadhar_image,
            'Search_Type': (ObjRequest.search_type === undefined || ObjRequest.search_type === "" || ObjRequest.search_type === null) ? "" : ObjRequest.search_type,
            'KYC_Number': "",
            'Mobile': (proposal_request.mobile === undefined || proposal_request.mobile === "" || proposal_request.mobile === null) ? "" : proposal_request.mobile - 0,
            'PAN': (proposal_request.pan === undefined || proposal_request.pan === "" || proposal_request.pan === null) ? "" : proposal_request.pan,
            'Aadhar': (ObjRequest.aadhar === undefined || ObjRequest.aadhar === "" || ObjRequest.aadhar === null) ? "" : ObjRequest.aadhar,
            'KYC_Status': "PENDING",
            'DOB': (proposal_request.birth_date === undefined || proposal_request.birth_date === "" || proposal_request.birth_date === null) ? "" : proposal_request.birth_date,
            'Created_On': new Date(),
            'Modified_On': new Date(),
            'User_Data_Id': udid,
            'Product_Id': (ObjRequest.product_id === undefined || ObjRequest.product_id === "" || ObjRequest.product_id === null) ? 0 : ObjRequest.product_id - 0,
            'Email': (proposal_request.email === undefined || proposal_request.email === "" || proposal_request.email === null) ? "" : proposal_request.email,
            'PB_CRN': (ObjRequest.crn === undefined || ObjRequest.crn === "" || ObjRequest.crn === null) ? "" : ObjRequest.crn - 0,
            'Proposal_Request': proposal_request,
            'Proposal_Id': "",
            'Quote_Id': (ObjRequest.Quote_Id === undefined || ObjRequest.Quote_Id === "" || ObjRequest.Quote_Id === null) ? "" : ObjRequest.Quote_Id,
            'KYC_URL': "",
            'Full_Name': full_name,
            'KYC_Full_Name': "",
            'PAN_Doc_Extension': (ObjRequest.pan_file_extension === undefined || ObjRequest.pan_file_extension === "" || ObjRequest.pan_file_extension === null) ? "" : ObjRequest.pan_file_extension,
            'PAN_Doc_FileName': (ObjRequest.pan_file_name === undefined || ObjRequest.pan_file_name === "" || ObjRequest.pan_file_name === null) ? "" : ObjRequest.pan_file_name,
            'Aadhar_Doc_Extension': (ObjRequest.aadhar_file_extension === undefined || ObjRequest.aadhar_file_extension === "" || ObjRequest.aadhar_file_extension === null) ? "" : ObjRequest.aadhar_file_extension,
            'Aadhar_Doc_FileName': (ObjRequest.aadhar_file_name === undefined || ObjRequest.aadhar_file_name === "" || ObjRequest.aadhar_file_name === null) ? "" : ObjRequest.aadhar_file_name
        };
        let updateObj = {
            'PAN_Doc': (ObjRequest.pan_image === undefined || ObjRequest.pan_image === "" || ObjRequest.pan_image === null) ? "" : ObjRequest.pan_image,
            'Aadhar_Doc': (ObjRequest.aadhar_image === undefined || ObjRequest.aadhar_image === "" || ObjRequest.aadhar_image === null) ? "" : ObjRequest.aadhar_image,
            'Search_Type': (ObjRequest.search_type === undefined || ObjRequest.search_type === "" || ObjRequest.search_type === null) ? "" : ObjRequest.search_type,
            'KYC_Number': "",
            'Mobile': (proposal_request.mobile === undefined || proposal_request.mobile === "" || proposal_request.mobile === null) ? "" : proposal_request.mobile - 0,
            'PAN': (proposal_request.pan === undefined || proposal_request.pan === "" || proposal_request.pan === null) ? "" : proposal_request.pan,
            'Aadhar': (ObjRequest.aadhar === undefined || ObjRequest.aadhar === "" || ObjRequest.aadhar === null) ? "" : ObjRequest.aadhar,
//            'KYC_Status': "PENDING",
            'DOB': (proposal_request.birth_date === undefined || proposal_request.birth_date === "" || proposal_request.birth_date === null) ? "" : proposal_request.birth_date,
            'Modified_On': new Date(),
            'Email': (proposal_request.email === undefined || proposal_request.email === "" || proposal_request.email === null) ? "" : proposal_request.email,
            'Proposal_Request': proposal_request,
            'Proposal_Id': "",
            'Quote_Id': "",
            'KYC_URL': "",
            'Full_Name': full_name,
            'KYC_Full_Name': "",
            'PAN_Doc_Extension': (ObjRequest.pan_file_extension === undefined || ObjRequest.pan_file_extension === "" || ObjRequest.pan_file_extension === null) ? "" : ObjRequest.pan_file_extension,
            'PAN_Doc_FileName': (ObjRequest.pan_file_name === undefined || ObjRequest.pan_file_name === "" || ObjRequest.pan_file_name === null) ? "" : ObjRequest.pan_file_name,
            'Aadhar_Doc_Extension': (ObjRequest.aadhar_file_extension === undefined || ObjRequest.aadhar_file_extension === "" || ObjRequest.aadhar_file_extension === null) ? "" : ObjRequest.aadhar_file_extension,
            'Aadhar_Doc_FileName': (ObjRequest.aadhar_file_name === undefined || ObjRequest.aadhar_file_name === "" || ObjRequest.aadhar_file_name === null) ? "" : ObjRequest.aadhar_file_name
        };
        kyc_detail.findOne({'PB_CRN': crn, 'Insurer_Id': insurer_id}).sort({Modified_On: -1}).exec(function (err, db_svae_kyc_detail) {
            if (err) {
                res.json({"Msg": err, "Status": "FAIL"});
            } else {
                if (db_svae_kyc_detail) {
                    kyc_detail.findOneAndUpdate({"PB_CRN": crn, "Insurer_Id": insurer_id}, {$set: updateObj}, {new : true}, function (err, db_update_kyc_detail) {
                        if (err) {
                            res.json({"Msg": err, "Status": "FAIL"});
                        } else {
                            if (insurer_api_name === undefined) {
                                res.json({"Msg": "KYC Process is Under Construction.....", "Status": "FAIL"});
                            } else {
                                let args = {
                                    data: db_update_kyc_detail['_doc'],
                                    headers: {
                                        "Content-Type": "application/json"
                                    }
                                }; //pls comment - issue - multiple records
                                let url_api = config.environment.weburl + '/kyc_details/' + insurer_api_name;
                                client.post(url_api, args, function (data, response) {
                                    if (data && data.hasOwnProperty('Msg')) {
                                        res.json(data['Msg']);
                                    } else {
                                        res.json({"Insurer": insurer_api_name, "Msg": "Create service issue", "Status": "FAIL"});
                                    }
                                });
                            }
                        }
                    });
                } else {
                    let kyc_detail1 = new kyc_detail(saveObj);
                    kyc_detail1.save(saveObj, function (err, data) {
                        if (err) {
                            res.json({"Msg": err, "Status": "FAIL"});
                        } else {
                            if (insurer_api_name === undefined) {
                                res.json({"Msg": "KYC Process is Under Construction.....", "Status": "FAIL"});
                            } else {
                                let args = {
                                    data: data[0]['_doc'],
                                    headers: {
                                        "Content-Type": "application/json"
                                    }
                                }; //pls comment - issue - multiple records
                                let url_api = config.environment.weburl + '/kyc_details/' + insurer_api_name;
                                client.post(url_api, args, function (data, response) {
                                    if (data && data.hasOwnProperty('Msg')) {
                                        res.json(data['Msg']);
                                    } else {
                                        res.json({"Insurer": insurer_api_name, "Msg": "Create service issue", "Status": "FAIL"});
                                    }
                                });
                            }
                        }
                    });
                }
            }
        });
    } catch (e1) {
        res.json({"Msg": e1.stack, "Status": "FAIL"});
    }
});
module.exports = router;

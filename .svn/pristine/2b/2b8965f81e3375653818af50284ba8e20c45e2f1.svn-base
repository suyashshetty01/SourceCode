var express = require('express');
var config = require('config');
var bitly_access_token = config.environment.arr_bitly_access_token[Math.floor(Math.random() * config.environment.arr_bitly_access_token.length)];
var fs = require('fs');
var sleep = require('system-sleep');
var MongoClient = require('mongodb').MongoClient;
var moment = require('moment');
const objMongoDB = null;
var path = require('path');
var appRoot = path.dirname(path.dirname(require.main.filename));
var pdf = require('html-pdf');
var rcnt = 0;
var multer = require('multer');
var store_path = appRoot + "/tmp/ticketing/";
var autoIncrement = require("mongodb-autoincrement");
var post_sale = ["Policy not received", "Post Sale Query", "Endorsement", "Claim Related", "Received policy copy, CRN is not marked as sell", "Done payment but not received policy copy"];
String.prototype.replaceJson = function (objfindReplaceJson) {
    var replaceString = this;
    var regex;
    for (var key in objfindReplaceJson) {
        if (objfindReplaceJson.hasOwnProperty(key)) {
            var val = objfindReplaceJson[key];
            regex = new RegExp(key, "g");
            replaceString = replaceString.replace(regex, val);
        }
    }
    return replaceString;
};
function dynamicSort(property) {
    var sortOrder = 1;
    if (property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }
    return function (a, b) {
        /* next line works with strings and numbers, 
         * and you may want to customize it to your needs
         */
        var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
        return result * sortOrder;
    }
}
var storage = multer.diskStorage({

    destination: function (req, recieved_file, cb) {
        console.log('Test');
        cb(null, store_path);
    },
    filename: function (req, recieved_file, cb) {
        console.log('Test11');
        var originalname = recieved_file.originalname;
        var extension = originalname.split(".");
        filename = Date.now() + '.' + extension[extension.length - 1];
        cb(null, filename);
    }
});
var Base = require(appRoot + '/libs/Base');
var objBase = new Base();
var User_Data = require('../models/user_data');
var Policy_Email = require('../models/policy_email');
var Const_Insurer_Email = {
    1: 'donotreply@bajajallianz.co.in',
    2: 'Motor.Policy@bhartiaxa.com',
    4: 'fgcare@futuregenerali.in',
    5: 'hdfcergo.service@hdfcergo.com',
    7: 'noreply@iffcotokio.co.in',
    10: 'no-reply@royalsundaram.in',
    16: 'motor_f@rahejaqbe.com',
    19: 'customerservice@universalsompo.com',
    21: 'relay@hdfcergohealth.com',
    33: 'onlinesales@libertyinsurance.in',
    34: 'ahealthystart@religarehealthinsurance.com',
    38: 'Communications@manipalcigna.com',
    42: 'communication.abh@adityabirlacapital.com',
    44: 'noreply@godigit.com',
    45: 'support@acko.com',
    20: 'servicingyou@maxbupa.com'
};
var arr_ins = {1: "BajajAllianz", 2: "BhartiAxa", 3: "Cholamandalam MS", 4: "Future Generali", 5: "HDFCERGO", 6: "ICICILombard", 7: "IFFCOTokio", 8: "National Insurance", 9: "Reliance", 10: "RoyalSundaram", 11: "TataAIG", 12: "New India", 13: "Oriental", 14: "UnitedIndia", 15: "L&amp;T General", 16: "Raheja QBE", 17: "SBI General", 18: "Shriram General", 19: "UniversalSompo", 20: "Max Bupa", 21: "HDFC ERGO Health", 22: "DLF Pramerica", 23: "Bajaj Allianz", 24: "IndiaFirst", 25: "AEGON Religare", 26: "Star Health", 27: "Express BPO", 28: "HDFC Life", 29: "Bharti Axa", 30: "Kotak Mahindra", 31: "LIC India", 32: "Birla Sun Life", 33: "LibertyGeneral", 34: "Care Health", 35: "Magma HDI", 36: "Indian Health Organisation", 37: "TATA AIA", 38: "Manipal Cigna", 39: "ICICI Pru", 42: "Aditya Birla", 43: "Edelweiss Tokio Life", 44: "GoDigit", 45: "Acko", 46: "Edelweiss", 48: 'Kotak', 47: "DHFL", 100: "FastLaneVariantMapping", 101: "Landmark"};
var const_email_env_sub = (config.environment.name.toString() === 'Production' ? "" : ('[' + config.environment.name.toString().toUpperCase() + ']'));
var const_policy_subtype = {
    '1OD_0TP': '1Y_OD_ONLY',
    '0CH_1TP': '1Y_TP_ONLY',
    '0CH_3TP': '3Y_TP_ONLY',
    '0CH_5TP': '5Y_TP_ONLY',
    '1CH_2TP': '1Y_OD-3Y_TP',
    '1CH_4TP': '1Y_OD-5Y_TP',
    '1CH_0TP': '1Y_OD-1Y_TP',
    '2CH_0TP': '2Y_OD-2Y_TP',
    '3CH_0TP': '3Y_OD-3Y_TP',
    '5CH_0TP': '5Y_OD-5Y_TP'
};
var Const_Product = {
    '1': 'Car',
    '2': 'Health',
    '4': 'Travel',
    '3': 'Term',
    '10': 'TW',
    '12': 'CV',
    '17': 'CoronaCare',
    '18': 'CyberSecurity'
};
var Const_Product_Link = {
    '1': 'Car',
    '2': 'Health',
    '10': 'TW',
    '12': 'CV'
};
var Const_CH_Contact = {
    "DC": {
        "email": "srinivas@policyboss.com",
        "mob": "9769588193"
    },
    "DC-NP": {
        "email": "srinivas@policyboss.com",
        "mob": "9769588193"
    },
    "LA": {
        "email": "srinivas@policyboss.com",
        "mob": "9769588193"
    },
    "SM": {
        "email": "susheel.menon@landmarkinsurance.in",
        "mob": "9099946466"
    },
    "SM-NP": {
        "email": "susheel.menon@landmarkinsurance.in",
        "mob": "9099946466"
    },
    "SG": {
        "email": "sagar.tejuja@landmarkinsurance.in",
        "mob": "9819600699"
    },
    "GS": {
        "email": "gagandeep.singh@policyboss.com",
        "mob": "9702738000"
    },
    "GS-NP": {
        "email": "gagandeep.singh@policyboss.com",
        "mob": "9702738000"
    },
    "EM": {
        "email": "kevin.menezes@policyboss.com",
        "mob": "9909973125"
    },
    "EM-NP": {
        "email": "kevin.menezes@policyboss.com",
        "mob": "9909973125"
    },
    "CC-AUTO": {
        "email": "shah.kevin@landmarkinsurance.in",
        "mob": "9870200065"
    },
    "CC-HEALTH": {
        "email": "Santosh.singh@policyboss.com",
        "mob": "9920162163"
    }
};
function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
}
function isCurrentFutureDate(dateText) {
    var selectedDate = new Date(dateText);
    var now = new Date();
    now.setHours(0);
    now.setMinutes(0);
    now.setSeconds(0, 0);
    if (selectedDate < now) {
        return false;
    } else {
        return true;
    }
}
var router = express.Router();
router.post('/fba_link', function (req, res, next) {
    var Client = require('node-rest-client').Client;
    var client = new Client();
    var finvest_url = 'https://investgini.hellotars.com/conv/rkOu-y/?fba_id=' + req.body.fba_id;
    client.get('https://api-ssl.bitly.com/v3/shorten?access_token=' + bitly_access_token + '&longUrl=' + encodeURIComponent(finvest_url), function (data, response) {
        //console.log(data);
        if (data && data.status_code === 200) {
            var short_url = data.data.url;
            var SmsLog = require('../models/sms_log');
            var objsmsLog = new SmsLog();
            var smsTxt = 'Earn upto 9.50% on NCD of Mahindra & Mahindra (AAA rated).\n\
Application on 1st Come, 1st Serve Basis Only.T&CA.\n\
\n\
' + short_url;
            objsmsLog.send_sms(req.body.mobile_no, smsTxt, 'INVESTGINI_CAMP');
            res.json({'link': short_url});
        }
    });
});
router.get('/udreport', function (req, res, next) {
    try {
        User_Data.find({Product_Id: 17, 'ERP_CS': /CS/, Last_Status: {$in: ['TRANS_SUCCESS_WITH_POLICY', 'TRANS_SUCCESS_WO_POLICY']}}).sort({User_Data_Id: 1}).select({User_Data_Id: 1, PB_CRN: 1, ERP_CS: 1, 'Erp_Qt_Request_Core.___policy_number___': 1, 'Erp_Qt_Request_Core.___posp_reporting_agent_name___': 1, 'Erp_Qt_Request_Core.___posp_reporting_agent_uid___': 1, 'Erp_Qt_Request_Core.___posp_first_name___': 1, 'Erp_Qt_Request_Core.___posp_last_name___': 1, 'Erp_Qt_Request_Core.___posp_erp_id___': 1, Modified_On: 1}).exec(function (err, dbUserDatas) {
            if (err) {
                res.send(err);
            }
            var arr_report = [];
            for (let j in dbUserDatas) {
                let ud = dbUserDatas[j]._doc;
                arr_report.push({
                    'PB_CRN': ud['PB_CRN'],
                    'User_Data_ID': ud['User_Data_Id'],
                    'ERP_CS': ud['ERP_CS'],
                    'Sale_On': ud['Modified_On'].toLocaleString(),
                    'Certificate_Number': ud['Erp_Qt_Request_Core']['___policy_number___'],
                    'Erp_ID': ud['Erp_Qt_Request_Core']['___posp_erp_id___'],
                    'Posp_Name': ud['Erp_Qt_Request_Core']['___posp_first_name___'] + ' ' + ud['Erp_Qt_Request_Core']['___posp_last_name___'],
                    'RM_UID': ud['Erp_Qt_Request_Core']['___posp_reporting_agent_uid___'],
                    'RM_Name': ud['Erp_Qt_Request_Core']['___posp_reporting_agent_name___']
                });
            }
            let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
            res_report += arrayobjectToHtml(arr_report);
            res_report += '</body></html>';
            res.send(res_report);
        });
    } catch (e) {
        res.send(e.stack);
    }

});
router.post('/lead_init', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 7; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text.toUpperCase();
        }

////console.log(makeid());

        var colLead = db.collection('lead');
        var myobj = {
            'SessionId': req.body.session_id,
            'UserDevice': req.body.user_device,
            'UserDevice': req.body.user_device,
            'R_Mobile': (req.body.hasOwnProperty('r_mobile_no')) ? req.body.r_mobile_no : '',
            'UserDevice': req.body.user_device,
            'ProductIntested': (req.body.hasOwnProperty('product_interested')) ? req.body.product_interested : '',
            'CreatedOn': new Date()
        };
        colLead.insertOne(myobj, function (err, resp) {
            if (err) {
                res.json({'status': err});
                throw err;
            }
            if (req.body.camp_name == 'ELECTBOT') {
                var SmsLog = require('../models/sms_log');
                var objsmsLog = new SmsLog();
                var smsTxt = 'Dear Fellow Broker,\n\
Thanks for your support.\n\
Click to download Proxy Form\n\
bit.ly/2Ntjz4w \n\
\n\
Click to download Draft Resolution\n\
bit.ly/2oSl2ng \n\
We will contact you to complete proxy nomination process\n\
\n\
Best Wishes,\n\
Susheel Tejuja';
                objsmsLog.send_sms(req.body.mobile_no, smsTxt, 'ELECTBOT_CAMP');
            }
            //console.log("1 document inserted");
            db.close();
            res.json({'status': 'lead_saved'});
        });
    });
});
router.post('/lead_save', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 7; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text.toUpperCase();
        }

////console.log(makeid());

        var colLead = db.collection('lead');
        var myobj = {
            'CampName': req.body.camp_name,
            'Name': req.body.customer_name,
            'Mobile': req.body.mobile_no,
            'InvestSlab': (req.body.hasOwnProperty('invest_slab')) ? req.body.invest_slab : '',
            'UserDevice': req.body.user_device,
            'EmailId': (req.body.hasOwnProperty('email_id')) ? req.body.email_id : '',
            'FbaId': (req.body.hasOwnProperty('fba_id')) ? req.body.fba_id : '',
            'PledgeSupport': (req.body.hasOwnProperty('pledge_support')) ? req.body.pledge_support : '',
            'ProductIntested': (req.body.hasOwnProperty('product_interested')) ? req.body.product_interested : '',
            'CreatedOn': new Date()
        };
        colLead.insertOne(myobj, function (err, resp) {
            if (err) {
                res.json({'status': err});
                throw err;
            }
            if (req.body.camp_name == 'ELECTBOT') {
                var SmsLog = require('../models/sms_log');
                var objsmsLog = new SmsLog();
                var smsTxt = 'Dear Fellow Broker,\n\
Thanks for your support.\n\
Click to download Proxy Form\n\
bit.ly/2Ntjz4w \n\
\n\
Click to download Draft Resolution\n\
bit.ly/2oSl2ng \n\
We will contact you to complete proxy nomination process\n\
\n\
Best Wishes,\n\
Susheel Tejuja';
                objsmsLog.send_sms(req.body.mobile_no, smsTxt, 'ELECTBOT_CAMP');
            }

            if (req.body.camp_name == 'ELECBOT-R') {

            }

            //console.log("1 document inserted");
            db.close();
            res.json({'status': 'lead_saved'});
        });
    });
});
router.get('/email_pass', function (req, res, next) {

    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        var colEmail = db.collection(req.query['col']);
        colEmail.find({Sub: new RegExp('Regulatory Training Success- POSP', 'i')}).toArray(function (err, itemEmails) {
            try {
                let arr_email = [];
                for (let k in itemEmails) {
                    let url = objBase.find_text_btw_key(itemEmails[k]['Content'], 'target=\'_blank\'>', '</a></b>', false);
                    arr_email.push({
                        'Email': itemEmails[k]['To'],
                        'Pass_On': moment(itemEmails[k]['Created_On']).utcOffset("+05:30").format('YYYY-MM-DD'),
                        'Full_Date': itemEmails[k]['Created_On'].toLocaleString(),
                        'Url': url
                    });
                }
                let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                res_report += '<p><h1>Email</h1></p>';
                res_report += arrayobjectToHtml(arr_email, 'Email', '', []);
                res_report += '</body></html>';
                res.send(res_report);
            } catch (e) {
                res.send(e.stack);
            }
        });
    });
});
router.get('/gmc_detail', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        var colGmc = db.collection('gmc');
        req.query.Employee_Code = isNaN(req.query.Employee_Code) ? req.query.Employee_Code : (req.query.Employee_Code - 0);
        colGmc.find({'Employee_Code': req.query.Employee_Code}).toArray(function (err, itemGms) {
            try {
                var objEmployee = {
                    'self': 'na',
                    'family': []
                };
                for (var k in itemGms) {
                    if (itemGms[k]['Relation'] == 'Employee' || itemGms[k]['Relation'] == 'Self') {
                        objEmployee['self'] = itemGms[k];
                    } else {
                        objEmployee['family'].push(itemGms[k]);
                    }

                }
                res.json(objEmployee);
            } catch (e) {
                res.json(e);
            }
        });
    });
});
router.post('/claim_save', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 7; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text.toUpperCase();
        }

////console.log(makeid());
        var AckCode = 'LENSKART-' + makeid();
        var colClaim = db.collection('claim');
        var myobj = {
            'AckCode': AckCode,
            'Name': req.body.Name,
            'EmpCode': req.body.EmpCode,
            'InsuredName': req.body.InsuredName,
            'Reason': req.body.Reason,
            'Status': 'Pending',
            'CreatedOn': new Date()
        };
        colClaim.insertOne(myobj, function (err, resp) {
            if (err)
                throw err;
            //console.log("1 document inserted");
            db.close();
            res.json({'claim_no': AckCode});
        });
    });
});
router.get('/claim_list', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        var colClaim = db.collection('claim');
        colClaim.find({}).toArray(function (err, itemGms) {
            try {
                var data = {"data": []};
                for (var k in itemGms) {
                    var tmp = [];
                    for (var i in itemGms[k]) {
                        if (i !== '_id') {
                            tmp.push(itemGms[k][i]);
                        }
                    }
                    data.data.push(tmp);
                }
                res.json(data);
            } catch (e) {
                res.json(e);
            }
        });
    });
});
router.get('/garbage_clean', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        db.collection('user_datas', {}, function (err, user_datas) {
            user_datas.remove({'Premium_Request.first_name': 'Fm'});
            user_datas.remove({'Premium_Request.contact_name': 'Fm Test'});
            user_datas.remove({'Premium_Request.email': /^policybosstesting@gmail.com$/i});
            var Email = require('../models/email');
            var objModelEmail = new Email();
            var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-';
            var today = moment().format("D-MMM-YYYY");
            sub += 'TEST_DATA_CLEARING::' + today.toString();
            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, 'Testing Data Clean', '', '');
            res.send('Done');
        });
    });
});
router.get('/horizon_analysis_report_insurer', function (req, res, next) {
    try {
        let arr_insurer_email = {
            'GoDigit': {
                'product': ['car', 'tw', 'cv'],
                'email': [
                    'Vikas.mishra@godigit.com',
                    'Prakul.tiwari@godigit.com',
                    'Sanjna.sharma@godigit.com'
                ]
            },
            'Kotak': {
                'product': ['car', 'tw'],
                'email': [
                    'mohit.mittal@Kotak.com',
                    'atish.sonawane@Kotak.com'
                ]
            },
            'UniversalSompo': {
                'product': ['car', 'cv'],
                'email': [
                    'vivek.roy@universalsompo.com'
                ]
            },
            'BhartiAxa': {
                'product': ['car', 'tw'],
                'email': [
                    'satishkumar.singh@bhartiaxa.com',
                    'prachi.shah@bhartiaxa.com'
                ]
            },
            'IFFCOTokio': {
                'product': ['car'],
                'email': [
                    'Deepak.Mandal@Iffcotokio.co.in'
                ]
            },
            'Reliance': {
                'product': ['car', 'tw'],
                'email': [
                    'Mayuri.Karale@relianceada.com',
                    'Deepak.P.Gupta@relianceada.com'
                ]
            },
            'TataAIG': {
                'product': ['car', 'tw'],
                'email': [
                    'Nilesh.Dubey@tataaig.com',
                    'Purnima.Prajapati@tataaig.com',
                    'Inshu.Kapoor@tataaig.com',
                    'Brijesh.Dayashankar@tataaig.com'
                ]
            },
            'ICICILombard': {
                'product': ['car', 'tw'],
                'email': [
                    'mrigank.shekhar@icicilombard.com',
                    'mukund.parekh@icicilombard.com',
                    'vilas.menon@icicilombard.com',
                    'becky.sandhu@icicilombard.com'
                ]
            },
            'HDFCERGO': {
                'product': ['car', 'tw', 'cv'],
                'email': [
                    'pallavi.mukadam@hdfcergo.com'
                ]
            },
            'DHFL': {
                'product': ['car', 'tw'],
                'email': [
                    'chintan.jani@cocogeneralinsurance.com'
                ]
            },
            'Edelweiss': {
                'product': ['car'],
                'email': [
                    'Shrinath.Pandey@edelweissfin.com',
                    'Akshay.Kohade@edelweissfin.com'
                ]
            },
            'Chola': {
                'product': ['tw'],
                'email': [
                    'aliM@cholams.murugappa.com',
                    'rajanK@cholams.murugappa.com',
                    'saravananY@cholams.murugappa.com',
                    'selvaganesha@cholams.murugappa.com',
                    'sankarg@cholams.murugappa.com',
                    'sriramg1@cholams.murugappa.com',
                    'roshan@cholams.murugappa.com'
                ]
            }

        };
        if (req.query.hasOwnProperty('op') && req.query['op'] == 'SCHEDULE') {
            var Client = require('node-rest-client').Client;
            var client = new Client();
            let arr_url = [];
            for (let ins of Object.keys(arr_insurer_email)) {
                let ins_url = 'http://horizon.policyboss.com:5000/report/horizon_analysis_report_insurer?type=daily&email=yes&insurer=' + ins;
                arr_url.push(ins_url);
                client.get(ins_url, function (data, response) {});
                sleep(500);
            }
            return res.json(arr_url);
        } else {
            var insurer = req.query['insurer'];
            var today = moment().utcOffset("+05:30").startOf('Day');
            if (req.query.hasOwnProperty('type') && req.query['type'] == 'daily') {
                var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
                req.query['datefrom'] = yesterday;
                req.query['dateto'] = yesterday;
            }
            if (req.query.hasOwnProperty('type') && req.query['type'] == 'weekly') {
                var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
                var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
                req.query['datefrom'] = weekstart;
                req.query['dateto'] = yesterday;
            }

            var arrFrom = req.query['datefrom'].split('-');
            var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
            var arrTo = req.query['dateto'].split('-');
            var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
            dateTo.setDate(dateTo.getDate() + 1);
            console.error('Motor_daily_DateRange', 'from', dateFrom, 'to', dateTo);
            var ReportHeader = {
                'type': req.query['type'],
                'datefrom': req.query['datefrom'],
                'dateto': req.query['dateto'],
                'ud_start': 0,
                'ud_end': 0,
                'title': '',
                'condi_sl': null,
                'product': Const_Product[req.query['product_id']]
            };
            var car_cache_key = 'HorizonTechAnalysis_' + ReportHeader.type + '_' + Const_Product['1'] + '_from_' + ReportHeader['datefrom'] + '_to_' + ReportHeader['dateto'];
            car_cache_key = car_cache_key.toLowerCase();
            var tw_cache_key = 'HorizonTechAnalysis_' + ReportHeader.type + '_' + Const_Product['10'] + '_from_' + ReportHeader['datefrom'] + '_to_' + ReportHeader['dateto'];
            tw_cache_key = tw_cache_key.toLowerCase();
            var cv_cache_key = 'HorizonTechAnalysis_' + ReportHeader.type + '_' + Const_Product['12'] + '_from_' + ReportHeader['datefrom'] + '_to_' + ReportHeader['dateto'];
            cv_cache_key = cv_cache_key.toLowerCase();
            let Main_Report_Summary = {
                'car': null,
                'tw': null,
                'cv': null
            }
            var cache_content = '';
            var ObjMasterReport = null;
            if (fs.existsSync(appRoot + "/tmp/cachereport/" + car_cache_key + ".log")) {
                cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + car_cache_key + ".log").toString();
                ObjMasterReport = JSON.parse(cache_content);
                var ObjInsurerReport = {};
                for (let k in ObjMasterReport) {
                    ObjInsurerReport[k] = [];
                    for (let k1 in ObjMasterReport[k]) {
                        if (ObjMasterReport[k][k1].hasOwnProperty('Insurer') && ObjMasterReport[k][k1]['Insurer'].toLowerCase().indexOf(insurer.toLowerCase()) > -1) {
                            ObjInsurerReport[k].push(ObjMasterReport[k][k1]);
                        }
                    }
                    if (ObjInsurerReport[k].length > 0 && ObjInsurerReport[k][0].hasOwnProperty('Count')) {
                        ObjInsurerReport[k].sort(function (a, b) {
                            return b.Count - a.Count;
                        });
                    }
                }
                Main_Report_Summary['car'] = ObjInsurerReport;
            }
            if (fs.existsSync(appRoot + "/tmp/cachereport/" + tw_cache_key + ".log")) {
                cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + tw_cache_key + ".log").toString();
                ObjMasterReport = JSON.parse(cache_content);
                var ObjInsurerReport = {};
                for (let k in ObjMasterReport) {
                    ObjInsurerReport[k] = [];
                    for (let k1 in ObjMasterReport[k]) {
                        if (ObjMasterReport[k][k1].hasOwnProperty('Insurer') && ObjMasterReport[k][k1]['Insurer'].toLowerCase().indexOf(insurer.toLowerCase()) > -1) {
                            ObjInsurerReport[k].push(ObjMasterReport[k][k1]);
                        }
                    }
                    if (ObjInsurerReport[k].length > 0 && ObjInsurerReport[k][0].hasOwnProperty('Count')) {
                        ObjInsurerReport[k].sort(function (a, b) {
                            return b.Count - a.Count;
                        });
                    }
                }
                Main_Report_Summary['tw'] = ObjInsurerReport;
            }
            if (fs.existsSync(appRoot + "/tmp/cachereport/" + cv_cache_key + ".log")) {
                cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cv_cache_key + ".log").toString();
                ObjMasterReport = JSON.parse(cache_content);
                var ObjInsurerReport = {};
                for (let k in ObjMasterReport) {
                    ObjInsurerReport[k] = [];
                    for (let k1 in ObjMasterReport[k]) {
                        if (ObjMasterReport[k][k1].hasOwnProperty('Insurer') && ObjMasterReport[k][k1]['Insurer'].toLowerCase().indexOf(insurer.toLowerCase()) > -1) {
                            ObjInsurerReport[k].push(ObjMasterReport[k][k1]);
                        }
                    }
                    if (ObjInsurerReport[k].length > 0 && ObjInsurerReport[k][0].hasOwnProperty('Count')) {
                        ObjInsurerReport[k].sort(function (a, b) {
                            return b.Count - a.Count;
                        });
                    }
                }
                Main_Report_Summary['cv'] = ObjInsurerReport;
            }

            if (Main_Report_Summary['car'] || Main_Report_Summary['tw'] || Main_Report_Summary['cv']) {
                var totalSearch = ObjMasterReport.ReportHeader.total;
                var msg = '<!DOCTYPE html><html><head><title>Proposal Report - From  ' + ObjMasterReport.ReportHeader.ud_start + ' to ' + ObjMasterReport.ReportHeader.ud_end + '</title><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">';
                msg += '<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>';
                msg += '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>';
                msg += '<meta charset="utf-8">';
                msg += '<meta name="viewport" content="width=device-width, initial-scale=1">';
                msg += '<style>*,html,body{font-family:\'Google Sans\' ,tahoma;font-size:12px;}</style>';
                msg += '</head><body>';
                msg += '<h2>HORIZON TECH ANALYSIS :: For Online Transaction DATE-' + ObjMasterReport.ReportHeader.datefrom + '<br>';
                msg += 'INSURER :: ' + insurer.toString().toUpperCase() + '</h2>';
                var arr_to = [];
                arr_to = arr_insurer_email[insurer]['email'];
                for (let prod of ['car', 'tw', 'cv']) {
                    if (Main_Report_Summary[prod] && arr_insurer_email[insurer]['product'].indexOf(prod) > -1) {
                        ObjMasterReport = Main_Report_Summary[prod];
                        let Product_Display = (prod === 'cv') ? 'COMMERCIAL VEHICLE' : prod.toUpperCase();
                        msg += '<h2 style="color:red;text-decoration:underline">PRODUCT - ' + Product_Display + '</h2><br>';
                        msg += arrayobjectToHtml(ObjMasterReport.objInsurerExecutionTime, 'WebService&nbsp;Execution&nbsp;Time', 'Description : Insurer Web service performance report', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objVehicleUnMapped, 'Vehicle&nbsp;UnMapped&nbsp;Report', 'Description : PolicyBoss Vehicle List which are pending to Map with Insurer Vehicle Master', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objVehicleNotSupported, 'Vehicle&nbsp;NotSupported&nbsp;Report', 'Description : PolicyBoss Vehicle List which are NOT supported to Map with Insurer Vehicle Master', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objVehicleUWDeclined, 'Vehicle&nbsp;UW-Declined&nbsp;Report', 'Description : PolicyBoss Vehicle List which are declined by Insurer Underwriter', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objRTOUnMapped, 'RTO&nbsp;UnMapped&nbsp;Report', 'Description : PolicyBoss RTO List which are pending to Map with Insurer RTO Master', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objRTONotSupported, 'RTO&nbsp;NotSupported&nbsp;Report', 'Description : PolicyBoss RTO List which are NOT supported to Map with Insurer RTO Master', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objRTOUWDeclined, 'RTO&nbsp;UW-Declined&nbsp;Report', 'Description : PolicyBoss RTO List which are declined by Insurer Underwriter', ['Insurer']);
                        msg += arrayobjectToHtml(ObjMasterReport.objPrevInsUnMapped, 'PreviousInsurer&nbsp;UnMapped&nbsp;Report', 'Description : Previous Insurer which are not supported by Insurer', ['Insurer']);
                    }
                }
                msg += '</body></html>';
                if (req.query['email'] === 'yes') {
                    if (req.query['dbg'] == 'yes') {
                        arr_to = ['chirag.modi@policyboss.com'];
                    }
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    var today = moment().format("D-MMM-YYYY");
                    var subject = '[REPORT][POLICYBOSS-' + insurer.toString().toUpperCase() + '] HORIZON_TECH_ANALYSIS :: MOTOR ::' + today.toString();
                    objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, msg, 'varun.kaushik@policyboss.com,savio.lobo@landmarkinsurance.in,ccauto@policyboss.com', config.environment.notification_email);
                }
                return res.send(msg);
            } else {
                res.send('Report Data not prepared');
            }
        }
    } catch (e) {
        return res.send(e.stack);
    }
});
router.get('/horizon_analysis_report', function (req, res, next) {
    var scope = req.query['scope'];
    var today = moment().utcOffset("+05:30").startOf('Day');
    if (req.query.hasOwnProperty('type') && req.query['type'] == 'daily') {
        var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
        req.query['datefrom'] = yesterday;
        req.query['dateto'] = yesterday;
    }
    if (req.query.hasOwnProperty('type') && req.query['type'] == 'weekly') {
        var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
        var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
        req.query['datefrom'] = weekstart;
        req.query['dateto'] = yesterday;
    }

    var arrFrom = req.query['datefrom'].split('-');
    var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
    var arrTo = req.query['dateto'].split('-');
    var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
    dateTo.setDate(dateTo.getDate() + 1);
    console.error('Motor_daily_DateRange', 'from', dateFrom, 'to', dateTo);
    var ReportHeader = {
        'type': req.query['type'],
        'datefrom': req.query['datefrom'],
        'dateto': req.query['dateto'],
        'ud_start': 0,
        'ud_end': 0,
        'title': '',
        'condi_sl': null,
        'product': Const_Product[req.query['product_id']]
    };
    var cache_key = 'HorizonTechAnalysis_' + ReportHeader.type + '_' + Const_Product[req.query['product_id']] + '_from_' + ReportHeader['datefrom'] + '_to_' + ReportHeader['dateto'];
    cache_key = cache_key.toLowerCase();
    if (req.query['tech'] === 'yes') {
        cache_key = '';
    }
    if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
        var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
        var ObjMasterReport = JSON.parse(cache_content);
        horizon_analysis_report_handler(ObjMasterReport, req, res);
    } else {
        var objInsurers = arr_ins;
        var objErrors = {};
        var Error = require('../models/error');
        Error.find({}, function (err, dbErrors) {
            for (var k in dbErrors) {
                objErrors[dbErrors[k]._doc['Error_Code']] = dbErrors[k]._doc;
            }
            var Service_Log = require('../models/service_log');
            var User_Data = require('../models/user_data');
            User_Data.find({
                "Created_On": {"$gte": dateFrom, "$lte": dateTo}
            }).sort({User_Data_Id: 1}).select('User_Data_Id').exec(function (err, dbUserDatas) {
                var Start_User_Data_Id = dbUserDatas[0]._doc['User_Data_Id'];
                var End_User_Data_Id = dbUserDatas[dbUserDatas.length - 1]._doc['User_Data_Id'];
                ReportHeader.ud_start = Start_User_Data_Id;
                ReportHeader.ud_end = End_User_Data_Id;
                console.error('Motor_daily_report', Start_User_Data_Id, End_User_Data_Id);
                var condi_sl = {
                    "User_Data_Id": {"$gte": Start_User_Data_Id, "$lte": End_User_Data_Id},
                    'Product_Id': req.query['product_id'] - 0
                };
                ReportHeader['condi_sl'] = condi_sl;
                Service_Log.find(condi_sl).select('Status Product_Id Insurer_Id Method_Type Error_Code Error Error_Details Request_Id Service_Log_Id Call_Execution_Time User_Data_Id Premium_Breakup LM_Custom_Request').limit(50000).sort().exec(function (err, dbService_Logs) {
                    if (err) {
                        return res.json({
                            'Status': err,
                            'condi_sl': condi_sl
                        });
                    } else {
                        if (dbService_Logs) {

                            var objDailyReport = {};
                            var arrServiceLogsDataerror = [];
                            var objVehicleUnMapped = {};
                            var objVehicleNotSupported = {};
                            var objVehicleUWDeclined = {};
                            var objRTOUnMapped = {};
                            var objRTONotSupported = {};
                            var objRTOUWDeclined = {};
                            var objPrevInsUnMapped = {};
                            var objSearchInsurerFull = {};
                            var objSearchInsurerSTPFull = {};
                            var objSearchInsurerSODFull = {};
                            var objInsurerCountFull = {};
                            var objInsurerExecutionTime = {};
                            ReportHeader.total = 0;
                            var ObjMasterReport = {
                                'ReportHeader': ReportHeader,
                                'objSearchCountReport': {},
                                'objSearchInsurerFull': {},
                                'objDailyReport': {},
                                'objVehicleUnMapped': {},
                                'objVehicleNotSupported': {},
                                'objVehicleUWDeclined': {},
                                'objRTOUnMapped': {},
                                'objRTONotSupported': {},
                                'objRTOUWDeclined': {},
                                'objPrevInsUnMapped': {},
                                'objInsurerCountFull': {},
                                'objInsurerExecutionTime': {},
                                'arrServiceLogsDataerror': [],
                            };
                            try {
                                let arr_non_tech = [
                                    'LM003',
                                    'LM008',
                                    'LM009',
                                    'LM013',
                                    'LM004',
                                    'LM010',
                                    'LM012',
                                    'LM005'
                                ];
                                for (var k in dbService_Logs) {
                                    try {
                                        if ([1, 2, 10, 12].indexOf(dbService_Logs[k]._doc['Product_Id']) === -1 || dbService_Logs[k]._doc['Status'] !== 'complete') {
                                            continue;
                                        }
                                        if (dbService_Logs[k]._doc['Error_Code'] === 'LM006') {
                                            continue;
                                        }

                                        if ([1, 10, 12].indexOf(dbService_Logs[k]._doc['Product_Id']) > -1) {
                                            if (['LM003', 'LM008', 'LM009', 'LM013'].indexOf(dbService_Logs[k]._doc['Error_Code']) > -1) {
                                                var vehicle_id = 0;
                                                var vehicle_name = '';
                                                if (dbService_Logs[k]._doc.hasOwnProperty('Error_Details')) {
                                                    vehicle_id = dbService_Logs[k]._doc['Error_Details']['Vehicle_ID'];
                                                    vehicle_name = dbService_Logs[k]._doc['Error_Details']['Make_Name'] + '::' + dbService_Logs[k]._doc['Error_Details']['Model_Name'] + '::' + dbService_Logs[k]._doc['Error_Details']['Variant_Name'] + '::' + dbService_Logs[k]._doc['Error_Details']['Fuel_Name'] + '::CC-' + dbService_Logs[k]._doc['Error_Details']['Cubic_Capacity'] + ' (' + vehicle_id + ')';
                                                } else {
                                                    vehicle_id = dbService_Logs[k]._doc['LM_Custom_Request']['dbmaster_pb_vehicle_id'];
                                                    vehicle_name = dbService_Logs[k]._doc['LM_Custom_Request']['dbmaster_pb_make_name'] + ' ' + dbService_Logs[k]._doc['LM_Custom_Request']['dbmaster_pb_model_name'] + ' ' + dbService_Logs[k]._doc['LM_Custom_Request']['dbmaster_pb_variant_name'] + ' (' + vehicle_id + ')';
                                                }
                                                var obj_report_key = {
                                                    'LM003': 'objVehicleUnMapped',
                                                    'LM008': 'objVehicleNotSupported',
                                                    'LM009': 'objVehicleUWDeclined',
                                                    'LM013': 'objVehicleUWDeclined'
                                                };
                                                var report_key = obj_report_key[dbService_Logs[k]._doc['Error_Code']];
                                                if (!ObjMasterReport[report_key].hasOwnProperty(vehicle_id)) {
                                                    var objSingleReport = {
                                                        'Vehicle': vehicle_name,
                                                        'Insurer': '',
                                                        'Count': 0
                                                    };
                                                    ObjMasterReport[report_key][vehicle_id] = objSingleReport;
                                                }
                                                if (ObjMasterReport[report_key][vehicle_id]['Insurer'].indexOf(objInsurers[dbService_Logs[k]._doc['Insurer_Id']]) === -1) {
                                                    var sep = (ObjMasterReport[report_key][vehicle_id]['Insurer'] === '') ? '' : ', ';
                                                    ObjMasterReport[report_key][vehicle_id]['Insurer'] += sep + objInsurers[dbService_Logs[k]._doc['Insurer_Id']];
                                                }
                                                ObjMasterReport[report_key][vehicle_id]['Count'] += 1;
                                            } else if (['LM004', 'LM010', 'LM012'].indexOf(dbService_Logs[k]._doc['Error_Code']) > -1) {
                                                var obj_report_key = {
                                                    'LM004': 'objRTOUnMapped',
                                                    'LM010': 'objRTOUWDeclined',
                                                    'LM012': 'objRTONotSupported'
                                                };
                                                var report_key = obj_report_key[dbService_Logs[k]._doc['Error_Code']];
                                                var rto_id = dbService_Logs[k]._doc['Error_Details']['VehicleCity_Id'];
                                                var rto_name = dbService_Logs[k]._doc['Error_Details']['VehicleCity_RTOCode'] + '::' + dbService_Logs[k]._doc['Error_Details']['RTO_City'] + ' (' + rto_id + ')';
                                                if (!ObjMasterReport[report_key].hasOwnProperty(rto_id)) {
                                                    var objSingleReport = {
                                                        'Rto': rto_name,
                                                        'Insurer': '',
                                                        'Count': 0
                                                    };
                                                    ObjMasterReport[report_key][rto_id] = objSingleReport;
                                                }
                                                if (ObjMasterReport[report_key][rto_id]['Insurer'].indexOf(objInsurers[dbService_Logs[k]._doc['Insurer_Id']]) == -1) {
                                                    var sep = (ObjMasterReport[report_key][rto_id]['Insurer'] == '') ? '' : ', ';
                                                    ObjMasterReport[report_key][rto_id]['Insurer'] += sep + objInsurers[dbService_Logs[k]._doc['Insurer_Id']];
                                                }
                                                ObjMasterReport[report_key][rto_id]['Count'] += 1;
                                            } else if (dbService_Logs[k]._doc['Error_Code'] === 'LM005') {
                                                var prev_insurer_id = dbService_Logs[k]._doc['Error_Details']['Insurer_ID'];
                                                var prev_insurer_name = dbService_Logs[k]._doc['Error_Details']['Insurer_Code'] + ' (' + prev_insurer_id + ')';
                                                if (!ObjMasterReport['objPrevInsUnMapped'].hasOwnProperty(prev_insurer_id)) {
                                                    var objSingleReport = {
                                                        'PrevInsurer': prev_insurer_name,
                                                        'Insurer': '',
                                                        'Count': 0
                                                    };
                                                    ObjMasterReport['objPrevInsUnMapped'][prev_insurer_id] = objSingleReport;
                                                }
                                                if (ObjMasterReport['objPrevInsUnMapped'][prev_insurer_id]['Insurer'].indexOf(objInsurers[dbService_Logs[k]._doc['Insurer_Id']]) == -1) {
                                                    var sep = (ObjMasterReport['objPrevInsUnMapped'][prev_insurer_id]['Insurer'] == '') ? '' : ', ';
                                                    ObjMasterReport['objPrevInsUnMapped'][prev_insurer_id]['Insurer'] += sep + objInsurers[dbService_Logs[k]._doc['Insurer_Id']];
                                                }
                                                ObjMasterReport['objPrevInsUnMapped'][prev_insurer_id]['Count'] += 1;
                                            }
                                        }

                                        if (dbService_Logs[k]._doc['Error_Code'] !== '' && arr_non_tech.indexOf(dbService_Logs[k]._doc['Error_Code']) === -1) {
                                            var k_name = dbService_Logs[k]._doc['Product_Id'] + '_' + dbService_Logs[k]._doc['Insurer_Id'] + '_' + dbService_Logs[k]._doc['Method_Type'] + '_' + dbService_Logs[k]._doc['Error_Code'];
                                            if (!ObjMasterReport['objDailyReport'].hasOwnProperty(k_name)) {
                                                var t_obj = JSON.parse('{"' + k_name + '":null}');
                                                var objSingleReport = {
                                                    'Insurer': 0,
                                                    'Method': '',
                                                    'Error': '',
                                                    'ErrorDetails': '',
                                                    'ErrorAction': '',
                                                    'Count': 0,
                                                    'ServiceLogIds': []
                                                };
                                                objSingleReport.Insurer = objInsurers[dbService_Logs[k]._doc['Insurer_Id']] + '(' + dbService_Logs[k]._doc['Insurer_Id'] + ')';
                                                objSingleReport.Method = dbService_Logs[k]._doc['Method_Type'];
                                                objSingleReport.Error = dbService_Logs[k]._doc['Error_Code'];
                                                objSingleReport.ErrorDetails = objErrors[dbService_Logs[k]._doc['Error_Code']]['Error_Name'];
                                                objSingleReport.ErrorAction = objErrors[dbService_Logs[k]._doc['Error_Code']]['Error_Action'];
                                                //t_obj[k_name] = objSingleReport;
                                                //Object.assign(ObjMasterReport['objDailyReport'], t_obj);
                                                ObjMasterReport['objDailyReport'][k_name] = objSingleReport;
                                            }
                                            ObjMasterReport['objDailyReport'][k_name].ServiceLogIds.push(dbService_Logs[k]._doc['Service_Log_Id'] + '_' + dbService_Logs[k]._doc['User_Data_Id']);
                                            ObjMasterReport['objDailyReport'][k_name].Count += 1;
                                        }

                                        if (dbService_Logs[k]._doc['Error_Code'] === '') {
                                            if (dbService_Logs[k]._doc['Method_Type'] === 'Premium') {
                                                let subtype = '';
                                                if ([1, 10, 12].indexOf(dbService_Logs[k]._doc['Product_Id']) > -1) {
                                                    subtype = dbService_Logs[k]._doc['LM_Custom_Request']['vehicle_insurance_subtype'];
                                                    if (subtype == '') {
                                                        subtype = '1OD_0TP';
                                                    }
                                                }
                                                if ([2].indexOf(dbService_Logs[k]._doc['Product_Id']) > -1) {
                                                    subtype = dbService_Logs[k]._doc['LM_Custom_Request']['health_insurance_type'];
                                                }
                                                var report_key = 'objSearchInsurerFull';
                                                var k_name = subtype + '_' + dbService_Logs[k]._doc['User_Data_Id'];
                                                if (!ObjMasterReport[report_key].hasOwnProperty(k_name)) {
                                                    ReportHeader.total++;
                                                    var t_obj = JSON.parse('{"' + k_name + '":null}');
                                                    var objSingleReport = {
                                                        'Sub_Type': subtype,
                                                        'User_Data_Id': dbService_Logs[k]._doc['User_Data_Id'],
                                                        'Insurer_List': [],
                                                        'Insurer_Search_Count': 0
                                                    };
                                                    t_obj[k_name] = objSingleReport;
                                                    Object.assign(ObjMasterReport[report_key], t_obj);
                                                }
                                                if (dbService_Logs[k]._doc['Premium_Breakup']) {
                                                    var ins_k_name = objInsurers[dbService_Logs[k]._doc['Insurer_Id']] + '(' + dbService_Logs[k]._doc['Insurer_Id'] + ')';
                                                    if (ObjMasterReport[report_key][k_name].Insurer_List.indexOf(ins_k_name) === -1) {
                                                        ObjMasterReport[report_key][k_name].Insurer_List.push(ins_k_name);
                                                        ObjMasterReport[report_key][k_name].Insurer_Search_Count += 1;
                                                    }
                                                }

                                                //insurer search count
                                                var k_name_1 = subtype + '_' + dbService_Logs[k]._doc['Insurer_Id'];
                                                if (!ObjMasterReport['objInsurerCountFull'].hasOwnProperty(k_name_1)) {
                                                    var t_obj = JSON.parse('{"' + k_name_1 + '":null}');
                                                    var objSingleReport = {
                                                        'Sub_Type': subtype,
                                                        'Insurer': objInsurers[dbService_Logs[k]._doc['Insurer_Id']] + '(' + dbService_Logs[k]._doc['Insurer_Id'] + ')',
                                                        'User_Data_Id_List': [],
                                                        'Count': 0
                                                    };
                                                    t_obj[k_name_1] = objSingleReport;
                                                    Object.assign(ObjMasterReport['objInsurerCountFull'], t_obj);
                                                }
                                                if (dbService_Logs[k]._doc['Premium_Breakup']) {
                                                    var User_Data_Id = dbService_Logs[k]._doc['User_Data_Id'];
                                                    if (ObjMasterReport['objInsurerCountFull'][k_name_1].User_Data_Id_List.indexOf(User_Data_Id) === -1) {
                                                        ObjMasterReport['objInsurerCountFull'][k_name_1].User_Data_Id_List.push(User_Data_Id);
                                                        ObjMasterReport['objInsurerCountFull'][k_name_1].Count += 1;
                                                    }
                                                }
                                            }
                                        }

                                        if (['LM003', 'LM004', 'LM005', 'LM008', 'LM006', 'LM012'].indexOf(dbService_Logs[k]._doc['Error_Code']) === -1) {
                                            var k_name = dbService_Logs[k]._doc['Product_Id'] + '_' + dbService_Logs[k]._doc['Insurer_Id'];
                                            if (!ObjMasterReport['objInsurerExecutionTime'].hasOwnProperty(k_name)) {
                                                var t_obj = JSON.parse('{"' + k_name + '":null}');
                                                var objSingleReport = {
                                                    'Insurer': objInsurers[dbService_Logs[k]._doc['Insurer_Id']] + '(' + dbService_Logs[k]._doc['Insurer_Id'] + ')',
                                                    'Less_than_5_Sec': 0,
                                                    'Between_5_to_10_Sec': 0,
                                                    'Between_10_to_30_Sec': 0,
                                                    'More_than_30_Sec': 0,
                                                    'Total_Time': 0,
                                                    'Total_Call': 0,
                                                    'Áverage_Time': 0
                                                };
                                                t_obj[k_name] = objSingleReport;
                                                Object.assign(ObjMasterReport['objInsurerExecutionTime'], t_obj);
                                            }
                                            if (dbService_Logs[k]._doc['Call_Execution_Time'] < 5) {
                                                ObjMasterReport['objInsurerExecutionTime'][k_name]['Less_than_5_Sec'] += 1;
                                            } else if (dbService_Logs[k]._doc['Call_Execution_Time'] >= 5 && dbService_Logs[k]._doc['Call_Execution_Time'] < 10) {
                                                ObjMasterReport['objInsurerExecutionTime'][k_name]['Between_5_to_10_Sec'] += 1;
                                            } else if (dbService_Logs[k]._doc['Call_Execution_Time'] >= 10 && dbService_Logs[k]._doc['Call_Execution_Time'] < 30) {
                                                ObjMasterReport['objInsurerExecutionTime'][k_name]['Between_10_to_30_Sec'] += 1;
                                            } else if (dbService_Logs[k]._doc['Call_Execution_Time'] >= 30) {
                                                ObjMasterReport['objInsurerExecutionTime'][k_name]['More_than_30_Sec'] += 1;
                                            }

                                            ObjMasterReport['objInsurerExecutionTime'][k_name]['Total_Time'] += Math.round(dbService_Logs[k]._doc['Call_Execution_Time']);
                                            ObjMasterReport['objInsurerExecutionTime'][k_name]['Total_Call'] += 1;
                                            ObjMasterReport['objInsurerExecutionTime'][k_name]['Áverage_Time'] = Math.round(ObjMasterReport['objInsurerExecutionTime'][k_name]['Total_Time'] / ObjMasterReport['objInsurerExecutionTime'][k_name]['Total_Call']);
                                        }
                                    } catch (ex) {
                                        ObjMasterReport['arrServiceLogsDataerror'].push({
                                            'Service_Log_Id': dbService_Logs[k]._doc['Service_Log_Id'],
                                            'User_Data_Id': dbService_Logs[k]._doc['User_Data_Id'],
                                            'Error_Code': dbService_Logs[k]._doc['Error_Code'],
                                            'Err': ex.stack
                                        });
                                    }
                                }

                                for (var k in ObjMasterReport['objSearchInsurerFull']) {
                                    var key_name = ObjMasterReport['objSearchInsurerFull'][k].Sub_Type + '_' + ObjMasterReport['objSearchInsurerFull'][k].Insurer_Search_Count;
                                    if (!ObjMasterReport['objSearchCountReport'].hasOwnProperty(key_name)) {
                                        ObjMasterReport['objSearchCountReport'][key_name] = {
                                            'Sub_Type': ObjMasterReport['objSearchInsurerFull'][k].Sub_Type,
                                            'Insurer_Count': ObjMasterReport['objSearchInsurerFull'][k].Insurer_Search_Count,
                                            'User_Data_Ids': [],
                                            'Count': 0
                                        };
                                    }
                                    ObjMasterReport['objSearchCountReport'][key_name]['User_Data_Ids'].push(ObjMasterReport['objSearchInsurerFull'][k].User_Data_Id);
                                    ObjMasterReport['objSearchCountReport'][key_name]['Count'] += 1;
                                }
                                ObjMasterReport['ReportHeader'] = ReportHeader;
                                try {
                                    var Vehicle = require('../models/vehicle');
                                    var Product_Id = req.query['product_id'] - 0;
                                    Vehicle.find({'Product_Id_New': Product_Id, 'Is_Active': 1}).exec(function (err, vehicles) {
                                        try {
                                            if (err)
                                                res.send(err);
                                            let obj_config_product = {
                                                1: [1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 19, 30, 33, 44, 46, 47],
                                                10: [1, 2, 3, 5, 6, 9, 11, 13, 17, 33, 44, 45, 47, 48],
                                                12: [1, 4, 5, 19, 44]
                                            };
                                            let objVehicle_Insurer_Count = {};
                                            let objVehicle_Insurer_Wise_Summary = {};
                                            for (let j of obj_config_product[Product_Id]) {
                                                objVehicle_Insurer_Wise_Summary['Insurer_' + j] = {
                                                    'Insurer': arr_ins[j],
                                                    'Pending': 0,
                                                    'NotSupported': 0,
                                                    'Supported': 0
                                                };
                                            }
                                            obj_config_product[1] = ('Insurer_' + obj_config_product[1].join(',Insurer_')).split(',');
                                            obj_config_product[10] = ('Insurer_' + obj_config_product[10].join(',Insurer_')).split(',');
                                            obj_config_product[12] = ('Insurer_' + obj_config_product[12].join(',Insurer_')).split(',');
                                            let Total_Vehicle = vehicles.length;
                                            for (let k in vehicles) {
                                                let Vehicle_ID = vehicles[k]._doc['Vehicle_ID'];
                                                let Mapped_Insurer_Count = 0;
                                                for (let i in vehicles[k]._doc) {
                                                    if (i.indexOf('Insurer_') > -1 && objVehicle_Insurer_Wise_Summary.hasOwnProperty(i)) {
                                                        if (vehicles[k]._doc[i] !== null && vehicles[k]._doc[i].hasOwnProperty('Status_Id') && (vehicles[k]._doc[i]['Status_Id'] === 2 || vehicles[k]._doc[i]['Status_Id'] === 4)) {
                                                            objVehicle_Insurer_Wise_Summary[i]['Supported']++;
                                                        }
                                                        if (vehicles[k]._doc[i] !== null && vehicles[k]._doc[i].hasOwnProperty('Status_Id') && vehicles[k]._doc[i]['Status_Id'] === 3) {
                                                            objVehicle_Insurer_Wise_Summary[i]['NotSupported']++;
                                                        }
                                                    }
                                                    if (i.indexOf('Insurer_') > -1 && obj_config_product[Product_Id].indexOf(i) > -1 && vehicles[k]._doc[i] !== null && vehicles[k]._doc[i].hasOwnProperty('Status_Id') && (vehicles[k]._doc[i]['Status_Id'] === 2 || vehicles[k]._doc[i]['Status_Id'] === 4)) {
                                                        Mapped_Insurer_Count++;
                                                    }
                                                }
                                                objVehicle_Insurer_Count['Vehicle_' + Vehicle_ID] = Mapped_Insurer_Count;
                                            }
                                            for (let i in objVehicle_Insurer_Wise_Summary) {
                                                objVehicle_Insurer_Wise_Summary[i]['Pending'] = Total_Vehicle - (objVehicle_Insurer_Wise_Summary[i]['Supported'] + objVehicle_Insurer_Wise_Summary[i]['NotSupported']);
                                            }
                                            let objVehicle_Insurer_Count_Summary = {};
                                            for (let k in objVehicle_Insurer_Count) {
                                                let Insurer_Count_Key = 'Vehicle_Mapped_With_' + objVehicle_Insurer_Count[k] + '_Insurer';
                                                if (objVehicle_Insurer_Count_Summary.hasOwnProperty(Insurer_Count_Key) === false) {
                                                    objVehicle_Insurer_Count_Summary[Insurer_Count_Key] = {'Detail': Insurer_Count_Key, 'Count': 0};
                                                }
                                                objVehicle_Insurer_Count_Summary[Insurer_Count_Key]['Count']++;
                                            }
                                            ObjMasterReport['objVehicle_Insurer_Count_Summary'] = objVehicle_Insurer_Count_Summary;
                                            ObjMasterReport['objVehicle_Insurer_Wise_Summary'] = objVehicle_Insurer_Wise_Summary;
                                            if (cache_key) {
                                                fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(ObjMasterReport), function (err) {
                                                    if (err) {
                                                        return console.error(err);
                                                    }
                                                });
                                            }
                                            horizon_analysis_report_handler(ObjMasterReport, req, res);
                                        } catch (e) {
                                            res.send(e.stack);
                                        }
                                    });
                                } catch (e) {
                                    res.send(e.stack);
                                }
                            } catch (e) {
                                res.send(e.stack);
                            }
                        } else {
                            return res.json({
                                'Status': 'NoRec',
                                'condi_sl': condi_sl
                            });
                        }
                    }
                });
            });
        });
    }
    //console.log('Finish', 'motor_daily_report');
});
function horizon_analysis_report_handler(ObjMasterReport, req, res) {
    try {

        if (req.query['data'] == 'json') {
            return res.json(ObjMasterReport);
        }
        if (req.query['data'] == 'html') {
            var totalSearch = ObjMasterReport.ReportHeader.total;
            var msg = '<!DOCTYPE html><html><head><title>Proposal Report - From  ' + ObjMasterReport.ReportHeader.ud_start + ' to ' + ObjMasterReport.ReportHeader.ud_end + '</title><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">';
            msg += '<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>';
            msg += '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>';
            msg += '<meta charset="utf-8">';
            msg += '<meta name="viewport" content="width=device-width, initial-scale=1">';
            msg += '<style>*,html,body{font-family:\'Google Sans\' ,tahoma;font-size:12px;}</style>';
            msg += '</head><body>';
            msg += '<h2>HORIZON TECH ANALYSIS :: ' + ObjMasterReport.ReportHeader.type + ' :: ' + ObjMasterReport.ReportHeader.product + ' :: DATE-' + ObjMasterReport.ReportHeader.datefrom + ' to ' + ObjMasterReport.ReportHeader.dateto + '</h2>';
            msg += '<h3>DATE - From ' + ObjMasterReport.ReportHeader.datefrom + ' to ' + ObjMasterReport.ReportHeader.dateto + '<br>';
            msg += 'UserDataID - From ' + ObjMasterReport.ReportHeader.ud_start + ' to ' + ObjMasterReport.ReportHeader.ud_end + '</h3>';
            var arr_to = [];
            let ObjInsurerReport = {};
            for (let k in ObjMasterReport) {
                ObjInsurerReport[k] = [];
                for (let k1 in ObjMasterReport[k]) {
                    ObjInsurerReport[k].push(ObjMasterReport[k][k1]);
                }
                if (ObjInsurerReport[k].length > 0 && ObjInsurerReport[k][0].hasOwnProperty('Count')) {
                    ObjInsurerReport[k].sort(function (a, b) {
                        return b.Count - a.Count;
                    });
                }
            }
            ObjMasterReport = ObjInsurerReport;
            if (req.query['scope'] === 'mgm') {
                arr_to = [
                    'kevin.menezes@policyboss.com',
                    'susheeltejuja@landmarkinsurance.in',
                    'varun.kaushik@policyboss.com',
                    'savio.lobo@landmarkinsurance.in',
                    'srinivas@policyboss.com'
                ];
                if (ObjMasterReport.ReportHeader.product === 'CV') {
                    arr_to.push('susheel.menon@landmarkinsurance.in');
                    arr_to.push('mohit.chandel@landmarkinsurance.in');
                }
                if (ObjMasterReport.ReportHeader.product === 'TW') {
                    arr_to.push('vineet.aggarwal@policyboss.com');
                }
                msg += arrayobjectToHtml(ObjMasterReport.objVehicle_Insurer_Wise_Summary, 'Vehicle Mapping Insurer Wise Summary', 'Description : Insurer wise Mapping Summary');
                msg += arrayobjectToHtml(ObjMasterReport.objVehicle_Insurer_Count_Summary, 'Vehicle Mapped with Insurer Count Summary', 'Description : Insurer Count Mapping Summary');
                msg += arrayobjectToHtml(ObjMasterReport.objInsurerExecutionTime, 'WebService&nbsp;Execution&nbsp;Time', 'Description : Insurer Web service performance report');
                msg += arrayobjectToHtml(ObjMasterReport.objVehicleUnMapped, 'Vehicle&nbsp;UnMapped&nbsp;Report', 'Description : PolicyBoss Vehicle List which are pending to Map with Insurer Vehicle Master');
                msg += arrayobjectToHtml(ObjMasterReport.objVehicleNotSupported, 'Vehicle&nbsp;NotSupported&nbsp;Report', 'Description : PolicyBoss Vehicle List which are NOT supported to Map with Insurer Vehicle Master');
                msg += arrayobjectToHtml(ObjMasterReport.objVehicleUWDeclined, 'Vehicle&nbsp;UW-Declined&nbsp;Report', 'Description : PolicyBoss Vehicle List which are declined by Insurer Underwriter');
                msg += arrayobjectToHtml(ObjMasterReport.objRTOUnMapped, 'RTO&nbsp;UnMapped&nbsp;Report', 'Description : PolicyBoss RTO List which are pending to Map with Insurer RTO Master');
                msg += arrayobjectToHtml(ObjMasterReport.objRTONotSupported, 'RTO&nbsp;NotSupported&nbsp;Report', 'Description : PolicyBoss RTO List which are NOT supported to Map with Insurer RTO Master');
                msg += arrayobjectToHtml(ObjMasterReport.objRTOUWDeclined, 'RTO&nbsp;UW-Declined&nbsp;Report', 'Description : PolicyBoss RTO List which are declined by Insurer Underwriter');
                msg += arrayobjectToHtml(ObjMasterReport.objPrevInsUnMapped, 'PreviousInsurer&nbsp;UnMapped&nbsp;Report', 'Description : Previous Insurer which are not supported by Insurer');
            }
            if (req.query['scope'] === 'tech') {
                arr_to = [
                    'ashish.hatia@policyboss.com',
                    'vijay.chetgiri@policyboss.com',
                    'anuj.singh@policyboss.com'
                ];
                //search count report
                ObjMasterReport.objSearchCountSummary = {};
                for (let k in ObjMasterReport.objSearchCountReport) {
                    let sub_type = ObjMasterReport.objSearchCountReport[k]['Sub_Type'];
                    if (ObjMasterReport.objSearchCountSummary.hasOwnProperty(sub_type) === false) {
                        ObjMasterReport.objSearchCountSummary[sub_type] = [];
                    }
                    ObjMasterReport.objSearchCountSummary[sub_type].push(ObjMasterReport.objSearchCountReport[k]);
                }

                for (let sub_type in ObjMasterReport.objSearchCountSummary) {
                    ObjMasterReport.objSearchCountSummary[sub_type].sort(function (a, b) {
                        return b.Insurer_Count - a.Insurer_Count;
                    });
                    msg += arrayobjectToHtml(ObjMasterReport.objSearchCountSummary[sub_type], 'Search&nbsp;Count&nbsp;Report&nbsp;::&nbsp;' + const_policy_subtype[sub_type] + '(Total::' + totalSearch + ')', 'Report means How many Insurer Count appears how many times', ['Sub_Type', 'User_Data_Ids']);
                }

                //insurer count report
                ObjMasterReport.objInsurerCountSummary = {};
                for (let k in ObjMasterReport.objInsurerCountFull) {
                    let sub_type = ObjMasterReport.objInsurerCountFull[k]['Sub_Type'];
                    if (ObjMasterReport.objInsurerCountSummary.hasOwnProperty(sub_type) === false) {
                        ObjMasterReport.objInsurerCountSummary[sub_type] = [];
                    }
                    ObjMasterReport.objInsurerCountSummary[sub_type].push(ObjMasterReport.objInsurerCountFull[k]);
                }
                for (let sub_type in ObjMasterReport.objInsurerCountSummary) {
                    ObjMasterReport.objInsurerCountSummary[sub_type].sort(function (a, b) {
                        return (b.hasOwnProperty('Search_Count')) ? (b.Search_Count - a.Search_Count) : (b.Count - a.Count);
                    });
                    msg += arrayobjectToHtml(ObjMasterReport.objInsurerCountSummary[sub_type], 'Insurer&nbsp;Count&nbsp;Report&nbsp;::&nbsp;' + const_policy_subtype[sub_type] + '(Total::' + totalSearch + ')', 'Report means which insurer appears how many times', ['Sub_Type', 'User_Data_Id_List']);
                }


                //msg += arrayobjectToHtml(ObjMasterReport.objSearchCountReport, 'Search&nbsp;Count&nbsp;Report(Total::' + totalSearch + ')', '', ['User_Data_Ids']);
                //msg += arrayobjectToHtml(ObjMasterReport.objInsurerCountFull, 'Insurer&nbsp;Count&nbsp;Report(Total::' + totalSearch + ')', '', ['User_Data_Id_List']);
                msg += arrayobjectToHtml(ObjMasterReport.objInsurerExecutionTime, 'WebService&nbsp;Execution&nbsp;Time&nbsp;Report(Total::' + totalSearch + ')');
                ObjMasterReport.WebserviceErrorSummary = {};
                for (let k in ObjMasterReport.objDailyReport) {
                    let Method = ObjMasterReport.objDailyReport[k]['Method'];
                    if (ObjMasterReport.WebserviceErrorSummary.hasOwnProperty(Method) === false) {
                        ObjMasterReport.WebserviceErrorSummary[Method] = [];
                    }
                    ObjMasterReport.WebserviceErrorSummary[Method].push(ObjMasterReport.objDailyReport[k]);
                }
                for (let Method in ObjMasterReport.WebserviceErrorSummary) {
                    ObjMasterReport.WebserviceErrorSummary[Method].sort(function (a, b) {
                        return b.Count - a.Count;
                    });
                    msg += arrayobjectToHtml(ObjMasterReport.WebserviceErrorSummary[Method], 'Webservice Error :: ' + Method, '', ['ServiceLogIds', 'Method'], 'Error', 'LM002');
                }
                //msg += arrayobjectToHtml(ObjMasterReport.objDailyReport, 'Webservice&nbsp;Error&nbsp;Report', '', ['ServiceLogIds']);
            }

            msg += '</body></html>';
            if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                if (req.query['dbg'] == 'yes') {
                    arr_to = ['chirag.modi@policyboss.com'];
                }
                var Email = require('../models/email');
                var objModelEmail = new Email();
                var today = moment().format("D-MMM-YYYY");
                var subject = '[REPORT]HORIZON_TECH_ANALYSIS::' + ObjMasterReport.ReportHeader.product + '::' + today.toString();
                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, msg, config.environment.notification_email, '');
            }
            return res.send(msg);
        }
    } catch (e) {
        return res.send(e.stack);
    }
}
router.get('/sync_posp_master', function (req, res, next) {
    var sql = require("mssql");
    sql.close();
    // config for your database   
    var objrequestCore = req.query;
    // connect to your database
    sql.connect(config.pospsqldb, function (err) {
        if (err) {
            console.error(err);
        }
        // create Request object
        var request = new sql.Request();
        // query to the database and get the records
        var query = 'select * from Posp_Details';
        var obj_del = {};
        if (objrequestCore.hasOwnProperty("ss_id") && objrequestCore["ss_id"] - 0 > 0) {
            query = 'select * from Posp_Details where SS_ID = ' + objrequestCore["ss_id"].toString();
            obj_del = {'Ss_Id': (objrequestCore["ss_id"] - 0)};
        }
        request.query(query, function (err, recordset) {
            if (err) {
                console.error(err);
            }
            // send records as a response
            var Posp = require('../models/posp');
            Posp.remove(obj_del, function (err) {
                if (err) {
                    //console.log(err);
                } else {
                    var pospFieldSchema = {
                        "Aadhar": "Aadhar",
                        "Account_Type": "Account_Type",
                        "AgentCity": "Agent_City",
                        "Already_posp": "Already_Posp",
                        "Bank_Account_No": "Bank_Account_No",
                        "Bank_Branch": "Bank_Branch",
                        "Bank_Name": "Bank_Name",
                        "Created_On": "Created_On",
                        "DOB": "Birthdate",
                        "Document_Name": "Document_Name",
                        "Document_Type": "Document_Type",
                        "Education": "Education",
                        "Email_ID": "Email_Id",
                        "ERP_ID": "Erp_Id",
                        "Certification_Datetime": "Certification_Datetime",
                        "Experience": "Experience",
                        "Father_Name": "Father_Name",
                        "FBAID": "Fba_Id",
                        "First_Name": "First_Name",
                        "Gender": "Gender",
                        "IFSC_Code": "Ifsc_Code",
                        "Income": "Income",
                        "IsActive": "Is_Active",
                        "Last_Name": "Last_Name",
                        "Last_Status": "Last_Status",
                        "legal_case": "Legal_case",
                        "MICR_Code": "Micr_Code",
                        "Middle_Name": "Middle_Name",
                        "Mobile_No": "Mobile_No",
                        "Modified_On": "Modified_On",
                        "Name_as_in_Bank": "Name_as_in_Bank",
                        "Nominee_Aadhar": "Nominee_Aadhar",
                        "Nominee_AccountType": "Nominee_Account_Type",
                        "Nominee_BankAccountNumber": "Nominee_Bank_Account_Number",
                        "Nominee_BankBranch": "Nominee_Bank_Branch",
                        "Nominee_BankCity": "Nominee_Bank_City",
                        "Nominee_BankName": "Nominee_Bank_Name",
                        "Nominee_FirstName": "Nominee_First_Name",
                        "Nominee_Gender": "Nominee_Gender",
                        "Nominee_IFSCCode": "Nominee_Ifsc_Code",
                        "Nominee_LastName": "Nominee_Last_Name",
                        "Nominee_MICRCode": "Nominee_Micr_Code",
                        "Nominee_MiddleName": "Nominee_Middle_Name",
                        "Nominee_PAN": "Nominee_Name_as_in_Bank",
                        "Nominee_Relationship": "Nominee_Pan",
                        "NomineeName_as_in_Bank": "Nominee_Relationship",
                        "PAN_No": "Pan_No",
                        "Permanant_Add1": "Permanant_Add1",
                        "Permanant_Add2": "Permanant_Add2",
                        "Permanant_Add3": "Permanant_Add3",
                        "Permanant_City": "Permanant_City",
                        "Permanant_Landmark": "Permanant_Landmark",
                        "Permanant_Pincode": "Permanant_Pincode",
                        "Permanant_State": "Permanant_State",
                        "Posp_Category": "Posp_Category",
                        "POSP_ID": "Posp_Id",
                        "Present_Add1": "Present_Add1",
                        "Present_Add2": "Present_Add2",
                        "Present_Add3": "Present_Add3",
                        "Present_City": "Present_City",
                        "Present_Landmark": "Present_Landmark",
                        "Present_Pincode": "Present_Pincode",
                        "Present_State": "Present_State",
                        "Reporting_Agent_Name": "Reporting_Agent_Name",
                        "Reporting_Agent_UID": "Reporting_Agent_Uid",
                        "ServiceTaxNumber": "Service_Tax_Number",
                        "SM_POSP_ID": "Sm_Posp_Id",
                        "SM_POSP_Name": "Sm_Posp_Name",
                        "Sources": "Sources",
                        "SS_ID": "Ss_Id",
                        "Status_Remark": "Status_Remark",
                        "Telephone_No": "Telephone_No",
                        "Reporting_Email_ID": "Reporting_Email_ID",
                        "Reporting_Mobile_Number": "Reporting_Mobile_Number",
                        "IsFOS": "IsFOS"
                    };
                    var arrPosp = [];
                    for (var k in recordset.recordset) {
                        var objPosp = {};
                        for (var k1 in recordset.recordset[k]) {
                            var mngKey = pospFieldSchema[k1];
                            objPosp[mngKey] = recordset.recordset[k][k1];
                        }
                        objPosp['Posp_Id'] = objPosp['Posp_Id'] - 0;
                        arrPosp.push(objPosp);
                    }
                    var syncPospSummary = {
                        'Count_Push': arrPosp.length,
                        'Count_Saved': 0,
                        //'Record' : arrPosp[0],
                        'Status': ''
                    };
                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                        // Get the collection
                        var colPosps = db.collection('posps');
                        colPosps.insertMany(arrPosp, function (err, r) {
                            if (err) {
                                syncPospSummary.Status = err;
                            } else {
                                syncPospSummary.Count_Saved = r.insertedCount;
                                syncPospSummary.Status = 'SUCCESS';
                            }
                            var msg = '<!DOCTYPE html><html><head><title>Proposal Report</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            msg += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Error&nbsp;Details</span><table border="1" cellpadding="3" cellspacing="0" width="90%"  >';
                            for (var k3 in syncPospSummary) {
                                msg += '<tr><td  width="20%" style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #ffcc00">' + k3 + '</td><td  width="78%" style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + syncPospSummary[k3] + '&nbsp;</td></tr>';
                            }
                            msg += '</table></div><br><br>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            var sub = '[' + config.environment.name.toString().toUpperCase() + '-' + ((syncPospSummary.Count_Saved > 0) ? 'INFO' : 'ERR') + ']';
                            var today = moment().format("D-MMM-YYYY");
                            sub = 'POSP_SYNC_MONGO::' + today.toString();
                            if (objrequestCore.hasOwnProperty("ss_id") && objrequestCore["ss_id"] - 0 > 0) {

                            } else {
                                objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                            }
                            res.json(syncPospSummary);
                            db.close();
                        });
                    });
                }
            });
            //res.send(recordset);
        });
    });
});
router.get('/quick_report', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var ClientList = {};
        var Client = require('../models/client');
        Client.find({}, function (er, dbClients) {
            if (er) {

            } else {
                for (var k in dbClients) {
                    ClientList[dbClients[k]._doc['Client_Unique_Id']] = dbClients[k]._doc;
                }
                var objResponseJson = {
                    'Report': [],
                    'Total': {}
                };
                var obj_summary = [];
                for (var client in ClientList) {
                    obj_summary.push({'Source': ClientList[client].Client_Name, 'Search': 0, 'Payment_Link': 0, 'Proposal': 0, 'Policy': 0});
                }
                var link = 0, proposal = 0, policy = 0;
                var user = {};
                var today = moment().utcOffset("+05:30").startOf('Day');
                var tomorrow = moment(today).add(1, 'days');
                var yesterday = moment(today).add(-1, 'days');
                User_Data.find({
                    'Modified_On': {$gt: yesterday.toDate()}
                }).exec(function (err, dbUsers) {
                    if (!err) {
                        for (var k in dbUsers) {
                            user = dbUsers[k]._doc;
                            if (user.hasOwnProperty('Status_History')) {
                                link = 0;
                                proposal = 0;
                                policy = 0;
                                for (var i = 0; i < user['Status_History'].length; i++) {
                                    var status = user['Status_History'][i]['Status'];
                                    if (status === 'PROPOSAL_LINK_SENT') {
                                        link = 1;
                                    } else if (status === 'PROPOSAL_SUBMIT') {
                                        proposal = 1;
                                    } else if (status === 'TRANS_SUCCESS_WITH_POLICY' || status === 'TRANS_SUCCESS_WO_POLICY' || status === 'TRANS_PAYPASS') {
                                        policy = 1;
                                    }
                                }
                            }
                            var client_key = user['Premium_Request']['client_key'];
                            var index = obj_summary.findIndex(x => x.Source === ClientList[client_key].Client_Name);
                            obj_summary[index]['Search']++;
                            obj_summary[index]['Payment_Link'] += link;
                            obj_summary[index]['Proposal'] += proposal;
                            obj_summary[index]['Policy'] += policy;
                        }
                        var total = {'Search': 0, 'Payment_Link': 0, 'Proposal': 0, 'Policy': 0};
                        for (var obj in obj_summary) {
                            total['Search'] += obj_summary[obj]['Search'];
                            total['Payment_Link'] += obj_summary[obj]['Payment_Link'];
                            total['Proposal'] += obj_summary[obj]['Proposal'];
                            total['Policy'] += obj_summary[obj]['Policy'];
                        }
                        objResponseJson['Report'] = obj_summary;
                        objResponseJson['Total'] = total;
                        res.json(objResponseJson);
                    }
                });
            }
        });
    } catch (ex) {
        console.error('Exception', 'quick_report', ex);
    }
    //console.log('Finish', this.constructor.name, 'quick_report');
});
router.get('/detailed_report', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'detailed_report');
    try {
        var Motor = require(appRoot + '/libs/Motor');
        var objMotor = new Motor();
        objMotor.response = res;
        var objMaster = {
            'vehicles': null,
            'rtos': null,
            'clients': null,
            'insurers': null,
            'posps': null
        };
        var Rto = require('../models/rto');
        Rto.find({}, function (er, dbRtos) {
            if (er) {

            }
            if (dbRtos) {
                var objRto = {};
                for (var k1 in dbRtos) {
                    objRto['rto_' + dbRtos[k1]._doc['VehicleCity_Id']] = dbRtos[k1]._doc;
                }
                objMaster.rtos = objRto;
                objMotor.motor_report_handler(objMaster);
            }
        });
        var Vehicle = require('../models/vehicle');
        Vehicle.find({}, function (er, dbVehicles) {
            if (er) {

            }
            if (dbVehicles) {
                var objVehicle = {};
                for (var k2 in dbVehicles) {
                    objVehicle['veh_' + dbVehicles[k2]._doc['Vehicle_ID']] = dbVehicles[k2]._doc;
                }
                objMaster.vehicles = objVehicle;
                objMotor.motor_report_handler(objMaster);
            }
        });
        var Insurer = require('../models/insurer');
        Insurer.find({}, function (er, dbInsurers) {
            if (er) {

            }
            if (dbInsurers) {
                var objInsurer = {};
                for (var k3 in dbInsurers) {
                    objInsurer['ins_' + dbInsurers[k3]._doc['Insurer_ID']] = dbInsurers[k3]._doc;
                }
                objMaster.insurers = objInsurer;
                objMotor.motor_report_handler(objMaster);
            }
        });
        var Posp = require('../models/posp');
        Posp.find({}, function (er, dbPosps) {
            if (er) {

            }
            if (dbPosps) {
                var objPosp = {};
                for (var k4 in dbPosps) {
                    objPosp['posp_' + dbPosps[k4]._doc['Ss_Id']] = dbPosps[k4]._doc;
                }
                objMaster.posps = objPosp;
                objMotor.motor_report_handler(objMaster);
            }
        });
        var Client = require('../models/client');
        Client.find({}, function (er, dbClients) {
            if (er) {

            }
            if (dbClients) {
                var objClient = {};
                for (var k5 in dbClients) {
                    objClient['client_' + dbClients[k5]._doc['Secret_Key']] = dbClients[k5]._doc;
                }
                objMaster.clients = objClient;
                objMotor.motor_report_handler(objMaster);
            }
        });
    } catch (ex) {

    }
    //console.log('Finish', this.constructor.name, 'detailed_report');
});
router.all('/sync_emp_master', function (req, res, next) {
    var sql = require("mssql");
    sql.close();
    var objrequestCore = req.query;
    // config for your database   

    // connect to your database
    sql.connect(config.portalsqldb, function (err) {
        if (err) {
            console.error(err);
        }

        var query = 'select * from Employee_Master';
        var obj_del = {};
        if (objrequestCore.hasOwnProperty("ss_id") && objrequestCore["ss_id"] - 0 > 0) {
            query = 'select * from Employee_Master where Emp_Id = ' + objrequestCore["ss_id"].toString();
            obj_del = {'Emp_Id': (objrequestCore["ss_id"] - 0)};
        }
        // create Request object
        var request = new sql.Request();
        // query to the database and get the records
        request.query(query, function (err, recordset) {
            if (err) {
                console.error(err);
            }
            // send records as a response
            var Employee = require('../models/employee');
            Employee.remove(obj_del, function (err) {
                if (err) {
                    //console.log(err);
                } else {
                    var arrEmployee = [];
                    for (var k in recordset.recordset) {
                        var objEmployee = {};
                        for (var k1 in recordset.recordset[k]) {
                            objEmployee[k1] = isNaN(recordset.recordset[k][k1]) ? recordset.recordset[k][k1] : (recordset.recordset[k][k1] - 0);
                        }
                        arrEmployee.push(objEmployee);
                    }
                    var syncSummary = {
                        'Count_Push': arrEmployee.length,
                        'Count_Saved': 0,
                        //'Record' : arrPosp[0],
                        'Status': ''
                    };
                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                        // Get the collection
                        var colPosps = db.collection('employees');
                        colPosps.insertMany(arrEmployee, function (err, r) {
                            if (err) {
                                syncSummary.Status = err;
                            } else {
                                syncSummary.Count_Saved = r.insertedCount;
                                syncSummary.Status = 'SUCCESS';
                            }
                            var msg = '<!DOCTYPE html><html><head><title>Proposal Report</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            msg += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Error&nbsp;Details</span><table border="1" cellpadding="3" cellspacing="0" width="90%"  >';
                            for (var k3 in syncSummary) {
                                msg += '<tr><td  width="20%" style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #ffcc00">' + k3 + '</td><td  width="78%" style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + syncSummary[k3] + '&nbsp;</td></tr>';
                            }
                            msg += '</table></div><br><br>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            var sub = '[' + config.environment.name.toString().toUpperCase() + '-' + ((syncSummary.Count_Saved > 0) ? 'INFO' : 'ERR') + ']';
                            var today = moment().format("D-MMM-YYYY");
                            sub += 'EMP_SYNC_MONGO::' + today.toString();
                            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                            res.json(syncSummary);
                            db.close();
                        });
                    });
                }
            });
            //res.send(recordset);
        });
    });
});
router.all('/sync_sub_posp', function (req, res, next) {
    var sql = require("mssql");
    sql.close();
    var objrequestCore = req.query;
    // config for your database   

    // connect to your database
    sql.connect(config.pospsqldb, function (err) {
        if (err) {
            console.error(err);
        }
        var query = 'select * from Sub_Posp_Details';
        var obj_del = {};
        if (objrequestCore.hasOwnProperty("ss_id") && objrequestCore["ss_id"] - 0 > 0) {
            query = 'select * from Employee_Master where Emp_Id = ' + objrequestCore["ss_id"].toString();
            obj_del = {'Emp_Id': (objrequestCore["ss_id"] - 0)};
        }
        // create Request object
        var request = new sql.Request();
        // query to the database and get the records
        request.query(query, function (err, recordset) {
            if (err) {
                console.error(err);
            }
            // send records as a response
            var Sub_Fba = require('../models/sub_fba');
            Sub_Fba.remove(obj_del, function (err) {
                if (err) {
                    //console.log(err);
                } else {
                    var arrSub_Fba = [];
                    for (var k in recordset.recordset) {
                        var objSub_Fba = {};
                        for (var k1 in recordset.recordset[k]) {
                            objSub_Fba[k1] = isNaN(recordset.recordset[k][k1]) ? recordset.recordset[k][k1] : (recordset.recordset[k][k1] - 0);
                        }
                        arrSub_Fba.push(objSub_Fba);
                    }
                    var syncSummary = {
                        'Count_Push': arrSub_Fba.length,
                        'Count_Saved': 0,
                        //'Record' : arrPosp[0],
                        'Status': ''
                    };
                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                        // Get the collection
                        var colSub_Fbas = db.collection('sub_fbas');
                        colSub_Fbas.insertMany(arrSub_Fba, function (err, r) {
                            if (err) {
                                syncSummary.Status = err;
                            } else {
                                syncSummary.Count_Saved = r.insertedCount;
                                syncSummary.Status = 'SUCCESS';
                            }
                            var msg = '<!DOCTYPE html><html><head><title>Sub Fba Sync Report</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            msg += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Error&nbsp;Details</span><table border="1" cellpadding="3" cellspacing="0" width="90%"  >';
                            for (var k3 in syncSummary) {
                                msg += '<tr><td  width="20%" style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #ffcc00">' + k3 + '</td><td  width="78%" style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + syncSummary[k3] + '&nbsp;</td></tr>';
                            }
                            msg += '</table></div><br><br>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            var sub = '[' + config.environment.name.toString().toUpperCase() + '-' + ((syncSummary.Count_Saved > 0) ? 'INFO' : 'ERR') + ']';
                            var today = moment().format("D-MMM-YYYY");
                            sub += 'SUB_FBA_SYNC_MONGO::' + today.toString();
                            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                            res.json(syncSummary);
                            db.close();
                        });
                    });
                }
            });
            //res.send(recordset);
        });
    });
});
router.get('/dashboard', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        //console.log('report_type', report_type);
        var obj_dashboard_summary = {
            'All': {
                'Summary': {}
            },
            'Car': {
                'Summary': {}
            },
            'TW': {
                'Summary': {}
            }
        };
        var arr_report_key = ["client", "agent", "executive", "agent_city", "product", "vehicle_make", "cc_slab", "fuel", "rto_state", "existing_insurer", "vehicle_age_slab_month", "vehicle_age_year", "claim", "ncb", "ins_type"];
        var arr_client = {
            "PolicyBoss": 0,
            "Finmart": 0
                    //"ASR": 0,
                    //"PB_Emp_App": 0,
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        var tomorrow = moment(today).add(1, 'days');
        var yesterday = moment(today).add(-1, 'days');
        var week = moment(today).add(-7, 'days');
        var month = moment(today).add(-30, 'days');
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS', ];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'PROPOSAL_SAVE_AGENT'];
        var arr_link = ['PROPOSAL_LINK_SENT'];
        var arr_proposal = ['PROPOSAL_SUBMIT'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        var arr_status = ['Total', 'Search', 'Link', 'Proposal', 'Sale', 'Paypass', 'Fail', 'Premium', 'Idv', 'Comm_Premium'];
        for (var k in arr_status) {
            obj_dashboard_summary['All']['Summary'][arr_status[k]] = {
                'total': 0,
                "PolicyBoss": 0,
                "PBSaleSupport": 0,
                "Finmart": 0
            };
            obj_dashboard_summary['Car']['Summary'][arr_status[k]] = {
                'total': 0,
                "PolicyBoss": 0,
                "PBSaleSupport": 0,
                "Finmart": 0
            };
            obj_dashboard_summary['TW']['Summary'][arr_status[k]] = {
                'total': 0,
                "PolicyBoss": 0,
                "PBSaleSupport": 0,
                "Finmart": 0
            };
        }
        ;
        User_Data.find({
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        }).select(['Product_Id', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    var user = dbUsers[k]._doc;
                    if (user['Product_Id'] != 1 && user['Product_Id'] != 10) {
                        continue;
                    }
                    var product = (user['Product_Id'] == 1) ? 'Car' : 'TW';
                    var Report_Summary = null;
                    if (user.hasOwnProperty('Report_Summary') && user['Report_Summary']) {
                        Report_Summary = user['Report_Summary'];
                        var client_key_val = Report_Summary['client'];
                    }
                    if (user['Premium_Request'].hasOwnProperty('client_name')) {
                        var client_key_val = user['Premium_Request']['client_name'];
                    }

                    if (client_key_val == 'PolicyBoss' && user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                        client_key_val = 'PBSaleSupport';
                    }

                    obj_dashboard_summary['All'].Summary.Total.total++;
                    obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                    Last_Status = 'Search';
                    if (arr_search.indexOf(user['Last_Status']) > -1) {
                        Last_Status = 'Search';
                    }

                    if (arr_link.indexOf(user['Last_Status']) > -1) {
                        Last_Status = 'Link';
                        obj_dashboard_summary['All'].Summary['Search'].total++;
                        obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Search'].total++;
                        obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                    }
                    if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                        Last_Status = 'Proposal';
                        obj_dashboard_summary['All'].Summary['Search'].total++;
                        obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Search'].total++;
                        obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                            obj_dashboard_summary['All'].Summary['Link'].total++;
                            obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                            obj_dashboard_summary[product].Summary['Link'].total++;
                            obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                        }

                    }
                    if (arr_sale.indexOf(user['Last_Status']) > -1) {
                        Last_Status = 'Sale';
                        obj_dashboard_summary['All'].Summary['Search'].total++;
                        obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Search'].total++;
                        obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                            obj_dashboard_summary['All'].Summary['Link'].total++;
                            obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                            obj_dashboard_summary[product].Summary['Link'].total++;
                            obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                        }

                        obj_dashboard_summary['All'].Summary['Proposal'].total++;
                        obj_dashboard_summary['All'].Summary['Proposal'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Proposal'].total++;
                        obj_dashboard_summary[product].Summary['Proposal'][client_key_val]++;
                        var transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                        transaction_amount = Math.round(transaction_amount);
                        if (transaction_amount > 0) {
                            obj_dashboard_summary['All'].Summary['Premium'].total += transaction_amount;
                            obj_dashboard_summary['All'].Summary['Premium'][client_key_val] += transaction_amount;
                            obj_dashboard_summary[product].Summary['Premium'].total += transaction_amount;
                            obj_dashboard_summary[product].Summary['Premium'][client_key_val] += transaction_amount;
                        }

                        var idv = (user['Erp_Qt_Request_Core']['___vehicle_expected_idv___'] - 0);
                        if (idv > 0) {
                            obj_dashboard_summary['All'].Summary['Idv'].total += idv;
                            obj_dashboard_summary['All'].Summary['Idv'][client_key_val] += idv;
                            obj_dashboard_summary[product].Summary['Idv'].total += idv;
                            obj_dashboard_summary[product].Summary['Idv'][client_key_val] += idv;
                        }

                        var od = (user['Erp_Qt_Request_Core']['___premium_breakup_od_final_premium___'] - 0);
                        if (idv > 0) {
                            obj_dashboard_summary['All'].Summary['Comm_Premium'].total += od;
                            obj_dashboard_summary['All'].Summary['Comm_Premium'][client_key_val] += od;
                            obj_dashboard_summary[product].Summary['Comm_Premium'].total += od;
                            obj_dashboard_summary[product].Summary['Comm_Premium'][client_key_val] += od;
                        }

                    }
                    if (arr_fail.indexOf(user['Last_Status']) > -1) {
                        Last_Status = 'Fail';
                        obj_dashboard_summary['All'].Summary['Search'].total++;
                        obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Search'].total++;
                        obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                            obj_dashboard_summary['All'].Summary['Link'].total++;
                            obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                            obj_dashboard_summary[product].Summary['Link'].total++;
                            obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                        }

                        obj_dashboard_summary['All'].Summary['Proposal'].total++;
                        obj_dashboard_summary['All'].Summary['Proposal'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Proposal'].total++;
                        obj_dashboard_summary[product].Summary['Proposal'][client_key_val]++;
                    }
                    if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                        Last_Status = 'Paypass';
                        obj_dashboard_summary['All'].Summary['Search'].total++;
                        obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Search'].total++;
                        obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                            obj_dashboard_summary['All'].Summary['Link'].total++;
                            obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                            obj_dashboard_summary[product].Summary['Link'].total++;
                            obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                        }

                        obj_dashboard_summary['All'].Summary['Proposal'].total++;
                        obj_dashboard_summary['All'].Summary['Proposal'][client_key_val]++;
                        obj_dashboard_summary[product].Summary['Proposal'].total++;
                        obj_dashboard_summary[product].Summary['Proposal'][client_key_val]++;
                    }

                    obj_dashboard_summary['All'].Summary[Last_Status].total++;
                    obj_dashboard_summary['All'].Summary[Last_Status][client_key_val]++;
                    obj_dashboard_summary[product].Summary[Last_Status].total++;
                    obj_dashboard_summary[product].Summary[Last_Status][client_key_val]++;
                    if (req.hasOwnProperty('type') && req['type'] == 'full' || true) {
                        console.error('Err', req['type']);
                        for (var k1 in Report_Summary) {
                            if (arr_report_key.indexOf(k1) > -1) {
                                if (Report_Summary['ins_type'] == 'new' && ["vehicle_age_slab_month", "vehicle_age_year", 'claim', 'existing_insurer', 'ncb'].indexOf(k1) > -1) {
                                    continue;
                                }
                                if (Report_Summary['claim'] == 'yes' && ['ncb'].indexOf(k1) > -1) {
                                    continue;
                                }
                                var val = (Report_Summary[k1] == "" || Report_Summary[k1] == "0 0") ? 'NA' : Report_Summary[k1];
                                if (val != 'NA') {
                                    if (obj_dashboard_summary[product].hasOwnProperty(k1) === false) {
                                        obj_dashboard_summary[product][k1] = {};
                                    }

                                    if (obj_dashboard_summary[product][k1].hasOwnProperty(val) === false) {
                                        obj_dashboard_summary[product][k1][val] = {
                                            'title': val,
                                            'total': 0,
                                            "PolicyBoss": 0,
                                            "Finmart": 0,
                                            "PBSaleSupport": 0,
                                            "PolicyBoss_Sale": 0,
                                            "Finmart_Sale": 0,
                                            "PBSaleSupport_Sale": 0
                                        };
                                    }
                                    obj_dashboard_summary[product][k1][val]['total']++;
                                    obj_dashboard_summary[product][k1][val][client_key_val]++;
                                    if (Last_Status == 'Sale') {
                                        obj_dashboard_summary[product][k1][val][client_key_val + '_Sale']++;
                                    }
                                }
                            }
                        }
                    }
                }
                if (req.hasOwnProperty('debug')) {
                    res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                } else {
                    res.json(obj_dashboard_summary);
                }
            }
        });
    } catch (Ex) {
        console.error('Exception', 'dashboard', Ex);
    }
});
router.get('/historic_2018_2019', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_str = moment(today).format("YYYY-MM-D");
        var cache_key = 'historic_2018_2019_On_' + today_str;
        if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
            var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
            var obj_cache_content = JSON.parse(cache_content);
            obj_cache_content['Stats'] = cache_content_stat;
            res.json(obj_cache_content);
        } else {
            var obj_monthly = {
                'TOTAL-2018_2019': '',
                'MARCH-2019': 'live_realtime_2019-03-01_2019-03-31.log',
                'FEBRUARY-2019': 'live_realtime_2019-02-01_2019-02-28.log',
                'JANUARY-2019': 'live_realtime_2019-01-01_2019-01-31.log',
                'DECEMBER-2018': 'live_realtime_2018-12-01_2018-12-31.log',
                'NOVEMBER-2018': 'live_realtime_2018-11-01_2018-11-30.log',
                'OCTOBER-2018': 'live_realtime_2018-10-01_2018-10-31.log',
                'SEPTEMBER-2018': 'live_realtime_2018-09-01_2018-09-30.log',
                'AUGUST-2018': 'live_realtime_2018-08-01_2018-08-31.log',
                'JULY-2018': 'live_realtime_2018-07-01_2018-07-31.log',
                'JUNE-2018': 'live_realtime_2018-06-01_2018-06-30.log',
                'MAY-2018': 'live_realtime_2018-05-01_2018-05-31.log',
                'APRIL-2018': 'live_realtime_2018-04-01_2018-04-30.log'
            };
            var obj_summary = {};
            var arr_product = ['All', 'Car', 'TW', 'Health', 'Term'];
            var arr_channel = ['ALL', 'PB-DIRECT', 'DC-CHANNEL', 'SM-CHANNEL', 'OTHERS'];
            var arr_funnel = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium', 'Comm_Premium', 'Conversion', 'Agent_Search', 'Agent_Sale'];
            var objSummaryGroupChannel = {
                'PB-DIRECT': ['PB-Direct', 'BOT', 'PB-SS', 'PB-CAMP'],
                'DC-CHANNEL': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA'],
                'SM-CHANNEL': ['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'],
                'OTHERS': ['FINPEACE', 'RBS']
            };
            for (var k in obj_monthly) {
                obj_summary[k] = {};
                for (var k1 in arr_channel) {
                    obj_summary[k][arr_channel[k1]] = {};
                    for (var k2 in arr_product) {
                        obj_summary[k][arr_channel[k1]][arr_product[k2]] = {};
                        for (var k3 in arr_funnel) {
                            obj_summary[k][arr_channel[k1]][arr_product[k2]][arr_funnel[k3]] = 0;
                        }
                    }
                }
            }
            console.error('Log', 'historic_2018_2019', obj_summary);
            for (var k in obj_monthly) {
                if (obj_monthly[k] == '') {
                    continue;
                }
                var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + obj_monthly[k]).toString();
                var obj_content = JSON.parse(cache_content);
                for (var k4 in arr_product) {
                    for (var k1 in arr_funnel) {
                        if (['Agent_Search', 'Agent_Sale'].indexOf(arr_funnel[k1]) > -1) {
                            var k_agent = arr_funnel[k1].split('_')[1];
                            if (obj_content[arr_product[k4]]['Agent'].hasOwnProperty(k_agent)) {
                                obj_summary[k]['ALL'][arr_product[k4]][arr_funnel[k1]] = obj_content[arr_product[k4]]['Agent'][k_agent]['total'];
                                for (var k2 in obj_content[arr_product[k4]]['Agent'][k_agent]) {
                                    var channel = '';
                                    for (var k3 in objSummaryGroupChannel) {
                                        if (objSummaryGroupChannel[k3].indexOf(k2) > -1) {
                                            channel = k3;
                                            break;
                                        }
                                    }
                                    console.error('Log', 'historic_2018_2019', k, k2, channel, arr_funnel[k1], obj_content[arr_product[k4]]['Agent'][k_agent][k2])
                                    if (channel) {
                                        obj_summary[k][channel][arr_product[k4]][arr_funnel[k1]] += obj_content[arr_product[k4]]['Agent'][k_agent][k2];
                                    }
                                }
                            }
                        } else {
                            if (obj_content[arr_product[k4]]['Summary'].hasOwnProperty(arr_funnel[k1])) {
                                obj_summary[k]['ALL'][arr_product[k4]][arr_funnel[k1]] = obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]]['total'];
                                for (var k2 in obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]]) {
                                    var channel = '';
                                    for (var k3 in objSummaryGroupChannel) {
                                        if (objSummaryGroupChannel[k3].indexOf(k2) > -1) {
                                            channel = k3;
                                            break;
                                        }
                                    }
                                    console.error('Log', 'historic_2018_2019', k, k2, channel, arr_funnel[k1], obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]][k2])
                                    if (channel) {
                                        obj_summary[k][channel][arr_product[k4]][arr_funnel[k1]] += obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]][k2];
                                    }
                                }
                            }
                        }

                    }
                }
            }
            for (var k in obj_summary) {
                for (var k1 in obj_summary[k]) {
                    for (var k2 in obj_summary[k][k1]) {
                        obj_summary[k][k1][k2]['Conversion'] = (obj_summary[k][k1][k2]['Sale'] / obj_summary[k][k1][k2]['Unique_Search']) * 100;
                        obj_summary[k][k1][k2]['Conversion'] = Math.round(obj_summary[k][k1][k2]['Conversion'] * 100) / 100;
                        for (var k3 in obj_summary[k][k1][k2]) {
                            obj_summary['TOTAL-2018_2019'][k1][k2][k3] += obj_summary[k][k1][k2][k3];
                        }
                        obj_summary['TOTAL-2018_2019'][k1][k2]['Conversion'] = (obj_summary['TOTAL-2018_2019'][k1][k2]['Sale'] / obj_summary['TOTAL-2018_2019'][k1][k2]['Unique_Search']) * 100;
                        obj_summary['TOTAL-2018_2019'][k1][k2]['Conversion'] = Math.round(obj_summary['TOTAL-2018_2019'][k1][k2]['Conversion'] * 100) / 100;
                    }
                }
            }
            if (cache_key) {
                fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_summary), function (err) {
                    if (err) {
                        return console.error(err);
                    }
                });
            }
            res.json(obj_summary);
        }
    } catch (e) {
        console.error('Exception', 'historic_2018_2019', e);
        res.json(e);
    }
});
router.get('/historic_2019_2020', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_str = moment(today).format("YYYY-MM-D");
        var cache_key = 'historic_2019_2020_On_' + today_str;
        if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
            var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
            var obj_cache_content = JSON.parse(cache_content);
            obj_cache_content['Stats'] = cache_content_stat;
            res.json(obj_cache_content);
        } else {
            var obj_monthly = {
                'TOTAL-2019_2020': '',
                /*'MARCH-2020': 'live_realtime_2020-03-01_2020-03-31.log',
                 'FEBRUARY-2020': 'live_realtime_2020-02-01_2020-02-28.log',
                 'JANUARY-2020': 'live_realtime_2020-01-01_2020-01-31.log',
                 'DECEMBER-2019': 'live_realtime_2019-12-01_2019-12-31.log',
                 'NOVEMBER-2019': 'live_realtime_2019-11-01_2019-11-30.log',
                 'OCTOBER-2019': 'live_realtime_2019-10-01_2019-10-31.log',*/
                'SEPTEMBER-2019': 'live_realtime_2019-09-01_2019-09-30.log',
                'AUGUST-2019': 'live_realtime_2019-08-01_2019-08-31.log',
                'JULY-2019': 'live_realtime_2019-07-01_2019-07-31.log',
                'JUNE-2019': 'live_realtime_2019-06-01_2019-06-30.log',
                'MAY-2019': 'live_realtime_2019-05-01_2019-05-31.log',
                'APRIL-2019': 'live_realtime_2019-04-01_2019-04-30.log'
            };
            var obj_summary = {};
            var arr_product = ['All', 'Car', 'TW', 'Health', 'Term'];
            var arr_channel = ['ALL', 'PB-DIRECT', 'DC-CHANNEL', 'SM-CHANNEL', 'OTHERS'];
            var arr_funnel = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium', 'Comm_Premium', 'Conversion', 'Agent_Search', 'Agent_Sale'];
            var objSummaryGroupChannel = {
                'PB-DIRECT': ['PB-Direct', 'BOT', 'PB-SS', 'PB-CAMP'],
                'DC-CHANNEL': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA'],
                'SM-CHANNEL': ['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'],
                'GS-CHANNEL': ['GS-POSP', 'GS-FOS'],
                'EM-CHANNEL': ['EM-POSP', 'EM-FOS'],
                'OTHERS': ['FINPEACE', 'RBS']
            };
            for (var k in obj_monthly) {
                obj_summary[k] = {};
                for (var k1 in arr_channel) {
                    obj_summary[k][arr_channel[k1]] = {};
                    for (var k2 in arr_product) {
                        obj_summary[k][arr_channel[k1]][arr_product[k2]] = {};
                        for (var k3 in arr_funnel) {
                            obj_summary[k][arr_channel[k1]][arr_product[k2]][arr_funnel[k3]] = 0;
                        }
                    }
                }
            }
            console.error('Log', 'historic_2019_2020', obj_summary);
            for (var k in obj_monthly) {
                if (obj_monthly[k] == '') {
                    continue;
                }
                if (fs.existsSync(appRoot + "/tmp/cachereport/" + obj_monthly[k]) === false) {
                    continue;
                }
                var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + obj_monthly[k]).toString();
                var obj_content = JSON.parse(cache_content);
                for (var k4 in arr_product) {
                    for (var k1 in arr_funnel) {
                        if (['Agent_Search', 'Agent_Sale'].indexOf(arr_funnel[k1]) > -1) {
                            var k_agent = arr_funnel[k1].split('_')[1];
                            if (obj_content[arr_product[k4]]['Agent'].hasOwnProperty(k_agent)) {
                                obj_summary[k]['ALL'][arr_product[k4]][arr_funnel[k1]] = obj_content[arr_product[k4]]['Agent'][k_agent]['total'];
                                for (var k2 in obj_content[arr_product[k4]]['Agent'][k_agent]) {
                                    try {
                                        var channel = '';
                                        for (var k3 in objSummaryGroupChannel) {
                                            if (objSummaryGroupChannel[k3].indexOf(k2) > -1) {
                                                channel = k3;
                                                break;
                                            }
                                        }
                                        console.error('Log', 'historic_2019_2020_1', k, k2, channel, arr_funnel[k1], obj_content[arr_product[k4]]['Agent'][k_agent][k2])
                                        if (channel) {
                                            obj_summary[k][channel][arr_product[k4]][arr_funnel[k1]] += obj_content[arr_product[k4]]['Agent'][k_agent][k2];
                                        }
                                    } catch (e1) {
                                        console.error('Exception', 'historic_2019_2020_1', e1);
                                    }
                                }
                            }
                        } else {
                            if (obj_content[arr_product[k4]]['Summary'].hasOwnProperty(arr_funnel[k1])) {
                                obj_summary[k]['ALL'][arr_product[k4]][arr_funnel[k1]] = obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]]['total'];
                                for (var k2 in obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]]) {
                                    try {
                                        var channel = '';
                                        for (var k3 in objSummaryGroupChannel) {
                                            if (objSummaryGroupChannel[k3].indexOf(k2) > -1) {
                                                channel = k3;
                                                break;
                                            }
                                        }
                                        console.error('Log', 'historic_2019_2020_2', k, k2, channel, arr_funnel[k1], obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]][k2])
                                        if (channel) {
                                            obj_summary[k][channel][arr_product[k4]][arr_funnel[k1]] += obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]][k2];
                                        }
                                    } catch (e2) {
                                        console.error('Exception', 'historic_2019_2020_2', e2);
                                    }
                                }
                            }
                        }

                    }
                }
            }
            for (var k in obj_summary) {
                for (var k1 in obj_summary[k]) {
                    for (var k2 in obj_summary[k][k1]) {
                        obj_summary[k][k1][k2]['Conversion'] = (obj_summary[k][k1][k2]['Sale'] / obj_summary[k][k1][k2]['Unique_Search']) * 100;
                        obj_summary[k][k1][k2]['Conversion'] = Math.round(obj_summary[k][k1][k2]['Conversion'] * 100) / 100;
                        for (var k3 in obj_summary[k][k1][k2]) {
                            obj_summary['TOTAL-2019_2020'][k1][k2][k3] += obj_summary[k][k1][k2][k3];
                        }
                        obj_summary['TOTAL-2019_2020'][k1][k2]['Conversion'] = (obj_summary['TOTAL-2019_2020'][k1][k2]['Sale'] / obj_summary['TOTAL-2019_2020'][k1][k2]['Unique_Search']) * 100;
                        obj_summary['TOTAL-2019_2020'][k1][k2]['Conversion'] = Math.round(obj_summary['TOTAL-2019_2020'][k1][k2]['Conversion'] * 100) / 100;
                    }
                }
            }
            if (cache_key) {
                fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_summary), function (err) {
                    if (err) {
                        return console.error(err);
                    }
                });
            }
            res.json(obj_summary);
        }
    } catch (e) {
        console.error('Exception', 'historic_2019_2020', e);
        res.json(e);
    }
});
router.get('/monthly_summary', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_str = moment(today).format("YYYY-MM-D");
        var cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'] + '.log';
        if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
            var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
            var obj_cache_content = JSON.parse(cache_content);
            obj_cache_content['Stats'] = cache_content_stat;
            res.json(obj_cache_content);
        } else {
            var obj_summary = {};
            var arr_product = ['All', 'Car', 'TW', 'Health', 'Term'];
            var arr_channel = ['ALL', 'PB-DIRECT', 'DC-CHANNEL', 'SM-CHANNEL', 'OTHERS'];
            var arr_funnel = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium', 'Comm_Premium', 'Conversion', 'Agent_Search', 'Agent_Sale'];
            var objSummaryGroupChannel = {
                'PB-DIRECT': ['PB-Direct', 'BOT', 'PB-SS', 'PB-CAMP'],
                'DC-CHANNEL': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'DC-FOS'],
                'SM-CHANNEL': ['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'],
                'GS-CHANNEL': ['GS-POSP', 'GS-FOS'],
                'EM-CHANNEL': ['EM-POSP', 'EM-NON-POSP', 'EM-FBA', 'EM-FOS'],
                'OTHERS': ['FINPEACE', 'RBS']
            };
            var arr_already_closed = ['ALREADY_CLOSED'];
            var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
            var arr_sale_manual = ['TRANS_SUCCESS_MANUAL'];
            var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
            var arr_paypass_manual = ['TRANS_PAYPASS_MANUAL'];
            var arr_fail = ['TRANS_FAIL'];
            var arr_search = ['SEARCH', 'ADDON_APPLY', 'ADDON_QUOTE_APPLY', 'PROPOSAL_SAVE_AGENT', 'BUY_NOW_AGENT', 'INSPECTION_REJECTED'];
            var arr_link = ['PROPOSAL_LINK_SENT', 'PROPOSAL_EXCEPTION', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
            var arr_proposal = ['PROPOSAL_SUBMIT', 'INSPECTION_SCHEDULED', 'INSPECTION_APPROVED'];
            var arrFrom = req.query['datefrom'].split('-');
            var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
            var arrTo = req.query['dateto'].split('-');
            var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
            dateTo.setDate(dateTo.getDate() + 1);
            let StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
            let EndDate = moment(req.query['dateto']).utcOffset("+05:30").startOf('Day');
            let days_to_report = EndDate.diff(StartDate, 'days');
            var cond_ud = {
                "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
            };
            var obj_monthly = {};
            obj_monthly[req.query['month_key']] = cache_key;
            for (let k in obj_monthly) {
                obj_summary[k] = {};
                for (let k1 in arr_channel) {
                    obj_summary[k][arr_channel[k1]] = {};
                    for (let k2 in arr_product) {
                        obj_summary[k][arr_channel[k1]][arr_product[k2]] = {};
                        for (let k3 in arr_funnel) {
                            obj_summary[k][arr_channel[k1]][arr_product[k2]][arr_funnel[k3]] = 0;
                        }
                    }
                }
            }
            console.error('Log', 'historic_2019_2020', obj_summary);
            for (var k in obj_monthly) {
                var cache_content = fs.readFileSync(appRoot + "/tmp/historic/" + obj_monthly[k]).toString();
                var obj_content = JSON.parse(cache_content);
                for (var k4 in arr_product) {
                    for (var k1 in arr_funnel) {
                        if (['Agent_Search', 'Agent_Sale'].indexOf(arr_funnel[k1]) > -1) {
                            var k_agent = arr_funnel[k1].split('_')[1];
                            if (obj_content[arr_product[k4]]['Agent'].hasOwnProperty(k_agent)) {
                                obj_summary[k]['ALL'][arr_product[k4]][arr_funnel[k1]] = obj_content[arr_product[k4]]['Agent'][k_agent]['total'];
                                for (var k2 in obj_content[arr_product[k4]]['Agent'][k_agent]) {
                                    try {
                                        var channel = '';
                                        for (var k3 in objSummaryGroupChannel) {
                                            if (objSummaryGroupChannel[k3].indexOf(k2) > -1) {
                                                channel = k3;
                                                break;
                                            }
                                        }
                                        console.error('Log', 'historic_2019_2020_1', k, k2, channel, arr_funnel[k1], obj_content[arr_product[k4]]['Agent'][k_agent][k2])
                                        if (channel) {
                                            obj_summary[k][channel][arr_product[k4]][arr_funnel[k1]] += obj_content[arr_product[k4]]['Agent'][k_agent][k2];
                                        }
                                    } catch (e1) {
                                        console.error('Exception', 'historic_2019_2020_1', e1);
                                    }
                                }
                            }
                        } else {
                            if (obj_content[arr_product[k4]]['Summary'].hasOwnProperty(arr_funnel[k1])) {
                                obj_summary[k]['ALL'][arr_product[k4]][arr_funnel[k1]] = obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]]['total'];
                                for (var k2 in obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]]) {
                                    try {
                                        var channel = '';
                                        for (var k3 in objSummaryGroupChannel) {
                                            if (objSummaryGroupChannel[k3].indexOf(k2) > -1) {
                                                channel = k3;
                                                break;
                                            }
                                        }
                                        console.error('Log', 'historic_2019_2020_2', k, k2, channel, arr_funnel[k1], obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]][k2])
                                        if (channel) {
                                            obj_summary[k][channel][arr_product[k4]][arr_funnel[k1]] += obj_content[arr_product[k4]]['Summary'][arr_funnel[k1]][k2];
                                        }
                                    } catch (e2) {
                                        console.error('Exception', 'historic_2019_2020_2', e2);
                                    }
                                }
                            }
                        }

                    }
                }
            }
            for (var k in obj_summary) {
                for (var k1 in obj_summary[k]) {
                    for (var k2 in obj_summary[k][k1]) {
                        obj_summary[k][k1][k2]['Conversion'] = (obj_summary[k][k1][k2]['Sale'] / obj_summary[k][k1][k2]['Unique_Search']) * 100;
                        obj_summary[k][k1][k2]['Conversion'] = Math.round(obj_summary[k][k1][k2]['Conversion'] * 100) / 100;
                        for (var k3 in obj_summary[k][k1][k2]) {
                            obj_summary['TOTAL-2019_2020'][k1][k2][k3] += obj_summary[k][k1][k2][k3];
                        }
                        obj_summary['TOTAL-2019_2020'][k1][k2]['Conversion'] = (obj_summary['TOTAL-2019_2020'][k1][k2]['Sale'] / obj_summary['TOTAL-2019_2020'][k1][k2]['Unique_Search']) * 100;
                        obj_summary['TOTAL-2019_2020'][k1][k2]['Conversion'] = Math.round(obj_summary['TOTAL-2019_2020'][k1][k2]['Conversion'] * 100) / 100;
                    }
                }
            }
            if (cache_key) {
                fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_summary), function (err) {
                    if (err) {
                        return console.error(err);
                    }
                });
            }
            res.json(obj_summary);
        }
    } catch (e) {
        console.error('Exception', 'historic_2019_2020', e);
        res.json(e);
    }
});
router.get('/daily_1', LoadSession, function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        //console.log('report_type', report_type);
        var obj_dashboard_summary = {
            'Agents': {},
            'RMs': {},
            'All': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Car': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'CV': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'TW': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Health': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Travel': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Term': {
                'Summary': {},
                'SummaryGroup': {},
                'SummaryGroupChannel': {},
                'Agent': {},
                'Agent_List': {}
            }
        };
        var arr_report_key = ["client", "agent", "executive", "agent_city", "product", "vehicle_make", "cc_slab", "fuel", "rto_state", "existing_insurer", "vehicle_age_slab_month", "vehicle_age_year", "claim", "ncb", "ins_type"];
        var arr_client = {
            "PolicyBoss": 0,
            "Finmart": 0
                    //"ASR": 0,
                    //"PB_Emp_App": 0,
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_real = moment().utcOffset("+05:30");
        var tomorrow = moment(today).add(1, 'days');
        var yesterday = moment(today).add(-1, 'days');
        var last3days = moment(today).add(-3, 'days');
        var week = moment(today).add(-7, 'days');
        var month = moment(today).add(-30, 'days');
        var arr_already_closed = ['ALREADY_CLOSED'];
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_sale_manual = ['TRANS_SUCCESS_MANUAL'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_paypass_manual = ['TRANS_PAYPASS_MANUAL'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'ADDON_QUOTE_APPLY', 'PROPOSAL_SAVE_AGENT', 'BUY_NOW_AGENT', 'INSPECTION_REJECTED'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'PROPOSAL_EXCEPTION', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'INSPECTION_SCHEDULED', 'INSPECTION_APPROVED'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        let StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
        let EndDate = moment(req.query['dateto']).utcOffset("+05:30").startOf('Day');
        let days_to_report = EndDate.diff(StartDate, 'days');
        var objSummaryGroup = {
            'PB-DIRECT': ['PB-Direct', 'BOT', 'PB-SS', 'PB-CAMP'],
            'FM-POS': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'FINPEACE', 'RBS']
        };
        var cache_key = '';
        cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'];
        var today_str = moment(today).format("YYYY-MM-D");
        var today_min = moment(today_real).format("mm") - 0;
        var today_hr = moment(today_real).format("HH") - 0;
        var cache_itr = Math.floor(today_min / 30) + 1;
        var cache_key_sub = '_' + today_hr + '_' + cache_itr;
        var is_realtime = false;
        if (isCurrentFutureDate(req.query['dateto'])) {
            is_realtime = true;
            if (req.query['dateto'] === req.query['datefrom']) {
                is_realtime = false;
                cache_key += cache_key_sub;
                cache_key += '_on_' + today_str;
            } else {
                is_realtime = false;
                cache_key += '_on_' + today_str;
            }
        } else {
            //if (last3days <= dateFrom && last3days <= dateTo) {
            //  is_realtime = true;
            //}
        }
        var cond_ud = {
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        };
        if (req.query.hasOwnProperty('insurer_id') && req.query['insurer_id'] !== '') {
            cache_key += '_insurer_id_' + req.query['insurer_id'];
            cond_ud['Insurer_Id'] = req.query['insurer_id'] - 0;
        }
        if (req.query.hasOwnProperty('list_ss_id') && req.query['list_ss_id'] !== '') {
            var arr_ss_id = req.query['list_ss_id'].split('_');
            cache_key += '_list_ss_id_' + req.query['list_ss_id'];
            cond_ud['Premium_Request.ss_id'] = {$in: arr_ss_id};
        }
        if (req.query.hasOwnProperty('channel') && req.query['channel'] !== '') {
            cache_key += '_channel_' + req.query['channel'];
            if (req.query['channel'] === 'DC') {
                cond_ud['Premium_Request.channel'] = 'DC';
            }
            if (req.query['channel'] === 'SM') {
                cond_ud['Premium_Request.channel'] = 'SM';
            }
            if (req.query['channel'] === 'SG') {
                cond_ud['Premium_Request.channel'] = 'SG';
            }
            if (req.query['channel'] === 'GS') {
                cond_ud['Premium_Request.channel'] = 'GS';
            }
            if (req.query['channel'] === 'EM') {
                cond_ud['Premium_Request.channel'] = 'EM';
            }
            if (req.query['channel'] === 'KM') {
                cond_ud['Premium_Request.ss_id'] = 5524;
            }
        }
        var data_mode = 'FULL';
        is_realtime = true;
        if (days_to_report > 3) {
            data_mode = 'LIGHT';
            is_realtime = false;
        }

        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
            is_realtime = true;
            if (req.query['page_action'] === 'ch_all_daily') {
                cond_ud['Premium_Request.channel'] = req.obj_session.user.role_detail.channel;
            }
            if (req.query['page_action'] === 'my_daily') {
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    var arr_ssid = combine_arr.split(',').filter(Number).map(Number);
                    cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
                } else {
                    cond_ud['Premium_Request.ss_id'] = req.obj_session.user.ss_id - 0;
                }
            }
            if (req.query['page_action'] === 'all_posp_daily') {
                cond_ud['Premium_Request.subchannel'] = 'POSP';
            }
            if (req.query['page_action'] === 'all_dsa_daily') {
                cond_ud['Premium_Request.subchannel'] = 'FOS';
            }
            if (req.query['page_action'] === 'all_cse_daily') {
                cond_ud['Premium_Request.subchannel'] = 'CC';
            }
            if (req.query['page_action'] === 'ch_posp_daily') {
                var channel = req.obj_session.user.role_detail.channel;
                if (channel == 'SM') {
                    cond_ud['Premium_Request.posp_sources'] = 2;
                }
                if (channel == 'DC') {
                    cond_ud['Premium_Request.posp_sources'] = 1;
                }
                if (channel == 'GS') {
                    cond_ud['Premium_Request.posp_sources'] = 8;
                }
                if (channel == 'EM') {
                    cond_ud['Premium_Request.posp_sources'] = 11;
                }
            }
            if (req.query['page_action'] === 'ch_dsa_daily') {
                if (req.query['uid'] == '100151') {
                    cond_ud['Premium_Request.posp_category'] = 'FOS';
                }
                if (req.query['uid'] == '112666') {
                    cond_ud['Premium_Request.posp_category'] = 'GS-FOS';
                }
                if (req.query['uid'] == '113907') {
                    cond_ud['Premium_Request.posp_category'] = 'EM-FOS';
                }
            }
            if (req.query['page_action'] === 'posp_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: req.obj_session.users_assigned.Team.POSP};
            }
            if (req.query['page_action'] === 'dsa_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: req.obj_session.users_assigned.Team.DSA};
            }
            if (req.query['page_action'] === 'cse_daily' || req.query['page_action'] === 'ch_cse_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: req.obj_session.users_assigned.Team.CSE};
            }

        }


        if (is_realtime) {
            cache_key = '';
        }

        console.error('DailyDateRange', 'from', dateFrom, 'to', dateTo);
        if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
            var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
            var obj_cache_content = JSON.parse(cache_content);
            for (var k in obj_cache_content) {
                for (var k1 in obj_cache_content[k]['Summary']) {
                    if (obj_cache_content[k]['SummaryGroup'].hasOwnProperty(k1) === false) {
                        obj_cache_content[k]['SummaryGroup'][k1] = {
                            'total': 0,
                            'PB-DIRECT': 0,
                            'FM-POS': 0
                        };
                    }
                    obj_cache_content[k]['SummaryGroup'][k1]['total'] = obj_cache_content[k]['Summary'][k1]['total'];
                    for (var k2 in obj_cache_content[k]['Summary'][k1]) {
                        var ind_val = (obj_cache_content[k]['Summary'][k1][k2] - 0);
                        if (objSummaryGroup['PB-DIRECT'].indexOf(k2) > -1) {
                            obj_cache_content[k]['SummaryGroup'][k1]['PB-DIRECT'] += ind_val;
                        }
                        if (objSummaryGroup['FM-POS'].indexOf(k2) > -1) {
                            obj_cache_content[k]['SummaryGroup'][k1]['FM-POS'] += ind_val;
                        }
                    }
                }
            }
            if (req.query.hasOwnProperty('dls')) {
                for (var k in obj_cache_content) {
                    for (var k1 in obj_cache_content[k]['Summary']) {
                        for (var k2 in obj_cache_content[k]['Summary'][k1]) {
                            var ind_val = (obj_cache_content[k]['Summary'][k1][k2] - 0) * 10;
                            obj_cache_content[k]['Summary'][k1][k2] = ind_val;
                        }
                    }
                }
            }
            obj_cache_content['Stats'] = cache_content_stat;
            res.json(obj_cache_content);
        } else {
            var arr_status = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Renewal', 'Paypass', 'Paypass_Manual', 'Fail', 'Sale_Manual', 'Dropoff', 'Already_Closed', 'Premium', 'Sum_Insured', 'Comm_Premium'];
            var arr_status_agent = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'Paypass', 'Fail', 'Dropoff', 'Already_Closed'];
            var arr_src_all = ['total', 'PB-Direct', 'PB-CAMP', 'BOT', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'EM-NON-POSP', 'EM-FBA', 'FINPEACE', 'RBS'];
            var arr_product = ['All', 'Car', 'TW', 'Health', 'Travel', 'Term', 'CV'];
            for (var k in arr_status) {
                for (var k1 in arr_product) {
                    obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                    for (var k2 in arr_src_all) {
                        obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_all[k2]] = 0;
                    }
                }
            }
            for (var k in arr_status_agent) {
                for (var k1 in arr_product) {
                    obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]] = {};
                    obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]] = {};
                    for (var k2 in arr_src_all) {
                        obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = 0;
                        obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = [];
                    }
                }
            }
            var arr_duration = {6: 'LESS THAN 6 HRS', 24: 'BETN 6 TO 24 HRS', 48: 'BETN 1 TO 2 DAYS', 120: 'BETN 2 TO 5 DAYS', 5000: 'MORE THEN 5 DAYS'};
            var arr_hour_slot = {6: '12AM_TO_6AM', 12: '6AM_TO_12PM', 18: '12PM_TO_6PM', 21: '6PM_TO_9PM', 24: '9PM_TO_12AM'};
            for (var k in arr_product) {
                obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Nop'] = {};
                obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Premium'] = {};
                obj_dashboard_summary[arr_product[k]]['Summary']['RM'] = {};
                obj_dashboard_summary[arr_product[k]]['Summary']['Duration'] = {};
                for (var q in arr_duration) {
                    obj_dashboard_summary[arr_product[k]]['Summary']['Duration'][arr_duration[q]] = 0;
                }
                obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'] = {};
                for (var q in arr_hour_slot) {
                    obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'][arr_hour_slot[q]] = 0;
                }
                obj_dashboard_summary[arr_product[k]]['Summary']['Platform'] = {'PolicyBoss.com': 0};
                if (arr_product[k] == 'Car' || arr_product[k] == 'TW' || arr_product[k] == 'CV') {
                    obj_dashboard_summary[arr_product[k]]['Summary']['Make'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Rto'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Fuel'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Cc'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Sub_Type'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Rollover'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['ZD'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['NCB'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['CPA'] = {};
                }
                if (arr_product[k] == 'Health') {
                    obj_dashboard_summary[arr_product[k]]['Summary']['SI'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Member_Count'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['City'] = {};
                }
            }
            var arr_crn_all = [];
            var arr_non_dropoff = [];
            var arr_link_non_dropoff = [];
            obj_dashboard_summary['All'].Summary['DropoffList'] = {};
            obj_dashboard_summary['All'].Summary['AlreadyClosedList'] = {};
            obj_dashboard_summary['All'].Summary['LinkDropoffList'] = {};
            obj_dashboard_summary['All'].Summary['FailList'] = {};
            obj_dashboard_summary['All'].Summary['SaleList'] = {};
            obj_dashboard_summary['All'].Summary['PaypassList'] = {};
            obj_dashboard_summary['All'].Summary['PaypassManualList'] = {};
            obj_dashboard_summary['All'].Summary['SaleManualList'] = {};
            obj_dashboard_summary['ERP_CS_SUMMARY'] = {
                'ALL': {count: 0},
                'POLICYPENDING': {count: 0, list: []},
                'PENDING': {count: 0, list: []},
                'INPROGRESS': {count: 0, list: []},
                'DUPLICATE': {count: 0, list: []},
                'VALIDATION': {count: 0, list: []},
                'TRYAGAIN': {count: 0, list: []},
                'EXCEPTION': {count: 0, list: []},
                'DONE': {count: 0, list: []},
                'POLICYPUSHPENDING': {count: 0, list: []}

            };
            obj_dashboard_summary['RENEWAL_SUMMARY'] = {count: 0, list: []};
            var arr_status_agent_performance = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium'];
            User_Data.find(cond_ud).select(['User_Data_Id', 'PB_CRN', 'Product_Id', 'Report_Summary', 'Link_Request', 'Premium_Request', 'Proposal_Request', 'Last_Status', 'Status_History', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'ERP_CS_DOC', 'Erp_Qt_Request_Core', 'Proposal_Request_Core']).exec(function (err, dbUsers) {
                if (!err) {
                    for (var k in dbUsers) {
                        try {
                            var user = dbUsers[k]._doc;
                            if ([1, 2, 3, 4, 10, 12].indexOf(user['Product_Id']) > -1 && user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid')) {
                                var rm_uid = 0;
                                var product = Const_Product[user['Product_Id']];
                                //console.log('Product', product);
                                var Report_Summary = null;
                                var client_key_val = 'PB-Direct';
                                var agent_id = 0;
                                var fba_id = 0;
                                var agent_id_pre = '';
                                var reporting = '';
                                var posp_sources = 0;
                                client_key_val = get_search_source(user);
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    posp_sources = user['Premium_Request']['posp_sources'];
                                    var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                    fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
                                    agent_id = ss_id;
                                    if (ss_id === 5) {
                                        agent_id = fba_id;
                                    }
                                    var agent_name = (user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name']).toString().toUpperCase().toTitleCase();
                                    var rm_name = 'NA';
                                    if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_name')) {
                                        rm_name = (user['Premium_Request']['posp_reporting_agent_name']);
                                        if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_name_core') && user['Premium_Request']['posp_reporting_agent_name_core'] !== '') {
                                            rm_name = (user['Premium_Request']['posp_reporting_agent_name_core']);
                                        }
                                        rm_name = (rm_name) ? rm_name.toString().toUpperCase().toTitleCase() : 'NA';
                                    }

                                    var rm_uid = 0;
                                    if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid')) {
                                        rm_uid = (user['Premium_Request']['posp_reporting_agent_uid']);
                                        if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid_core'] !== '') {
                                            rm_uid = (user['Premium_Request']['posp_reporting_agent_uid']);
                                        }
                                        rm_uid = rm_uid.toString();
                                    }

                                    agent_id_pre = client_key_val + '_' + ss_id + '_' + fba_id + '_' + agent_name + '_' + user['Premium_Request']['posp_agent_city'] + '_' + user['Premium_Request']['posp_mobile_no'];
                                    var agent_channel = client_key_val.split('-')[0];
                                    var agent_id_performance = ss_id + '_' + fba_id;
                                    /*for(var z in user['Premium_Request']){
                                     if(z.indexOf('posp_') === 0){
                                     //obj_agent_detail[z] = user['Premium_Request'][z];
                                     }
                                     }*/
                                    var obj_agent_detail = {
                                        'client_key_val': client_key_val,
                                        'channel': agent_channel,
                                        'source': client_key_val,
                                        'city': user['Premium_Request']['posp_agent_city'],
                                        'ss_id': ss_id,
                                        'fba_id': fba_id,
                                        'agent_name': agent_name,
                                        'agent_mobile': agent_name,
                                        'rm_name': rm_name + ' ,UID-' + rm_uid,
                                        'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                    };
                                    var rm_uid = user['Premium_Request']['posp_reporting_agent_uid'];
                                    if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid'] > 0) {
                                        rm_uid = user['Premium_Request']['posp_reporting_agent_uid_core'];
                                        rm_name = user['Premium_Request']['posp_reporting_agent_name_core'];
                                    }
                                    var obj_rm_detail = {
                                        'client_key_val': client_key_val,
                                        'channel': agent_channel,
                                        'source': client_key_val,
                                        'city': user['Premium_Request']['posp_agent_city'],
                                        'ss_id': ss_id,
                                        'fba_id': fba_id,
                                        'rm_uid': rm_uid,
                                        'agent_name': agent_name,
                                        'agent_mobile': agent_name,
                                        'rm_name': rm_name,
                                        'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                        'rm_email': user['Premium_Request']['posp_reporting_email_id']
                                    }
                                    reporting = user['Premium_Request']['posp_reporting_agent_uid'] + '.' + rm_name + '_' + user['Premium_Request']['posp_reporting_mobile_number'];
                                }

                                if (agent_id > 0) {
                                    if (obj_dashboard_summary['Agents'].hasOwnProperty(agent_id_performance) === false) {
                                        obj_dashboard_summary['Agents'][agent_id_performance] = {'Details': obj_agent_detail};
                                        for (var x in arr_product) {
                                            obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]] = {};
                                            for (var y in arr_status_agent_performance) {
                                                obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                            }
                                        }
                                    }
                                }
                                if (rm_uid > 0) {
                                    if (obj_dashboard_summary['RMs'].hasOwnProperty(rm_uid) === false) {
                                        obj_dashboard_summary['RMs'][rm_uid] = {'Details': obj_rm_detail};
                                        for (var x in arr_product) {
                                            obj_dashboard_summary['RMs'][rm_uid][arr_product[x]] = {};
                                            for (var y in arr_status_agent_performance) {
                                                obj_dashboard_summary['RMs'][rm_uid][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                            }
                                        }
                                    }
                                }


                                obj_dashboard_summary['All'].Agent_List.Total[client_key_val].push(agent_id_pre);
                                obj_dashboard_summary['All'].Agent_List.Total.total.push(agent_id_pre);
                                obj_dashboard_summary['All'].Summary.Total.total++;
                                obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                                Last_Status = 'Search';
                                if (arr_search.indexOf(user['Last_Status']) > -1) {
                                    Last_Status = 'Search';
                                    if (arr_crn_all.indexOf(user['PB_CRN']) === -1) {
                                        obj_dashboard_summary['All'].Summary['Unique_Search'].total++;
                                        obj_dashboard_summary['All'].Summary['Unique_Search'][client_key_val]++;
                                        obj_dashboard_summary[product].Summary['Unique_Search'].total++;
                                        obj_dashboard_summary[product].Summary['Unique_Search'][client_key_val]++;
                                        if (agent_id > 0) {
                                            obj_dashboard_summary['Agents'][agent_id_performance]['All']['Unique_Search']++;
                                            obj_dashboard_summary['Agents'][agent_id_performance][product]['Unique_Search']++;
                                        }
                                        if (rm_uid > 0) {
                                            obj_dashboard_summary['RMs'][rm_uid]['All']['Unique_Search']++;
                                            obj_dashboard_summary['RMs'][rm_uid][product]['Unique_Search']++;
                                        }
                                    }
                                }
                                arr_crn_all.push(user['PB_CRN']);
                                if (arr_link.indexOf(user['Last_Status']) > -1) {
                                    Last_Status = 'Link';
                                    obj_dashboard_summary['All'].Summary['Search'].total++;
                                    obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                    obj_dashboard_summary[product].Summary['Search'].total++;
                                    obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                    if (agent_id > 0) {
                                        obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                    }
                                    if (rm_uid > 0) {
                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                        obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                    }

                                    if (data_mode === 'FULL') {
                                        var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                        var obj_linkdropoff = {
                                            "CRN": user['PB_CRN'],
                                            "User_Data_Id": user['User_Data_Id'],
                                            "CHANNEL": client_key_val,
                                            "PRODUCT": product,
                                            "PREMIUM": (user.hasOwnProperty('Link_Request')) ? user['Link_Request']['___final_premium___'] : 'NA',
                                            "AGENT": agent_id_pre,
                                            "REPORTING": reporting,
                                            "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                            "STATUS": user['Last_Status'],
                                            "On": user['Modified_On'].toLocaleString()
                                        };
                                        obj_dashboard_summary['All'].Summary['LinkDropoffList'][k_drop] = obj_linkdropoff;
                                    }
                                }
                                if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                    if (data_mode === 'FULL') {
                                        arr_link_non_dropoff.push(user['PB_CRN']);
                                    }
                                    Last_Status = 'Proposal';
                                    obj_dashboard_summary['All'].Summary['Search'].total++;
                                    obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                    obj_dashboard_summary[product].Summary['Search'].total++;
                                    obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                    //for agent summary
                                    if (agent_id > 0) {
                                        obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                    }
                                    if (rm_uid > 0) {
                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                        obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                    }


                                    if (user['Product_Id'] == 3 || (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0)) {
                                        obj_dashboard_summary['All'].Summary['Link'].total++;
                                        obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                                        obj_dashboard_summary[product].Summary['Link'].total++;
                                        obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                                        if (agent_id > 0) {
                                            obj_dashboard_summary['All'].Agent_List['Link'].total.push(agent_id_pre);
                                            obj_dashboard_summary['All'].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                            obj_dashboard_summary[product].Agent_List['Link'].total.push(agent_id_pre);
                                            obj_dashboard_summary[product].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                            obj_dashboard_summary['Agents'][agent_id_performance]['All']['Link']++;
                                            obj_dashboard_summary['Agents'][agent_id_performance][product]['Link']++;
                                        }
                                        if (rm_uid > 0) {
                                            obj_dashboard_summary['RMs'][rm_uid]['All']['Link']++;
                                            obj_dashboard_summary['RMs'][rm_uid][product]['Link']++;
                                        }
                                    }
                                    if (data_mode === 'FULL') {
                                        var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                        var obj_dropoff = {
                                            "CRN": user['PB_CRN'],
                                            "User_Data_Id": user['User_Data_Id'],
                                            "CHANNEL": client_key_val,
                                            "PRODUCT": product,
                                            "PREMIUM": user['Proposal_Request']["final_premium"],
                                            "AGENT": agent_id_pre,
                                            "REPORTING": reporting,
                                            "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                            "STATUS": user['Last_Status'],
                                            "On": user['Modified_On'].toLocaleString()
                                        };
                                        obj_dashboard_summary['All'].Summary['DropoffList'][k_drop] = obj_dropoff;
                                    }

                                }
                                if (arr_already_closed.indexOf(user['Last_Status']) > -1) {
                                    Last_Status = 'Already_Closed';
                                    if (data_mode === 'FULL') {
                                        arr_non_dropoff.push(user['PB_CRN']);
                                    }
                                    var customer = 'NA';
                                    var premium = 'NA';
                                    if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null) {
                                        //customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'] + '(' + user['Erp_Qt_Request_Core']['___mobile___'] + ')';
                                        customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                        premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                    } else {
                                        customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                                    }
                                    if (data_mode === 'FULL') {
                                        var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                        var obj_dropoff = {
                                            "CRN": user['PB_CRN'],
                                            "User_Data_Id": user['User_Data_Id'],
                                            "CHANNEL": client_key_val,
                                            "PRODUCT": product,
                                            "PREMIUM": premium,
                                            "AGENT": agent_id_pre,
                                            "REPORTING": reporting,
                                            "CUSTOMER": customer,
                                            "STATUS": user['Last_Status'],
                                            "On": user['Modified_On'].toLocaleString()
                                        };
                                        obj_dashboard_summary['All'].Summary['AlreadyClosedList'][k_drop] = obj_dropoff;
                                    }
                                }
                                if (arr_sale.indexOf(user['Last_Status']) > -1 ||
                                        arr_fail.indexOf(user['Last_Status']) > -1 ||
                                        arr_paypass.indexOf(user['Last_Status']) > -1 ||
                                        arr_paypass_manual.indexOf(user['Last_Status']) > -1 ||
                                        arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                    if (data_mode === 'FULL') {
                                        arr_non_dropoff.push(user['PB_CRN']);
                                    }

                                    if (!(user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null)) {
                                        for (var y in user['Proposal_Request']) {
                                            user['Erp_Qt_Request_Core']['___' + y + '___'] = user['Proposal_Request'][y];
                                        }
                                    }


                                    obj_dashboard_summary['All'].Summary['Search'].total++;
                                    obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                    obj_dashboard_summary[product].Summary['Search'].total++;
                                    obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                    //for agent summary
                                    if (agent_id > 0) {
                                        obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                    }
                                    if (rm_uid > 0) {
                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                        obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                    }

                                    if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                        obj_dashboard_summary['All'].Summary['Link'].total++;
                                        obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                                        obj_dashboard_summary[product].Summary['Link'].total++;
                                        obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                                    }

                                    if (agent_id > 0) {
                                        obj_dashboard_summary['All'].Agent_List['Link'].total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Link'].total.push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Link']++;
                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Link']++;
                                    }

                                    if (rm_uid > 0) {
                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Link']++;
                                        obj_dashboard_summary['RMs'][rm_uid][product]['Link']++;
                                    }

                                    obj_dashboard_summary['All'].Summary['Proposal'].total++;
                                    obj_dashboard_summary['All'].Summary['Proposal'][client_key_val]++;
                                    obj_dashboard_summary[product].Summary['Proposal'].total++;
                                    obj_dashboard_summary[product].Summary['Proposal'][client_key_val]++;
                                    if (agent_id > 0) {
                                        obj_dashboard_summary['All'].Agent_List['Proposal'].total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List['Proposal'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Proposal'].total.push(agent_id_pre);
                                        obj_dashboard_summary[product].Agent_List['Proposal'][client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Proposal']++;
                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Proposal']++;
                                    }
                                    if (rm_uid > 0) {
                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Proposal']++;
                                        obj_dashboard_summary['RMs'][rm_uid][product]['Proposal']++;
                                    }
                                    if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                        var platform = 'PolicyBoss.com';
                                        if (user['Premium_Request'].hasOwnProperty('app_version')) {
                                            platform = user['Premium_Request']['app_version'].toString();
                                            if (platform === '2.0' && user['Premium_Request'].hasOwnProperty('device_id') === false) {
                                                platform = 'PolicyBoss.com';
                                            }
                                        }
                                        var insurer_name = arr_ins[user['Erp_Qt_Request_Core']['___insurer_id___']];
                                        Last_Status = 'Sale';
                                        var transaction_amount = 0;
                                        transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                        transaction_amount = Math.round(transaction_amount);
                                        try {
                                            if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== '') {
                                                obj_dashboard_summary['All'].Summary['ErpCs'].total++;
                                                obj_dashboard_summary['All'].Summary['ErpCs'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['ErpCs'].total++;
                                                obj_dashboard_summary[product].Summary['ErpCs'][client_key_val]++;
                                                //cs summary start
                                                let ErpStatus = user['ERP_CS'];
                                                if (user['ERP_CS'].indexOf('CS') === 0) {
                                                    ErpStatus = 'DONE';
                                                }
                                                obj_dashboard_summary['ERP_CS_SUMMARY']['ALL']['count']++;
                                                obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['count']++;
                                                obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                if (user['Last_Status'] === 'TRANS_SUCCESS_WO_POLICY') {
                                                    obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['count']++;
                                                    obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                }
                                                if (ErpStatus === 'DONE' && user.hasOwnProperty('ERP_CS_DOC') && user['ERP_CS_DOC'] === 'PENDING') {
                                                    obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['count']++;
                                                    obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                }
                                                //cs summary stop
                                            }
                                            if (user.hasOwnProperty('Proposal_Request_Core') && user['Proposal_Request_Core'].hasOwnProperty('renewal_crn_udid')) {
                                                obj_dashboard_summary['All'].Summary['Renewal'].total++;
                                                obj_dashboard_summary['All'].Summary['Renewal'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Renewal'].total++;
                                                obj_dashboard_summary[product].Summary['Renewal'][client_key_val]++;
                                                obj_dashboard_summary['RENEWAL_SUMMARY']['count']++;
                                                obj_dashboard_summary['RENEWAL_SUMMARY']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name + '_' + product + '_' + client_key_val + '_' + transaction_amount);
                                                //cs summary stop
                                            }
                                        } catch (e3) {
                                            console.error('daily_1', 'erp_cs_summary', e3);
                                        }
                                        if (user['Erp_Qt_Request_Core']['___product_id___'] == 2 && user['Erp_Qt_Request_Core'].hasOwnProperty('___topup_applied___') && user['Erp_Qt_Request_Core']['___topup_applied___'] == true)
                                        {
                                            insurer_name += ' + TopUp';
                                        }
                                        if (transaction_amount > 0) {
                                            obj_dashboard_summary['All'].Summary['Premium'].total += transaction_amount;
                                            obj_dashboard_summary['All'].Summary['Premium'][client_key_val] += transaction_amount;
                                            obj_dashboard_summary[product].Summary['Premium'].total += transaction_amount;
                                            obj_dashboard_summary[product].Summary['Premium'][client_key_val] += transaction_amount;
                                            if (obj_dashboard_summary[product]['Summary']['Insurer_Premium'].hasOwnProperty(insurer_name) === false) {
                                                obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] += transaction_amount;
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Premium'] += transaction_amount;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Premium'] += transaction_amount;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Premium'] += transaction_amount;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Premium'] += transaction_amount;
                                            }
                                        }


                                        if (obj_dashboard_summary[product]['Summary']['Insurer_Nop'].hasOwnProperty(insurer_name) === false) {
                                            obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name]++;
                                        //for product

                                        var RM_Name = user['Premium_Request']['posp_reporting_agent_name'] + '(Region:' + user['Premium_Request']['posp_agent_city'] + ')';
                                        if (client_key_val == 'PB-SS') {
                                            RM_Name = 'PB Caller';
                                        }
                                        if (obj_dashboard_summary[product]['Summary']['RM'].hasOwnProperty(RM_Name) === false) {
                                            obj_dashboard_summary[product]['Summary']['RM'][RM_Name] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['RM'][RM_Name]++;
                                        if (obj_dashboard_summary[product]['Summary']['Platform'].hasOwnProperty(platform) === false) {
                                            obj_dashboard_summary[product]['Summary']['Platform'][platform] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Platform'][platform]++;
                                        if (user['Product_Id'] == 1 || user['Product_Id'] == 10) {

                                            if (user['Erp_Qt_Request_Core']['___vehicle_insurance_type___'] == 'renew') {

                                                if (obj_dashboard_summary[product]['Summary']['Rollover'].hasOwnProperty(arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]]++;
                                                //for ncb
                                                var NCB = '';
                                                if (user['Erp_Qt_Request_Core']['___is_claim_exists___'] == 'yes') {
                                                    NCB = 'WITH_CLAIM';
                                                } else {
                                                    NCB = 'NCB_' + user['Erp_Qt_Request_Core']['___vehicle_ncb_current___'];
                                                }

                                                if (obj_dashboard_summary[product]['Summary']['NCB'].hasOwnProperty(NCB) === false) {
                                                    obj_dashboard_summary[product]['Summary']['NCB'][NCB] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['NCB'][NCB]++;
                                            }
                                            //for zd
                                            var ZD = '';
                                            if (user['Erp_Qt_Request_Core']['___addon_zero_dep_cover___'] == 'yes') {
                                                ZD = 'WITH_ZD';
                                            } else {
                                                ZD = 'WITHOUT_ZD';
                                            }

                                            if (obj_dashboard_summary[product]['Summary']['ZD'].hasOwnProperty(ZD) === false) {
                                                obj_dashboard_summary[product]['Summary']['ZD'][ZD] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['ZD'][ZD]++;
                                            //for zd
                                            var CPA = '';
                                            if (user['Erp_Qt_Request_Core']['___is_pa_od___'] === 'yes' && user['Erp_Qt_Request_Core']['___premium_breakup_tp_cover_owner_driver_pa___'] > 0) {
                                                CPA = 'WITH_CPA';
                                            } else {
                                                CPA = 'WITHOUT_CPA';
                                            }

                                            if (obj_dashboard_summary[product]['Summary']['CPA'].hasOwnProperty(CPA) === false) {
                                                obj_dashboard_summary[product]['Summary']['CPA'][CPA] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['CPA'][CPA]++;
                                            //for product
                                            var Make = user['Erp_Qt_Request_Core']['___pb_make_name___'];
                                            if (obj_dashboard_summary[product]['Summary']['Make'].hasOwnProperty(Make) === false) {
                                                obj_dashboard_summary[product]['Summary']['Make'][Make] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Make'][Make]++;
                                            var Rto = user['Erp_Qt_Request_Core']['___registration_no_1___'];
                                            if (obj_dashboard_summary[product]['Summary']['Rto'].hasOwnProperty(Rto) === false) {
                                                obj_dashboard_summary[product]['Summary']['Rto'][Rto] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Rto'][Rto]++;
                                            if (obj_dashboard_summary[product]['Summary']['Fuel'].hasOwnProperty(user['Erp_Qt_Request_Core']['___pb_fuel_name___']) === false) {
                                                obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']]++;
                                            if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']) === false) {
                                                obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']]++;
                                            var Policy_Sub_Type = (user['Erp_Qt_Request_Core'].hasOwnProperty('___vehicle_insurance_subtype___')) ? user['Erp_Qt_Request_Core']['___vehicle_insurance_subtype___'] : '1CH_0TP';
                                            Policy_Sub_Type = const_policy_subtype[Policy_Sub_Type];
                                            if (obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'].hasOwnProperty(Policy_Sub_Type) === false) {
                                                obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type]++;
                                        }
                                        var sum_insured = 0;
                                        if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {
                                            sum_insured = (user['Erp_Qt_Request_Core']['___vehicle_expected_idv___'] - 0);
                                        }
                                        if (user['Product_Id'] == 2) {
                                            sum_insured = (user['Erp_Qt_Request_Core']['___health_insurance_si___'] - 0);
                                        }
                                        if (user['Product_Id'] == 3) {
                                            sum_insured = (user['Erp_Qt_Request_Core']['___sum_insured___'] - 0);
                                        }
                                        sum_insured = Math.round(sum_insured);
                                        if (sum_insured > 0) {
                                            obj_dashboard_summary['All'].Summary['Sum_Insured'].total += sum_insured;
                                            obj_dashboard_summary['All'].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                            obj_dashboard_summary[product].Summary['Sum_Insured'].total += sum_insured;
                                            obj_dashboard_summary[product].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                            if (user['Product_Id'] == 2) {
                                                if (obj_dashboard_summary[product]['Summary']['SI'].hasOwnProperty(sum_insured) === false) {
                                                    obj_dashboard_summary[product]['Summary']['SI'][sum_insured] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['SI'][sum_insured]++;
                                                if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___health_insurance_type___']) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']]++;
                                                var Member_Count = user['Erp_Qt_Request_Core']['___member_count___'] - 0;
                                                if (obj_dashboard_summary[product]['Summary']['Member_Count'].hasOwnProperty(Member_Count) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count]++;
                                                var City = user['Erp_Qt_Request_Core']['___city_name___'] + '-' + user['Erp_Qt_Request_Core']['___state_name___'];
                                                if (obj_dashboard_summary[product]['Summary']['City'].hasOwnProperty(City) === false) {
                                                    obj_dashboard_summary[product]['Summary']['City'][City] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['City'][City]++;
                                            }


                                        }
                                        if (user['Status_History']) {
                                            //PROPOSAL_LINK_SENT
                                            var sale_complete_on = null, link_sent_on = null, payment_preferred_time = null;
                                            for (var q in user['Status_History']) {
                                                if (agent_id > 0 && user['Status_History'][q]['Status'] == 'PROPOSAL_LINK_SENT' && link_sent_on === null) {
                                                    link_sent_on = user['Status_History'][q]['StatusOn'];
                                                }
                                                if (arr_sale.indexOf(user['Status_History'][q]['Status']) > -1 && sale_complete_on === null) {
                                                    sale_complete_on = user['Status_History'][q]['StatusOn'];
                                                }
                                            }
                                            var EndDate = moment(sale_complete_on);
                                            var payment_hour = moment(sale_complete_on).utcOffset("+05:30").hour() - 0;
                                            if (agent_id > 0) {
                                                var StartDate = moment(link_sent_on);
                                                var duration_tmp = moment.duration(EndDate.diff(StartDate));
                                                var hours = duration_tmp.asHours() - 0;
                                                var Duration = null;
                                                for (var q in arr_duration) {
                                                    if (hours < q) {
                                                        Duration = arr_duration[q];
                                                        break;
                                                    }
                                                }
                                                if (Duration === null) {
                                                    Duration = 'MORE THEN 5 DAYS';
                                                }
                                                obj_dashboard_summary[product]['Summary']['Duration'][Duration]++;
                                            }
                                            var Payment_Hour_Slot = null;
                                            for (var q in arr_hour_slot) {
                                                if (payment_hour < q) {
                                                    Payment_Hour_Slot = arr_hour_slot[q];
                                                    break;
                                                }
                                            }
                                            obj_dashboard_summary[product]['Summary']['Payment_Preferred_Time'][Payment_Hour_Slot]++;
                                        }

                                        if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 2 || user['Product_Id'] == 12) {
                                            var Comm_Premium = 0;
                                            if (user['Product_Id'] == 2) {
                                                var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                            } else {
                                                if (user['Premium_Request'].hasOwnProperty('vehicle_insurance_subtype') && user['Premium_Request']['vehicle_insurance_subtype'].indexOf('0CH') > -1) {
                                                    var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                                } else {
                                                    var Comm_Premium = Math.round((user['Erp_Qt_Request_Core']['___premium_breakup_od_final_premium___'] - 0) + (user['Erp_Qt_Request_Core']['___premium_breakup_addon_final_premium___'] - 0));
                                                }
                                            }

                                            if (Comm_Premium > 0) {
                                                obj_dashboard_summary['All'].Summary['Comm_Premium'].total += Comm_Premium;
                                                obj_dashboard_summary['All'].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                                obj_dashboard_summary[product].Summary['Comm_Premium'].total += Comm_Premium;
                                                obj_dashboard_summary[product].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                            }

                                        }
                                        if (data_mode === 'FULL') {
                                            var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                            var obj_dropoff = {
                                                "CRN": user['PB_CRN'],
                                                "User_Data_Id": user['User_Data_Id'],
                                                "CHANNEL": client_key_val,
                                                "PRODUCT": product,
                                                "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                "AGENT": agent_id_pre,
                                                "REPORTING": reporting,
                                                "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                "STATUS": user['Last_Status'],
                                                "On": user['Modified_On'].toLocaleString()
                                            };
                                            obj_dashboard_summary['All'].Summary['SaleList'][k_drop] = obj_dropoff;
                                        }
                                    }
                                    if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                        Last_Status = 'Fail';
                                        if (data_mode === 'FULL') {
                                            var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                            var obj_dropoff = {
                                                "CRN": user['PB_CRN'],
                                                "User_Data_Id": user['User_Data_Id'],
                                                "CHANNEL": client_key_val,
                                                "PRODUCT": product,
                                                "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                "AGENT": agent_id_pre,
                                                "REPORTING": reporting,
                                                "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                "STATUS": user['Last_Status'],
                                                "On": user['Modified_On'].toLocaleString()
                                            };
                                            obj_dashboard_summary['All'].Summary['FailList'][k_drop] = obj_dropoff;
                                        }


                                    }
                                    if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                        Last_Status = 'Paypass';
                                        if (data_mode === 'FULL') {
                                            var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                            var obj_dropoff = {
                                                "CRN": user['PB_CRN'],
                                                "User_Data_Id": user['User_Data_Id'],
                                                "CHANNEL": client_key_val,
                                                "PRODUCT": product,
                                                "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                "AGENT": agent_id_pre,
                                                "REPORTING": reporting,
                                                "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                "STATUS": user['Last_Status'],
                                                "On": user['Modified_On'].toLocaleString()
                                            };
                                            obj_dashboard_summary['All'].Summary['PaypassList'][k_drop] = obj_dropoff;
                                        }
                                    }
                                    if (arr_paypass_manual.indexOf(user['Last_Status']) > -1) {
                                        Last_Status = 'Paypass_Manual';
                                        if (data_mode === 'FULL') {
                                            var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                            var obj_dropoff = {
                                                "CRN": user['PB_CRN'],
                                                "User_Data_Id": user['User_Data_Id'],
                                                "CHANNEL": client_key_val,
                                                "PRODUCT": product,
                                                "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                "AGENT": agent_id_pre,
                                                "REPORTING": reporting,
                                                "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                "STATUS": user['Last_Status'],
                                                "On": user['Modified_On'].toLocaleString()
                                            };
                                            obj_dashboard_summary['All'].Summary['PaypassManualList'][k_drop] = obj_dropoff;
                                        }
                                    }
                                    if (arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                        Last_Status = 'Sale_Manual';
                                        if (data_mode === 'FULL') {
                                            var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                            var obj_dropoff = {
                                                "CRN": user['PB_CRN'],
                                                "User_Data_Id": user['User_Data_Id'],
                                                "CHANNEL": client_key_val,
                                                "PRODUCT": product,
                                                "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                "AGENT": agent_id_pre,
                                                "REPORTING": reporting,
                                                "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                "STATUS": user['Last_Status'],
                                                "On": user['Modified_On'].toLocaleString()
                                            };
                                            obj_dashboard_summary['All'].Summary['SaleManualList'][k_drop] = obj_dropoff;
                                        }
                                    }
                                }


                                obj_dashboard_summary['All'].Summary[Last_Status].total++;
                                obj_dashboard_summary['All'].Summary[Last_Status][client_key_val]++;
                                obj_dashboard_summary[product].Summary[Last_Status].total++;
                                obj_dashboard_summary[product].Summary[Last_Status][client_key_val]++;
                                if (agent_id > 0) {
                                    obj_dashboard_summary['All'].Agent_List[Last_Status].total.push(agent_id_pre);
                                    obj_dashboard_summary['All'].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                    obj_dashboard_summary[product].Agent_List[Last_Status].total.push(agent_id_pre);
                                    obj_dashboard_summary[product].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                    obj_dashboard_summary['Agents'][agent_id_performance]['All'][Last_Status]++;
                                    obj_dashboard_summary['Agents'][agent_id_performance][product][Last_Status]++;
                                }
                                if (rm_uid > 0) {
                                    obj_dashboard_summary['RMs'][rm_uid]['All'][Last_Status]++;
                                    obj_dashboard_summary['RMs'][rm_uid][product][Last_Status]++;
                                }
                            }


                        } catch (e) {
                            console.error('Log', 'Daily', 'reportexception', user['PB_CRN'], e);
                        }
                    }

                    for (var k in arr_status_agent) {
                        for (var k1 in arr_product) {
                            for (var k2 in arr_src_all) {
                                //agent loop 
                                try {
                                    var arr_agent_list = obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]];
                                    //console.error('Iteration', 'arr_agent_list', arr_agent_list);
                                    if (typeof arr_agent_list !== 'undefined') {
                                        var arr_agent_final = [];
                                        var obj_agent_final = {};
                                        for (var k3 in arr_agent_list) {
                                            if (obj_agent_final.hasOwnProperty(arr_agent_list[k3]) === false) {
                                                obj_agent_final[arr_agent_list[k3]] = 0;
                                            }
                                            obj_agent_final[arr_agent_list[k3]]++;
                                        }
                                        //console.error('Iteration', 'obj_agent_final', obj_agent_final);
                                        obj_agent_final = sortObject(obj_agent_final);
                                        //console.error('Iteration', 'obj_agent_final_sort', obj_agent_final);

                                        for (var k4 in obj_agent_final) {
                                            arr_agent_final.push(k4 + '_' + obj_agent_final[k4]);
                                        }
                                        //console.error('Iteration', 'arr_agent_final', arr_agent_final);
                                        //console.error('Daily_1', 'Iteration', arr_product[k1], arr_status_agent[k], arr_src_all[k2]);
                                        obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = arr_agent_final;
                                        obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]].length;
                                    }
                                } catch (e) {
                                    console.error('AgentException', e);
                                }
                            }
                        }
                    }

                    if (data_mode === 'FULL') {
                        for (var k in obj_dashboard_summary['All'].Summary['DropoffList']) {
                            var crn = k.split('_')[0];
                            var udid = k.split('_')[1];
                            if (arr_non_dropoff.indexOf(crn) > -1) {
                                delete obj_dashboard_summary['All'].Summary['DropoffList'][k];
                            }
                        }
                        for (var k in obj_dashboard_summary['All'].Summary['LinkDropoffList']) {
                            var crn = k.split('_')[0];
                            var udid = k.split('_')[1];
                            if (arr_link_non_dropoff.indexOf(crn) > -1 || arr_non_dropoff.indexOf(crn) > -1) {
                                delete obj_dashboard_summary['All'].Summary['LinkDropoffList'][k];
                            }
                        }
                    }
                    obj_dashboard_summary['All'].Summary['Dropoff'].total = obj_dashboard_summary['All'].Summary['Proposal'].total - (obj_dashboard_summary['All'].Summary['Sale'].total + obj_dashboard_summary['All'].Summary['Fail'].total + obj_dashboard_summary['All'].Summary['Paypass'].total);
                    if (req.hasOwnProperty('debug')) {
                        res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                    } else {
                        if (cache_key) {
                            fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_dashboard_summary), function (err) {
                                if (err) {
                                    return console.error(err);
                                }
                            });
                        }
                        var obj_cache_content = obj_dashboard_summary;
                        for (var k in obj_cache_content) {
                            for (var k1 in obj_cache_content[k]['Summary']) {
                                if (obj_cache_content[k]['SummaryGroup'].hasOwnProperty(k1) === false) {
                                    obj_cache_content[k]['SummaryGroup'][k1] = {
                                        'total': 0,
                                        'PB-DIRECT': 0,
                                        'FM-POS': 0
                                    };
                                }
                                obj_cache_content[k]['SummaryGroup'][k1]['total'] = obj_cache_content[k]['Summary'][k1]['total'];
                                for (var k2 in obj_cache_content[k]['Summary'][k1]) {
                                    var ind_val = (obj_cache_content[k]['Summary'][k1][k2] - 0);
                                    if (objSummaryGroup['PB-DIRECT'].indexOf(k2) > -1) {
                                        obj_cache_content[k]['SummaryGroup'][k1]['PB-DIRECT'] += ind_val;
                                    }
                                    if (objSummaryGroup['FM-POS'].indexOf(k2) > -1) {
                                        obj_cache_content[k]['SummaryGroup'][k1]['FM-POS'] += ind_val;
                                    }
                                }
                            }
                        }
                        if (req.query.hasOwnProperty('dls')) {
                            for (var k in obj_cache_content) {
                                for (var k1 in obj_cache_content[k]['Summary']) {
                                    for (var k2 in obj_cache_content[k]['Summary'][k1]) {
                                        var ind_val = (obj_cache_content[k]['Summary'][k1][k2] - 0) * 10;
                                        obj_cache_content[k]['Summary'][k1][k2] = ind_val;
                                    }
                                }
                            }
                        }
                        res.json(obj_cache_content);
                    }
                }
            });
        }
    } catch (Ex) {
        console.error('Exception', 'dashboard', Ex);
    }
});
router.get('/daily_real', LoadSession, function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        var obj_dashboard_summary = {
            'Agents': {},
            'RMs': {},
        }
        var arr_product = ['All', 'Car', 'CV', 'TW', 'Health', 'HospiCash', 'CoronaCare', 'GroupHealth', 'Travel', 'Term', 'CyberSecurity'];
        let x;
        for (x of arr_product) {
            obj_dashboard_summary[x] = {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            };
        }
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_real = moment().utcOffset("+05:30");
        var yesterday = moment(today).add(-1, 'days');
        var arr_already_closed = ['ALREADY_CLOSED'];
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_sale_manual = ['MANUAL_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_paypass_manual = ['MANUAL_PG'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'ADDON_QUOTE_APPLY', 'PROPOSAL_SAVE_AGENT', 'BUY_NOW_AGENT', 'INSPECTION_REJECTED'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'PROPOSAL_EXCEPTION', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'INSPECTION_SCHEDULED', 'INSPECTION_APPROVED'];
        var today = moment().utcOffset("+05:30").startOf('Day');
        if (req.query.hasOwnProperty('type') && req.query['type'] === 'daily') {
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        }

        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        let StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
        let EndDate = moment(req.query['dateto']).utcOffset("+05:30").startOf('Day');
        let days_to_report = EndDate.diff(StartDate, 'days');
        days_to_report += 1;
        var objSummaryGroup = {
            'PB-DIRECT': ['PB-Direct', 'BOT', 'PB-SS', 'PB-CAMP'],
            'FM-POS': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'FINPEACE', 'RBS']
        };
        var cache_key = '';
        cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'];
        var today_str = moment(today).format("YYYY-MM-D");
        var today_min = moment(today_real).format("mm") - 0;
        var today_hr = moment(today_real).format("HH") - 0;
        var cache_itr = Math.floor(today_min / 30) + 1;
        var cache_key_sub = '_' + today_hr + '_' + cache_itr;
        var is_db_cache = false;
        var is_realtime = false;
        if (isCurrentFutureDate(req.query['dateto'])) {
            is_realtime = true;
            if (req.query['dateto'] === req.query['datefrom']) {
                is_realtime = false;
                cache_key += cache_key_sub;
                cache_key += '_on_' + today_str;
            } else {
                is_realtime = false;
                cache_key += '_on_' + today_str;
            }
        } else {
            //if (last3days <= dateFrom && last3days <= dateTo) {
            //  is_realtime = true;
            //}
        }
        var cond_ud = {
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        };
        var data_mode = 'FULL';
        is_realtime = true;
        if (days_to_report > 3) {
            data_mode = 'LIGHT';
            is_realtime = false;
        }
        var db_cache_key = '';
        let channel = '';
        db_cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'];
        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
            is_realtime = true;
            if (req.query['page_action'] === 'all_daily') {
                is_db_cache = true;
                db_cache_key += '_all_daily';
            } else if (req.query['page_action'] === 'ch_all_daily') {
                var arr_ch_ssid = [];
                var arr_ch_list = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                //channel = req.obj_session.user.role_detail.channel;
                arr_ch_list = req.obj_session.user.role_detail.channel_transaction;
                cond_ud = {
                    "Modified_On": {"$gte": dateFrom, "$lte": dateTo},
                    "$or": [
                        {'Premium_Request.channel': {$in: arr_ch_list}},
                        {'Premium_Request.ss_id': {$in: arr_ch_ssid}}
                    ]
                };
                console.error('DBG', 'DAILY_REAL_CH_COND', cond_ud);
                // cond_ud['Premium_Request.channel'] = channel;
                is_db_cache = true;
                db_cache_key += '_ch_all_daily_' + channel;
            } else if (req.query['page_action'] === 'my_daily') {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);
                    cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
                }
                arr_ssid.push(req.obj_session.user.ss_id);
                cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
            }


            if (days_to_report === 1 && isCurrentFutureDate(req.query['dateto']) === false) {
                is_db_cache = true;
            } else {
                is_db_cache = false;
                db_cache_key = '';
            }
            db_cache_key = db_cache_key.toLowerCase();
            var reportModel = require('../models/report');
            reportModel.findOne({'Cache_Key': db_cache_key}, function (err, dbReport) {
                if (dbReport) {
                    res.json(dbReport._doc);
                } else {
                    if (is_realtime) {
                        cache_key = '';
                    }

                    console.error('DailyDateRange', 'from', dateFrom, 'to', dateTo);
                    if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
                        var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
                        var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
                        var obj_cache_content = JSON.parse(cache_content);
                        obj_cache_content['Stats'] = cache_content_stat;
                        res.json(obj_cache_content);
                    } else {
                        var arr_status = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Renewal', 'Paypass', 'Paypass_Manual', 'Fail', 'Sale_Manual', 'Dropoff', 'Already_Closed', 'Premium', 'Sum_Insured', 'Comm_Premium'];
                        var arr_status_agent = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'Paypass', 'Fail', 'Dropoff', 'Already_Closed'];
                        var arr_src_all = ['total', 'PB-Direct', 'PB-CAMP', 'BOT', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'LA-FOS', 'LA-POSP', 'CC-AUTO-POSP', 'CC-HEALTH-POSP', 'SM-NP-POSP', 'DC-NP-POSP', 'GS-NP-POSP', 'EM-NP-POSP', 'FINPEACE', 'RBS'];
                        for (var k in arr_status) {
                            for (var k1 in arr_product) {
                                obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                                for (var k2 in arr_src_all) {
                                    obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_all[k2]] = 0;
                                }
                            }
                        }
                        for (var k in arr_status_agent) {
                            for (var k1 in arr_product) {
                                obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]] = {};
                                obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]] = {};
                                for (var k2 in arr_src_all) {
                                    obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = 0;
                                    obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = [];
                                }
                            }
                        }
                        var arr_duration = {6: 'LESS THAN 6 HRS', 24: 'BETN 6 TO 24 HRS', 48: 'BETN 1 TO 2 DAYS', 120: 'BETN 2 TO 5 DAYS', 5000: 'MORE THEN 5 DAYS'};
                        var arr_hour_slot = {6: '12AM_TO_6AM', 12: '6AM_TO_12PM', 18: '12PM_TO_6PM', 21: '6PM_TO_9PM', 24: '9PM_TO_12AM'};
                        for (var k in arr_product) {
                            obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Nop'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Premium'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['RM'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Duration'] = {};
                            for (var q in arr_duration) {
                                obj_dashboard_summary[arr_product[k]]['Summary']['Duration'][arr_duration[q]] = 0;
                            }
                            obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'] = {};
                            for (var q in arr_hour_slot) {
                                obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'][arr_hour_slot[q]] = 0;
                            }
                            obj_dashboard_summary[arr_product[k]]['Summary']['Platform'] = {'PolicyBoss.com': 0};
                            if (arr_product[k] == 'Car' || arr_product[k] == 'TW' || arr_product[k] == 'CV') {
                                obj_dashboard_summary[arr_product[k]]['Summary']['Make'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Rto'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Fuel'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Cc'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Sub_Type'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Rollover'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['ZD'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['NCB'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['CPA'] = {};
                            }
                            if (arr_product[k] == 'Health' || arr_product[k] == 'HospiCash') {
                                obj_dashboard_summary[arr_product[k]]['Summary']['SI'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Member_Count'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['City'] = {};
                            }
                        }
                        var arr_crn_all = [];
                        var arr_non_dropoff = [];
                        var arr_link_non_dropoff = [];
                        obj_dashboard_summary['All'].Summary['DropoffList'] = {};
                        obj_dashboard_summary['All'].Summary['AlreadyClosedList'] = {};
                        obj_dashboard_summary['All'].Summary['LinkDropoffList'] = {};
                        obj_dashboard_summary['All'].Summary['FailList'] = {};
                        obj_dashboard_summary['All'].Summary['SaleList'] = {};
                        obj_dashboard_summary['All'].Summary['PaypassList'] = {};
                        obj_dashboard_summary['All'].Summary['PaypassManualList'] = {};
                        obj_dashboard_summary['All'].Summary['SaleManualList'] = {};
                        obj_dashboard_summary['ERP_CS_SUMMARY'] = {
                            'ALL': {count: 0},
                            'POLICYPENDING': {count: 0, list: []},
                            'PENDING': {count: 0, list: []},
                            'INPROGRESS': {count: 0, list: []},
                            'DUPLICATE': {count: 0, list: []},
                            'VALIDATION': {count: 0, list: []},
                            'TRYAGAIN': {count: 0, list: []},
                            'EXCEPTION': {count: 0, list: []},
                            'DONE': {count: 0, list: []},
                            'POLICYPUSHPENDING': {count: 0, list: []}

                        };
                        obj_dashboard_summary['RENEWAL_SUMMARY'] = {count: 0, list: []};
                        var arr_status_agent_performance = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium'];
                        User_Data.find(cond_ud).select(['User_Data_Id', 'PB_CRN', 'Product_Id', 'Report_Summary', 'Link_Request', 'Premium_Request', 'Proposal_Request', 'Last_Status', 'Status_History', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'ERP_CS_DOC', 'Erp_Qt_Request_Core', 'Proposal_Request_Core', 'Proposal_Id', 'PG_Dropoff_Status']).exec(function (err, dbUsers) {
                            if (!err) {
                                for (var k in dbUsers) {
                                    try {
                                        var user = dbUsers[k]._doc;
                                        if ([1, 2, 3, 4, 10, 12, 17, 18].indexOf(user['Product_Id']) > -1 && user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid')) {

                                        } else {
                                            continue;
                                        }

                                        var rm_uid = 0;
                                        var product = Const_Product[user['Product_Id']];
                                        if (user['Product_Id'] === 2 && user['Premium_Request']['is_hospi'] === 'yes') {
                                            product = 'HospiCash';
                                        }
                                        if (user['Product_Id'] === 2 && user['Premium_Request']['is_ghi'] === 'yes') {
                                            product = 'GroupHealth';
                                        }
                                        //console.log('Product', product);
                                        var client_key_val = 'PB-Direct';
                                        var agent_id = 0;
                                        var fba_id = 0;
                                        var agent_id_pre = '';
                                        var reporting = '';
                                        client_key_val = get_search_source(user);
                                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                            var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                            fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
                                            agent_id = ss_id;
                                            if (ss_id === 5) {
                                                agent_id = fba_id;
                                            }
                                            var agent_name = (user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name']).toString().toUpperCase().toTitleCase();
                                            var rm_name = 'NA';
                                            if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_name')) {
                                                rm_name = (user['Premium_Request']['posp_reporting_agent_name']);
                                                if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_name_core') && user['Premium_Request']['posp_reporting_agent_name_core'] !== '') {
                                                    rm_name = (user['Premium_Request']['posp_reporting_agent_name_core']);
                                                }
                                                rm_name = (rm_name) ? rm_name.toString().toUpperCase().toTitleCase() : 'NA';
                                            }

                                            var rm_uid = 0;
                                            if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid')) {
                                                rm_uid = (user['Premium_Request']['posp_reporting_agent_uid']);
                                                if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid_core'] !== '') {
                                                    rm_uid = (user['Premium_Request']['posp_reporting_agent_uid']);
                                                }
                                                rm_uid = rm_uid.toString();
                                            }

                                            agent_id_pre = client_key_val + '_' + ss_id + '_' + fba_id + '_' + agent_name + '_' + user['Premium_Request']['posp_agent_city'] + '_' + user['Premium_Request']['posp_mobile_no'];
                                            var agent_channel = client_key_val.split('-')[0];
                                            var agent_id_performance = ss_id + '_' + fba_id;
                                            var obj_agent_detail = {
                                                'client_key_val': client_key_val,
                                                'channel': agent_channel,
                                                'source': client_key_val,
                                                'city': user['Premium_Request']['posp_agent_city'],
                                                'ss_id': ss_id,
                                                'fba_id': fba_id,
                                                'agent_name': agent_name,
                                                'agent_mobile': agent_name,
                                                'rm_name': rm_name + ' ,UID-' + rm_uid,
                                                'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                            };
                                            var rm_uid = user['Premium_Request']['posp_reporting_agent_uid'];
                                            if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid'] > 0) {
                                                rm_uid = user['Premium_Request']['posp_reporting_agent_uid_core'];
                                                rm_name = user['Premium_Request']['posp_reporting_agent_name_core'];
                                            }
                                            var obj_rm_detail = {
                                                'client_key_val': client_key_val,
                                                'channel': agent_channel,
                                                'source': client_key_val,
                                                'city': user['Premium_Request']['posp_agent_city'],
                                                'ss_id': ss_id,
                                                'fba_id': fba_id,
                                                'rm_uid': rm_uid,
                                                'agent_name': agent_name,
                                                'agent_mobile': agent_name,
                                                'rm_name': rm_name,
                                                'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                                'rm_email': user['Premium_Request']['posp_reporting_email_id']
                                            };
                                            reporting = user['Premium_Request']['posp_reporting_agent_uid'] + '.' + rm_name + '_' + user['Premium_Request']['posp_reporting_mobile_number'];
                                        }

                                        if (agent_id > 0) {
                                            if (obj_dashboard_summary['Agents'].hasOwnProperty(agent_id_performance) === false) {
                                                obj_dashboard_summary['Agents'][agent_id_performance] = {'Details': obj_agent_detail};
                                                for (var x in arr_product) {
                                                    obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]] = {};
                                                    for (var y in arr_status_agent_performance) {
                                                        obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (rm_uid > 0) {
                                            if (obj_dashboard_summary['RMs'].hasOwnProperty(rm_uid) === false) {
                                                obj_dashboard_summary['RMs'][rm_uid] = {'Details': obj_rm_detail};
                                                for (var x in arr_product) {
                                                    obj_dashboard_summary['RMs'][rm_uid][arr_product[x]] = {};
                                                    for (var y in arr_status_agent_performance) {
                                                        obj_dashboard_summary['RMs'][rm_uid][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                                    }
                                                }
                                            }
                                        }


                                        obj_dashboard_summary['All'].Agent_List.Total[client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List.Total.total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Summary.Total.total++;
                                        obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                                        Last_Status = 'Search';
                                        if (user.hasOwnProperty('PG_Dropoff_Status') && user['PG_Dropoff_Status'] !== null && arr_sale.indexOf(user['Last_Status']) === -1) {
                                            Last_Status = user['PG_Dropoff_Status'];
                                        }
                                        if (arr_search.indexOf(user['Last_Status']) > -1) {
                                            Last_Status = 'Search';
                                            if (arr_crn_all.indexOf(user['PB_CRN']) === -1) {
                                                obj_dashboard_summary['All'].Summary['Unique_Search'].total++;
                                                obj_dashboard_summary['All'].Summary['Unique_Search'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Unique_Search'].total++;
                                                obj_dashboard_summary[product].Summary['Unique_Search'][client_key_val]++;
                                                if (agent_id > 0) {
                                                    obj_dashboard_summary['Agents'][agent_id_performance]['All']['Unique_Search']++;
                                                    obj_dashboard_summary['Agents'][agent_id_performance][product]['Unique_Search']++;
                                                }
                                                if (rm_uid > 0) {
                                                    obj_dashboard_summary['RMs'][rm_uid]['All']['Unique_Search']++;
                                                    obj_dashboard_summary['RMs'][rm_uid][product]['Unique_Search']++;
                                                }
                                            }
                                        }
                                        arr_crn_all.push(user['PB_CRN']);
                                        if (arr_link.indexOf(user['Last_Status']) > -1) {
                                            Last_Status = 'Link';
                                            obj_dashboard_summary['All'].Summary['Search'].total++;
                                            obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Search'].total++;
                                            obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                            }
                                        }
                                        if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                            if (data_mode === 'FULL') {
                                                arr_link_non_dropoff.push(user['PB_CRN']);
                                            }
                                            Last_Status = 'Proposal';
                                            obj_dashboard_summary['All'].Summary['Search'].total++;
                                            obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Search'].total++;
                                            obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                            //for agent summary
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                            }


                                            if (user['Product_Id'] == 3 || (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0)) {
                                                obj_dashboard_summary['All'].Summary['Link'].total++;
                                                obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Link'].total++;
                                                obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                                                if (agent_id > 0) {
                                                    obj_dashboard_summary['All'].Agent_List['Link'].total.push(agent_id_pre);
                                                    obj_dashboard_summary['All'].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                    obj_dashboard_summary[product].Agent_List['Link'].total.push(agent_id_pre);
                                                    obj_dashboard_summary[product].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                    obj_dashboard_summary['Agents'][agent_id_performance]['All']['Link']++;
                                                    obj_dashboard_summary['Agents'][agent_id_performance][product]['Link']++;
                                                }
                                                if (rm_uid > 0) {
                                                    obj_dashboard_summary['RMs'][rm_uid]['All']['Link']++;
                                                    obj_dashboard_summary['RMs'][rm_uid][product]['Link']++;
                                                }
                                            }
                                            if (data_mode === 'FULL') {
                                                var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                var obj_dropoff = {
                                                    "CRN": user['PB_CRN'],
                                                    "User_Data_Id": user['User_Data_Id'],
                                                    "Proposal_Id": user['Proposal_Id'],
                                                    "CHANNEL": client_key_val,
                                                    "PRODUCT": product,
                                                    "PREMIUM": (user.hasOwnProperty('Proposal_Request')) ? user['Proposal_Request']['final_premium'] : 0,
                                                    "AGENT": agent_id_pre,
                                                    "REPORTING": reporting,
                                                    "CUSTOMER": (user.hasOwnProperty('Proposal_Request_Core')) ? user['Proposal_Request_Core']["first_name"] + '.' + user['Proposal_Request_Core']["last_name"] : 'NA',
                                                    "STATUS": user['Last_Status'],
                                                    "On": user['Modified_On'].toLocaleString()
                                                };
                                                obj_dashboard_summary['All'].Summary['DropoffList'][k_drop] = obj_dropoff;
                                            }

                                        }
                                        if (arr_already_closed.indexOf(user['Last_Status']) > -1) {
                                            Last_Status = 'Already_Closed';
                                            if (data_mode === 'FULL') {
                                                arr_non_dropoff.push(user['PB_CRN']);
                                            }
                                            var customer = 'NA';
                                            var premium = 'NA';
                                            if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null) {
                                                customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                                premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                            } else {
                                                customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                                            }
                                            if (data_mode === 'FULL') {
                                                var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                var obj_dropoff = {
                                                    "CRN": user['PB_CRN'],
                                                    "User_Data_Id": user['User_Data_Id'],
                                                    "CHANNEL": client_key_val,
                                                    "PRODUCT": product,
                                                    "PREMIUM": premium,
                                                    "AGENT": agent_id_pre,
                                                    "REPORTING": reporting,
                                                    "CUSTOMER": customer,
                                                    "STATUS": user['Last_Status'],
                                                    "On": user['Modified_On'].toLocaleString()
                                                };
                                                obj_dashboard_summary['All'].Summary['AlreadyClosedList'][k_drop] = obj_dropoff;
                                            }
                                        }
                                        if (arr_sale.indexOf(user['Last_Status']) > -1 ||
                                                arr_fail.indexOf(user['Last_Status']) > -1 ||
                                                arr_paypass.indexOf(user['Last_Status']) > -1 ||
                                                arr_paypass_manual.indexOf(user['Last_Status']) > -1 ||
                                                arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                            if (data_mode === 'FULL') {
                                                arr_non_dropoff.push(user['PB_CRN']);
                                            }

                                            if (!(user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null)) {
                                                user['Erp_Qt_Request_Core'] = {};
                                                for (var y in user['Proposal_Request']) {
                                                    user['Erp_Qt_Request_Core']['___' + y + '___'] = user['Proposal_Request'][y];
                                                }
                                            }


                                            obj_dashboard_summary['All'].Summary['Search'].total++;
                                            obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Search'].total++;
                                            obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                            //for agent summary
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                            }

                                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                                obj_dashboard_summary['All'].Summary['Link'].total++;
                                                obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Link'].total++;
                                                obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                                            }

                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Link'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Link'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Link']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Link']++;
                                            }

                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Link']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Link']++;
                                            }

                                            obj_dashboard_summary['All'].Summary['Proposal'].total++;
                                            obj_dashboard_summary['All'].Summary['Proposal'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Proposal'].total++;
                                            obj_dashboard_summary[product].Summary['Proposal'][client_key_val]++;
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Proposal'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Proposal'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Proposal'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Proposal'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Proposal']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Proposal']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Proposal']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Proposal']++;
                                            }
                                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                                var platform = 'PolicyBoss.com';
                                                if (user['Premium_Request'].hasOwnProperty('app_version')) {
                                                    platform = user['Premium_Request']['app_version'].toString();
                                                    if (platform === '2.0' && user['Premium_Request'].hasOwnProperty('device_id') === false) {
                                                        platform = 'PolicyBoss.com';
                                                    }
                                                }
                                                var insurer_name = arr_ins[user['Erp_Qt_Request_Core']['___insurer_id___']];
                                                Last_Status = 'Sale';
                                                var transaction_amount = 0;
                                                transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                                transaction_amount = Math.round(transaction_amount);
                                                if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== '') {
                                                    obj_dashboard_summary['All'].Summary['ErpCs'].total++;
                                                    obj_dashboard_summary['All'].Summary['ErpCs'][client_key_val]++;
                                                    obj_dashboard_summary[product].Summary['ErpCs'].total++;
                                                    obj_dashboard_summary[product].Summary['ErpCs'][client_key_val]++;
                                                    //cs summary start
                                                    let ErpStatus = user['ERP_CS'];
                                                    if (user['ERP_CS'].indexOf('CS') === 0) {
                                                        ErpStatus = 'DONE';
                                                    }
                                                    obj_dashboard_summary['ERP_CS_SUMMARY']['ALL']['count']++;
                                                    obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['count']++;
                                                    obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                    if (user['Last_Status'] === 'TRANS_SUCCESS_WO_POLICY') {
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['count']++;
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                    }
                                                    if (ErpStatus === 'DONE' && user.hasOwnProperty('ERP_CS_DOC') && user['ERP_CS_DOC'] === 'PENDING') {
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['count']++;
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                    }
                                                    //cs summary stop
                                                }
                                                if (user.hasOwnProperty('Proposal_Request_Core') && user['Proposal_Request_Core'].hasOwnProperty('renewal_crn_udid')) {
                                                    obj_dashboard_summary['All'].Summary['Renewal'].total++;
                                                    obj_dashboard_summary['All'].Summary['Renewal'][client_key_val]++;
                                                    obj_dashboard_summary[product].Summary['Renewal'].total++;
                                                    obj_dashboard_summary[product].Summary['Renewal'][client_key_val]++;
                                                    obj_dashboard_summary['RENEWAL_SUMMARY']['count']++;
                                                    obj_dashboard_summary['RENEWAL_SUMMARY']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name + '_' + product + '_' + client_key_val + '_' + transaction_amount);
                                                    //cs summary stop
                                                }

                                                if (user['Erp_Qt_Request_Core']['___product_id___'] == 2 && user['Erp_Qt_Request_Core'].hasOwnProperty('___topup_applied___') && user['Erp_Qt_Request_Core']['___topup_applied___'] == true)
                                                {
                                                    insurer_name += ' + TopUp';
                                                }
                                                if (transaction_amount > 0) {
                                                    obj_dashboard_summary['All'].Summary['Premium'].total += transaction_amount;
                                                    obj_dashboard_summary['All'].Summary['Premium'][client_key_val] += transaction_amount;
                                                    obj_dashboard_summary[product].Summary['Premium'].total += transaction_amount;
                                                    obj_dashboard_summary[product].Summary['Premium'][client_key_val] += transaction_amount;
                                                    if (obj_dashboard_summary[product]['Summary']['Insurer_Premium'].hasOwnProperty(insurer_name) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] += transaction_amount;
                                                    if (agent_id > 0) {
                                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Premium'] += transaction_amount;
                                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Premium'] += transaction_amount;
                                                    }
                                                    if (rm_uid > 0) {
                                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Premium'] += transaction_amount;
                                                        obj_dashboard_summary['RMs'][rm_uid][product]['Premium'] += transaction_amount;
                                                    }
                                                }


                                                if (obj_dashboard_summary[product]['Summary']['Insurer_Nop'].hasOwnProperty(insurer_name) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name]++;
                                                //for product

                                                var RM_Name = user['Premium_Request']['posp_reporting_agent_name'] + '(Region:' + user['Premium_Request']['posp_agent_city'] + ')';
                                                if (client_key_val == 'PB-SS') {
                                                    RM_Name = 'PB Caller';
                                                }
                                                if (obj_dashboard_summary[product]['Summary']['RM'].hasOwnProperty(RM_Name) === false) {
                                                    obj_dashboard_summary[product]['Summary']['RM'][RM_Name] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['RM'][RM_Name]++;
                                                if (obj_dashboard_summary[product]['Summary']['Platform'].hasOwnProperty(platform) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Platform'][platform] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Platform'][platform]++;
                                                if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {

                                                    if (user['Erp_Qt_Request_Core']['___vehicle_insurance_type___'] == 'renew') {

                                                        if (obj_dashboard_summary[product]['Summary']['Rollover'].hasOwnProperty(arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]) === false) {
                                                            obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]]++;
                                                        //for ncb
                                                        var NCB = '';
                                                        if (user['Erp_Qt_Request_Core']['___is_claim_exists___'] == 'yes') {
                                                            NCB = 'WITH_CLAIM';
                                                        } else {
                                                            NCB = 'NCB_' + user['Erp_Qt_Request_Core']['___vehicle_ncb_current___'];
                                                        }

                                                        if (obj_dashboard_summary[product]['Summary']['NCB'].hasOwnProperty(NCB) === false) {
                                                            obj_dashboard_summary[product]['Summary']['NCB'][NCB] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['NCB'][NCB]++;
                                                    }
                                                    //for zd
                                                    var ZD = '';
                                                    if (user['Erp_Qt_Request_Core']['___addon_zero_dep_cover___'] == 'yes') {
                                                        ZD = 'WITH_ZD';
                                                    } else {
                                                        ZD = 'WITHOUT_ZD';
                                                    }

                                                    if (obj_dashboard_summary[product]['Summary']['ZD'].hasOwnProperty(ZD) === false) {
                                                        obj_dashboard_summary[product]['Summary']['ZD'][ZD] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['ZD'][ZD]++;
                                                    //for zd
                                                    var CPA = '';
                                                    if (user['Erp_Qt_Request_Core']['___is_pa_od___'] === 'yes' && user['Erp_Qt_Request_Core']['___premium_breakup_tp_cover_owner_driver_pa___'] > 0) {
                                                        CPA = 'WITH_CPA';
                                                    } else {
                                                        CPA = 'WITHOUT_CPA';
                                                    }

                                                    if (obj_dashboard_summary[product]['Summary']['CPA'].hasOwnProperty(CPA) === false) {
                                                        obj_dashboard_summary[product]['Summary']['CPA'][CPA] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['CPA'][CPA]++;
                                                    //for product
                                                    var Make = user['Erp_Qt_Request_Core']['___pb_make_name___'];
                                                    if (obj_dashboard_summary[product]['Summary']['Make'].hasOwnProperty(Make) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Make'][Make] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Make'][Make]++;
                                                    var Rto = user['Erp_Qt_Request_Core']['___registration_no_1___'];
                                                    if (obj_dashboard_summary[product]['Summary']['Rto'].hasOwnProperty(Rto) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Rto'][Rto] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Rto'][Rto]++;
                                                    if (obj_dashboard_summary[product]['Summary']['Fuel'].hasOwnProperty(user['Erp_Qt_Request_Core']['___pb_fuel_name___']) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']]++;
                                                    if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']]++;
                                                    var Policy_Sub_Type = (user['Erp_Qt_Request_Core'].hasOwnProperty('___vehicle_insurance_subtype___')) ? user['Erp_Qt_Request_Core']['___vehicle_insurance_subtype___'] : '1CH_0TP';
                                                    Policy_Sub_Type = const_policy_subtype[Policy_Sub_Type];
                                                    if (obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'].hasOwnProperty(Policy_Sub_Type) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type]++;
                                                }
                                                var sum_insured = 0;
                                                if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {
                                                    sum_insured = (user['Erp_Qt_Request_Core']['___vehicle_expected_idv___'] - 0);
                                                }
                                                if (user['Product_Id'] == 2) {
                                                    sum_insured = (user['Erp_Qt_Request_Core']['___health_insurance_si___'] - 0);
                                                }
                                                if (user['Product_Id'] == 3) {
                                                    sum_insured = (user['Erp_Qt_Request_Core']['___sum_insured___'] - 0);
                                                }
                                                sum_insured = Math.round(sum_insured);
                                                if (sum_insured > 0) {
                                                    obj_dashboard_summary['All'].Summary['Sum_Insured'].total += sum_insured;
                                                    obj_dashboard_summary['All'].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                                    obj_dashboard_summary[product].Summary['Sum_Insured'].total += sum_insured;
                                                    obj_dashboard_summary[product].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                                    if (user['Product_Id'] == 2) {
                                                        if (obj_dashboard_summary[product]['Summary']['SI'].hasOwnProperty(sum_insured) === false) {
                                                            obj_dashboard_summary[product]['Summary']['SI'][sum_insured] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['SI'][sum_insured]++;
                                                        if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___health_insurance_type___']) === false) {
                                                            obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']]++;
                                                        var Member_Count = user['Erp_Qt_Request_Core']['___member_count___'] - 0;
                                                        if (obj_dashboard_summary[product]['Summary']['Member_Count'].hasOwnProperty(Member_Count) === false) {
                                                            obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count]++;
                                                        var City = user['Erp_Qt_Request_Core']['___city_name___'] + '-' + user['Erp_Qt_Request_Core']['___state_name___'];
                                                        if (obj_dashboard_summary[product]['Summary']['City'].hasOwnProperty(City) === false) {
                                                            obj_dashboard_summary[product]['Summary']['City'][City] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['City'][City]++;
                                                    }


                                                }
                                                if (user['Status_History']) {
                                                    //PROPOSAL_LINK_SENT
                                                    var sale_complete_on = null, link_sent_on = null, payment_preferred_time = null;
                                                    for (var q in user['Status_History']) {
                                                        if (agent_id > 0 && user['Status_History'][q]['Status'] == 'PROPOSAL_LINK_SENT' && link_sent_on === null) {
                                                            link_sent_on = user['Status_History'][q]['StatusOn'];
                                                        }
                                                        if (arr_sale.indexOf(user['Status_History'][q]['Status']) > -1 && sale_complete_on === null) {
                                                            sale_complete_on = user['Status_History'][q]['StatusOn'];
                                                        }
                                                    }
                                                    var EndDate = moment(sale_complete_on);
                                                    var payment_hour = moment(sale_complete_on).utcOffset("+05:30").hour() - 0;
                                                    if (agent_id > 0) {
                                                        var StartDate = moment(link_sent_on);
                                                        var duration_tmp = moment.duration(EndDate.diff(StartDate));
                                                        var hours = duration_tmp.asHours() - 0;
                                                        var Duration = null;
                                                        for (var q in arr_duration) {
                                                            if (hours < q) {
                                                                Duration = arr_duration[q];
                                                                break;
                                                            }
                                                        }
                                                        if (Duration === null) {
                                                            Duration = 'MORE THEN 5 DAYS';
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Duration'][Duration]++;
                                                    }
                                                    var Payment_Hour_Slot = null;
                                                    for (var q in arr_hour_slot) {
                                                        if (payment_hour < q) {
                                                            Payment_Hour_Slot = arr_hour_slot[q];
                                                            break;
                                                        }
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Payment_Preferred_Time'][Payment_Hour_Slot]++;
                                                }


                                                if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 2 || user['Product_Id'] == 12) {
                                                    var Comm_Premium = 0;
                                                    if (user['Product_Id'] == 2) {
                                                        var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                                    } else {
                                                        if (user['Premium_Request'].hasOwnProperty('vehicle_insurance_subtype') && user['Premium_Request']['vehicle_insurance_subtype'].indexOf('0CH') > -1) {
                                                            var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                                        } else {
                                                            var Comm_Premium = Math.round((user['Erp_Qt_Request_Core']['___premium_breakup_od_final_premium___'] - 0) + (user['Erp_Qt_Request_Core']['___premium_breakup_addon_final_premium___'] - 0));
                                                        }
                                                    }

                                                    if (Comm_Premium > 0) {
                                                        obj_dashboard_summary['All'].Summary['Comm_Premium'].total += Comm_Premium;
                                                        obj_dashboard_summary['All'].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                                        obj_dashboard_summary[product].Summary['Comm_Premium'].total += Comm_Premium;
                                                        obj_dashboard_summary[product].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                                    }

                                                }
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": (user.hasOwnProperty('Proposal_Request')) ? user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"] : 'NA',
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['SaleList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Fail';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['FailList'][k_drop] = obj_dropoff;
                                                }


                                            }
                                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Paypass';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['PaypassList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                            if (arr_paypass_manual.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Paypass_Manual';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['PaypassManualList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                            if (arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Sale_Manual';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['SaleManualList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                        }
                                        if (agent_id > 0) {
                                            obj_dashboard_summary['All'].Agent_List[Last_Status].total.push(agent_id_pre);
                                            obj_dashboard_summary['All'].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                            obj_dashboard_summary[product].Agent_List[Last_Status].total.push(agent_id_pre);
                                            obj_dashboard_summary[product].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                            obj_dashboard_summary['Agents'][agent_id_performance]['All'][Last_Status]++;
                                            obj_dashboard_summary['Agents'][agent_id_performance][product][Last_Status]++;
                                        }
                                        if (rm_uid > 0) {
                                            obj_dashboard_summary['RMs'][rm_uid]['All'][Last_Status]++;
                                            obj_dashboard_summary['RMs'][rm_uid][product][Last_Status]++;
                                        }

                                    } catch (e) {
                                        console.error('Log', 'Daily', 'reportexception', user['PB_CRN'], e);
                                    }
                                    obj_dashboard_summary['All'].Summary[Last_Status].total++;
                                    obj_dashboard_summary['All'].Summary[Last_Status][client_key_val]++;
                                    obj_dashboard_summary[product].Summary[Last_Status].total++;
                                    obj_dashboard_summary[product].Summary[Last_Status][client_key_val]++;
                                }

                                for (var k in arr_status_agent) {
                                    for (var k1 in arr_product) {
                                        for (var k2 in arr_src_all) {
                                            //agent loop 
                                            try {
                                                var arr_agent_list = obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]];
                                                if (typeof arr_agent_list !== 'undefined') {
                                                    var arr_agent_final = [];
                                                    var obj_agent_final = {};
                                                    for (var k3 in arr_agent_list) {
                                                        if (obj_agent_final.hasOwnProperty(arr_agent_list[k3]) === false) {
                                                            obj_agent_final[arr_agent_list[k3]] = 0;
                                                        }
                                                        obj_agent_final[arr_agent_list[k3]]++;
                                                    }
                                                    obj_agent_final = sortObject(obj_agent_final);
                                                    for (var k4 in obj_agent_final) {
                                                        arr_agent_final.push(k4 + '_' + obj_agent_final[k4]);
                                                    }
                                                    obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = arr_agent_final;
                                                    obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]].length;
                                                }
                                            } catch (e) {
                                                console.error('AgentException', e);
                                            }
                                        }
                                    }
                                }

                                if (data_mode === 'FULL') {
                                    for (var k in obj_dashboard_summary['All'].Summary['DropoffList']) {
                                        var crn = k.split('_')[0];
                                        var udid = k.split('_')[1];
                                        if (arr_non_dropoff.indexOf(crn) > -1) {
                                            delete obj_dashboard_summary['All'].Summary['DropoffList'][k];
                                        }
                                    }
                                }
                                obj_dashboard_summary['All'].Summary['Dropoff'].total = obj_dashboard_summary['All'].Summary['Proposal'].total - (obj_dashboard_summary['All'].Summary['Sale'].total + obj_dashboard_summary['All'].Summary['Fail'].total + obj_dashboard_summary['All'].Summary['Paypass'].total);
                                if (is_db_cache) {
                                    var reportModel = require('../models/report');
                                    var reportObj = {};
                                    reportObj['Cache_Key'] = db_cache_key;
                                    for (let k in obj_dashboard_summary) {
                                        reportObj[k] = obj_dashboard_summary[k];
                                    }
                                    reportObj['Report_Date'] = req.query['datefrom'];
                                    reportObj['Channel'] = (channel == "") ? 'ALL' : channel;
                                    reportObj['Created_On'] = new Date();
                                    console.error('Dbg', 'ReportSave', reportObj);
                                    var reportModelObj = new reportModel(reportObj);
                                    reportModelObj.save(function (err2, dbReport) {
                                        if (err2) {
                                            console.error('Exception', 'ReportSave', err2);
                                        }
                                    });
                                }
                                if (cache_key) {
                                    fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_dashboard_summary), function (err) {
                                        if (err) {
                                            return console.error(err);
                                        }
                                    });
                                }
                                var obj_cache_content = obj_dashboard_summary;
                                res.json(obj_cache_content);
                            }
                        });
                    }
                }
            });
        }
    } catch (Ex) {
        console.error('Exception', 'daily_real', Ex.stack);
        res.send(Ex.stack);
    }
});
router.get('/daily_real_direct', LoadSession, function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        var arr_product = ['All', 'Car', 'CV', 'TW', 'Health', 'HospiCash', 'CoronaCare', 'GroupHealth', 'Travel', 'Term', 'CyberSecurity'];
        let x;
        for (x of arr_product) {
            obj_dashboard_summary[x] = {
                'Summary': {},
                'SummaryGroup': {}
            };
        }
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_real = moment().utcOffset("+05:30");
        var yesterday = moment(today).add(-1, 'days');
        var arr_already_closed = ['ALREADY_CLOSED'];
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_sale_manual = ['MANUAL_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_paypass_manual = ['MANUAL_PG'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'ADDON_QUOTE_APPLY', 'PROPOSAL_SAVE_AGENT', 'BUY_NOW_AGENT', 'INSPECTION_REJECTED'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'PROPOSAL_EXCEPTION', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'INSPECTION_SCHEDULED', 'INSPECTION_APPROVED'];
        var today = moment().utcOffset("+05:30").startOf('Day');
        if (req.query.hasOwnProperty('type') && req.query['type'] === 'daily') {
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        }

        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        let StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
        let EndDate = moment(req.query['dateto']).utcOffset("+05:30").startOf('Day');
        let days_to_report = EndDate.diff(StartDate, 'days');
        days_to_report += 1;
        var cache_key = '';
        cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'];
        var today_str = moment(today).format("YYYY-MM-D");
        var today_min = moment(today_real).format("mm") - 0;
        var today_hr = moment(today_real).format("HH") - 0;
        var cache_itr = Math.floor(today_min / 30) + 1;
        var cache_key_sub = '_' + today_hr + '_' + cache_itr;
        var is_db_cache = false;
        var is_realtime = false;
        if (isCurrentFutureDate(req.query['dateto'])) {
            is_realtime = true;
            if (req.query['dateto'] === req.query['datefrom']) {
                is_realtime = false;
                cache_key += cache_key_sub;
                cache_key += '_on_' + today_str;
            } else {
                is_realtime = false;
                cache_key += '_on_' + today_str;
            }
        } else {
            //if (last3days <= dateFrom && last3days <= dateTo) {
            //  is_realtime = true;
            //}
        }
        var cond_ud = {
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        };
        var data_mode = 'FULL';
        is_realtime = true;
        if (days_to_report > 3) {
            data_mode = 'LIGHT';
            is_realtime = false;
        }
        var db_cache_key = '';
        let channel = '';
        db_cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'];
        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
            is_realtime = true;
            cond_ud['Premium_Request.utm_campaign'] = {'$ne': ''};
            var reportModel = require('../models/report');
            reportModel.findOne({'Cache_Key': db_cache_key}, function (err, dbReport) {
                if (dbReport) {
                    res.json(dbReport._doc);
                } else {
                    if (is_realtime) {
                        cache_key = '';
                    }

                    console.error('DailyDateRange', 'from', dateFrom, 'to', dateTo);
                    if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
                        var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
                        var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
                        var obj_cache_content = JSON.parse(cache_content);
                        obj_cache_content['Stats'] = cache_content_stat;
                        res.json(obj_cache_content);
                    } else {
                        var arr_status = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Renewal', 'Paypass', 'Paypass_Manual', 'Fail', 'Sale_Manual', 'Dropoff', 'Already_Closed', 'Premium', 'Sum_Insured', 'Comm_Premium'];
                        var arr_status_agent = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'Paypass', 'Fail', 'Dropoff', 'Already_Closed'];
                        var arr_src_all = ['total', 'PB-Direct', 'PB-CAMP', 'BOT', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'LA-FOS', 'LA-POSP', 'CC-AUTO-POSP', 'CC-HEALTH-POSP', 'SM-NP-POSP', 'DC-NP-POSP', 'GS-NP-POSP', 'EM-NP-POSP', 'FINPEACE', 'RBS'];
                        for (var k in arr_status) {
                            for (var k1 in arr_product) {
                                obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                                for (var k2 in arr_src_all) {
                                    obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_all[k2]] = 0;
                                }
                            }
                        }
                        for (var k in arr_status_agent) {
                            for (var k1 in arr_product) {
                                obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]] = {};
                                obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]] = {};
                                for (var k2 in arr_src_all) {
                                    obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = 0;
                                    obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = [];
                                }
                            }
                        }
                        var arr_duration = {6: 'LESS THAN 6 HRS', 24: 'BETN 6 TO 24 HRS', 48: 'BETN 1 TO 2 DAYS', 120: 'BETN 2 TO 5 DAYS', 5000: 'MORE THEN 5 DAYS'};
                        var arr_hour_slot = {6: '12AM_TO_6AM', 12: '6AM_TO_12PM', 18: '12PM_TO_6PM', 21: '6PM_TO_9PM', 24: '9PM_TO_12AM'};
                        for (var k in arr_product) {
                            obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Nop'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Premium'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['RM'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Duration'] = {};
                            for (var q in arr_duration) {
                                obj_dashboard_summary[arr_product[k]]['Summary']['Duration'][arr_duration[q]] = 0;
                            }
                            obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'] = {};
                            for (var q in arr_hour_slot) {
                                obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'][arr_hour_slot[q]] = 0;
                            }
                            obj_dashboard_summary[arr_product[k]]['Summary']['Platform'] = {'PolicyBoss.com': 0};
                            if (arr_product[k] == 'Car' || arr_product[k] == 'TW' || arr_product[k] == 'CV') {
                                obj_dashboard_summary[arr_product[k]]['Summary']['Make'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Rto'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Fuel'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Cc'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Sub_Type'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Rollover'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['ZD'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['NCB'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['CPA'] = {};
                            }
                            if (arr_product[k] == 'Health' || arr_product[k] == 'HospiCash') {
                                obj_dashboard_summary[arr_product[k]]['Summary']['SI'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['Member_Count'] = {};
                                obj_dashboard_summary[arr_product[k]]['Summary']['City'] = {};
                            }
                        }
                        var arr_crn_all = [];
                        var arr_non_dropoff = [];
                        var arr_link_non_dropoff = [];
                        obj_dashboard_summary['All'].Summary['DropoffList'] = {};
                        obj_dashboard_summary['All'].Summary['AlreadyClosedList'] = {};
                        obj_dashboard_summary['All'].Summary['LinkDropoffList'] = {};
                        obj_dashboard_summary['All'].Summary['FailList'] = {};
                        obj_dashboard_summary['All'].Summary['SaleList'] = {};
                        obj_dashboard_summary['All'].Summary['PaypassList'] = {};
                        obj_dashboard_summary['All'].Summary['PaypassManualList'] = {};
                        obj_dashboard_summary['All'].Summary['SaleManualList'] = {};
                        obj_dashboard_summary['ERP_CS_SUMMARY'] = {
                            'ALL': {count: 0},
                            'POLICYPENDING': {count: 0, list: []},
                            'PENDING': {count: 0, list: []},
                            'INPROGRESS': {count: 0, list: []},
                            'DUPLICATE': {count: 0, list: []},
                            'VALIDATION': {count: 0, list: []},
                            'TRYAGAIN': {count: 0, list: []},
                            'EXCEPTION': {count: 0, list: []},
                            'DONE': {count: 0, list: []},
                            'POLICYPUSHPENDING': {count: 0, list: []}

                        };
                        obj_dashboard_summary['RENEWAL_SUMMARY'] = {count: 0, list: []};
                        var arr_status_agent_performance = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium'];
                        User_Data.find(cond_ud).select(['User_Data_Id', 'PB_CRN', 'Product_Id', 'Report_Summary', 'Link_Request', 'Premium_Request', 'Proposal_Request', 'Last_Status', 'Status_History', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'ERP_CS_DOC', 'Erp_Qt_Request_Core', 'Proposal_Request_Core', 'Proposal_Id', 'PG_Dropoff_Status']).exec(function (err, dbUsers) {
                            if (!err) {
                                for (var k in dbUsers) {
                                    try {
                                        var user = dbUsers[k]._doc;
                                        if ([1, 2, 3, 4, 10, 12, 17, 18].indexOf(user['Product_Id']) > -1 && user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid')) {

                                        } else {
                                            continue;
                                        }

                                        var rm_uid = 0;
                                        var product = Const_Product[user['Product_Id']];
                                        if (user['Product_Id'] === 2 && user['Premium_Request']['is_hospi'] === 'yes') {
                                            product = 'HospiCash';
                                        }
                                        if (user['Product_Id'] === 2 && user['Premium_Request']['is_ghi'] === 'yes') {
                                            product = 'GroupHealth';
                                        }
                                        //console.log('Product', product);
                                        var client_key_val = 'PB-Direct';
                                        var agent_id = 0;
                                        var fba_id = 0;
                                        var agent_id_pre = '';
                                        var reporting = '';
                                        client_key_val = get_search_source(user);
                                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                            var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                            fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
                                            agent_id = ss_id;
                                            if (ss_id === 5) {
                                                agent_id = fba_id;
                                            }
                                            var agent_name = (user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name']).toString().toUpperCase().toTitleCase();
                                            var rm_name = 'NA';
                                            if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_name')) {
                                                rm_name = (user['Premium_Request']['posp_reporting_agent_name']);
                                                if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_name_core') && user['Premium_Request']['posp_reporting_agent_name_core'] !== '') {
                                                    rm_name = (user['Premium_Request']['posp_reporting_agent_name_core']);
                                                }
                                                rm_name = (rm_name) ? rm_name.toString().toUpperCase().toTitleCase() : 'NA';
                                            }

                                            var rm_uid = 0;
                                            if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid')) {
                                                rm_uid = (user['Premium_Request']['posp_reporting_agent_uid']);
                                                if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid_core'] !== '') {
                                                    rm_uid = (user['Premium_Request']['posp_reporting_agent_uid']);
                                                }
                                                rm_uid = rm_uid.toString();
                                            }

                                            agent_id_pre = client_key_val + '_' + ss_id + '_' + fba_id + '_' + agent_name + '_' + user['Premium_Request']['posp_agent_city'] + '_' + user['Premium_Request']['posp_mobile_no'];
                                            var agent_channel = client_key_val.split('-')[0];
                                            var agent_id_performance = ss_id + '_' + fba_id;
                                            var obj_agent_detail = {
                                                'client_key_val': client_key_val,
                                                'channel': agent_channel,
                                                'source': client_key_val,
                                                'city': user['Premium_Request']['posp_agent_city'],
                                                'ss_id': ss_id,
                                                'fba_id': fba_id,
                                                'agent_name': agent_name,
                                                'agent_mobile': agent_name,
                                                'rm_name': rm_name + ' ,UID-' + rm_uid,
                                                'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                            };
                                            var rm_uid = user['Premium_Request']['posp_reporting_agent_uid'];
                                            if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid'] > 0) {
                                                rm_uid = user['Premium_Request']['posp_reporting_agent_uid_core'];
                                                rm_name = user['Premium_Request']['posp_reporting_agent_name_core'];
                                            }
                                            var obj_rm_detail = {
                                                'client_key_val': client_key_val,
                                                'channel': agent_channel,
                                                'source': client_key_val,
                                                'city': user['Premium_Request']['posp_agent_city'],
                                                'ss_id': ss_id,
                                                'fba_id': fba_id,
                                                'rm_uid': rm_uid,
                                                'agent_name': agent_name,
                                                'agent_mobile': agent_name,
                                                'rm_name': rm_name,
                                                'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                                'rm_email': user['Premium_Request']['posp_reporting_email_id']
                                            };
                                            reporting = user['Premium_Request']['posp_reporting_agent_uid'] + '.' + rm_name + '_' + user['Premium_Request']['posp_reporting_mobile_number'];
                                        }

                                        if (agent_id > 0) {
                                            if (obj_dashboard_summary['Agents'].hasOwnProperty(agent_id_performance) === false) {
                                                obj_dashboard_summary['Agents'][agent_id_performance] = {'Details': obj_agent_detail};
                                                for (var x in arr_product) {
                                                    obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]] = {};
                                                    for (var y in arr_status_agent_performance) {
                                                        obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (rm_uid > 0) {
                                            if (obj_dashboard_summary['RMs'].hasOwnProperty(rm_uid) === false) {
                                                obj_dashboard_summary['RMs'][rm_uid] = {'Details': obj_rm_detail};
                                                for (var x in arr_product) {
                                                    obj_dashboard_summary['RMs'][rm_uid][arr_product[x]] = {};
                                                    for (var y in arr_status_agent_performance) {
                                                        obj_dashboard_summary['RMs'][rm_uid][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                                    }
                                                }
                                            }
                                        }


                                        obj_dashboard_summary['All'].Agent_List.Total[client_key_val].push(agent_id_pre);
                                        obj_dashboard_summary['All'].Agent_List.Total.total.push(agent_id_pre);
                                        obj_dashboard_summary['All'].Summary.Total.total++;
                                        obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                                        Last_Status = 'Search';
                                        if (user.hasOwnProperty('PG_Dropoff_Status') && user['PG_Dropoff_Status'] !== null && arr_sale.indexOf(user['Last_Status']) === -1) {
                                            Last_Status = user['PG_Dropoff_Status'];
                                        }
                                        if (arr_search.indexOf(user['Last_Status']) > -1) {
                                            Last_Status = 'Search';
                                            if (arr_crn_all.indexOf(user['PB_CRN']) === -1) {
                                                obj_dashboard_summary['All'].Summary['Unique_Search'].total++;
                                                obj_dashboard_summary['All'].Summary['Unique_Search'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Unique_Search'].total++;
                                                obj_dashboard_summary[product].Summary['Unique_Search'][client_key_val]++;
                                                if (agent_id > 0) {
                                                    obj_dashboard_summary['Agents'][agent_id_performance]['All']['Unique_Search']++;
                                                    obj_dashboard_summary['Agents'][agent_id_performance][product]['Unique_Search']++;
                                                }
                                                if (rm_uid > 0) {
                                                    obj_dashboard_summary['RMs'][rm_uid]['All']['Unique_Search']++;
                                                    obj_dashboard_summary['RMs'][rm_uid][product]['Unique_Search']++;
                                                }
                                            }
                                        }
                                        arr_crn_all.push(user['PB_CRN']);
                                        if (arr_link.indexOf(user['Last_Status']) > -1) {
                                            Last_Status = 'Link';
                                            obj_dashboard_summary['All'].Summary['Search'].total++;
                                            obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Search'].total++;
                                            obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                            }
                                        }
                                        if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                            if (data_mode === 'FULL') {
                                                arr_link_non_dropoff.push(user['PB_CRN']);
                                            }
                                            Last_Status = 'Proposal';
                                            obj_dashboard_summary['All'].Summary['Search'].total++;
                                            obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Search'].total++;
                                            obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                            //for agent summary
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                            }


                                            if (user['Product_Id'] == 3 || (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0)) {
                                                obj_dashboard_summary['All'].Summary['Link'].total++;
                                                obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Link'].total++;
                                                obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                                                if (agent_id > 0) {
                                                    obj_dashboard_summary['All'].Agent_List['Link'].total.push(agent_id_pre);
                                                    obj_dashboard_summary['All'].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                    obj_dashboard_summary[product].Agent_List['Link'].total.push(agent_id_pre);
                                                    obj_dashboard_summary[product].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                    obj_dashboard_summary['Agents'][agent_id_performance]['All']['Link']++;
                                                    obj_dashboard_summary['Agents'][agent_id_performance][product]['Link']++;
                                                }
                                                if (rm_uid > 0) {
                                                    obj_dashboard_summary['RMs'][rm_uid]['All']['Link']++;
                                                    obj_dashboard_summary['RMs'][rm_uid][product]['Link']++;
                                                }
                                            }
                                            if (data_mode === 'FULL') {
                                                var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                var obj_dropoff = {
                                                    "CRN": user['PB_CRN'],
                                                    "User_Data_Id": user['User_Data_Id'],
                                                    "Proposal_Id": user['Proposal_Id'],
                                                    "CHANNEL": client_key_val,
                                                    "PRODUCT": product,
                                                    "PREMIUM": (user.hasOwnProperty('Proposal_Request')) ? user['Proposal_Request']['final_premium'] : 0,
                                                    "AGENT": agent_id_pre,
                                                    "REPORTING": reporting,
                                                    "CUSTOMER": (user.hasOwnProperty('Proposal_Request_Core')) ? user['Proposal_Request_Core']["first_name"] + '.' + user['Proposal_Request_Core']["last_name"] : 'NA',
                                                    "STATUS": user['Last_Status'],
                                                    "On": user['Modified_On'].toLocaleString()
                                                };
                                                obj_dashboard_summary['All'].Summary['DropoffList'][k_drop] = obj_dropoff;
                                            }

                                        }
                                        if (arr_already_closed.indexOf(user['Last_Status']) > -1) {
                                            Last_Status = 'Already_Closed';
                                            if (data_mode === 'FULL') {
                                                arr_non_dropoff.push(user['PB_CRN']);
                                            }
                                            var customer = 'NA';
                                            var premium = 'NA';
                                            if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null) {
                                                customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                                premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                            } else {
                                                customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                                            }
                                            if (data_mode === 'FULL') {
                                                var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                var obj_dropoff = {
                                                    "CRN": user['PB_CRN'],
                                                    "User_Data_Id": user['User_Data_Id'],
                                                    "CHANNEL": client_key_val,
                                                    "PRODUCT": product,
                                                    "PREMIUM": premium,
                                                    "AGENT": agent_id_pre,
                                                    "REPORTING": reporting,
                                                    "CUSTOMER": customer,
                                                    "STATUS": user['Last_Status'],
                                                    "On": user['Modified_On'].toLocaleString()
                                                };
                                                obj_dashboard_summary['All'].Summary['AlreadyClosedList'][k_drop] = obj_dropoff;
                                            }
                                        }
                                        if (arr_sale.indexOf(user['Last_Status']) > -1 ||
                                                arr_fail.indexOf(user['Last_Status']) > -1 ||
                                                arr_paypass.indexOf(user['Last_Status']) > -1 ||
                                                arr_paypass_manual.indexOf(user['Last_Status']) > -1 ||
                                                arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                            if (data_mode === 'FULL') {
                                                arr_non_dropoff.push(user['PB_CRN']);
                                            }

                                            if (!(user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null)) {
                                                user['Erp_Qt_Request_Core'] = {};
                                                for (var y in user['Proposal_Request']) {
                                                    user['Erp_Qt_Request_Core']['___' + y + '___'] = user['Proposal_Request'][y];
                                                }
                                            }


                                            obj_dashboard_summary['All'].Summary['Search'].total++;
                                            obj_dashboard_summary['All'].Summary['Search'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Search'].total++;
                                            obj_dashboard_summary[product].Summary['Search'][client_key_val]++;
                                            //for agent summary
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Search'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Search']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Search']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Search']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Search']++;
                                            }

                                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                                obj_dashboard_summary['All'].Summary['Link'].total++;
                                                obj_dashboard_summary['All'].Summary['Link'][client_key_val]++;
                                                obj_dashboard_summary[product].Summary['Link'].total++;
                                                obj_dashboard_summary[product].Summary['Link'][client_key_val]++;
                                            }

                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Link'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Link'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Link'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Link']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Link']++;
                                            }

                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Link']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Link']++;
                                            }

                                            obj_dashboard_summary['All'].Summary['Proposal'].total++;
                                            obj_dashboard_summary['All'].Summary['Proposal'][client_key_val]++;
                                            obj_dashboard_summary[product].Summary['Proposal'].total++;
                                            obj_dashboard_summary[product].Summary['Proposal'][client_key_val]++;
                                            if (agent_id > 0) {
                                                obj_dashboard_summary['All'].Agent_List['Proposal'].total.push(agent_id_pre);
                                                obj_dashboard_summary['All'].Agent_List['Proposal'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Proposal'].total.push(agent_id_pre);
                                                obj_dashboard_summary[product].Agent_List['Proposal'][client_key_val].push(agent_id_pre);
                                                obj_dashboard_summary['Agents'][agent_id_performance]['All']['Proposal']++;
                                                obj_dashboard_summary['Agents'][agent_id_performance][product]['Proposal']++;
                                            }
                                            if (rm_uid > 0) {
                                                obj_dashboard_summary['RMs'][rm_uid]['All']['Proposal']++;
                                                obj_dashboard_summary['RMs'][rm_uid][product]['Proposal']++;
                                            }
                                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                                var platform = 'PolicyBoss.com';
                                                if (user['Premium_Request'].hasOwnProperty('app_version')) {
                                                    platform = user['Premium_Request']['app_version'].toString();
                                                    if (platform === '2.0' && user['Premium_Request'].hasOwnProperty('device_id') === false) {
                                                        platform = 'PolicyBoss.com';
                                                    }
                                                }
                                                var insurer_name = arr_ins[user['Erp_Qt_Request_Core']['___insurer_id___']];
                                                Last_Status = 'Sale';
                                                var transaction_amount = 0;
                                                transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                                transaction_amount = Math.round(transaction_amount);
                                                if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== '') {
                                                    obj_dashboard_summary['All'].Summary['ErpCs'].total++;
                                                    obj_dashboard_summary['All'].Summary['ErpCs'][client_key_val]++;
                                                    obj_dashboard_summary[product].Summary['ErpCs'].total++;
                                                    obj_dashboard_summary[product].Summary['ErpCs'][client_key_val]++;
                                                    //cs summary start
                                                    let ErpStatus = user['ERP_CS'];
                                                    if (user['ERP_CS'].indexOf('CS') === 0) {
                                                        ErpStatus = 'DONE';
                                                    }
                                                    obj_dashboard_summary['ERP_CS_SUMMARY']['ALL']['count']++;
                                                    obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['count']++;
                                                    obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                    if (user['Last_Status'] === 'TRANS_SUCCESS_WO_POLICY') {
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['count']++;
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                    }
                                                    if (ErpStatus === 'DONE' && user.hasOwnProperty('ERP_CS_DOC') && user['ERP_CS_DOC'] === 'PENDING') {
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['count']++;
                                                        obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name);
                                                    }
                                                    //cs summary stop
                                                }
                                                if (user.hasOwnProperty('Proposal_Request_Core') && user['Proposal_Request_Core'].hasOwnProperty('renewal_crn_udid')) {
                                                    obj_dashboard_summary['All'].Summary['Renewal'].total++;
                                                    obj_dashboard_summary['All'].Summary['Renewal'][client_key_val]++;
                                                    obj_dashboard_summary[product].Summary['Renewal'].total++;
                                                    obj_dashboard_summary[product].Summary['Renewal'][client_key_val]++;
                                                    obj_dashboard_summary['RENEWAL_SUMMARY']['count']++;
                                                    obj_dashboard_summary['RENEWAL_SUMMARY']['list'].push(user['User_Data_Id'] + '_' + user['PB_CRN'] + '_' + insurer_name + '_' + product + '_' + client_key_val + '_' + transaction_amount);
                                                    //cs summary stop
                                                }

                                                if (user['Erp_Qt_Request_Core']['___product_id___'] == 2 && user['Erp_Qt_Request_Core'].hasOwnProperty('___topup_applied___') && user['Erp_Qt_Request_Core']['___topup_applied___'] == true)
                                                {
                                                    insurer_name += ' + TopUp';
                                                }
                                                if (transaction_amount > 0) {
                                                    obj_dashboard_summary['All'].Summary['Premium'].total += transaction_amount;
                                                    obj_dashboard_summary['All'].Summary['Premium'][client_key_val] += transaction_amount;
                                                    obj_dashboard_summary[product].Summary['Premium'].total += transaction_amount;
                                                    obj_dashboard_summary[product].Summary['Premium'][client_key_val] += transaction_amount;
                                                    if (obj_dashboard_summary[product]['Summary']['Insurer_Premium'].hasOwnProperty(insurer_name) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] += transaction_amount;
                                                    if (agent_id > 0) {
                                                        obj_dashboard_summary['Agents'][agent_id_performance]['All']['Premium'] += transaction_amount;
                                                        obj_dashboard_summary['Agents'][agent_id_performance][product]['Premium'] += transaction_amount;
                                                    }
                                                    if (rm_uid > 0) {
                                                        obj_dashboard_summary['RMs'][rm_uid]['All']['Premium'] += transaction_amount;
                                                        obj_dashboard_summary['RMs'][rm_uid][product]['Premium'] += transaction_amount;
                                                    }
                                                }


                                                if (obj_dashboard_summary[product]['Summary']['Insurer_Nop'].hasOwnProperty(insurer_name) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name]++;
                                                //for product

                                                var RM_Name = user['Premium_Request']['posp_reporting_agent_name'] + '(Region:' + user['Premium_Request']['posp_agent_city'] + ')';
                                                if (client_key_val == 'PB-SS') {
                                                    RM_Name = 'PB Caller';
                                                }
                                                if (obj_dashboard_summary[product]['Summary']['RM'].hasOwnProperty(RM_Name) === false) {
                                                    obj_dashboard_summary[product]['Summary']['RM'][RM_Name] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['RM'][RM_Name]++;
                                                if (obj_dashboard_summary[product]['Summary']['Platform'].hasOwnProperty(platform) === false) {
                                                    obj_dashboard_summary[product]['Summary']['Platform'][platform] = 0;
                                                }
                                                obj_dashboard_summary[product]['Summary']['Platform'][platform]++;
                                                if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {

                                                    if (user['Erp_Qt_Request_Core']['___vehicle_insurance_type___'] == 'renew') {

                                                        if (obj_dashboard_summary[product]['Summary']['Rollover'].hasOwnProperty(arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]) === false) {
                                                            obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]]++;
                                                        //for ncb
                                                        var NCB = '';
                                                        if (user['Erp_Qt_Request_Core']['___is_claim_exists___'] == 'yes') {
                                                            NCB = 'WITH_CLAIM';
                                                        } else {
                                                            NCB = 'NCB_' + user['Erp_Qt_Request_Core']['___vehicle_ncb_current___'];
                                                        }

                                                        if (obj_dashboard_summary[product]['Summary']['NCB'].hasOwnProperty(NCB) === false) {
                                                            obj_dashboard_summary[product]['Summary']['NCB'][NCB] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['NCB'][NCB]++;
                                                    }
                                                    //for zd
                                                    var ZD = '';
                                                    if (user['Erp_Qt_Request_Core']['___addon_zero_dep_cover___'] == 'yes') {
                                                        ZD = 'WITH_ZD';
                                                    } else {
                                                        ZD = 'WITHOUT_ZD';
                                                    }

                                                    if (obj_dashboard_summary[product]['Summary']['ZD'].hasOwnProperty(ZD) === false) {
                                                        obj_dashboard_summary[product]['Summary']['ZD'][ZD] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['ZD'][ZD]++;
                                                    //for zd
                                                    var CPA = '';
                                                    if (user['Erp_Qt_Request_Core']['___is_pa_od___'] === 'yes' && user['Erp_Qt_Request_Core']['___premium_breakup_tp_cover_owner_driver_pa___'] > 0) {
                                                        CPA = 'WITH_CPA';
                                                    } else {
                                                        CPA = 'WITHOUT_CPA';
                                                    }

                                                    if (obj_dashboard_summary[product]['Summary']['CPA'].hasOwnProperty(CPA) === false) {
                                                        obj_dashboard_summary[product]['Summary']['CPA'][CPA] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['CPA'][CPA]++;
                                                    //for product
                                                    var Make = user['Erp_Qt_Request_Core']['___pb_make_name___'];
                                                    if (obj_dashboard_summary[product]['Summary']['Make'].hasOwnProperty(Make) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Make'][Make] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Make'][Make]++;
                                                    var Rto = user['Erp_Qt_Request_Core']['___registration_no_1___'];
                                                    if (obj_dashboard_summary[product]['Summary']['Rto'].hasOwnProperty(Rto) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Rto'][Rto] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Rto'][Rto]++;
                                                    if (obj_dashboard_summary[product]['Summary']['Fuel'].hasOwnProperty(user['Erp_Qt_Request_Core']['___pb_fuel_name___']) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']]++;
                                                    if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']]++;
                                                    var Policy_Sub_Type = (user['Erp_Qt_Request_Core'].hasOwnProperty('___vehicle_insurance_subtype___')) ? user['Erp_Qt_Request_Core']['___vehicle_insurance_subtype___'] : '1CH_0TP';
                                                    Policy_Sub_Type = const_policy_subtype[Policy_Sub_Type];
                                                    if (obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'].hasOwnProperty(Policy_Sub_Type) === false) {
                                                        obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type] = 0;
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type]++;
                                                }
                                                var sum_insured = 0;
                                                if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {
                                                    sum_insured = (user['Erp_Qt_Request_Core']['___vehicle_expected_idv___'] - 0);
                                                }
                                                if (user['Product_Id'] == 2) {
                                                    sum_insured = (user['Erp_Qt_Request_Core']['___health_insurance_si___'] - 0);
                                                }
                                                if (user['Product_Id'] == 3) {
                                                    sum_insured = (user['Erp_Qt_Request_Core']['___sum_insured___'] - 0);
                                                }
                                                sum_insured = Math.round(sum_insured);
                                                if (sum_insured > 0) {
                                                    obj_dashboard_summary['All'].Summary['Sum_Insured'].total += sum_insured;
                                                    obj_dashboard_summary['All'].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                                    obj_dashboard_summary[product].Summary['Sum_Insured'].total += sum_insured;
                                                    obj_dashboard_summary[product].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                                    if (user['Product_Id'] == 2) {
                                                        if (obj_dashboard_summary[product]['Summary']['SI'].hasOwnProperty(sum_insured) === false) {
                                                            obj_dashboard_summary[product]['Summary']['SI'][sum_insured] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['SI'][sum_insured]++;
                                                        if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___health_insurance_type___']) === false) {
                                                            obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']]++;
                                                        var Member_Count = user['Erp_Qt_Request_Core']['___member_count___'] - 0;
                                                        if (obj_dashboard_summary[product]['Summary']['Member_Count'].hasOwnProperty(Member_Count) === false) {
                                                            obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count]++;
                                                        var City = user['Erp_Qt_Request_Core']['___city_name___'] + '-' + user['Erp_Qt_Request_Core']['___state_name___'];
                                                        if (obj_dashboard_summary[product]['Summary']['City'].hasOwnProperty(City) === false) {
                                                            obj_dashboard_summary[product]['Summary']['City'][City] = 0;
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['City'][City]++;
                                                    }


                                                }
                                                if (user['Status_History']) {
                                                    //PROPOSAL_LINK_SENT
                                                    var sale_complete_on = null, link_sent_on = null, payment_preferred_time = null;
                                                    for (var q in user['Status_History']) {
                                                        if (agent_id > 0 && user['Status_History'][q]['Status'] == 'PROPOSAL_LINK_SENT' && link_sent_on === null) {
                                                            link_sent_on = user['Status_History'][q]['StatusOn'];
                                                        }
                                                        if (arr_sale.indexOf(user['Status_History'][q]['Status']) > -1 && sale_complete_on === null) {
                                                            sale_complete_on = user['Status_History'][q]['StatusOn'];
                                                        }
                                                    }
                                                    var EndDate = moment(sale_complete_on);
                                                    var payment_hour = moment(sale_complete_on).utcOffset("+05:30").hour() - 0;
                                                    if (agent_id > 0) {
                                                        var StartDate = moment(link_sent_on);
                                                        var duration_tmp = moment.duration(EndDate.diff(StartDate));
                                                        var hours = duration_tmp.asHours() - 0;
                                                        var Duration = null;
                                                        for (var q in arr_duration) {
                                                            if (hours < q) {
                                                                Duration = arr_duration[q];
                                                                break;
                                                            }
                                                        }
                                                        if (Duration === null) {
                                                            Duration = 'MORE THEN 5 DAYS';
                                                        }
                                                        obj_dashboard_summary[product]['Summary']['Duration'][Duration]++;
                                                    }
                                                    var Payment_Hour_Slot = null;
                                                    for (var q in arr_hour_slot) {
                                                        if (payment_hour < q) {
                                                            Payment_Hour_Slot = arr_hour_slot[q];
                                                            break;
                                                        }
                                                    }
                                                    obj_dashboard_summary[product]['Summary']['Payment_Preferred_Time'][Payment_Hour_Slot]++;
                                                }


                                                if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 2 || user['Product_Id'] == 12) {
                                                    var Comm_Premium = 0;
                                                    if (user['Product_Id'] == 2) {
                                                        var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                                    } else {
                                                        if (user['Premium_Request'].hasOwnProperty('vehicle_insurance_subtype') && user['Premium_Request']['vehicle_insurance_subtype'].indexOf('0CH') > -1) {
                                                            var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                                        } else {
                                                            var Comm_Premium = Math.round((user['Erp_Qt_Request_Core']['___premium_breakup_od_final_premium___'] - 0) + (user['Erp_Qt_Request_Core']['___premium_breakup_addon_final_premium___'] - 0));
                                                        }
                                                    }

                                                    if (Comm_Premium > 0) {
                                                        obj_dashboard_summary['All'].Summary['Comm_Premium'].total += Comm_Premium;
                                                        obj_dashboard_summary['All'].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                                        obj_dashboard_summary[product].Summary['Comm_Premium'].total += Comm_Premium;
                                                        obj_dashboard_summary[product].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                                    }

                                                }
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": (user.hasOwnProperty('Proposal_Request')) ? user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"] : 'NA',
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['SaleList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Fail';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['FailList'][k_drop] = obj_dropoff;
                                                }


                                            }
                                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Paypass';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['PaypassList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                            if (arr_paypass_manual.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Paypass_Manual';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['PaypassManualList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                            if (arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                                Last_Status = 'Sale_Manual';
                                                if (data_mode === 'FULL') {
                                                    var k_drop = user['PB_CRN'] + '_' + user['User_Data_Id'];
                                                    var obj_dropoff = {
                                                        "CRN": user['PB_CRN'],
                                                        "User_Data_Id": user['User_Data_Id'],
                                                        "CHANNEL": client_key_val,
                                                        "PRODUCT": product,
                                                        "PREMIUM": user['Erp_Qt_Request_Core']["___final_premium___"],
                                                        "AGENT": agent_id_pre,
                                                        "REPORTING": reporting,
                                                        "CUSTOMER": user['Proposal_Request']["first_name"] + '.' + user['Proposal_Request']["last_name"],
                                                        "STATUS": user['Last_Status'],
                                                        "On": user['Modified_On'].toLocaleString()
                                                    };
                                                    obj_dashboard_summary['All'].Summary['SaleManualList'][k_drop] = obj_dropoff;
                                                }
                                            }
                                        }
                                        if (agent_id > 0) {
                                            obj_dashboard_summary['All'].Agent_List[Last_Status].total.push(agent_id_pre);
                                            obj_dashboard_summary['All'].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                            obj_dashboard_summary[product].Agent_List[Last_Status].total.push(agent_id_pre);
                                            obj_dashboard_summary[product].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                            obj_dashboard_summary['Agents'][agent_id_performance]['All'][Last_Status]++;
                                            obj_dashboard_summary['Agents'][agent_id_performance][product][Last_Status]++;
                                        }
                                        if (rm_uid > 0) {
                                            obj_dashboard_summary['RMs'][rm_uid]['All'][Last_Status]++;
                                            obj_dashboard_summary['RMs'][rm_uid][product][Last_Status]++;
                                        }

                                    } catch (e) {
                                        console.error('Log', 'Daily', 'reportexception', user['PB_CRN'], e);
                                    }
                                    obj_dashboard_summary['All'].Summary[Last_Status].total++;
                                    obj_dashboard_summary['All'].Summary[Last_Status][client_key_val]++;
                                    obj_dashboard_summary[product].Summary[Last_Status].total++;
                                    obj_dashboard_summary[product].Summary[Last_Status][client_key_val]++;
                                }

                                for (var k in arr_status_agent) {
                                    for (var k1 in arr_product) {
                                        for (var k2 in arr_src_all) {
                                            //agent loop 
                                            try {
                                                var arr_agent_list = obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]];
                                                if (typeof arr_agent_list !== 'undefined') {
                                                    var arr_agent_final = [];
                                                    var obj_agent_final = {};
                                                    for (var k3 in arr_agent_list) {
                                                        if (obj_agent_final.hasOwnProperty(arr_agent_list[k3]) === false) {
                                                            obj_agent_final[arr_agent_list[k3]] = 0;
                                                        }
                                                        obj_agent_final[arr_agent_list[k3]]++;
                                                    }
                                                    obj_agent_final = sortObject(obj_agent_final);
                                                    for (var k4 in obj_agent_final) {
                                                        arr_agent_final.push(k4 + '_' + obj_agent_final[k4]);
                                                    }
                                                    obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = arr_agent_final;
                                                    obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]].length;
                                                }
                                            } catch (e) {
                                                console.error('AgentException', e);
                                            }
                                        }
                                    }
                                }

                                if (data_mode === 'FULL') {
                                    for (var k in obj_dashboard_summary['All'].Summary['DropoffList']) {
                                        var crn = k.split('_')[0];
                                        var udid = k.split('_')[1];
                                        if (arr_non_dropoff.indexOf(crn) > -1) {
                                            delete obj_dashboard_summary['All'].Summary['DropoffList'][k];
                                        }
                                    }
                                }
                                obj_dashboard_summary['All'].Summary['Dropoff'].total = obj_dashboard_summary['All'].Summary['Proposal'].total - (obj_dashboard_summary['All'].Summary['Sale'].total + obj_dashboard_summary['All'].Summary['Fail'].total + obj_dashboard_summary['All'].Summary['Paypass'].total);
                                if (is_db_cache) {
                                    var reportModel = require('../models/report');
                                    var reportObj = {};
                                    reportObj['Cache_Key'] = db_cache_key;
                                    for (let k in obj_dashboard_summary) {
                                        reportObj[k] = obj_dashboard_summary[k];
                                    }
                                    reportObj['Report_Date'] = req.query['datefrom'];
                                    reportObj['Channel'] = (channel == "") ? 'ALL' : channel;
                                    reportObj['Created_On'] = new Date();
                                    console.error('Dbg', 'ReportSave', reportObj);
                                    var reportModelObj = new reportModel(reportObj);
                                    reportModelObj.save(function (err2, dbReport) {
                                        if (err2) {
                                            console.error('Exception', 'ReportSave', err2);
                                        }
                                    });
                                }
                                if (cache_key) {
                                    fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_dashboard_summary), function (err) {
                                        if (err) {
                                            return console.error(err);
                                        }
                                    });
                                }
                                var obj_cache_content = obj_dashboard_summary;
                                res.json(obj_cache_content);
                            }
                        });
                    }
                }
            });
        }

    } catch (Ex) {
        console.error('Exception', 'daily_real_direct', Ex);
    }
});
router.get('/daily_2', LoadSession, function (req, res, next) {
    //console.log('Start', this.constructor.name, 'daily_2');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        //console.log('report_type', report_type);
        var obj_dashboard_summary = {
            'Agents': {},
            'RMs': {},
            'All': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Car': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'CV': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'TW': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Health': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Travel': {
                'Summary': {},
                'SummaryGroup': {},
                'Agent': {},
                'Agent_List': {}
            },
            'Term': {
                'Summary': {},
                'SummaryGroup': {},
                'SummaryGroupChannel': {},
                'Agent': {},
                'Agent_List': {}
            }
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        var tomorrow = moment(today).add(1, 'days');
        var yesterday = moment(today).add(-1, 'days');
        var last3days = moment(today).add(-3, 'days');
        var week = moment(today).add(-7, 'days');
        var month = moment(today).add(-30, 'days');
        var arr_already_closed = ['ALREADY_CLOSED'];
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_sale_manual = ['TRANS_SUCCESS_MANUAL'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_paypass_manual = ['TRANS_PAYPASS_MANUAL'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'ADDON_QUOTE_APPLY', 'PROPOSAL_SAVE_AGENT', 'BUY_NOW_AGENT', 'INSPECTION_REJECTED'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'PROPOSAL_EXCEPTION', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'INSPECTION_SCHEDULED', 'INSPECTION_APPROVED'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        var objSummaryGroup = {
            'PB-DIRECT': ['PB-Direct', 'BOT', 'PB-SS'],
            'FM-POS': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'FINPEACE', 'RBS']
        };
        var cache_key = '';
        cache_key = 'live_realtime_' + req.query['datefrom'] + '_' + req.query['dateto'];
        var today_str = moment(today).format("YYYY-MM-D");
        var is_realtime = false;
        if (isCurrentFutureDate(req.query['dateto'])) {
            is_realtime = true;
            if (req.query['dateto'] === req.query['datefrom']) {

            } else {
                is_realtime = false;
                cache_key += '_on_' + today_str;
            }
        } else {
            if (last3days <= dateFrom && last3days <= dateTo) {
                is_realtime = true;
            }
        }
        var cond_ud = {
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        };
        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
            is_realtime = true;
            if (req.query['page_action'] === 'ch_all_daily') {
                cond_ud['Premium_Request.channel'] = req.obj_session.user.role_detail.channel;
            }
            if (req.query['page_action'] === 'my_daily') {
                var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                var arr_ssid = combine_arr.split(',').filter(Number).map(Number);
                cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
            }
            if (req.query['page_action'] === 'all_posp_daily') {
                cond_ud['Premium_Request.subchannel'] = 'POSP';
            }
            if (req.query['page_action'] === 'all_dsa_daily') {
                cond_ud['Premium_Request.subchannel'] = 'FOS';
            }
            if (req.query['page_action'] === 'all_cse_daily') {
                cond_ud['Premium_Request.subchannel'] = 'CC';
            }
            if (req.query['page_action'] === 'ch_posp_daily') {
                var channel = req.obj_session.user.role_detail.channel;
                cond_ud['Premium_Request.channel'] = channel;
            }
            if (req.query['page_action'] === 'ch_dsa_daily') {
                if (req.query['uid'] == '100151') {
                    cond_ud['Premium_Request.posp_category'] = 'FOS';
                }
                if (req.query['uid'] == '112666') {
                    cond_ud['Premium_Request.posp_category'] = 'GS-FOS';
                }
                if (req.query['uid'] == '113907') {
                    cond_ud['Premium_Request.posp_category'] = 'EM-FOS';
                }
            }
            if (req.query['page_action'] === 'posp_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: req.obj_session.users_assigned.Team.POSP};
            }
            if (req.query['page_action'] === 'dsa_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: req.obj_session.users_assigned.Team.DSA};
            }
            if (req.query['page_action'] === 'cse_daily' || req.query['page_action'] === 'ch_cse_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: req.obj_session.users_assigned.Team.CSE};
            }
        }
        if (is_realtime) {
            cache_key = '';
        }
        console.error('DailyDateRange', 'from', dateFrom, 'to', dateTo);
        if (cache_key && fs.existsSync(appRoot + "/tmp/cachereport/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/cachereport/" + cache_key + ".log").toString();
            var cache_content_stat = fs.statSync(appRoot + "/tmp/cachereport/" + cache_key + ".log");
            var obj_cache_content = JSON.parse(cache_content);
            for (var k in obj_cache_content) {
                for (var k1 in obj_cache_content[k]['Summary']) {
                    if (obj_cache_content[k]['SummaryGroup'].hasOwnProperty(k1) === false) {
                        obj_cache_content[k]['SummaryGroup'][k1] = {
                            'total': 0,
                            'PB-DIRECT': 0,
                            'FM-POS': 0
                        };
                    }
                    obj_cache_content[k]['SummaryGroup'][k1]['total'] = obj_cache_content[k]['Summary'][k1]['total'];
                    for (var k2 in obj_cache_content[k]['Summary'][k1]) {
                        var ind_val = (obj_cache_content[k]['Summary'][k1][k2] - 0);
                        if (objSummaryGroup['PB-DIRECT'].indexOf(k2) > -1) {
                            obj_cache_content[k]['SummaryGroup'][k1]['PB-DIRECT'] += ind_val;
                        }
                        if (objSummaryGroup['FM-POS'].indexOf(k2) > -1) {
                            obj_cache_content[k]['SummaryGroup'][k1]['FM-POS'] += ind_val;
                        }
                    }
                }
            }
            if (req.query.hasOwnProperty('dls')) {
                for (var k in obj_cache_content) {
                    for (var k1 in obj_cache_content[k]['Summary']) {
                        for (var k2 in obj_cache_content[k]['Summary'][k1]) {
                            var ind_val = (obj_cache_content[k]['Summary'][k1][k2] - 0) * 10;
                            obj_cache_content[k]['Summary'][k1][k2] = ind_val;
                        }
                    }
                }
            }
            obj_cache_content['Stats'] = cache_content_stat;
            res.json(obj_cache_content);
        } else {
            var arr_status = ['Uncertain', 'Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Renewal', 'Paypass', 'Paypass_Manual', 'Fail', 'Sale_Manual', 'Dropoff', 'Premium', 'Sum_Insured', 'Comm_Premium', 'Already_Closed'];
            var arr_status_agent = ['Total', 'Search', 'Unique_Search', 'Unique_Search_Mo', 'Link', 'Proposal', 'Sale', 'Paypass', 'Fail', 'Dropoff'];
            var arr_src_all = ['total', 'PB-Direct', 'PB-CAMP', 'BOT', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-POSP', 'GS-FOS', 'EM-POSP', 'EM-FOS', 'FINPEACE', 'RBS'];
            var arr_product = ['All', 'Car', 'TW', 'Health', 'Travel', 'Term', 'CV'];
            for (var k in arr_status) {
                for (var k1 in arr_product) {
                    obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                    for (var k2 in arr_src_all) {
                        obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_all[k2]] = 0;
                    }
                }
            }
            for (var k in arr_status_agent) {
                for (var k1 in arr_product) {
                    obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]] = {};
                    obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]] = {};
                    for (var k2 in arr_src_all) {
                        obj_dashboard_summary[arr_product[k1]]['Agent'][arr_status_agent[k]][arr_src_all[k2]] = 0;
                        obj_dashboard_summary[arr_product[k1]]['Agent_List'][arr_status_agent[k]][arr_src_all[k2]] = [];
                    }
                }
            }
            var arr_duration = {6: 'LESS THAN 6 HRS', 24: 'BETN 6 TO 24 HRS', 48: 'BETN 1 TO 2 DAYS', 120: 'BETN 2 TO 5 DAYS', 5000: 'MORE THEN 5 DAYS'};
            var arr_hour_slot = {6: '12AM_TO_6AM', 12: '6AM_TO_12PM', 18: '12PM_TO_6PM', 21: '6PM_TO_9PM', 24: '9PM_TO_12AM'};
            for (var k in arr_product) {
                obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Nop'] = {};
                obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Premium'] = {};
                obj_dashboard_summary[arr_product[k]]['Summary']['RM'] = {};
                obj_dashboard_summary[arr_product[k]]['Summary']['Duration'] = {};
                for (var q in arr_duration) {
                    obj_dashboard_summary[arr_product[k]]['Summary']['Duration'][arr_duration[q]] = 0;
                }
                obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'] = {};
                for (var q in arr_hour_slot) {
                    obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'][arr_hour_slot[q]] = 0;
                }
                obj_dashboard_summary[arr_product[k]]['Summary']['Platform'] = {'PolicyBoss.com': 0};
                if (arr_product[k] == 'Car' || arr_product[k] == 'TW') {
                    obj_dashboard_summary[arr_product[k]]['Summary']['Make'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Rto'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Fuel'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Cc'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Sub_Type'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Rollover'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['ZD'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['NCB'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['CPA'] = {};
                }
                if (arr_product[k] == 'Health') {
                    obj_dashboard_summary[arr_product[k]]['Summary']['SI'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['Member_Count'] = {};
                    obj_dashboard_summary[arr_product[k]]['Summary']['City'] = {};
                }
            }
            var arr_crn_all = [];
            var arr_non_dropoff = [];
            var arr_link_non_dropoff = [];
            obj_dashboard_summary['All'].Summary['DropoffList'] = {};
            obj_dashboard_summary['All'].Summary['LinkDropoffList'] = {};
            obj_dashboard_summary['All'].Summary['FailList'] = {};
            obj_dashboard_summary['All'].Summary['SaleList'] = {};
            obj_dashboard_summary['All'].Summary['PaypassList'] = {};
            obj_dashboard_summary['All'].Summary['PaypassManualList'] = {};
            obj_dashboard_summary['All'].Summary['SaleManualList'] = {};
            var arr_status_agent_performance = ['Search', 'Unique_Search', 'Link', 'Proposal', 'Sale', 'Premium'];
            obj_dashboard_summary['All'].Summary['UncertainList'] = [];
            User_Data.find(cond_ud).select(['User_Data_Id', 'PB_CRN', 'Product_Id', 'Report_Summary', 'Link_Request', 'Premium_Request', 'Proposal_Request', 'Last_Status', 'Status_History', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
                if (!err) {
                    for (var k in dbUsers) {
                        try {
                            var user = dbUsers[k]._doc;
                            var product = Const_Product[user['Product_Id']];
                            //console.log('Product', product);
                            var Report_Summary = null;
                            var client_key_val = 'PB-Direct';
                            var agent_id = 0;
                            var fba_id = 0;
                            var agent_id_pre = '';
                            var reporting = '';
                            var posp_sources = 0;
                            client_key_val = get_search_source(user);
                            var rm_uid = 0;
                            if ([1, 2, 3, 4, 10, 12].indexOf(user['Product_Id']) > -1) {
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    posp_sources = user['Premium_Request']['posp_sources'];
                                    var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                    fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
                                    agent_id = ss_id;
                                    if (ss_id === 5) {
                                        agent_id = fba_id;
                                    }
                                    var agent_name = (user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name']).toString().toUpperCase().toTitleCase();
                                    var rm_name = (user['Premium_Request']['posp_reporting_agent_name']).toString().toUpperCase().toTitleCase();
                                    agent_id_pre = client_key_val + '_' + ss_id + '_' + fba_id + '_' + agent_name + '_' + user['Premium_Request']['posp_agent_city'] + '_' + user['Premium_Request']['posp_mobile_no'];
                                    var agent_channel = client_key_val.split('-')[0];
                                    var agent_id_performance = ss_id + '_' + fba_id;
                                    /*for(var z in user['Premium_Request']){
                                     if(z.indexOf('posp_') === 0){
                                     //obj_agent_detail[z] = user['Premium_Request'][z];
                                     }
                                     }*/
                                    var obj_agent_detail = {
                                        'client_key_val': client_key_val,
                                        'channel': agent_channel,
                                        'source': client_key_val,
                                        'city': user['Premium_Request']['posp_agent_city'],
                                        'ss_id': ss_id,
                                        'fba_id': fba_id,
                                        'agent_name': agent_name,
                                        'agent_mobile': agent_name,
                                        'rm_name': rm_name,
                                        'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                    };
                                    var rm_uid = user['Premium_Request']['posp_reporting_agent_uid'];
                                    if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid'] > 0) {
                                        rm_uid = user['Premium_Request']['posp_reporting_agent_uid_core'];
                                        rm_name = user['Premium_Request']['posp_reporting_agent_name_core'];
                                    }
                                    var obj_rm_detail = {
                                        'client_key_val': client_key_val,
                                        'channel': agent_channel,
                                        'source': client_key_val,
                                        'city': user['Premium_Request']['posp_agent_city'],
                                        'ss_id': ss_id,
                                        'fba_id': fba_id,
                                        'rm_uid': rm_uid,
                                        'agent_name': agent_name,
                                        'agent_mobile': agent_name,
                                        'rm_name': rm_name,
                                        'rm_mobile': user['Premium_Request']['posp_reporting_mobile_number'],
                                        'rm_email': user['Premium_Request']['posp_reporting_email_id']
                                    }
                                    reporting = user['Premium_Request']['posp_reporting_agent_uid'] + '.' + rm_name + '_' + user['Premium_Request']['posp_reporting_mobile_number'];
                                }
                            }
                            if (agent_id > 0) {
                                if (obj_dashboard_summary['Agents'].hasOwnProperty(agent_id_performance) === false) {
                                    obj_dashboard_summary['Agents'][agent_id_performance] = {'Details': obj_agent_detail};
                                    for (var x in arr_product) {
                                        obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]] = {};
                                        for (var y in arr_status_agent_performance) {
                                            obj_dashboard_summary['Agents'][agent_id_performance][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                        }
                                    }
                                }
                            }
                            if (rm_uid > 0) {
                                if (obj_dashboard_summary['RMs'].hasOwnProperty(rm_uid) === false) {
                                    obj_dashboard_summary['RMs'][rm_uid] = {'Details': obj_rm_detail};
                                    for (var x in arr_product) {
                                        obj_dashboard_summary['RMs'][rm_uid][arr_product[x]] = {};
                                        for (var y in arr_status_agent_performance) {
                                            obj_dashboard_summary['RMs'][rm_uid][arr_product[x]][arr_status_agent_performance[y]] = 0;
                                        }
                                    }
                                }
                            }
                            obj_dashboard_summary['All'].Agent_List.Total[client_key_val].push(agent_id_pre);
                            obj_dashboard_summary['All'].Agent_List.Total.total.push(agent_id_pre);
                            obj_dashboard_summary['All'].Summary.Total.total++;
                            obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                            Last_Status = 'Uncertain';
                            if (arr_search.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Search';
                            }
                            arr_crn_all.push(user['PB_CRN']);
                            if (arr_link.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Link';
                            }
                            if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                if (cache_key === '') {
                                    arr_link_non_dropoff.push(user['PB_CRN']);
                                }
                                Last_Status = 'Proposal';
                            }

                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Sale';
                            }

                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Fail';
                            }

                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Paypass';
                            }

                            if (arr_paypass_manual.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Paypass_Manual';
                            }

                            if (arr_sale_manual.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Sale_Manual';
                            }
                            if (arr_already_closed.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Already_Closed';
                            }

                            if (Last_Status === 'Uncertain') {
                                obj_dashboard_summary['All'].Summary['Uncertain'].total++;
                                if (obj_dashboard_summary['All'].Summary['UncertainList'].indexOf(user['Last_Status']) === -1) {
                                    obj_dashboard_summary['All'].Summary['UncertainList'].push(user['Last_Status']);
                                }
                            }

                            obj_dashboard_summary['All'].Summary[Last_Status].total++;
                            obj_dashboard_summary['All'].Summary[Last_Status][client_key_val]++;
                            obj_dashboard_summary[product].Summary[Last_Status].total++;
                            obj_dashboard_summary[product].Summary[Last_Status][client_key_val]++;
                            if (agent_id > 0) {
                                obj_dashboard_summary['All'].Agent_List[Last_Status].total.push(agent_id_pre);
                                obj_dashboard_summary['All'].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                obj_dashboard_summary[product].Agent_List[Last_Status].total.push(agent_id_pre);
                                obj_dashboard_summary[product].Agent_List[Last_Status][client_key_val].push(agent_id_pre);
                                obj_dashboard_summary['Agents'][agent_id_performance]['All'][Last_Status]++;
                                obj_dashboard_summary['Agents'][agent_id_performance][product][Last_Status]++;
                            }
                            if (rm_uid > 0) {
                                obj_dashboard_summary['RMs'][rm_uid]['All'][Last_Status]++;
                                obj_dashboard_summary['RMs'][rm_uid][product][Last_Status]++;
                            }

                        } catch (e) {
                            console.error('Log', 'Daily', 'reportexception', user['PB_CRN'], e);
                        }
                    }

                    if (req.hasOwnProperty('debug')) {
                        res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                    } else {
                        if (cache_key) {
                            fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_dashboard_summary), function (err) {
                                if (err) {
                                    return console.error(err);
                                }
                            });
                        }
                        var obj_cache_content = obj_dashboard_summary;
                        res.json(obj_cache_content);
                    }
                }
            });
        }
    } catch (Ex) {
        console.error('Exception', 'daily_2', Ex);
    }
});
router.get('/pospsummary', LoadSession, function (req, res, next) {
    //console.log('Start', this.constructor.name, 'pospsummary');
    try {
        var objStatus = {
            99: 'SignUp',
            100: 'Payment Received',
            1: 'Lead Created',
            2: 'Co-ordinated',
            3: 'Registered',
            4: 'Document Uploaded',
            5: 'Document Verified',
            6: 'Document declined',
            7: 'Training Schedule for GI',
            8: 'Training Pass for GI',
            9: 'Training Fail for GI',
            10: 'Training Schedule for LI',
            11: 'Training Pass for LI',
            12: 'Training Fail for LI',
            13: 'Certified Agent for GI',
            14: 'Certified Agent for LI',
            15: 'Training Schedule for Both',
            16: 'Training Pass for Both',
            17: 'Training Fail for Both',
            18: 'Certified Agent for Both'
        };
        var objStatusSummary = {
            'SignUp/PaymentReceived': [99, 100],
            'Lead/Cordinated/Registered': [1, 2, 3],
            'DocumentUpload/Verified': [4, 5],
            'Doc_Declined_Before_Certification': [6],
            'TrainingSchedule': [7, 10, 15],
            'TrainingPass': [8, 11, 16],
            'TrainingFail': [9, 12, 17],
            'Certified': [13, 14, 18],
            'Doc_Declined_After_Certification': [6]
        };
        var Posp = require('../models/posp');
        var objSummary = {
            'Enrollment_Aging': {},
            'Enrollment': {},
            'AgentCity': {
                'All': {},
                'Certified': {},
                'NotCertified': {}
            },
            'Enrollment_History': [],
            'Age': {
                'Less_than_18_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                '18_Year_to_25_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                '26_Year_to_35_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                '36_Year_to_45_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                '46_Year_to_60_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                '61_Year_to_80_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                'More_than_80_Year': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                }
            },
            'Gender': {
                'Male': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                },
                'Female': {
                    'Camp-DC': 0,
                    'Camp-SM': 0,
                    'Camp-GS': 0,
                    'Total': 0
                }
            },
            'State': {},
            'Bank': {}
        };
        var objAgeLogic = {
            'Less_than_18_Year': 18,
            '18_Year_to_25_Year': 26,
            '26_Year_to_35_Year': 36,
            '36_Year_to_45_Year': 46,
            '46_Year_to_60_Year': 61,
            '61_Year_to_80_Year': 81,
            'More_than_80_Year': 100
        };
        var objSource = {
            0: 'All',
            1: 'Camp-DC',
            2: 'Camp-SM',
            8: 'Camp-GS',
            11: 'Camp-EM',
            12: 'Camp-LA',
            5: 'Posp-I',
            7: 'Camp-RB',
            3: 'Camp-Nochiket',
            6: 'MISP-Dealership',
            4: 'Camp-SG',
            13: "CC-AUTO",
            14: "CC-HEALTH",
            15: "SM-NP",
            16: "GS-NP",
            17: "DC-NP",
            18: "EM-NP"
        };
        var objCond = {'Is_Active': true};
        let obj_posp_channel_to_source = swap(config.channel.Const_POSP_Channel);
        if (req.query['page_action'] == 'ch_posp_list') {
            objCond['Sources'] = obj_posp_channel_to_source[req.obj_session.user.role_detail.channel];
        } else if (req.query['page_action'] == 'posp_list') {
            objCond['Ss_Id'] = {$in: req.obj_session.users_assigned.Team.POSP};
            //objCond['Reporting_Agent_Uid'] = req.query['uid'] - 0;
        } else {
            objCond['Sources'] = {$in: Object.keys(obj_posp_channel_to_source)};
        }


        Posp.find(objCond, function (err, dbPosps) {
            if (err)
                res.send(err);
            for (var k in objSource) {
                objSummary['Enrollment'][objSource[k]] = {'Total': 0};
                for (var k1 in objStatusSummary) {
                    objSummary['Enrollment'][objSource[k]][k1] = 0;
                }
            }
            //console.log(objSummary);
            var unknown = 0;
            var objEnrollment_History = {};
            var objRM = {};
            for (var k in dbPosps) {
                try {

                    var status_id = dbPosps[k]._doc['Last_Status'] - 0;
                    var Erp_Id = dbPosps[k]._doc['Erp_Id'] - 0;
                    var status_name = '';
                    for (var k1 in objStatusSummary) {
                        if (objStatusSummary[k1].indexOf(status_id) > -1) {
                            status_name = k1;
                            if (status_id === 6 && Erp_Id > 0) {
                                status_name = 'Doc_Declined_After_Certification';
                            }
                            if (status_id === 6 && isNaN(Erp_Id)) {
                                status_name = 'Doc_Declined_Before_Certification';
                            }
                            break;
                        }
                    }

                    var source_id = dbPosps[k]._doc['Sources'] - 0;
                    var agent_city = (dbPosps[k]._doc['Agent_City']) ? dbPosps[k]._doc['Agent_City'].toString().toUpperCase() : 'NA';
                    var source_name = objSource[source_id];
                    console.error('status_id', status_id, 'source_name', source_name, 'status_name', status_name);
                    if (source_name) {
                        objSummary['Enrollment'][source_name]['Total']++;
                        objSummary['Enrollment'][source_name][status_name]++;
                        objSummary['Enrollment']['All']['Total']++;
                        objSummary['Enrollment']['All'][status_name]++;
                    }

                    if (objSummary['AgentCity']['All'].hasOwnProperty(agent_city) === false) {
                        objSummary['AgentCity']['All'][agent_city] = 0;
                    }
                    objSummary['AgentCity']['All'][agent_city]++;
                    var Certified = (Erp_Id > 0) ? 'Certified' : 'NotCertified';
                    if (objSummary['AgentCity'][Certified].hasOwnProperty(agent_city) === false) {
                        objSummary['AgentCity'][Certified][agent_city] = 0;
                    }
                    objSummary['AgentCity'][Certified][agent_city]++;
                    //age start
                    var age = moment().diff(dbPosps[k]._doc['Birthdate'], 'years');
                    var age_slab = 'NA';
                    for (var age_key in objAgeLogic) {
                        if (age < objAgeLogic[age_key]) {
                            age_slab = age_key;
                            break;
                        }
                    }
                    if (age_slab !== 'NA' && source_id !== 5) {
                        objSummary['Age'][age_slab][source_name]++;
                        objSummary['Age'][age_slab]['Total']++;
                    }
                    //age finish

                    //gender start
                    var Gender = dbPosps[k]._doc['Gender'];
                    if (Gender && source_id !== 5) {
                        objSummary['Gender'][Gender][source_name]++;
                        objSummary['Gender'][Gender]['Total']++;
                    }
                    //gender finish
//state start
                    var State = dbPosps[k]._doc['Present_State'];
                    if (State && source_id !== 5) {
                        State = State.toString().toUpperCase();
                        if (objSummary['State'].hasOwnProperty(State) === false) {
                            objSummary['State'][State] = {
                                'Camp-DC': 0,
                                'Camp-SM': 0,
                                'Camp-GS': 0,
                                'Camp-EM': 0,
                                'Camp-SG': 0,
                                'Total': 0
                            };
                        }
                        objSummary['State'][State][source_name]++;
                        objSummary['State'][State]['Total']++;
                    }
                    //gender finish



                    //rm start
                    var rm_name = dbPosps[k]._doc['Reporting_Agent_Name'] + '(UID:' + dbPosps[k]._doc['Reporting_Agent_Uid'] + ')';
                    if (objRM.hasOwnProperty(rm_name) === false) {
                        objRM[rm_name] = {
                            'Camp-DC': 0,
                            'Camp-SM': 0,
                            'Camp-GS': 0,
                            'Camp-EM': 0,
                            'Camp-SG': 0,
                            'Posp-I': 0,
                            'Total': 0
                        };
                    }
                    objRM[rm_name][source_name]++;
                    objRM[rm_name]['Total']++;
                    //rm finish


                    var enroll_monyear = moment(dbPosps[k]._doc['Created_On']).format('MMM YYYY');
                    var enroll_monyear_num = moment(dbPosps[k]._doc['Created_On']).format('YYYYMM') - 0;
                    var cert_monyear = moment(dbPosps[k]._doc['Certification_Datetime']).format('MMM YYYY');
                    var cert_monyear_num = moment(dbPosps[k]._doc['Certification_Datetime']).format('YYYYMM') - 0;
                    if (objEnrollment_History.hasOwnProperty(enroll_monyear_num) === false) {
                        objEnrollment_History[enroll_monyear_num] = {
                            'MonthYear': enroll_monyear,
                            'Enrolled': 0,
                            'ExamPassed': 0
                        };
                    }
                    objEnrollment_History[enroll_monyear_num]['Enrolled']++;
                    if (cert_monyear !== 'Invalid date') {
                        if (objEnrollment_History.hasOwnProperty(cert_monyear_num) === false) {
                            objEnrollment_History[cert_monyear_num] = {
                                'MonthYear': cert_monyear,
                                'Enrolled': 0,
                                'ExamPassed': 0
                            };
                        }
                        objEnrollment_History[cert_monyear_num]['ExamPassed']++;
                    }
                } catch (Ex1) {
                    unknown++;
                    console.error('Exception', 'pospdashboard', Ex1);
                }
            }
            ////console.log('unknown', unknown);
            var arr_agent_city = [];
            for (var agent_city in objSummary['AgentCity']['All']) {
                var obj_city = {
                    'City': agent_city,
                    'Certified': objSummary['AgentCity']['Certified'].hasOwnProperty(agent_city) ? objSummary['AgentCity']['Certified'][agent_city] : 0,
                    'NotCertified': objSummary['AgentCity']['NotCertified'].hasOwnProperty(agent_city) ? objSummary['AgentCity']['NotCertified'][agent_city] : 0,
                    'Total': objSummary['AgentCity']['All'][agent_city]
                };
                arr_agent_city.push(obj_city);
            }
            var arr_enrollment = [];
            for (var k_status in objSummary['Enrollment']['All']) {
                var obj_enrollment = {
                    'Status': k_status,
                    'Camp-DC': objSummary['Enrollment']['Camp-DC'][k_status],
                    'Camp-SM': objSummary['Enrollment']['Camp-SM'][k_status],
                    'Camp-SG': objSummary['Enrollment']['Camp-SG'][k_status],
                    'Camp-EM': objSummary['Enrollment']['Camp-EM'][k_status],
                    'Camp-GS': objSummary['Enrollment']['Camp-GS'][k_status],
                    'Posp-I': objSummary['Enrollment']['Posp-I'][k_status],
                    'Total': objSummary['Enrollment']['All'][k_status]
                };
                arr_enrollment.push(obj_enrollment);
            }
            objSummary['Arr_Agent_City'] = arr_agent_city;
            objSummary['Arr_Enrollment'] = arr_enrollment;
            objSummary['Enrollment_History'] = objEnrollment_History;
            objSummary['Reporting_History'] = objRM;
            if (req.query.hasOwnProperty('debug')) {
                res.send('<pre>' + JSON.stringify(objSummary, undefined, 2) + '</pre>');
            } else {
                res.json(objSummary);
            }
        });
    } catch (Ex) {
        console.error('Exception', 'dashboard', Ex);
    }
});
router.post('/email_inbox_hook', function (req, res, next) {
    var Email = require('../models/email');
    var fs = require('fs');
    var today = new Date();
    var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
    console.error("email_inbox_hook", req.body);
    fs.appendFile(appRoot + "/tmp/log/email_inbox_hook_" + log_file_name + ".log", JSON.stringify(req.body, undefined, 2), function (err) {
        if (err) {
            //return //console.log(err);
        }
        //console.log("The file was saved!");
    });
});
router.post('/email_hook', function (req, res, next) {
    var Email = require('../models/email');
    var fs = require('fs');
    var today = new Date();
    var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
    fs.appendFile(appRoot + "/tmp/log/email_hook_" + log_file_name + ".log", JSON.stringify(req.body, undefined, 2), function (err) {
        if (err) {
            //return //console.log(err);
        }
        //console.log("The file was saved!");
    });
    var arrEvent = req.body;
    /*
     * 
     * {
     "email": "example@test.com",
     "timestamp": 1512984510,
     "smtp-id": "<14c5d75ce93.dfd.64b469@ismtpd-555>",
     "event": "processed",
     "category": "cat facts",
     "sg_event_id": "V3FD88bJN7E1XMMKLMPd5g==",
     "sg_message_id": "14c5d75ce93.dfd.64b469.filter0001.16648.5515E0B88.0"
     },
     */

    var Email = require('../models/email');
    var arrEmailEventLog = [];
    for (var k in arrEvent) {
        if (arrEvent[k]['sg_message_id']) {
            var Msg_Id = arrEvent[k]['sg_message_id'].split('.')[0];
            var objEventLog = {
                'Msg_Id': Msg_Id,
                'Event': arrEvent[k]['event'],
                'Full': arrEvent[k],
                'Created_On': new Date()
            };
            arrEmailEventLog.push(objEventLog);
            var ObjEmail = {
                'Last_Event_Status': objEventLog.Event,
                'Modified_On': objEventLog.Created_On
            };
            //console.log('email_update_log', objEventLog.Msg_Id, ObjEmail);
            Email.update({'Msg_Id': objEventLog.Msg_Id}, ObjEmail, function (err, doc) {
                //console.log('email_event_update', err, doc);
            });
        }
    }

    if (arrEmailEventLog.length > 0) {
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            // Get the collection
            var colEmailEvents = db.collection('email_events');
            colEmailEvents.insertMany(arrEmailEventLog, function (err, r) {
                if (err) {
                } else {
                    //console.log('Email Event Pushed', arrEmailEventLog.length);
                }
            });
        });
    }
    res.json({Msg: 'Saved'});
});
router.get('/dashboard_schedule', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        var source = (req.query.hasOwnProperty('source')) ? req.query['source'] : 'ALL';
        var arrSource = ['Total', 'PB-Direct', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'EM-NON-POSP', 'FINPEACE', 'RBS'];
        if (source === 'KM') {
            arrSource = ['Total', 'KM'];
        }
        //console.log('report_type', report_type);

        var obj_dashboard_summary = {
            'All': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'DC-FOS': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-NON-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Car': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'DC-FOS': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-NON-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'TW': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'DC-FOS': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-NON-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Health': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'DC-FOS': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-NON-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Life': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'DC-FOS': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-NON-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            }
        };
        if (source === 'KM') {
            obj_dashboard_summary = {
                'All': {
                    'Summary': {'Total': null, 'KM': null},
                },
                'Car': {
                    'Summary': {'Total': null, 'KM': null},
                },
                'TW': {
                    'Summary': {'Total': null, 'KM': null},
                },
                'Health': {
                    'Summary': {'Total': null, 'KM': null},
                },
                'Life': {
                    'Summary': {'Total': null, 'KM': null},
                }
            };
        }
        var today = moment().utcOffset("+05:30").startOf('Day');
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'daily') {
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        }
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'weekly') {
            var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = weekstart;
            req.query['dateto'] = yesterday;
        }
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'PG_RETURNED'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        //var arr_status = ['Total', 'Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'Idv', 'Comm_Premium'];
        var arr_status = {
            'Total': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
        };
        for (var k1 in arrSource) {
            obj_dashboard_summary['All']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Car']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['TW']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Health']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Life']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
        }

        var arr_dropoff = {
            'agent_bo_dropoff': [],
            'link_dropoff': [],
            'proposal_dropoff': [],
            'payment_dropoff': [],
            'sale': []
        };
        var arr_sale_vehicle = {
            'crn': [],
            'registration_number': []
        };
        var obj_cond = {
            "Product_Id": {$in: [1, 10, 12]},
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        };
        if (req.query.hasOwnProperty('insurer_id') && req.query['insurer_id'] > 0) {
            obj_cond['Insurer_Id'] = req.query['insurer_id'] - 0;
        }
        if (req.query.hasOwnProperty('status') && req.query['status'] != '') {
            if (req.query['status'] == 'sale') {
                obj_cond['Last_Status'] = {$in: ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY']};
            }
        }

        if (source === 'KM') {
            var obj_cond = {
                "Premium_Request.ss_id": 12999,
                "Product_Id": {$in: [1, 10, 12]},
                "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
            };
        }
        if (source === 'DIRECT') {
            obj_cond['Premium_Request.channel'] = 'DIRECT';
        }

        User_Data.find(obj_cond).select(['Product_Id', 'PB_CRN', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core', 'Proposal_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    var user = dbUsers[k]._doc;
                    try {

                        if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {
                            var product = Const_Product[user['Product_Id']];
                            //console.log('Product', product);
                            var Report_Summary = null;
                            if (user.hasOwnProperty('Report_Summary') && user['Report_Summary']) {
                                Report_Summary = user['Report_Summary'];
                            }

                            var client_key_val = 'PB-Direct';
                            var agent_id = 0;
                            var posp_sources = user['Premium_Request']['posp_sources'];
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                agent_id = ss_id;
                                if (ss_id === 5) {
                                    agent_id = (user['Premium_Request']['fba_id'] - 0);
                                }
                            }
                            client_key_val = get_search_source(user);
                            if (source === 'KM') {
                                client_key_val = 'KM';
                            }

                            if (source == 'PB-SS') {
                                if (['PB-SS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-DC') {
                                if (['DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'DC-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-SM') {
                                if (['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'ALL-GS') {
                                if (['GS-POSP', 'GS-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'ALL-EM') {
                                if (['EM-POSP', 'EM-FOS', 'EM-NON-POSP'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }


                            //obj_dashboard_summary['All'].Summary.Total.Total++;
                            //obj_dashboard_summary['All'].Summary[client_key_val].Total++;
                            Last_Status = 'Search';
                            if (arr_search.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Search';
                            }

                            if (arr_link.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Link';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                            }
                            if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Proposal';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                            }
                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Sale';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== '') {
                                    obj_dashboard_summary['All'].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['ErpCs']++;
                                    obj_dashboard_summary[product].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['ErpCs']++;
                                }
                                if (user.hasOwnProperty('Proposal_Request_Core') && user['Proposal_Request_Core'].hasOwnProperty('renewal_crn_udid')) {
                                    obj_dashboard_summary['All'].Summary.Total['Renewal']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Renewal']++;
                                    obj_dashboard_summary[product].Summary.Total['Renewal']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Renewal']++;
                                }
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                                var transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                transaction_amount = Math.round(transaction_amount);
                                if (transaction_amount > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Premium'] += transaction_amount;
                                }

                                var idv = Math.round(user['Erp_Qt_Request_Core']['___vehicle_expected_idv___'] - 0);
                                if (idv > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Idv'] += idv;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Idv'] += idv;
                                    obj_dashboard_summary[product].Summary.Total['Idv'] += idv;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Idv'] += idv;
                                }
                                var Comm_Premium = 0;
                                if (user['Premium_Request'].hasOwnProperty('vehicle_insurance_subtype') && user['Premium_Request']['vehicle_insurance_subtype'] && user['Premium_Request']['vehicle_insurance_subtype'].indexOf('0CH') > -1) {
                                    var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                } else {
                                    var Comm_Premium = Math.round((user['Erp_Qt_Request_Core']['___premium_breakup_od_final_premium___'] - 0) + (user['Erp_Qt_Request_Core']['___premium_breakup_addon_final_premium___'] - 0) * 1);
                                }
                                if (Comm_Premium > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Comm_Premium'] += Comm_Premium;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Comm_Premium'] += Comm_Premium;
                                    obj_dashboard_summary[product].Summary.Total['Comm_Premium'] += Comm_Premium;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Comm_Premium'] += Comm_Premium;
                                }
                                var insurer = user['Erp_Qt_Request_Core']['___insurerco_name___'];
                                //insurer = insurer[0];
                                var agent = 'NA';
                                var sub_agent = 'NA';
                                var reporting = 'NA';
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    agent = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'];
                                    reporting = user['Erp_Qt_Request_Core']['___posp_reporting_agent_name___'];
                                    if (user['Premium_Request'].hasOwnProperty('posp_sub_fba_id') && (user['Premium_Request']['posp_sub_fba_id'] - 0) > 0) {
                                        sub_agent = user['Premium_Request']['posp_sub_fba_name'] + '(#' + user['Premium_Request']['posp_sub_fba_id'] + ')';
                                    }
                                }
                                var platform = 'PolicyBoss.com';
                                if (user['Premium_Request'].hasOwnProperty('app_version') && user['Premium_Request']['app_version'] != "PolicyBoss.com") {
                                    platform = 'APP-' + user['Premium_Request']['app_version'].toString();
                                }

                                var Policy_Sub_Type = (user['Erp_Qt_Request_Core'].hasOwnProperty('___vehicle_insurance_subtype___')) ? user['Erp_Qt_Request_Core']['___vehicle_insurance_subtype___'] : '1CH_0TP';
                                Policy_Sub_Type = const_policy_subtype[Policy_Sub_Type];
                                var obj_sale = {
                                    'Source': client_key_val,
                                    'Product': product,
                                    'Platform': platform,
                                    'Erp_Id': user['Premium_Request']['posp_erp_id'],
                                    'FBAID': user['Premium_Request']['fba_id'],
                                    'SubAgent': sub_agent,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Insurer': insurer,
                                    'PB_CRN': user['PB_CRN'],
                                    'Erp_CS': (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') ? user['ERP_CS'] : 'Pending',
                                    'Reg_No': (user['Premium_Request']['vehicle_insurance_type'] == 'new') ? 'NEW-' + user['Erp_Qt_Request_Core']['___registration_no_1___'] + '-' + user['Erp_Qt_Request_Core']['___registration_no_2___'] : user['Erp_Qt_Request_Core']['___registration_no___'],
                                    'Premium': transaction_amount,
                                    //'Comm_Premium': Comm_Premium,
                                    //'Disc': user['Erp_Qt_Request_Core']['___premium_rate_od_disc___'],
                                    'Customer': user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'],
                                    'Policy_Type': Policy_Sub_Type
                                            //'Policy_Start_Date': user['Erp_Qt_Request_Core']['___policy_start_date___'],
                                            //'Policy_End_Date': user['Erp_Qt_Request_Core']['___policy_end_date___'],
                                            //'Policy_Num': user['Transaction_Data']['policy_number'],
                                            //'Expiry': (user['Premium_Request']['vehicle_insurance_type'] == 'renew') ? user['Premium_Request']['policy_expiry_date'] : 'NA',
                                            //'Hypo_Detail': user['Erp_Qt_Request_Core']['___financial_institute_name___']

                                };
                                if (req.query['type'] !== 'daily') {
                                    var dt = (new Date(user.Modified_On)).toLocaleString();
                                    dt = dt.split(',');
                                    obj_sale['Transact_On'] = dt[0];
                                }
                                if (user['Erp_Qt_Request_Core']['___vehicle_insurance_type___'] == 'renew') {
                                    arr_sale_vehicle.registration_number.push(user['Erp_Qt_Request_Core']['___registration_no___']);
                                }
                                arr_sale_vehicle.crn.push(user['PB_CRN']);
                                arr_dropoff.sale.push(obj_sale);
                            }
                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Fail';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Paypass';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            //console.error('DSIteration', client_key_val, Last_Status);
                            obj_dashboard_summary['All'].Summary.Total[Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary[product].Summary.Total[Last_Status]++;
                            obj_dashboard_summary[product].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val]['Dropoff'] = obj_dashboard_summary['All'].Summary[client_key_val]['Proposal'] - (obj_dashboard_summary['All'].Summary[client_key_val]['Sale'] + obj_dashboard_summary['All'].Summary[client_key_val]['Paypass']);
                            if (agent_id) {
                                if (obj_dashboard_summary['All'].Summary[client_key_val]['Unique_Agent_List'].indexOf(agent_id) < 0) {
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Unique_Agent_List'].push(agent_id);
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Unique_Agent']++;
                                }
                                if (obj_dashboard_summary[product].Summary[client_key_val]['Unique_Agent_List'].indexOf(agent_id) < 0) {
                                    obj_dashboard_summary[product].Summary[client_key_val]['Unique_Agent_List'].push(agent_id);
                                    obj_dashboard_summary[product].Summary[client_key_val]['Unique_Agent']++;
                                }
                                if (obj_dashboard_summary['All'].Summary['Total']['Unique_Agent_List'].indexOf(agent_id) < 0) {
                                    obj_dashboard_summary['All'].Summary['Total']['Unique_Agent_List'].push(agent_id);
                                    obj_dashboard_summary['All'].Summary['Total']['Unique_Agent']++;
                                }
                                if (obj_dashboard_summary[product].Summary['Total']['Unique_Agent_List'].indexOf(agent_id) < 0) {
                                    obj_dashboard_summary[product].Summary['Total']['Unique_Agent_List'].push(agent_id);
                                    obj_dashboard_summary[product].Summary['Total']['Unique_Agent']++;
                                }
                            }
                            var arr_dropoff_status = [
                                'BUY_NOW_AGENT',
                                'PROPOSAL_SAVE_AGENT',
                                'PROPOSAL_LINK_SENT',
                                'BUY_NOW_CUSTOMER',
                                'PROPOSAL_SAVE_CUSTOMER',
                                'PROPOSAL_SUBMIT',
                                'TRANS_FAIL'
                            ];
                            if (arr_dropoff_status.indexOf(user['Last_Status']) > -1) {
                                var agent = 'NA';
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    agent = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'] + '(Mob-' + user['Premium_Request']['posp_mobile_no'] + ')';
                                }
                                var customer = 'NA';
                                var premium = 'NA';
                                if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null) {
                                    //customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'] + '(' + user['Erp_Qt_Request_Core']['___mobile___'] + ')';
                                    customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                    premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                } else {
                                    customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                                }

                                var Reg_No = 'NA';
                                if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] != null) {
                                    Reg_No = user['Erp_Qt_Request_Core']['___registration_no___'];
                                } else if (user.hasOwnProperty('Proposal_Request') && (user['Proposal_Request'] != null && user['Proposal_Request'].hasOwnProperty('registration_no_1'))) {
                                    Reg_No = user['Proposal_Request']['registration_no_1'] + '_' + user['Proposal_Request']['registration_no_2'] + '_' + user['Proposal_Request']['registration_no_3'] + '_' + user['Proposal_Request']['registration_no_4'];
                                } else if (user.hasOwnProperty('Premium_Request') && user['Premium_Request'] != null) {
                                    if (user['Premium_Request']['registration_no'].indexOf('-AA-1234') < 0 && user['Premium_Request']['registration_no'].indexOf('-ZZ-9999') < 0) {
                                        Reg_No = user['Premium_Request']['registration_no'];
                                    }
                                    Reg_No = user['Premium_Request']['registration_no'];
                                }

                                var obj_lead = {
                                    'PB_CRN': user['PB_CRN'],
                                    'Source': client_key_val,
                                    'SubAgent': sub_agent,
                                    'Agent': agent,
                                    'Customer': customer,
                                    'Expiry': (user['Premium_Request']['vehicle_insurance_type'] == 'renew') ? user['Premium_Request']['policy_expiry_date'] : 'NA',
                                    'Premium': premium,
                                    'Reg_No': Reg_No,
                                    'DateTime': (new Date(user.Modified_On)).toLocaleString()
                                };
                                if (['BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.agent_bo_dropoff.push(obj_lead);
                                }
                                if (['PROPOSAL_SUBMIT', 'TRANS_FAIL'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.payment_dropoff.push(obj_lead);
                                }
                                if (['BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.proposal_dropoff.push(obj_lead);
                                }
                                if (['PROPOSAL_LINK_SENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.link_dropoff.push(obj_lead);
                                }
                            }
                        }
                    } catch (e) {
                        console.error('Report_Loop', e, user, client_key_val, Last_Status);
                    }
                }
                obj_dashboard_summary['All'].Summary.Total['Dropoff'] = obj_dashboard_summary['All'].Summary.Total['Proposal'] - (obj_dashboard_summary['All'].Summary.Total['Sale'] + obj_dashboard_summary['All'].Summary.Total['Paypass']);
                if (req.query.hasOwnProperty('type')) {

                    var reporttitle = 'HORIZON_MOTOR_' + req.query['type'].toString().toUpperCase() + '_REPORT::';
                    if (req.query['type'] == 'daily') {
                        var yesterday = moment(today).add(-1, 'days').format("D-MMM-YYYY");
                        reporttitle += yesterday.toString();
                    } else {
                        var fromMoment = moment(req.query['datefrom']).format("D-MMM-YYYY");
                        var toMoment = moment(req.query['dateto']).format("D-MMM-YYYY");
                        reporttitle += fromMoment.toString() + '_To_' + toMoment.toString();
                    }

                    var subject = '[' + config.environment.name.toString().toUpperCase() + '-REPORT][' + source + ']' + reporttitle;
                    subject = subject.replace(/-/g, '_');
                    var content_html = '<!DOCTYPE html><html><head><title>' + reporttitle + '</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + reporttitle + '</span>';
                    content_html += '<table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    content_html += '<tr>';
                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Status</th>';
                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Total</th>';
                    var arr_src = [];
                    if (source == 'ALL') {
                        arr_src = ['PB-Direct', 'PB-SS', 'PB-CAMP', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'FINPEACE', 'BOT', 'RBS'];
                    }
                    if (source == 'FM-DC') {
                        arr_src = ['DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'DC-FOS'];
                    }
                    if (source == 'ALL-EM') {
                        arr_src = ['EM-POSP', 'EM-NON-POSP', 'EM-FOS'];
                    }
                    if (source == 'FM-SM') {
                        arr_src = ['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'];
                    }
                    if (source == 'ALL-GS') {
                        arr_src = ['GS-POSP', 'GS-FOS'];
                    }
                    if (source == 'PB-SS') {
                        arr_src = ['PB-SS'];
                    }
                    if (source == 'KM') {
                        arr_src = ['KM'];
                    }

                    var arrSource = ['Total'];
                    var arr_sts = ['Unique_Agent', 'Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'Idv', 'Comm_Premium'];
                    for (var k in arr_src) {
                        arrSource.push(arr_src[k]);
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + arr_src[k] + '</th>';
                    }
                    content_html += '</tr>';
                    for (var k in arr_sts) {
                        content_html += '<tr>';
                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:#f97490" align="center"><b>' + arr_sts[k] + '</b></td>';
                        for (var k1 in arrSource) {
                            if (arrSource[k1] == 'Total') {
                                color = '#01dfd7';
                            } else {
                                color = 'white';
                            }
                            var cnt = 0;
                            if (obj_dashboard_summary.All.Summary[arrSource[k1]]) {
                                cnt = obj_dashboard_summary.All.Summary[arrSource[k1]][arr_sts[k]];
                            }
                            content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + cnt + '</td>';
                        }
                        content_html += '</tr>';
                    }
                    content_html += '</table></div><br><br>';
                    var color = 'white';
                    var arr_lead_fld = {
                        'CRN': null,
                        'Source': null,
                        'SubAgent': null,
                        'Agent': null,
                        'Customer': null,
                        'Expiry': null,
                        'Premium': null,
                        'Reg_No': null,
                        'DateTime': null
                    };
                    //sales report
                    let Title = '';
                    let SubTitle = '';
                    Title = 'Sales Report(#' + arr_dropoff.sale.length + ')';
                    SubTitle = 'This is sale transaction list';
                    content_html += arrayobjectToHtml(arr_dropoff.sale, Title, SubTitle);
                    content_html += '<br><br>';
                    if (req.query['type'] != 'custom' && req.query['type'] != 'monthly' && req.query['source'] != 'ALL') {
                        //payment dropoff                        
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Dropoff(#___payment_dropoff___)</span>\n\
		<br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer redirects to PG, but Premium not Paid</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        var dropoff = {
                            'all_dropoff': [],
                            'payment_dropoff': [],
                            'proposal_dropoff': [],
                            'link_dropoff': [],
                            'agent_bo_dropoff': []
                        };
                        for (var k in arr_dropoff.payment_dropoff) {
                            var ind_data = arr_dropoff.payment_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.registration_number.indexOf(ind_data['Reg_No']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.payment_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.payment_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.payment_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___payment_dropoff___', dropoff.payment_dropoff.length);
                        //PROPOSAL dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Proposal Dropoff(#___proposal_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer opens link, but not submit proposal</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.proposal_dropoff) {
                            var ind_data = arr_dropoff.proposal_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.registration_number.indexOf(ind_data['Reg_No']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.proposal_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.proposal_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.proposal_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___proposal_dropoff___', dropoff.proposal_dropoff.length);
                        //link dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Link Dropoff(#___link_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer receives link, but not open link</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.link_dropoff) {
                            var ind_data = arr_dropoff.link_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.registration_number.indexOf(ind_data['Reg_No']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.link_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.link_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.link_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___link_dropoff___', dropoff.link_dropoff.length);
                        //agent bo dropoff

                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Agent Search Dropoff(#___agent_bo_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Agent opens proposal page, but Not send link to Customer</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.agent_bo_dropoff) {
                            var ind_data = arr_dropoff.agent_bo_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.registration_number.indexOf(ind_data['Reg_No']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.agent_bo_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.agent_bo_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.agent_bo_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___agent_bo_dropoff___', dropoff.agent_bo_dropoff.length);
                    }
                    content_html += '</body></html>';
                    res.send(content_html);
                    if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        if (req.query['dbg'] === 'yes') {
                            objModelEmail.send('notifications@policyboss.com', 'chirag.modi@policyboss.com', subject, content_html, '', '');
                        } else {
                            if (source == 'ALL') {
                                objModelEmail.send('notifications@policyboss.com', 'susheeltejuja@landmarkinsurance.in,apaar.kasliwal@landmarkinsurance.in,chirag.modi@policyboss.com,varun.kaushik@policyboss.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'FM-DC') {
                                objModelEmail.send('notifications@policyboss.com', 'srinivas@policyboss.com,ashutosh.sharma@magicfinmart.com,coordinator@magicfinmart.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'FM-SM') {
                                objModelEmail.send('notifications@policyboss.com', 'susheel.menon@landmarkinsurance.in,pradeep.upadhyay@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'KM') {
                                objModelEmail.send('notifications@policyboss.com', 'kevin@pluskar.com,susheel.menon@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'ALL-GS') {
                                var arr_to = [
                                    'gagandeep.singh@policyboss.com',
                                    'saroj.singh@policyboss.com',
                                    'shabana.gaus@policyboss.com',
                                    'satbir.singh@policyboss.com',
                                    'rajneesh.kumar@policyboss.com',
                                    'kalpesh.chauhan@policyboss.com',
                                    'Ganesh.venkataraman@policyboss.com',
                                    'balveer.gupt@policyboss.com',
                                    'Kaustubh.Shandilya@policyboss.com',
                                    'vishal.gaur@policyboss.com',
                                    'vikas.chauhan@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'ALL-EM') {
                                var arr_to = [
                                    'kevin.menezes@policyboss.com',
                                    'manju.gonda@policyboss.com',
                                    'mandeep.singh@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'PB-SS') {
                                objModelEmail.send('notifications@policyboss.com', 'shah.kevin@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                        }

                    }

                } else if (req.hasOwnProperty('debug')) {
                    res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                } else {
                    res.json(obj_dashboard_summary);
                }
            }
        });
    } catch (Ex) {
        throw Ex;
        console.error('Exception', 'dashboard', Ex);
    }
});
router.get('/policy_email_sync', function (req, res, next) {
    var Client = require('node-poplib-gowhich').Client;
    var policy_number = req.query['pol_num'];
    var quote_number = req.query['quote_num'];
    var customer_email = req.query['customer_email'];
    var insurer_id = req.query['insurer_id'];
    var file_name = req.query['file_name'];
    var fs = require('fs');
    var mail_config = config.email_inbox.onlinepolicy;
    var inbox = 'onlinepolicy';
    if (req.query.hasOwnProperty('inbox') && req.query['inbox'] == 'techsupport') {
        mail_config = config.email_inbox.techsupport;
        inbox = 'techsupport';
        console.error('policy_email_sync', mail_config);
    }
    if (req.query.hasOwnProperty('inbox') && req.query['inbox'] == 'customercare') {
        mail_config = config.email_inbox.customercare;
        inbox = 'customercare';
        console.error('policy_email_sync', mail_config);
    }
    var Policy_Email = null;
    var Attachment_Loc = '';
    var client = new Client(mail_config);
    var obj_Email_Saved = {};
    client.connect(function () {
        try {
            //console.log('Client_connect');
            client.count(function (err, count) {
                if (err) {
                    console.error('Exception', 'client.count', err);
                }
                console.error('InboxCount', count);
                var arrRet = [];
                if (req.query['set'] == 'all') {
                    for (var k = 1; k <= 2000; k++) {
                        arrRet.push(k);
                    }
                } else {
                    var startRange = 50;
                    var lmt = count - startRange + 1;
                    for (var k = lmt; k <= count; k++) {
                        arrRet.push(k);
                    }
                }

                console.error('Log', 'arrRet', arrRet);
                client.retrieve(arrRet, function (err, messages) {
                    if (err) {
                        console.error('Exception', 'client.retrieve', err);
                    }
                    try {
                        console.error('Client_connect', 'err', err);
                        console.error('Client_connect', 'messages', messages.length);
                        ////console.log(messages);
                        var today = new Date();
                        var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                        var ArrMsg = [];
                        messages.forEach(function (message) {
                            try {

                                if (inbox == 'onlinepolicy') {
                                    Policy_Email = require('../models/policy_email');
                                    Attachment_Loc = 'policy_email';
                                }
                                if (inbox == 'techsupport') {
                                    Policy_Email = require('../models/support_email');
                                    Attachment_Loc = 'support_email';
                                }
                                if (inbox == 'customercare') {
                                    Policy_Email = require('../models/customer_care_email');
                                    Attachment_Loc = 'customer_care_email';
                                }

                                var arrTo = [];
                                for (var k in message.to) {
                                    arrTo.push(message.to[k]['address']);
                                }
                                var arrCc = [];
                                if (message.hasOwnProperty('cc')) {
                                    for (var k in message.cc) {
                                        arrCc.push(message.cc[k]['address']);
                                    }
                                }
                                let objPolicy_Email = {
                                    'From': message.from[0]['address'],
                                    'To': arrTo.join(','),
                                    'Cc': arrCc.join(','),
                                    'Sub': message.subject,
                                    'Content': message.html,
                                    'Created_On': new Date(),
                                    'Message_Id': message.messageId,
                                    'Message_Date': message.date,
                                    'Response_Core': message,
                                    'Attachment': ''
                                };
                                let is_process = true;
                                if (inbox == 'techsupport') {
                                    if (objPolicy_Email['From'] === 'notifications@landmarkinsurance.co.in') {
                                        is_process = false;
                                    }
                                }
                                if (is_process) {
                                    ArrMsg.push({
                                        'From': message.from[0]['address'],
                                        'Sub': message.subject,
                                        'Message_Id': message.messageId
                                    });
                                    //console.error('HEALTHLINK', objPolicy_Email);
                                    Policy_Email.findOne({"Message_Id": message.messageId}, function (err, dbPolicy_Email) {
                                        if (!dbPolicy_Email) {
                                            if (objPolicy_Email['To'] !== 'onlinepolicy@policyboss.com') {
                                                obj_Email_Saved[objPolicy_Email['To']] = objPolicy_Email;
                                            }
                                            let objModelPolicy_Email = new Policy_Email(objPolicy_Email);
                                            objModelPolicy_Email.save(function (err, objDBPolicy_Email) {

                                                if (err) {
                                                    console.error('objModelPolicy_Email', 'EmailSave', err);
                                                } else {
                                                    var pk_key = 0;
                                                    var update_obj = {}
                                                    if (inbox == 'techsupport') {
                                                        pk_key = objDBPolicy_Email.Support_Email_Id;
                                                        update_obj = {'Support_Email_Id': pk_key};
                                                    }
                                                    if (inbox == 'onlinepolicy') {
                                                        pk_key = objDBPolicy_Email.Policy_Email_Id;
                                                        update_obj = {'Policy_Email_Id': pk_key};
                                                    }
                                                    if (inbox == 'customercare') {
                                                        pk_key = objDBPolicy_Email.Customer_Care_Email_Id;
                                                        update_obj = {'Customer_Care_Email_Id': pk_key};
                                                    }
                                                    console.error('objModelPolicy_Email', 'EmailSave', pk_key);
                                                    try {
                                                        if (pk_key) {
                                                            var dbMessage = objDBPolicy_Email.Response_Core;
                                                            if (dbMessage.hasOwnProperty('attachments') && dbMessage.attachments) {
                                                                if (dbMessage.attachments.length > 0) {
                                                                    let arrAttachement = [];
                                                                    for (var att in dbMessage.attachments) {
                                                                        try {
                                                                            if (dbMessage.attachments[att].fileName.toString().toLowerCase().indexOf('pdf') > -1 || true) {
                                                                                var file_name = pk_key.toString() + '_' + dbMessage.attachments[att].fileName.replace(/%20/g, '_').replace(/ /g, '_').replace('/', '_');
                                                                                arrAttachement.push(file_name);
                                                                                var attach_sys_path = appRoot + "/tmp/" + Attachment_Loc + "/" + file_name;
                                                                                fs.writeFileSync(attach_sys_path, dbMessage.attachments[att].content);
                                                                            }
                                                                        } catch (e) {

                                                                        }
                                                                    }
                                                                    objDBPolicy_Email.Attachment = arrAttachement.join(',');
                                                                    Policy_Email.update(update_obj, {$set: {'Attachment': arrAttachement.join(',')}}, function (err, numAffected) {
                                                                        if (inbox === 'onlinepolicy') {
                                                                            policy_crn_tag(objDBPolicy_Email);
                                                                        }
                                                                        if (inbox === 'customercare') {
                                                                            var arr_email = [
                                                                                //'noreply@godigit.com',
                                                                                'ahealthystart@religarehealthinsurance.com',
                                                                                'donotreply@bajajallianz.co.in',
                                                                            ];
                                                                            if (arr_email.indexOf(objDBPolicy_Email['From']) > -1) {
                                                                                policy_crn_tag(objDBPolicy_Email);
                                                                                var obj_msg = {};
                                                                                for (var j1 in objDBPolicy_Email) {
                                                                                    if (typeof objDBPolicy_Email[j1] === 'string' || typeof objDBPolicy_Email[j1] === 'number') {
                                                                                        obj_msg[j1] = objDBPolicy_Email[j1];
                                                                                    }
                                                                                }
                                                                                var attachment_txt = [];
                                                                                var arr_attachment = objDBPolicy_Email.Attachment.split(',');
                                                                                for (var k3 in arr_attachment) {
                                                                                    attachment_txt.push(config.environment.downloadurl + '/customer_care_email/' + arr_attachment[k3]);
                                                                                }
                                                                                obj_msg['Attachment'] = attachment_txt.join(' , ');
                                                                                var msg = '<pre>' + JSON.stringify(obj_msg, undefined, 2) + '</pre>';
                                                                                var Email = require('../models/email');
                                                                                var objModelEmail = new Email();
                                                                                var sub = '';
                                                                                /*if (objDBPolicy_Email['From'] === 'noreply@godigit.com') {
                                                                                 sub = objDBPolicy_Email['Customer_Care_Email_Id'] + ' :: GODIGIT :: ' + objDBPolicy_Email['To'];
                                                                                 }*/
                                                                                if (objDBPolicy_Email['From'] === 'ahealthystart@religarehealthinsurance.com') {
                                                                                    sub = objDBPolicy_Email['Customer_Care_Email_Id'] + ' :: CARE :: ' + objDBPolicy_Email['To'];
                                                                                }
                                                                                if (objDBPolicy_Email['From'] === 'donotreply@bajajallianz.co.in') {
                                                                                    sub = objDBPolicy_Email['Customer_Care_Email_Id'] + ' :: BAJAJALLIANZ :: ' + objDBPolicy_Email['Cc'];
                                                                                }
                                                                                objModelEmail.send('notifications@policyboss.com', 'onlinepolicy@policyboss.com', sub, msg, config.environment.notification_email, '');
                                                                            }
                                                                        }
                                                                    });
                                                                }
                                                            }
                                                        }
                                                    } catch (e) {
                                                        console.error('policy_email_sync', 'MessageSaveEx', e);
                                                    }

                                                }
                                            });
                                        }
                                    });
                                }
                            } catch (e) {
                                console.error('policy_email_sync', 'MessageEx', e);
                            }
                        });
                        if (ArrMsg.length > 0) {
                            var msg = '<!DOCTYPE html><html><head><title>EMAIL_ONLINEPOLICY_SYNC</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            msg += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">EMAIL_' + inbox.toString().toUpperCase() + '_SYNC</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                            var row_inc = 0;
                            for (var k in ArrMsg) {
                                if (row_inc === 0) {
                                    msg += '<tr>';
                                    for (var k_head in ArrMsg[k]) {
                                        msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k_head + '</th>';
                                    }
                                    msg += '</tr>';
                                }
                                msg += '<tr>';
                                for (var k_row in ArrMsg[k]) {
                                    msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + ArrMsg[k][k_row] + '</td>';
                                }
                                msg += '</tr>';
                                row_inc++;
                            }
                            msg += '</table></div>';
                            msg = '';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            var sub = '[' + config.environment.name.toString().toUpperCase() + '-SCHEDULER]';
                            var today = moment().format('YYYY-MM-DD_HH:mm:ss');
                            sub += 'EMAIL_' + inbox.toString().toUpperCase() + '_SYNC::' + today.toString();
                            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                        }
                        res.json({'TotalEmail': messages.length});
                        client.quit();
                    } catch (e) {
                        console.error('policy_email_sync', 'MessageEx1', e);
                        res.json({'Status': e});
                    }
                });
            });
        } catch (e) {
            console.error('policy_email_sync', e);
            res.json({'Status': e});
        }
    })
});
function reg_no_format(Registration_Num) {

    if ([9, 10, 11].indexOf(Registration_Num.length) > -1) {
        var lastfour = Registration_Num.substr(Registration_Num.length - 4);
        var lastdigit = lastfour.match(/\d/g);
        lastdigit = lastdigit.join("");
        if (lastdigit.toString().length < 4) {
            var lastdigitnumber = lastdigit - 0;
            var lastdigitpadzero = pad(lastdigitnumber, 4);
            Registration_Num = Registration_Num.replace(lastdigit, lastdigitpadzero);
        }
        if (Registration_Num.length === 11) {
            Registration_Num = Registration_Num.substring(0, 2) + '-' + Registration_Num.substring(2, 4) + '-' + Registration_Num.substring(4, 7) + '-' + Registration_Num.substring(7, 11);
        }
        if (Registration_Num.length === 10) {
            Registration_Num = Registration_Num.substring(0, 2) + '-' + Registration_Num.substring(2, 4) + '-' + Registration_Num.substring(4, 6) + '-' + Registration_Num.substring(6, 10);
        }
        if (Registration_Num.length === 9) {
            Registration_Num = Registration_Num.substring(0, 2) + '-' + Registration_Num.substring(2, 4) + '-' + Registration_Num.substring(4, 5) + '-' + Registration_Num.substring(5, 9);
        }
    }
    return Registration_Num;
}
function policy_crn_tag(objDBPolicy_Email) {
    try {

        var Insurer_Id = 0;
        var Policy_Number = '';
        var Pg_Transaction_Number = '';
        var To_Email = objDBPolicy_Email['To'].toString();
        var From_Email = objDBPolicy_Email['From'].toString();
        var Sub = objDBPolicy_Email['Sub'].toString();
        var Attachment = objDBPolicy_Email['Attachment'].toString();
        var Arr_Attachment = Attachment.split(',');
        var policy_copy_file = '';
        if (Arr_Attachment.length === 1) {
            policy_copy_file = Arr_Attachment[0];
        }
        var today = moment().utcOffset("+05:30").startOf('Day');
        var yesterday = moment(today).add(-1, 'days').utcOffset("+05:30").startOf('Day');
        var fromDate = moment(yesterday).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        //console.error('policy_crn_tag', From_Email, Attachment);
        var UD_Cond = {};
        var Customer_Name = '';
        var First_Name = '';
        var Registration_Num = '';
        var Const_Email_Insurer = swap(Const_Insurer_Email);
        if (Const_Email_Insurer.hasOwnProperty(From_Email)) {
            Insurer_Id = Const_Email_Insurer[From_Email];
        }
        var is_email_sub_passed = false;
        if (From_Email === 'support@acko.com' && Sub.indexOf('Insurance Policy for') > -1) {
            is_email_sub_passed = true;
            var arr_registration_no = Sub.split(' - ');
            if (arr_registration_no.length > 1) {
                Registration_Num = reg_no_format(arr_registration_no[1].toString());
            }
            Customer_Name = objDBPolicy_Email['Response_Core']['text'].split(',')[0].replace('Hi ', '');
            Customer_Name = Customer_Name.replace('  ', ' ').replace('  ', ' ');
            Policy_Number = policy_copy_file.split('_-_')[1].toString().replace('.pdf', '').replace('_', '/');
        }
        if (From_Email === 'onlinesales@libertyinsurance.in' && Sub.indexOf('Policy Schedule') > -1) {
            is_email_sub_passed = true;
            To_Email = '';
            var arr_registration_no = Sub.split('Number - ');
            if (arr_registration_no.length > 1) {
                Registration_Num = arr_registration_no[1].toString();
            }
//11893_Acko_car_Policy_-_BCP00154991_00.pdf
            for (let k4 in Arr_Attachment) {
//75596_201110000020700299700000.pdf,75596_Proposal_201110000020700299700000.pdf
                if (Arr_Attachment[k4].toString().indexOf('Proposal_') > -1) {

                } else {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
//policy_copy_file = Arr_Attachment[0];
            Policy_Number = policy_copy_file.split('_')[1].toString().replace('.pdf', '').replace('_', '/');
        }
        if (From_Email === 'motor_f@rahejaqbe.com' && Sub.indexOf('Policy Schedule') > -1) {
            is_email_sub_passed = true;
            var arr_registration_no = Sub.split(' | ');
            if (arr_registration_no.length > 1) {
                Registration_Num = arr_registration_no[1].toString();
            }
            Policy_Number = policy_copy_file.split('_')[1].toString().replace('.pdf', '').replace('_', '/');
        }
        if (From_Email === 'donotreply@bajajallianz.co.in' && Sub.indexOf('Policy Copy OG') > -1) { //done            
            is_email_sub_passed = true;
            Policy_Number = Sub.split('Policy Copy ')[1];
            //is_search_email = true;            
            To_Email = objDBPolicy_Email['Cc'];
            for (let k4 in Arr_Attachment) {
                if (Arr_Attachment[k4].toString().indexOf('OG') > -1) {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
            Customer_Name = objBase.find_text_btw_key(objDBPolicy_Email['Response_Core']['text'], 'Dear ', ', ', false);
        }
        if (From_Email === 'noreply@godigit.com' && Sub.indexOf('Your policy is here: Policy no.') > -1) { //done
            is_email_sub_passed = true;
            Policy_Number = Sub.split('Your policy is here: Policy no. ')[1];
            for (let k4 in Arr_Attachment) {
                if (Arr_Attachment[k4].toString().toUpperCase().indexOf('SCHEDULESC') > -1) {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
            Customer_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], 'text-transform:capitalize;">', '</span>', false);
            if (Customer_Name.length < 5) {
                Customer_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], ' Hi ', ',', false);
            }

        }
        if (From_Email === 'ahealthystart@religarehealthinsurance.com' && Sub.indexOf('Thank you for choosing Care Health Insurance') > -1) { //done
            is_email_sub_passed = true;
            Policy_Number = Sub.split('(')[1].split('_')[0];
            for (let k4 in Arr_Attachment) {
                if (Arr_Attachment[k4].toString().indexOf(Policy_Number) > -1) {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
//Customer_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], 'text-transform:capitalize;">', '</span>', false);
        }
        if (From_Email === 'Motor.Policy@bhartiaxa.com' && Sub.indexOf('Policy Documents') > -1) {
            is_email_sub_passed = true;
            Policy_Number = objDBPolicy_Email['Content'].split('Policy no. ')[1].split(' ')[0];
            for (let k4 in Arr_Attachment) {
                if (Arr_Attachment[k4].toString().indexOf('PolicySchedule') > -1) {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
            if (objDBPolicy_Email['Content'].indexOf('MR. ') > -1) {
                Customer_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], 'MR. ', ',<br/>', false);
            }
            if (objDBPolicy_Email['Content'].indexOf('MRS. ') > -1) {
                Customer_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], 'MRS. ', ',<br/>', false);
            }
        }
        if (From_Email === 'hdfcergo.service@hdfcergo.com' && (Sub.indexOf('Insurance Policy Number') > -1 || Sub.indexOf('Policy of Insurance') > -1 || Sub.indexOf('Welcome to HDFC ERGO family') > -1)) {
            is_email_sub_passed = true;
            Pg_Transaction_Number = Sub.split('your reference number- ')[1];
            var policy_attachment = Arr_Attachment[0];
            Policy_Number = policy_attachment.split('_')[1].toString().replace('.pdf', '');
            for (let k4 in Arr_Attachment) {
                if (Arr_Attachment[k4].toString().indexOf('Wordings') > -1) {

                } else {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
        }
        if (From_Email === 'hdfcergo.service@hdfcergo.com' && Sub.indexOf('health Suraksha') > -1) {
            is_email_sub_passed = true;
            Pg_Transaction_Number = '';
            Policy_Number = Sub.split('Policy Number : ')[1];
            for (let k4 in Arr_Attachment) {
                if (Arr_Attachment[k4].toString().indexOf('HSP') > -1) {

                } else {
                    policy_copy_file = Arr_Attachment[k4];
                    break;
                }
            }
        }
        if (From_Email === 'servicingyou@maxbupa.com' && Sub.indexOf('Digitally Signed Policy Document For') > -1) {
            is_email_sub_passed = true;
            Pg_Transaction_Number = '';
            var policy_attachment = Arr_Attachment[0];
            Policy_Number = policy_attachment.split('_')[1].toString().replace('.pdf', '');
            policy_copy_file = policy_attachment;
            Customer_Name = Sub.split('Signed Policy Document For ')[1];
        }
        if (From_Email === 'noreply@iffcotokio.co.in' && Sub.indexOf('IFFCO Tokio Policy No') > -1) {
            is_email_sub_passed = true;
            //is_search_email = true;
            var arr_sub = Sub.split(',');
            Pg_Transaction_Number = arr_sub[0].split(' # ')[1].toString();
            Policy_Number = arr_sub[1].split(':')[1].toString().replace(' ', '');
            Customer_Name = Sub.split('Policy Holder Name:')[1];
        }
        if (From_Email === 'no-reply@royalsundaram.in' && Sub.indexOf('Policy purchased') > -1) {
            is_email_sub_passed = true;
            //is_search_email = true;
            Pg_Transaction_Number = Sub.split(' : ')[1];
            First_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], 'Dear ', ',', false);
        }
        if (From_Email === 'customerservice@universalsompo.com' && Sub.indexOf('Motor policy document') > -1) {
            is_email_sub_passed = true;
            //First_Name = objBase.find_text_btw_key(objDBPolicy_Email['Content'], 'Dear ', ',<br>', false);
            var policy_attachment = Arr_Attachment[0];
            Policy_Number = policy_attachment.split('_')[1].toString().replace('.pdf', '');
        }
        if (From_Email === 'relay@hdfcergohealth.com' && Sub.indexOf('Insurance Policy Schedule') > -1) {
            is_email_sub_passed = true;
            Policy_Number = objBase.find_text_btw_key(Sub, 'Policy Schedule : ', '|', false);
        }
        Insurer_Id = Insurer_Id - 0;
        try {
            var objPolicyEmail = {
                'Insurer_Id': Insurer_Id,
                'Customer_Name': Customer_Name,
                'Policy_Number': Policy_Number,
                'Transaction_Number': Pg_Transaction_Number
            };
            Policy_Email.update({'Policy_Email_Id': objDBPolicy_Email.Policy_Email_Id}, {$set: objPolicyEmail}, function (err, numAffected) {
                if (err) {
                    console.error('Exception', 'policy_crn_tag', err, PB_CRN, User_Data_Id);
                }
            });
        } catch (e) {
            console.error('Exception', 'Policy_Email_Update', e.stack);
        }
        console.error('LOG', 'CRN_TAG', From_Email, To_Email, Customer_Name, Registration_Num);
        if (Insurer_Id === 5 && Pg_Transaction_Number !== '') {
            UD_Cond["Insurer_Transaction_Identifier"] = Pg_Transaction_Number;
        }
        if (To_Email !== '') {
            UD_Cond["Erp_Qt_Request_Core.___email___"] = To_Email;
        }
        if (Customer_Name !== '') {
            UD_Cond["Erp_Qt_Request_Core.___contact_name___"] = Customer_Name.replace('  ', ' ');
        }
        if (First_Name !== '') {
            UD_Cond["Erp_Qt_Request_Core.___first_name___"] = First_Name;
        }
        if (Registration_Num !== '') {
            UD_Cond["Erp_Qt_Request_Core.___registration_no___"] = Registration_Num;
        }

        var PB_CRN = 0;
        var User_Data_Id = 0;
        if (UD_Cond && Insurer_Id > 0 && is_email_sub_passed === true && To_Email !== '') {
            UD_Cond["Modified_On"] = {"$gte": dateFrom};
            UD_Cond["Insurer_Id"] = Insurer_Id;
            UD_Cond["Last_Status"] = {$nin: ['ALREADY_CLOSED', 'TRANS_SUCCESS_WITH_POLICY']};
            console.error('Log', 'policy_crn_tag', 'UD_Cond', From_Email, UD_Cond);
            User_Data.find(UD_Cond).select(['User_Data_Id', 'Insurer_Id', 'Product_Id', 'PB_CRN', 'Report_Summary', 'Status_History', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).sort({'Modified_On': -1}).limit(5).exec(function (err, dbUsers) {
                if (!err) {
                    try {
                        if (dbUsers && dbUsers.length > 0) {
                            let is_pg_dropoff = null;
                            let is_policy_pending = true;
                            let user = null;
                            for (let k in dbUsers) {
                                user = dbUsers[k]._doc;
                                if (['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_MANUAL'].indexOf(user.Last_Status) > -1) {
                                    is_pg_dropoff = false;
                                    PB_CRN = user['PB_CRN'];
                                    User_Data_Id = user['User_Data_Id'];
                                    break;
                                }
                            }
                            if (is_pg_dropoff === null) {
                                for (let k in dbUsers) {
                                    user = dbUsers[k]._doc;
                                    for (let k1 in user['Status_History']) {
                                        if (['PROPOSAL_SUBMIT', 'TRANS_FAIL', 'INSPECTION_APPROVED', 'INSPECTION_POLICY_ISSUED', 'TRANS_PAYPASS'].indexOf(user['Status_History'][k1]['Status']) > -1) {
                                            is_pg_dropoff = true;
                                            PB_CRN = user['PB_CRN'];
                                            User_Data_Id = user['User_Data_Id'];
                                            break;
                                        }
                                    }
                                }
                            }
                            if (is_policy_pending === true && is_pg_dropoff !== null) {
                                let proposal_type = (is_pg_dropoff === true) ? 'PGDROP' : 'PGNONDROP';
                                var Email = require('../models/email');
                                var objModelEmail = new Email();
                                var sub = '[' + config.environment.name.toString().toUpperCase() + ']UNTAGGED_POLICY : ' + proposal_type + ' : ' + objDBPolicy_Email['Policy_Email_Id'] + ' ,CRN:' + PB_CRN;
                                var arr_to = ['notifications@policyboss.com', 'nikita.jadhav@policyboss.com'];
                                var arr_bcc = [config.environment.notification_email];
                                var arr_cc = [];
                                var attachment_txt = [];
                                var arr_attachment = Attachment.split(',');
                                for (let k3 in arr_attachment) {
                                    attachment_txt.push('<a href="' + config.environment.downloadurl + ((Insurer_Id == 44 || Insurer_Id == 1 || Insurer_Id == 34) ? '/customer_care_email/' : '/policy_email/') + arr_attachment[k3] + '" target="_BLANK">' + arr_attachment[k3] + '</a>');
                                }
                                var obj_untag_policy = {
                                    'Policy_Email_Id': objDBPolicy_Email['Policy_Email_Id'],
                                    'To': To_Email,
                                    'From': From_Email,
                                    'Sub': objDBPolicy_Email['Sub'],
                                    'Attachment': attachment_txt.join('<br>'),
                                    'Attachment_Link': Attachment,
                                    'Policy_No': Policy_Number,
                                    'Pg_Transaction_Number': Pg_Transaction_Number,
                                    'Customer_Name': Customer_Name
                                };
                                var contentSms_Log = "UNTAGGED_POLICY<BR>-------------------<BR>";
                                for (let k4 in obj_untag_policy) {
                                    contentSms_Log += k4 + ' : ' + obj_untag_policy[k4] + '<BR>';
                                }
                                var email_body = contentSms_Log;
                                var email_data = '<!DOCTYPE html><html><head><title>POLICY_UNTAG_NOTIFICATION</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                                email_data += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">POLICY_UNTAG_NOTIFICATION</span><table border="1" cellpadding="3" cellspacing="0" width="90%"  >';
                                email_data += '<tr><td  width="70%" style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + email_body + '&nbsp;</td></tr>';
                                email_data += '</table></div><br></body></html>';
                                if (arr_to.length) {
                                    objModelEmail.send('noreply@policyboss.com', arr_to.join(','), sub, email_data, arr_cc.join(','), arr_bcc.join(','), PB_CRN);
                                }



//for auto reconsile process start

                                try {
                                    let Status_History = user.Status_History;
                                    let Last_Status = 'TRANS_SUCCESS_WITH_POLICY';
                                    Status_History.unshift({
                                        "Status": Last_Status,
                                        'Action': 'AUTO_TAG',
                                        "StatusOn": new Date()
                                    });
                                    let ObjUser_Data = {};
                                    ObjUser_Data.Last_Status = Last_Status;
                                    ObjUser_Data.Status_History = Status_History;
                                    let Transaction_Data = null;
                                    let pdf_sys_loc_horizon = '';
                                    let pdf_web_path_horizon = '';
                                    let pdf_file_name = '';
                                    if (is_pg_dropoff === false) {
                                        Transaction_Data = user['Transaction_Data'];
                                        if (user.Transaction_Data.policy_url) {
                                            pdf_file_name = user.Transaction_Data.policy_url;
                                            pdf_file_name = pdf_file_name.split('/');
                                            pdf_file_name = pdf_file_name[pdf_file_name.length - 1];
                                            pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pdf_file_name;
                                            pdf_web_path_horizon = config.environment.downloadurl + config.pb_config.pdf_web_loc + pdf_file_name;
                                        } else {
                                            pdf_file_name = objBase.create_policy_file_name(Policy_Number, Insurer_Id, user['Product_Id']);
                                            pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pdf_file_name;
                                            pdf_web_path_horizon = config.environment.downloadurl + config.pb_config.pdf_web_loc + pdf_file_name;
                                            Transaction_Data['policy_url'] = pdf_web_path_horizon;
                                        }
                                        Transaction_Data['policy_number'] = Policy_Number;
                                    }
                                    if (is_pg_dropoff === true) {
                                        pdf_file_name = objBase.create_policy_file_name(Policy_Number, Insurer_Id, user['Product_Id']);
                                        pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pdf_file_name;
                                        pdf_web_path_horizon = config.environment.downloadurl + config.pb_config.pdf_web_loc + pdf_file_name;
                                        Transaction_Data = {
                                            "policy_url": pdf_web_path_horizon,
                                            "pg_debit_msg_url": null,
                                            "pg_debit_statement_url": null,
                                            "policy_number": Policy_Number,
                                            "policy_id": null,
                                            "transaction_status": 'SUCCESS',
                                            "pg_status": 'SUCCESS',
                                            "transaction_id": Pg_Transaction_Number,
                                            "transaction_amount": user['Erp_Qt_Request_Core']['___final_premium___'],
                                            "pg_reference_number_1": Pg_Transaction_Number,
                                            "pg_reference_number_2": null,
                                            "pg_reference_number_3": null
                                        };
                                        ObjUser_Data.Modified_On = new Date();
                                        ObjUser_Data.ERP_CS = 'PENDING';
                                    }
                                    ObjUser_Data.Transaction_Data = Transaction_Data;
                                    let policy_source_folder = (Insurer_Id == 44 || Insurer_Id == 1 || Insurer_Id == 34) ? 'customer_care_email' : 'policy_email';
                                    let Pdf_Source = appRoot + "/tmp/" + policy_source_folder + "/" + policy_copy_file;
                                    fs.copyFileSync(Pdf_Source, pdf_sys_loc_horizon);
                                    User_Data.update({'User_Data_Id': user['User_Data_Id']}, {$set: ObjUser_Data}, function (err, numAffected) {
                                        if (err) {
                                            console.error('Exception', 'PB_CRN_TAG', 'UserDataPolicyDataUpdate', err, numAffected);
                                        } else {
                                            if (is_pg_dropoff === true) {
                                                objBase.send_verification_notification(user['User_Data_Id']);
                                            }
                                            objBase.send_policy_upload_notification(user['User_Data_Id']);
                                        }
                                    });
                                } catch (e) {
                                    console.error('Exception', 'PB_CRN_TAG', e.stack);
                                }

                                /*
                                 try {
                                 //untag marking start
                                 var Status_History = user.Status_History;
                                 Status_History.unshift({
                                 "Status": "TRANS_SUCCESS_MANUAL",
                                 "SubStatus": "AUTO_TAG",
                                 "Data": obj_untag_policy,
                                 "StatusOn": new Date()
                                 });
                                 var objUserData = {
                                 "Last_Status": "TRANS_SUCCESS_MANUAL",
                                 "Modified_On": new Date(),
                                 "Status_History": Status_History
                                 };
                                 User_Data.update({'User_Data_Id': user.User_Data_Id}, {$set: objUserData}, function (err, numAffected) {
                                 //console.log('UserDataUpdated', err, numAffected);
                                 });
                                 //untag marking finish
                                 } catch (e) {
                                 console.error('Untag_error', e);
                                 }
                                 */
//for auto reconsile process end
                            }
                            var objPolicyEmail = {
                                'PB_CRN': PB_CRN,
                                'User_Data_Id': User_Data_Id
                            };
                            Policy_Email.update({'Policy_Email_Id': objDBPolicy_Email.Policy_Email_Id}, {$set: objPolicyEmail}, function (err, numAffected) {
                                if (err) {
                                    console.error('Exception', 'policy_crn_tag', err, PB_CRN, User_Data_Id);
                                }
                                var today = new Date();
                                var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                                var objSummary = {
                                    'On': moment().utcOffset("+05:30").toLocaleString(),
                                    'Policy_Email_Id': objDBPolicy_Email.Policy_Email_Id,
                                    'To': To_Email,
                                    'From': From_Email,
                                    'PB_CRN': PB_CRN,
                                    'User_Data_Id': User_Data_Id
                                };
                                fs.appendFile(appRoot + "/tmp/log/policy_crn_tag_sync_" + log_file_name + ".log", JSON.stringify(objSummary, undefined, 2), function (err) {
                                    if (err) {
                                        //return //console.log(err);
                                    }
                                    //console.log("The file was saved!");
                                });
                            });
                        }
                    } catch (e1) {
                        console.error('Exception', 'policy_crn_tag', 'callback', e1);
                    }

                }
            });
        }

    } catch (e) {
        console.error('Exception', 'policy_crn_tag', e);
    }
}
router.get('/job_policy_fetch', function (req, res, next) {
//console.log('Start', this.constructor.name, 'job_policy_fetch');
    try {
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(today).add(-2, 'days').format("YYYY-MM-D");
        var toDate = moment(today).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);

        User_Data.find({
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
            , 'Last_Status': 'TRANS_SUCCESS_WO_POLICY'}).select(['Product_Id', 'PB_CRN', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    try {
                        var objModelPolicy_Email = new Policy_Email();
                        var user = dbUsers[k]._doc;
                        var pdf_web_path_horizon = user.Transaction_Data.policy_url;
                        var insurer_pdf_url = user.Transaction_Data.insurer_pdf_url;
                        var pdf_file_name = pdf_web_path_horizon.split('"/pdf/"')[1];
                        var pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pdf_file_name;
                        var pdf_sys_loc_portal = config.pb_config.pdf_system_loc + pdf_file_name;
                        var pdf_web_path_portal = config.environment.portalurl + config.pb_config.pdf_web_loc + pdf_file_name;
                        if (user.Transaction_Data.hasOwnProperty('insurer_pdf_url') && user.Transaction_Data.insurer_pdf_url != '' && user.Transaction_Data.insurer_pdf_url != null) {
                            objModelPolicy_Email.policy_write_file(insurer_pdf_url, pdf_sys_loc_horizon, pdf_sys_loc_portal, pdf_web_path_portal, user.Request_Unique_Id);
                        } else if (user.Transaction_Data.hasOwnProperty('verification_request') && user.Transaction_Data.verification_request != null) {
                            if (user.Transaction_Data.pdf_source == 'API') {
                                var Client = require('node-rest-client').Client;
                                var client = new Client();
                                var args = {
                                    data: user.Transaction_Data.verification_request,
                                    headers: {
                                        "Content-Type": "application/json",
                                        'client_key': user.Transaction_Data.verification_request['client_key'],
                                        'secret_key': user.Transaction_Data.verification_request['secret_key']
                                    }
                                };
                                client.post(config.environment.weburl + '/quote/pdf_initiate', args, function (data, response) {
                                    if (data.Error_Code === '') {
                                        var objModelUserData = new User_Data();
                                        objModelUserData.update_policy_status(data.Request_Unique_Id);
                                    }
                                });
                            } else if (user.Transaction_Data.pdf_source == 'EMAIL') {
                                var Search_With = null;
                                Search_With = user.Transaction_Data.policy_number;
                                if (user.Insurer_Id == 10) {//royal
                                    Search_With = user.Transaction_Data.transaction_id;
                                }
                                objModelPolicy_Email.findPolicy_SavePolicy(Search_With, insurer_pdf_url, pdf_sys_loc_horizon, pdf_sys_loc_portal, pdf_web_path_portal, user.Request_Unique_Id);
                            }
                        }
                    } catch (e) {

                    }
                }
            }
        });
    } catch (e) {
//console.log(e);
    }
});
router.get('/realtime', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'realtime');
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        //console.log('report_type', report_type);
        var obj_dashboard_summary = {
            'All': {
                'Summary': {}
            },
            'Car': {
                'Summary': {}
            },
            'TW': {
                'Summary': {}
            },
            'Health': {
                'Summary': {}
            },
            'Term': {
                'Summary': {}
            }
        };
        var obj_realtime_summary = {
            'Search': [],
            'Link': [],
            'Proposal': [],
            'Closure': []
        };
        var arr_report_key = ["client", "agent", "executive", "agent_city", "product", "vehicle_make", "cc_slab", "fuel", "rto_state", "existing_insurer", "vehicle_age_slab_month", "vehicle_age_year", "claim", "ncb", "ins_type"];
        var arr_client = {
            "PolicyBoss": 0,
            "Finmart": 0
                    //"ASR": 0,
                    //"PB_Emp_App": 0,
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        var tomorrow = moment(today).add(1, 'days');
        var yesterday = moment(today).add(-1, 'days');
        var week = moment(today).add(-7, 'days');
        var month = moment(today).add(-30, 'days');
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'PROPOSAL_SAVE_AGENT'];
        var arr_link = ['PROPOSAL_LINK_SENT'];
        var arr_proposal = ['PROPOSAL_SUBMIT'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        var arr_status = ['Total', 'Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Renewal', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'Sum_Insured', 'Comm_Premium'];
        var arr_src_all = ['total', 'PB-Direct', 'PB-SS', 'FM-DC', 'FM-SM', "FM-ND", 'FM-DC-Not-Certd', 'FM-DC-Not-Regd', 'ASR'];
        var arr_src_saleable = ['total', 'PB-Direct', 'PB-SS', 'FM-DC', 'FM-SM', "FM-ND", 'FM-DC-Not-Certd', 'FM-DC-Not-Regd', 'ASR'];
        var arr_product = ['All', 'Car', 'TW', 'Health', 'Term'];
        for (var k in arr_status) {
            if (['Total', 'Search'].indexOf(arr_status[k]) > -1) {
                for (var k1 in arr_product) {
                    obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                    for (var k2 in arr_src_all) {
                        obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_all[k2]] = 0;
                    }
                }

            } else {
                for (var k1 in arr_product) {
                    obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                    for (var k2 in arr_src_saleable) {
                        obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_saleable[k2]] = 0;
                    }
                }

            }

        }

        User_Data.find({
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        }).select(['Product_Id', 'PB_CRN', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    try {
                        var user = dbUsers[k]._doc;
                        var product = Const_Product[user['Product_Id']];
                        //console.log('Product', product);
                        var Report_Summary = null;
                        var source_name = '';
                        if (user.hasOwnProperty('Report_Summary') && user['Report_Summary']) {
                            Report_Summary = user['Report_Summary'];
                            source_name = Report_Summary['client'];
                        }
                        if (user.hasOwnProperty('Premium_Request')) {
                            if (user['Premium_Request'].hasOwnProperty('client_name')) {
                                source_name = user['Premium_Request']['client_name'];
                            }
                        } else {
                            user['Premium_Request'] = {};
                        }

                        if (source_name == '') {
                            if (user['Client_Id'] == 2) {
                                source_name = 'PolicyBoss';
                            }
                            if (user['Client_Id'] == 3) {
                                source_name = 'Finmart';
                            }
                        }

                        client_key_val = source_name;
                        if (source_name == 'Finmart') {
                            if (user['Product_Id'] == 1 || user['Product_Id'] == 10) {
                            } else {
                                client_key_val = 'FM-DC';
                            }
                        }
                        if (source_name == 'PolicyBoss') {
                            if (user['Product_Id'] == 1 || user['Product_Id'] == 10) {
                            } else {
                                client_key_val = 'PB-Direct';
                            }
                        }
                        if (user['Product_Id'] == 1 || user['Product_Id'] == 10) {
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                if ((user['Premium_Request']['ss_id'] - 0) == 5) {
                                    client_key_val = 'FM-DC-Not-Regd';
                                } else {
                                    if (user['Premium_Request']['posp_sources'] == 1) {
                                        if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                                            client_key_val = 'FM-DC';
                                        } else {
                                            client_key_val = 'FM-DC-Not-Certd';
                                        }
                                    } else if (user['Premium_Request']['posp_sources'] == 2) {
                                        client_key_val = 'FM-SM';
                                    } else if (user['Premium_Request']['posp_sources'] == 3) {
                                        client_key_val = 'FM-ND';
                                    } else {
                                        client_key_val = 'PB-SS';
                                    }
                                }
                            } else {
                                client_key_val = 'PB-Direct';
                            }
                        }
                        var plateform = 'PB-WEB';
                        var version = '';
                        if (user['Premium_Request'].hasOwnProperty('device_id') || user['Premium_Request'].hasOwnProperty('mac_address')) {
                            plateform = 'FM-APP';
                            version = user['Premium_Request']['app_version'];
                        }

                        obj_dashboard_summary['All'].Summary.Total.total++;
                        obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                        var Premium = 0;
                        Last_Status = 'Search';
                        var Sub_Status = '';
                        if (arr_search.indexOf(user['Last_Status']) > -1) {
                            Last_Status = 'Search';
                        }
                        if (arr_link.indexOf(user['Last_Status']) > -1) {
                            Last_Status = 'Link';
                        }
                        if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                            Last_Status = 'Proposal';
                        }
                        if (arr_sale.indexOf(user['Last_Status']) > -1) {
                            Sub_Status = 'Sale';
                            Last_Status = 'Closure';
                        }
                        if (arr_fail.indexOf(user['Last_Status']) > -1) {
                            Sub_Status = 'Fail';
                            Last_Status = 'Closure';
                        }
                        if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                            Sub_Status = 'Paypass';
                            Last_Status = 'Closure';
                        }
                        if (Last_Status == 'Closure') {
                            Premium = user['Erp_Qt_Request_Core']['___final_premium___'] - 0;
                        }
                        var Customer_Name = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                        if (user.hasOwnProperty('Proposal_Request')) {
                            Customer_Name = user['Proposal_Request']['first_name'] + ' ' + user['Proposal_Request']['last_name'];
                        }
                        var Agent_Name = '';
                        if (user['Premium_Request'].hasOwnProperty('ss_id') && user['Premium_Request']['ss_id'] > 0) {
                            Agent_Name = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'];
                        }



                        var obj_transaction = {
                            'Crn': user['PB_CRN'],
                            'Agent_Source': client_key_val,
                            'Customer_Name': Customer_Name,
                            'Agent_Name': Agent_Name,
                            'Product_Id': user['Premium_Request']['product_id'],
                            'Last_Status': Last_Status,
                            'Sub_Status': Sub_Status,
                            'Platform': plateform,
                            'Version': version,
                            'Modified_On': (new Date(user.Modified_On)).toLocaleString(),
                            'Premium': Premium
                        };
                        obj_realtime_summary[Last_Status].push(obj_transaction);
                    } catch (e) {
                        console.error('reportexception', e);
                    }
                }
                if (req.query.hasOwnProperty('debug')) {
                    res.send('<pre>' + JSON.stringify(obj_realtime_summary, undefined, 2) + '</pre>');
                } else {
                    res.json(obj_realtime_summary);
                }
            }
        });
    } catch (Ex) {
        console.error('Exception', 'dashboard', Ex);
    }
});
router.get('/health_dashboard_schedule', function (req, res, next) {
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        var source = (req.query.hasOwnProperty('source')) ? req.query['source'] : 'ALL';
        var arrSource = ['Total', 'PB-Direct', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'EM-NON-POSP', 'FINPEACE', 'RBS'];
        //console.log('report_type', report_type);

        var obj_dashboard_summary = {
            'All': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Car': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'TW': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Health': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Life': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'GS-POSP': null, 'GS-FOS': null, 'EM-POSP': null, 'EM-FOS': null, 'FINPEACE': null, 'RBS': null}
            }
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'daily') {
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        }
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'weekly') {
            var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = weekstart;
            req.query['dateto'] = yesterday;
        }
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'PG_RETURNED'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        //var arr_status = ['Total', 'Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'Idv', 'Comm_Premium'];
        var arr_status = {
            'Total': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
        };
        for (var k1 in arrSource) {
            obj_dashboard_summary['All']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Car']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['TW']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Health']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Life']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
        }

        var arr_dropoff = {
            'search_dropoff': [],
            'agent_bo_dropoff': [],
            'link_dropoff': [],
            'proposal_dropoff': [],
            'payment_dropoff': [],
            'sale': []
        };
        var arr_sale_vehicle = {
            'crn': []
        };
        User_Data.find({
            "Product_Id": 2,
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        }).select(['Product_Id', 'PB_CRN', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    try {
                        var user = dbUsers[k]._doc;
                        if (user['Product_Id'] == 2) {
                            var product = Const_Product[user['Product_Id']];
                            //console.log('Product', product);
                            var Report_Summary = null;
                            if (user.hasOwnProperty('Report_Summary') && user['Report_Summary']) {
                                Report_Summary = user['Report_Summary'];
                            }
                            var client_key_val = 'PB-Direct';
                            var agent_id = 0;
                            var posp_sources = user['Premium_Request']['posp_sources'];
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                agent_id = ss_id;
                                if (ss_id === 5) {
                                    agent_id = (user['Premium_Request']['fba_id'] - 0);
                                }
                            }
                            client_key_val = get_search_source(user);
                            if (source == 'PB-SS') {
                                if (['PB-SS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-DC') {
                                if (['DC-POSP', 'DC-NON-POSP', 'DC-FBA'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-SM') {
                                if (['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'ALL-GS') {
                                if (['GS-POSP', 'GS-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'ALL-EM') {
                                if (['EM-POSP', 'EM-NON-POSP', 'EM-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }

                            //obj_dashboard_summary['All'].Summary.Total.Total++;
                            //obj_dashboard_summary['All'].Summary[client_key_val].Total++;
                            Last_Status = 'Search';
                            var agent = 'NA', reporting = 'NA', agent_region = 'NA', customer = 'NA', si = 'NA', premium = 'NA', cover = 'NA', plateform = 'NA';
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                agent = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'] + '(MO-' + user['Premium_Request']['posp_mobile_no'] + ')';
                                if (posp_sources > 0) {
                                    reporting = user['Premium_Request']['posp_reporting_agent_name'] + '(MO-' + user['Premium_Request']['posp_reporting_mobile_number'] + ')';
                                }
                                agent_region = user['Premium_Request']['posp_agent_city'];
                            }
                            customer = user['Premium_Request']['contact_name'];
                            if (user['Premium_Request'].hasOwnProperty('first_name')) {
                                customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                            }
                            si = user['Premium_Request']['health_insurance_si'];
                            cover = user['Premium_Request']['health_insurance_type'];
                            if (user['Premium_Request'].hasOwnProperty('app_version') && user['Premium_Request']['app_version'] !== 'PolicyBoss.com') {
                                platform = 'Finmart-App-' + user['Premium_Request']['app_version'].toString();
                            } else {
                                platform = 'PolicyBoss.com';
                            }
                            if (arr_search.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Search';
                                var obj_search_dropoff = {
                                    'PB_CRN': user['PB_CRN'],
                                    'Source': client_key_val,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Region': agent_region,
                                    'Customer': customer,
                                    'Cover': cover,
                                    'SI': si,
                                    'Platform': platform,
                                    'DateTime': (new Date(user.Modified_On)).toLocaleString()
                                };
                                arr_dropoff.search_dropoff.push(obj_search_dropoff);
                            }

                            if (arr_link.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Link';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                            }
                            if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Proposal';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                            }
                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Sale';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') {
                                    obj_dashboard_summary['All'].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['ErpCs']++;
                                    obj_dashboard_summary[product].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['ErpCs']++;
                                }
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                                var transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                transaction_amount = Math.round(transaction_amount);
                                if (transaction_amount > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Premium'] += transaction_amount;
                                }
                                var si_sale = user['Erp_Qt_Request_Core']['___health_insurance_si___'];
                                if (si_sale > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['SI'] += si_sale;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['SI'] += si_sale;
                                    obj_dashboard_summary[product].Summary.Total['SI'] += si_sale;
                                    obj_dashboard_summary[product].Summary[client_key_val]['SI'] += si_sale;
                                }
                                var insurer = user['Erp_Qt_Request_Core']['___insurerco_name___'];
                                //insurer = insurer[0];

                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    if (posp_sources === 0) {
                                        agent = user['Erp_Qt_Request_Core']['___posp_reporting_agent_name___'] + '(MO-' + user['Premium_Request']['posp_reporting_mobile_number'] + ')';
                                        reporting = 'PolicyBoss SS';
                                    }
                                }
                                var lm_status = 'NA';
                                var platform = '';
                                if (user['Premium_Request'].hasOwnProperty('device_id')) {
                                    platform = 'APP-' + user['Premium_Request']['app_version'].toString();
                                } else {
                                    platform = 'PolicyBoss.com';
                                }
                                var obj_sale = {
                                    'Source': client_key_val,
                                    'Product': product,
                                    'Platform': platform,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Insurer': insurer,
                                    'PB_CRN': user['PB_CRN'],
                                    'Erp_CS': (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') ? user['ERP_CS'] : 'Pending',
                                    'Cover': user['Premium_Request']['health_insurance_type'],
                                    'Premium': transaction_amount,
                                    'SI': si_sale,
                                    'Policy_Tenure': user['Erp_Qt_Request_Core']['___policy_tenure___'],
                                    'Plan': user['Erp_Qt_Request_Core']['___erp_plan_name___'],
                                    'Member': user['Erp_Qt_Request_Core']['___adult_count___'] + 'A_' + user['Erp_Qt_Request_Core']['___child_count___'] + 'C',
                                    'Location': user['Erp_Qt_Request_Core']['___city_name___']
                                };
                                if (req.query['type'] !== 'daily') {
                                    var dt = (new Date(user.Modified_On)).toLocaleString();
                                    dt = dt.split(',');
                                    obj_sale['Transact_On'] = dt[0];
                                }
                                arr_sale_vehicle.crn.push(user['PB_CRN']);
                                arr_dropoff.sale.push(obj_sale);
                            }
                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Fail';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Paypass';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            obj_dashboard_summary['All'].Summary.Total[Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary[product].Summary.Total[Last_Status]++;
                            obj_dashboard_summary[product].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val]['Dropoff'] = obj_dashboard_summary['All'].Summary[client_key_val]['Proposal'] - (obj_dashboard_summary['All'].Summary[client_key_val]['Sale'] + obj_dashboard_summary['All'].Summary[client_key_val]['Paypass']);
                            var arr_dropoff_status = [
                                'BUY_NOW_AGENT',
                                'PROPOSAL_SAVE_AGENT',
                                'PROPOSAL_LINK_SENT',
                                'BUY_NOW_CUSTOMER',
                                'PROPOSAL_SAVE_CUSTOMER',
                                'PROPOSAL_SUBMIT',
                                'TRANS_FAIL'
                            ];
                            if (arr_dropoff_status.indexOf(user['Last_Status']) > -1) {
                                if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] != null) {
                                    customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                    premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                    si = user['Erp_Qt_Request_Core']['___health_insurance_si___'];
                                }
                                var obj_lead = {
                                    'PB_CRN': user['PB_CRN'],
                                    'Source': client_key_val,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Region': agent_region,
                                    'Customer': customer,
                                    'Premium': premium,
                                    'SI': si,
                                    'DateTime': (new Date(user.Modified_On)).toLocaleString()
                                };
                                if (['BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.agent_bo_dropoff.push(obj_lead);
                                } else if (['PROPOSAL_SUBMIT', 'TRANS_FAIL'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.payment_dropoff.push(obj_lead);
                                } else if (['BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.proposal_dropoff.push(obj_lead);
                                } else if (['PROPOSAL_LINK_SENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.link_dropoff.push(obj_lead);
                                }

                            }
                        }
                    } catch (e) {
                        console.error('Report_Loop', e);
                    }
                }
                obj_dashboard_summary['All'].Summary.Total['Dropoff'] = obj_dashboard_summary['All'].Summary.Total['Proposal'] - (obj_dashboard_summary['All'].Summary.Total['Sale'] + obj_dashboard_summary['All'].Summary.Total['Paypass']);
                if (req.query.hasOwnProperty('type')) {

                    var reporttitle = 'HORIZON_HEALTH_' + req.query['type'].toString().toUpperCase() + '_REPORT::';
                    if (req.query['type'] == 'daily') {
                        var yesterday = moment(today).add(-1, 'days').format("D-MMM-YYYY");
                        reporttitle += yesterday.toString();
                    } else {
                        var fromMoment = moment(req.query['datefrom']).format("D-MMM-YYYY");
                        var toMoment = moment(req.query['dateto']).format("D-MMM-YYYY");
                        reporttitle += fromMoment.toString() + '_To_' + toMoment.toString();
                    }
                    var subject = '[' + config.environment.name.toString().toUpperCase() + '-REPORT][' + source + ']' + reporttitle;
                    subject = subject.replace(/-/g, '_');
                    var content_html = '<!DOCTYPE html><html><head><title>' + reporttitle + '</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + reporttitle + '</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    content_html += '<tr>';
                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Status</th>';
                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Total</th>';
                    var arr_src = [];
                    if (source == 'ALL') {
                        arr_src = ['PB-Direct', 'PB-SS', 'PB-CAMP', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'FINPEACE', 'BOT', 'RBS'];
                    }
                    if (source == 'FM-DC') {
                        arr_src = ['DC-POSP', 'DC-NON-POSP', 'DC-FBA'];
                    }
                    if (source == 'FM-SM') {
                        arr_src = ['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'];
                    }
                    if (source == 'ALL-GS') {
                        arr_src = ['GS-POSP', 'GS-FOS'];
                    }
                    if (source == 'ALL-EM') {
                        arr_src = ['EM-POSP', 'EM-NON-POSP', 'EM-FOS'];
                    }
                    if (source == 'PB-SS') {
                        arr_src = ['PB-SS'];
                    }

                    var arrSource = ['Total'];
                    var arr_sts = ['Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'SI'];
                    for (var k in arr_src) {
                        arrSource.push(arr_src[k]);
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + arr_src[k] + '</th>';
                    }
                    content_html += '</tr>';
                    for (var k in arr_sts) {
                        content_html += '<tr>';
                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:#f97490" align="center"><b>' + arr_sts[k] + '</b></td>';
                        for (var k1 in arrSource) {
                            if (arrSource[k1] == 'Total') {
                                color = '#01dfd7';
                            } else {
                                color = 'white';
                            }
                            var cnt = 0;
                            if (obj_dashboard_summary.All.Summary[arrSource[k1]]) {
                                cnt = obj_dashboard_summary.All.Summary[arrSource[k1]][arr_sts[k]];
                            }
                            content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + cnt + '</td>';
                        }
                        content_html += '</tr>';
                    }
                    content_html += '</table></div><br><br>';
                    var color = 'white';
                    var arr_lead_fld = {
                        'CRN': null,
                        'Source': null,
                        'Agent': null,
                        'Reporting': null,
                        'Region': null,
                        'Customer': null,
                        'Premium': null,
                        'SI': null,
                        'DateTime': null
                    };
                    //sales report
                    content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Sales Report(#' + arr_dropoff.sale.length + ')</span>\n\
                    <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    content_html += '<tr>';
                    var table_head = arr_dropoff.sale[0];
                    for (var k in table_head) {
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                    }
                    content_html += '</tr>';
                    for (var k in arr_dropoff.sale) {
                        content_html += '<tr>';
                        var ind_data = arr_dropoff.sale[k];
                        for (var k1 in ind_data) {
                            content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + ind_data[k1] + '</td>';
                        }
                        content_html += '</tr>';
                    }
                    content_html += '</table></div><br><br>';
                    if (req.query['type'] != 'custom' && req.query['type'] != 'monthly' && req.query['source'] != 'ALL') {


                        //payment dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Dropoff(#___payment_dropoff___)</span>\n\
		<br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer redirects to PG, but Premium not Paid</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        var dropoff = {
                            'all_dropoff': [],
                            'payment_dropoff': [],
                            'proposal_dropoff': [],
                            'link_dropoff': [],
                            'agent_bo_dropoff': []
                        };
                        for (var k in arr_dropoff.payment_dropoff) {
                            var ind_data = arr_dropoff.payment_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.payment_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.payment_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.payment_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___payment_dropoff___', dropoff.payment_dropoff.length);
                        //PROPOSAL dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Proposal Dropoff(#___proposal_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer opens link, but not submit proposal</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.proposal_dropoff) {
                            var ind_data = arr_dropoff.proposal_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.proposal_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.proposal_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.proposal_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___proposal_dropoff___', dropoff.proposal_dropoff.length);
                        //link dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Link Dropoff(#___link_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer receives link, but not open link</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.link_dropoff) {
                            var ind_data = arr_dropoff.link_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.link_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.link_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.link_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___link_dropoff___', dropoff.link_dropoff.length);
                        //agent bo dropoff

                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Agent Search Dropoff(#___agent_bo_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Agent opens proposal page, but Not send link to Customer</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.agent_bo_dropoff) {
                            var ind_data = arr_dropoff.agent_bo_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.agent_bo_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.agent_bo_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.agent_bo_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___agent_bo_dropoff___', dropoff.agent_bo_dropoff.length);
                    }
                    content_html += '</body></html>';
                    res.send(content_html);
                    if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        if (req.query['dbg'] === 'yes') {
                            objModelEmail.send('notifications@policyboss.com', 'chirag.modi@policyboss.com', subject, content_html, '', '');
                        } else {
                            if (source == 'ALL') {
                                objModelEmail.send('notifications@policyboss.com', 'susheeltejuja@landmarkinsurance.in,apaar.kasliwal@landmarkinsurance.in,varun.kaushik@policyboss.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'FM-DC') {
                                objModelEmail.send('notifications@policyboss.com', 'srinivas@policyboss.com,ashutosh.sharma@magicfinmart.com,coordinator@magicfinmart.com,apaar.kasliwal@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'FM-SM') {
                                objModelEmail.send('notifications@policyboss.com', 'susheel.menon@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'ALL-EM') {
                                var arr_to = [
                                    'kevin.menezes@policyboss.com',
                                    'manju.gonda@policyboss.com',
                                    'mandeep.singh@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'ALL-GS') {
                                var arr_to = [
                                    'gagandeep.singh@policyboss.com',
                                    'saroj.singh@policyboss.com',
                                    'shabana.gaus@policyboss.com',
                                    'satbir.singh@policyboss.com',
                                    'rajneesh.kumar@policyboss.com',
                                    'kalpesh.chauhan@policyboss.com',
                                    'Ganesh.venkataraman@policyboss.com',
                                    'balveer.gupt@policyboss.com',
                                    'Kaustubh.Shandilya@policyboss.com',
                                    'vishal.gaur@policyboss.com',
                                    'vikas.chauhan@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'PB-SS') {
                                objModelEmail.send('notifications@policyboss.com', 'Santosh.singh@policyboss.com,apaar.kasliwal@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                        }

                    }

                } else if (req.hasOwnProperty('debug')) {
                    res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                } else {
                    res.json(obj_dashboard_summary);
                }
            }
        });
    } catch (Ex) {
        throw Ex;
        console.error('Exception', 'dashboard', Ex);
    }
});
router.get('/life_dashboard_schedule', function (req, res, next) {
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        var source = (req.query.hasOwnProperty('source')) ? req.query['source'] : 'ALL';
        var arrSource = ['Total', 'PB-Direct', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'FINPEACE', 'RBS'];
        //console.log('report_type', report_type);

        var obj_dashboard_summary = {
            'All': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Car': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'TW': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Health': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'FINPEACE': null, 'RBS': null}
            },
            'Life': {
                'Summary': {'Total': null, 'PB-Direct': null, 'BOT': null, 'PB-SS': null, 'DC-POSP': null, 'DC-NON-POSP': null, 'DC-FBA': null, 'SM-POSP': null, 'SM-NON-POSP': null, 'SM-FBA': null, 'SM-FOS': null, 'FINPEACE': null, 'RBS': null}
            }
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'daily') {
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        }
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'weekly') {
            var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = weekstart;
            req.query['dateto'] = yesterday;
        }
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT', 'PG_RETURNED'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        //var arr_status = ['Total', 'Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'Idv', 'Comm_Premium'];
        var arr_status = {
            'Total': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
        };
        for (var k1 in arrSource) {
            obj_dashboard_summary['All']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Car']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['TW']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Health']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
            obj_dashboard_summary['Life']['Summary'][arrSource[k1]] = {
                'Unique_Agent_List': [], 'Unique_Agent': 0, 'Search': 0, 'Link': 0, 'Proposal': 0, 'Sale': 0, 'ErpCs': 0, 'Paypass': 0, 'Fail': 0, 'Dropoff': 0, 'Premium': 0, 'Idv': 0, 'Comm_Premium': 0
            };
        }

        var arr_dropoff = {
            'search_dropoff': [],
            'agent_bo_dropoff': [],
            'link_dropoff': [],
            'proposal_dropoff': [],
            'payment_dropoff': [],
            'sale': []
        };
        var arr_sale_vehicle = {
            'crn': []
        };
        User_Data.find({
            "Product_Id": 3,
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        }).select(['Product_Id', 'PB_CRN', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    try {
                        var user = dbUsers[k]._doc;
                        if (user['Product_Id'] == 3) {
                            var product = 'Life';
                            //console.log('Product', product);
                            var Report_Summary = null;
                            if (user.hasOwnProperty('Report_Summary') && user['Report_Summary']) {
                                Report_Summary = user['Report_Summary'];
                            }
                            var client_key_val = 'PB-Direct';
                            var agent_id = 0;
                            var posp_sources = user['Premium_Request']['posp_sources'];
                            if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 2 || user['Product_Id'] == 3) {
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    var ss_id = (user['Premium_Request']['ss_id'] - 0);
                                    agent_id = ss_id;
                                    if (posp_sources == 1) {
                                        if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                                            client_key_val = 'DC-POSP';
                                        } else if (ss_id !== 5) {
                                            if ([8279, 6328, 9627, 6425].indexOf(ss_id) > -1) {
                                                client_key_val = 'FINPEACE';
                                            } else {
                                                client_key_val = 'DC-NON-POSP';
                                            }
                                        } else if (ss_id === 5) {
                                            client_key_val = 'DC-FBA';
                                            agent_id = (user['Premium_Request']['fba_id'] - 0);
                                        }
                                    } else if (posp_sources == 2) {
                                        if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                                            client_key_val = 'SM-POSP';
                                        } else if (ss_id === 5) {
                                            client_key_val = 'SM-FBA';
                                            agent_id = (user['Premium_Request']['fba_id'] - 0);
                                        } else {
                                            client_key_val = 'SM-NON-POSP';
                                        }
                                    } else {
                                        if (user['Premium_Request']['posp_category'] == 'FOS') {
                                            client_key_val = 'SM-FOS';
                                        } else if (user['Premium_Request']['posp_category'] == 'RBS') {
                                            client_key_val = 'RBS';
                                        } else {
                                            client_key_val = 'PB-SS';
                                        }
                                    }
                                } else if (user['Premium_Request']['user_source'] == 'tars') {
                                    client_key_val = 'BOT';
                                }
                            }

                            if (source == 'PB-SS') {
                                if (['PB-SS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-DC') {
                                if (['DC-POSP', 'DC-NON-POSP', 'DC-FBA'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-SM') {
                                if (['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }

                            //obj_dashboard_summary['All'].Summary.Total.Total++;
                            //obj_dashboard_summary['All'].Summary[client_key_val].Total++;
                            Last_Status = 'Search';
                            var agent = 'NA', reporting = 'NA', agent_region = 'NA', customer = 'NA', si = 'NA', premium = 'NA', cover = 'NA', plateform = 'NA';
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                agent = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'] + '(MO-' + user['Premium_Request']['posp_mobile_no'] + ')';
                                if (posp_sources > 0) {
                                    reporting = user['Premium_Request']['posp_reporting_agent_name'] + '(MO-' + user['Premium_Request']['posp_reporting_mobile_number'] + ')';
                                }
                                agent_region = user['Premium_Request']['posp_agent_city'];
                            }
                            customer = user['Premium_Request']['contact_name'];
                            if (user['Premium_Request'].hasOwnProperty('first_name')) {
                                customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                            }
                            si = user['Premium_Request']['term_sum_assured'];
                            //cover = user['Premium_Request']['health_insurance_type'];
                            if (user['Premium_Request'].hasOwnProperty('app_version') && user['Premium_Request']['app_version'] !== 'PolicyBoss.com') {
                                platform = 'Finmart-App-' + user['Premium_Request']['app_version'].toString();
                            } else {
                                platform = 'PolicyBoss.com';
                            }
                            if (arr_search.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Search';
                                var obj_search_dropoff = {
                                    'PB_CRN': user['PB_CRN'],
                                    'Source': client_key_val,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Region': agent_region,
                                    'Customer': customer,
                                    //'Cover': cover,
                                    'SumAssured': si,
                                    'Platform': platform,
                                    'DateTime': (new Date(user.Modified_On)).toLocaleString()
                                };
                                arr_dropoff.search_dropoff.push(obj_search_dropoff);
                            }

                            if (arr_link.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Link';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                            }
                            if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Proposal';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                            }
                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Sale';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') {
                                    obj_dashboard_summary['All'].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['ErpCs']++;
                                    obj_dashboard_summary[product].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['ErpCs']++;
                                }
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                                var transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                transaction_amount = Math.round(transaction_amount);
                                if (transaction_amount > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Premium'] += transaction_amount;
                                }
                                var si_sale = user['Erp_Qt_Request_Core']['___health_insurance_si___'];
                                if (si_sale > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['SI'] += si_sale;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['SI'] += si_sale;
                                    obj_dashboard_summary[product].Summary.Total['SI'] += si_sale;
                                    obj_dashboard_summary[product].Summary[client_key_val]['SI'] += si_sale;
                                }
                                var insurer = user['Erp_Qt_Request_Core']['___insurerco_name___'];
                                //insurer = insurer[0];

                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    if (posp_sources === 0) {
                                        agent = user['Erp_Qt_Request_Core']['___posp_reporting_agent_name___'] + '(MO-' + user['Premium_Request']['posp_reporting_mobile_number'] + ')';
                                        reporting = 'PolicyBoss SS';
                                    }
                                }
                                var lm_status = 'NA';
                                var platform = '';
                                if (user['Premium_Request'].hasOwnProperty('device_id')) {
                                    platform = 'APP-' + user['Premium_Request']['app_version'].toString();
                                } else {
                                    platform = 'PolicyBoss.com';
                                }
                                var obj_sale = {
                                    'Source': client_key_val,
                                    'Product': product,
                                    'Platform': platform,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Insurer': insurer,
                                    'PB_CRN': user['PB_CRN'],
                                    'Erp_CS': (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') ? user['ERP_CS'] : 'Pending',
                                    //'Cover': user['Premium_Request']['health_insurance_type'],
                                    'Premium': transaction_amount,
                                    'SumAssured': si_sale
                                };
                                if (req.query['type'] !== 'daily') {
                                    var dt = (new Date(user.Modified_On)).toLocaleString();
                                    dt = dt.split(',');
                                    obj_sale['Transact_On'] = dt[0];
                                }
                                arr_sale_vehicle.crn.push(user['PB_CRN']);
                                arr_dropoff.sale.push(obj_sale);
                            }
                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Fail';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Paypass';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            obj_dashboard_summary['All'].Summary.Total[Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary[product].Summary.Total[Last_Status]++;
                            obj_dashboard_summary[product].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val]['Dropoff'] = obj_dashboard_summary['All'].Summary[client_key_val]['Proposal'] - (obj_dashboard_summary['All'].Summary[client_key_val]['Sale'] + obj_dashboard_summary['All'].Summary[client_key_val]['Paypass']);
                            var arr_dropoff_status = [
                                'BUY_NOW_AGENT',
                                'PROPOSAL_SAVE_AGENT',
                                'PROPOSAL_LINK_SENT',
                                'BUY_NOW_CUSTOMER',
                                'PROPOSAL_SAVE_CUSTOMER',
                                'PROPOSAL_SUBMIT',
                                'TRANS_FAIL'
                            ];
                            if (arr_dropoff_status.indexOf(user['Last_Status']) > -1) {
                                var application_number = 'NA';
                                var insurer = 'NA';
                                if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] != null) {
                                    customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                    premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                    si = user['Erp_Qt_Request_Core']['___term_sum_assured___'];
                                    application_number = user['Erp_Qt_Request_Core']['___application_number___'];
                                    insurer = user['Erp_Qt_Request_Core']['___insurerco_name___'];
                                }
                                var obj_lead = {
                                    'PB_CRN': user['PB_CRN'],
                                    'Source': client_key_val,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Region': agent_region,
                                    'Customer': customer,
                                    'Insuer': insurer,
                                    'ApplicationNumber': application_number,
                                    'Premium': premium,
                                    'SumAssured': si,
                                    'DateTime': (new Date(user.Modified_On)).toLocaleString()
                                };
                                if (['BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.agent_bo_dropoff.push(obj_lead);
                                } else if (['PROPOSAL_SUBMIT', 'TRANS_FAIL'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.payment_dropoff.push(obj_lead);
                                } else if (['BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.proposal_dropoff.push(obj_lead);
                                } else if (['PROPOSAL_LINK_SENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.link_dropoff.push(obj_lead);
                                }

                            }
                        }
                    } catch (e) {
                        console.error('Exception', 'life_dashboard_schedule', 'Report_Loop', e);
                    }
                }
                try {
                    obj_dashboard_summary['All'].Summary.Total['Dropoff'] = obj_dashboard_summary['All'].Summary.Total['Proposal'] - (obj_dashboard_summary['All'].Summary.Total['Sale'] + obj_dashboard_summary['All'].Summary.Total['Paypass']);
                    if (req.query.hasOwnProperty('type')) {

                        var reporttitle = 'HORIZON_LIFE_' + req.query['type'].toString().toUpperCase() + '_REPORT::';
                        if (req.query['type'] == 'daily') {
                            var yesterday = moment(today).add(-1, 'days').format("D-MMM-YYYY");
                            reporttitle += yesterday.toString();
                        } else {
                            var fromMoment = moment(req.query['datefrom']).format("D-MMM-YYYY");
                            var toMoment = moment(req.query['dateto']).format("D-MMM-YYYY");
                            reporttitle += fromMoment.toString() + '_To_' + toMoment.toString();
                        }
                        var subject = '[' + config.environment.name.toString().toUpperCase() + '-REPORT][' + source + ']' + reporttitle;
                        subject = subject.replace(/-/g, '_');
                        var content_html = '<!DOCTYPE html><html><head><title>' + reporttitle + '</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + reporttitle + '</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Status</th>';
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Total</th>';
                        var arr_src = [];
                        if (source == 'ALL') {
                            arr_src = ['PB-Direct', 'PB-SS', 'PB-CAMP', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'FINPEACE', 'BOT', 'RBS'];
                        }
                        if (source == 'FM-DC') {
                            arr_src = ['DC-POSP', 'DC-NON-POSP', 'DC-FBA'];
                        }
                        if (source == 'FM-SM') {
                            arr_src = ['SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS'];
                        }
                        if (source == 'PB-SS') {
                            arr_src = ['PB-SS'];
                        }

                        var arrSource = ['Total'];
                        var arr_sts = ['Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'SI'];
                        for (var k in arr_src) {
                            arrSource.push(arr_src[k]);
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + arr_src[k] + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_sts) {
                            content_html += '<tr>';
                            content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:#f97490" align="center"><b>' + arr_sts[k] + '</b></td>';
                            for (var k1 in arrSource) {
                                if (arrSource[k1] == 'Total') {
                                    color = '#01dfd7';
                                } else {
                                    color = 'white';
                                }
                                var cnt = 0;
                                if (obj_dashboard_summary.All.Summary[arrSource[k1]]) {
                                    cnt = obj_dashboard_summary.All.Summary[arrSource[k1]][arr_sts[k]];
                                }
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + cnt + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        var arr_client_color = {
                            'PB-SS': '#01dfd7',
                            'PB-Direct': '#f97490',
                            'FINPEACE': 'pink',
                            'DC-POSP': '#FFC107',
                            'SM-POSP': '#4CAF50',
                            'SM-NON-POSP': '#4CAF33',
                            'SM-FBA': '#4CAF33',
                            'DC-NON-POSP': '#FF5722',
                            'DC-FBA': '#FF5722',
                            'BOT': '#4CAF50',
                            'SM-FOS': 'orange'
                        };
                        var color = 'white';
                        var arr_lead_fld = {
                            'CRN': null,
                            'Source': null,
                            'Agent': null,
                            'Reporting': null,
                            'Region': null,
                            'Customer': null,
                            'Premium': null,
                            'SI': null,
                            'DateTime': null
                        };
                        //sales report
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Sales Report(#' + arr_dropoff.sale.length + ')</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        var table_head = arr_dropoff.sale[0];
                        for (var k in table_head) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.sale) {
                            content_html += '<tr>';
                            var ind_data = arr_dropoff.sale[k];
                            for (var k1 in ind_data) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + ind_data[k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        if (req.query['type'] != 'custom' && req.query['type'] != 'monthly' && req.query['source'] != 'ALL') {
                            if (false) {
                                //search only dropoff
                                content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Search Only(#___search_dropoff___)</span>\n\
		<br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Agent searched only, not action further</span>\n\
                                <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                                content_html += '<tr>';
                                for (var k in arr_dropoff.search_dropoff[0]) {
                                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                                }
                                content_html += '</tr>';
                                for (var k in arr_dropoff.search_dropoff) {
                                    var ind_data = arr_dropoff.search_dropoff[k];
                                    content_html += '<tr>';
                                    for (var k1 in arr_dropoff.search_dropoff[k]) {
                                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.search_dropoff[k][k1] + '</td>';
                                    }
                                    content_html += '</tr>';
                                }
                                content_html += '</table></div><br><br>';
                                content_html = content_html.replace('___search_dropoff___', arr_dropoff.search_dropoff.length);
                            }
                            var dropoff = {
                                'all_dropoff': [],
                                'payment_dropoff': [],
                                'proposal_dropoff': [],
                                'link_dropoff': [],
                                'agent_bo_dropoff': []
                            };
                            console.error('Life_Report', 'payment_dropoff', arr_dropoff.payment_dropoff);
                            console.error('Life_Report', 'proposal_dropoff', arr_dropoff.proposal_dropoff);
                            console.error('Life_Report', 'link_dropoff', arr_dropoff.link_dropoff);
                            console.error('Life_Report', 'agent_bo_dropoff', arr_dropoff.agent_bo_dropoff);
                            //payment dropoff
                            content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Dropoff(#___payment_dropoff___)</span>\n\
		<br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer redirects to PG, but Premium not Paid</span>\n\
                            <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                            if (arr_dropoff.payment_dropoff.length) {
                                content_html += '<tr>';
                                var table_head = arr_dropoff.payment_dropoff[0];
                                for (var k in table_head) {
                                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                                }
                                content_html += '</tr>';
                                for (var k in arr_dropoff.payment_dropoff) {
                                    var ind_data = arr_dropoff.payment_dropoff[k];
                                    if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                        continue;
                                    }
                                    dropoff.all_dropoff.push(ind_data['PB_CRN']);
                                    dropoff.payment_dropoff.push(ind_data['PB_CRN']);
                                    content_html += '<tr>';
                                    for (var k1 in arr_dropoff.payment_dropoff[k]) {
                                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.payment_dropoff[k][k1] + '</td>';
                                    }
                                    content_html += '</tr>';
                                }
                                content_html += '</table></div><br><br>';
                                content_html = content_html.replace('___payment_dropoff___', dropoff.payment_dropoff.length);
                            }
                            //PROPOSAL dropoff
                            content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Proposal Dropoff(#___proposal_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer opens link, but not submit proposal</span>\n\
                            <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                            if (arr_dropoff.proposal_dropoff.length) {
                                content_html += '<tr>';
                                var table_head = arr_dropoff.proposal_dropoff[0];
                                for (var k in table_head) {
                                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                                }
                                content_html += '</tr>';
                                for (var k in arr_dropoff.proposal_dropoff) {
                                    var ind_data = arr_dropoff.proposal_dropoff[k];
                                    if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                        continue;
                                    }
                                    dropoff.all_dropoff.push(ind_data['PB_CRN']);
                                    dropoff.proposal_dropoff.push(ind_data['PB_CRN']);
                                    content_html += '<tr>';
                                    for (var k1 in arr_dropoff.proposal_dropoff[k]) {
                                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.proposal_dropoff[k][k1] + '</td>';
                                    }
                                    content_html += '</tr>';
                                }
                                content_html += '</table></div><br><br>';
                                content_html = content_html.replace('___proposal_dropoff___', dropoff.proposal_dropoff.length);
                            }
                            //link dropoff
                            content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Link Dropoff(#___link_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer receives link, but not open link</span>\n\
                            <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                            if (arr_dropoff.link_dropoff.length) {

                                content_html += '<tr>';
                                var table_head = arr_dropoff.link_dropoff[0];
                                for (var k in table_head) {
                                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                                }
                                content_html += '</tr>';
                                for (var k in arr_dropoff.link_dropoff) {
                                    var ind_data = arr_dropoff.link_dropoff[k];
                                    if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                        continue;
                                    }
                                    dropoff.all_dropoff.push(ind_data['PB_CRN']);
                                    dropoff.link_dropoff.push(ind_data['PB_CRN']);
                                    content_html += '<tr>';
                                    for (var k1 in arr_dropoff.link_dropoff[k]) {
                                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.link_dropoff[k][k1] + '</td>';
                                    }
                                    content_html += '</tr>';
                                }
                                content_html += '</table></div><br><br>';
                                content_html = content_html.replace('___link_dropoff___', dropoff.link_dropoff.length);
                                //agent bo dropoff
                            }
                            content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Agent Search Dropoff(#___agent_bo_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Agent opens proposal page, but Not send link to Customer</span>\n\
                            <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                            if (arr_dropoff.agent_bo_dropoff.length) {
                                content_html += '<tr>';
                                var table_head = arr_dropoff.agent_bo_dropoff[0];
                                for (var k in table_head) {
                                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                                }
                                content_html += '</tr>';
                                for (var k in arr_dropoff.agent_bo_dropoff) {
                                    var ind_data = arr_dropoff.agent_bo_dropoff[k];
                                    if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                        continue;
                                    }
                                    dropoff.all_dropoff.push(ind_data['PB_CRN']);
                                    dropoff.agent_bo_dropoff.push(ind_data['PB_CRN']);
                                    content_html += '<tr>';
                                    for (var k1 in arr_dropoff.agent_bo_dropoff[k]) {
                                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.agent_bo_dropoff[k][k1] + '</td>';
                                    }
                                    content_html += '</tr>';
                                }
                                content_html += '</table></div><br><br>';
                                content_html = content_html.replace('___agent_bo_dropoff___', dropoff.agent_bo_dropoff.length);
                            }
                        }
                        content_html += '</body></html>';
                        res.send(content_html);
                        if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            if (req.query['dbg'] === 'yes') {
                                objModelEmail.send('notifications@policyboss.com', 'chirag.modi@policyboss.com', subject, content_html, '', '');
                            } else {
                                if (source == 'ALL') {
                                    objModelEmail.send('notifications@policyboss.com', 'susheeltejuja@landmarkinsurance.in,apaar.kasliwal@landmarkinsurance.in,chirag.modi@policyboss.com,ashish.hatia@policyboss.com,varun.kaushik@policyboss.com', subject, content_html, '', config.environment.notification_email);
                                }
                                if (source == 'FM-DC') {
                                    objModelEmail.send('notifications@policyboss.com', 'srinivas@policyboss.com,ashutosh.sharma@magicfinmart.com,coordinator@magicfinmart.com,apaar.kasliwal@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                                }
                                if (source == 'FM-SM') {
                                    objModelEmail.send('notifications@policyboss.com', 'susheel.menon@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                                }
                                if (source == 'ALL-GS') {
                                    var arr_to = [
                                        'gagandeep.singh@policyboss.com',
                                        'saroj.singh@policyboss.com',
                                        'shabana.gaus@policyboss.com',
                                        'satbir.singh@policyboss.com',
                                        'rajneesh.kumar@policyboss.com',
                                        'kalpesh.chauhan@policyboss.com',
                                        'Ganesh.venkataraman@policyboss.com',
                                        'balveer.gupt@policyboss.com',
                                        'Kaustubh.Shandilya@policyboss.com',
                                        'vishal.gaur@policyboss.com',
                                        'vikas.chauhan@policyboss.com'
                                    ];
                                    objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                                }
                                if (source == 'PB-SS') {
                                    objModelEmail.send('notifications@policyboss.com', 'Santosh.singh@policyboss.com,apaar.kasliwal@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                                }
                            }

                        }

                    } else if (req.hasOwnProperty('debug')) {
                        res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                    } else {
                        res.json(obj_dashboard_summary);
                    }
                } catch (e) {
                    console.error('Exception', 'life_dashboard_schedule', 'Main', e);
                    res.json(e);
                }
            }
        });
    } catch (Ex) {
        //throw Ex;
        console.error('Exception', 'life_dashboard_schedule', Ex);
        res.json(Ex);
    }
});
router.get('/rm_performance', function (req, res, next) {
    try {
        var report_type = (req.query.hasOwnProperty('report_type')) ? req.query['report_type'] : 'search';
        var source = (req.query.hasOwnProperty('source')) ? req.query['source'] : 'ALL';
        var arrSource = ['ALL-CHANNEL', 'DC-POSP', 'SM-POSP', 'SM-FOS'];
        var arrStatus = ['AGENT-TOTAL', 'AGENT-ACTIVE', 'SEARCH', 'LINK', 'PROPOSAL', 'SALE'];
        var arrIndRMData = {};
        for (var k in arrSource) {
            for (var k1 in arrStatus) {
                arrIndRMData[k + '_' + k1] = 0;
            }
        }

        var today = moment().utcOffset("+05:30").startOf('Day');
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'daily') {
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        }
        if (req.query.hasOwnProperty('type') && req.query['type'] == 'weekly') {
            var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = weekstart;
            req.query['dateto'] = yesterday;
        }
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var arr_paypass = ['VERIFICATION_EXCEPTION', 'TRANS_PAYPASS'];
        var arr_fail = ['TRANS_FAIL'];
        var arr_search = ['SEARCH', 'ADDON_APPLY', 'BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'];
        var arr_link = ['PROPOSAL_LINK_SENT', 'BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'];
        var arr_proposal = ['PROPOSAL_SUBMIT'];
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);




        var arr_dropoff = {
            'agent_bo_dropoff': [],
            'link_dropoff': [],
            'proposal_dropoff': [],
            'payment_dropoff': [],
            'sale': []
        };
        var arr_sale_vehicle = {
            'crn': []
        };
        var obj_dashboard_summary = {};
        User_Data.find({
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo}
        }).select(['Product_Id', 'PB_CRN', 'Report_Summary', 'Premium_Request', 'Last_Status', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (!err) {
                for (var k in dbUsers) {
                    try {
                        var user = dbUsers[k]._doc;
                        if (true) {
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {

                            } else {
                                continue;
                            }
                            var product = Const_Product[user['Product_Id']];
                            //console.log('Product', product);
                            var Report_Summary = null;
                            if (user.hasOwnProperty('Report_Summary') && user['Report_Summary']) {
                                Report_Summary = user['Report_Summary'];
                            }

                            var client_key_val = '';
                            //var arrSource = ['ALL-CHANNEL', 'DC-POSP', 'SM-POSP', 'SM-FOS'];
                            //var arrStatus = ['AGENT-TOTAL', 'AGENT-ACTIVE', 'SEARCH', 'LINK', 'PROPOSAL', 'SALE'];
                            if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                if ((user['Premium_Request']['ss_id'] - 0) == 5) {
                                    client_key_val = 'FM-DC';
                                } else {
                                    if (user['Premium_Request']['posp_sources'] == 1) {
                                        if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                                            client_key_val = 'DC-POSP';
                                        } else {
                                            client_key_val = 'DC-NON-POSP';
                                        }
                                    } else if (user['Premium_Request']['posp_sources'] == 2) {
                                        client_key_val = 'SM-POSP';
                                    } else {
                                        if (user['Premium_Request']['posp_category'] == 'FOS') {
                                            client_key_val = 'SM-FOS';
                                        } else if (user['Premium_Request']['posp_category'] == 'RBS') {
                                            client_key_val = 'RBS';
                                        } else {
                                            client_key_val = 'PB-SS';
                                        }
                                    }
                                }
                            }

                            if (source == 'PB-SS') {
                                if (['PB-SS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-DC') {
                                if (['DC-POSP', 'DC-NON-POSP'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }
                            if (source == 'FM-SM') {
                                if (['SM-POSP', 'SM-FOS'].indexOf(client_key_val) > -1) {

                                } else {
                                    continue;
                                }
                            }

                            //obj_dashboard_summary['All'].Summary.Total.Total++;
                            //obj_dashboard_summary['All'].Summary[client_key_val].Total++;
                            Last_Status = 'Search';
                            if (arr_search.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Search';
                            }

                            if (arr_link.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Link';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                            }
                            if (arr_proposal.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Proposal';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                            }
                            if (arr_sale.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Sale';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') {
                                    obj_dashboard_summary['All'].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['ErpCs']++;
                                    obj_dashboard_summary[product].Summary.Total['ErpCs']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['ErpCs']++;
                                }
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                                var transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                transaction_amount = Math.round(transaction_amount);
                                if (transaction_amount > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary.Total['Premium'] += transaction_amount;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Premium'] += transaction_amount;
                                }
                                var si_sale = user['Erp_Qt_Request_Core']['___health_insurance_si___'];
                                if (si_sale > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['SI'] += si_sale;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['SI'] += si_sale;
                                    obj_dashboard_summary[product].Summary.Total['SI'] += si_sale;
                                    obj_dashboard_summary[product].Summary[client_key_val]['SI'] += si_sale;
                                }
                                var insurer = user['Erp_Qt_Request_Core']['___insurerco_name___'];
                                //insurer = insurer[0];
                                var agent = 'NA';
                                var reporting = 'NA';
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    agent = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'];
                                    reporting = user['Erp_Qt_Request_Core']['___posp_reporting_agent_name___'];
                                }
                                var lm_status = 'NA';
                                var platform = '';
                                if (user['Premium_Request'].hasOwnProperty('device_id')) {
                                    platform = 'APP-' + user['Premium_Request']['app_version'].toString();
                                } else {
                                    platform = 'PolicyBoss.com';
                                }
                                var obj_sale = {
                                    'Source': client_key_val,
                                    'Product': product,
                                    'Platform': platform,
                                    'Agent': agent,
                                    'Reporting': reporting,
                                    'Insurer': insurer,
                                    'PB_CRN': user['PB_CRN'],
                                    'Erp_CS': (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] != '') ? user['ERP_CS'] : 'Pending',
                                    'Cover': user['Premium_Request']['health_insurance_type'],
                                    'Premium': transaction_amount,
                                    'SI': si_sale
                                };
                                if (req.query['type'] !== 'daily') {
                                    var dt = (new Date(user.Modified_On)).toLocaleString();
                                    dt = dt.split(',');
                                    obj_sale['Transact_On'] = dt[0];
                                }
                                arr_sale_vehicle.crn.push(user['PB_CRN']);
                                arr_dropoff.sale.push(obj_sale);
                            }
                            if (arr_fail.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Fail';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            if (arr_paypass.indexOf(user['Last_Status']) > -1) {
                                Last_Status = 'Paypass';
                                obj_dashboard_summary['All'].Summary.Total.Search++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Search']++;
                                obj_dashboard_summary[product].Summary.Total.Search++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Search']++;
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    obj_dashboard_summary['All'].Summary.Total['Link']++;
                                    obj_dashboard_summary['All'].Summary[client_key_val]['Link']++;
                                    obj_dashboard_summary[product].Summary.Total['Link']++;
                                    obj_dashboard_summary[product].Summary[client_key_val]['Link']++;
                                }

                                obj_dashboard_summary['All'].Summary.Total['Proposal']++;
                                obj_dashboard_summary['All'].Summary[client_key_val]['Proposal']++;
                                obj_dashboard_summary[product].Summary.Total['Proposal']++;
                                obj_dashboard_summary[product].Summary[client_key_val]['Proposal']++;
                            }
                            obj_dashboard_summary['All'].Summary.Total[Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary[product].Summary.Total[Last_Status]++;
                            obj_dashboard_summary[product].Summary[client_key_val][Last_Status]++;
                            obj_dashboard_summary['All'].Summary[client_key_val]['Dropoff'] = obj_dashboard_summary['All'].Summary[client_key_val]['Proposal'] - (obj_dashboard_summary['All'].Summary[client_key_val]['Sale'] + obj_dashboard_summary['All'].Summary[client_key_val]['Paypass']);
                            var arr_dropoff_status = [
                                'BUY_NOW_AGENT',
                                'PROPOSAL_SAVE_AGENT',
                                'PROPOSAL_LINK_SENT',
                                'BUY_NOW_CUSTOMER',
                                'PROPOSAL_SAVE_CUSTOMER',
                                'PROPOSAL_SUBMIT',
                                'TRANS_FAIL'
                            ];
                            if (arr_dropoff_status.indexOf(user['Last_Status']) > -1) {
                                var agent = 'NA';
                                if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                                    agent = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'] + '(Mob-' + user['Premium_Request']['posp_mobile_no'] + ')';
                                }
                                var customer = 'NA';
                                var premium = 'NA';
                                var si = 'NA';
                                if (user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] != null) {
                                    customer = user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'];
                                    premium = user['Erp_Qt_Request_Core']['___final_premium___'];
                                    si = user['Erp_Qt_Request_Core']['___health_insurance_si___'];
                                } else {
                                    if (user['Premium_Request'].hasOwnProperty('first_name')) {
                                        customer = user['Premium_Request']['first_name'] + ' ' + user['Premium_Request']['last_name'];
                                    } else {
                                        customer = user['Premium_Request']['contact_name'];
                                    }
                                    si = user['Premium_Request']['health_insurance_si'];
                                }


                                var obj_lead = {
                                    'PB_CRN': user['PB_CRN'],
                                    'Source': client_key_val,
                                    'Agent': agent,
                                    'Customer': customer,
                                    'Premium': premium,
                                    'SI': si,
                                    'DateTime': (new Date(user.Modified_On)).toLocaleString()
                                };
                                if (['BUY_NOW_AGENT', 'PROPOSAL_SAVE_AGENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.agent_bo_dropoff.push(obj_lead);
                                }
                                if (['PROPOSAL_SUBMIT', 'TRANS_FAIL'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.payment_dropoff.push(obj_lead);
                                }
                                if (['BUY_NOW_CUSTOMER', 'PROPOSAL_SAVE_CUSTOMER'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.proposal_dropoff.push(obj_lead);
                                }
                                if (['PROPOSAL_LINK_SENT'].indexOf(user['Last_Status']) > -1) {
                                    arr_dropoff.link_dropoff.push(obj_lead);
                                }
                            }
                        }
                    } catch (e) {
                        console.error('Report_Loop', e);
                    }
                }
                obj_dashboard_summary['All'].Summary.Total['Dropoff'] = obj_dashboard_summary['All'].Summary.Total['Proposal'] - (obj_dashboard_summary['All'].Summary.Total['Sale'] + obj_dashboard_summary['All'].Summary.Total['Paypass']);
                if (req.query.hasOwnProperty('type')) {

                    var reporttitle = 'HORIZON_HEALTH_' + req.query['type'].toString().toUpperCase() + '_REPORT::';
                    if (req.query['type'] == 'daily') {
                        var yesterday = moment(today).add(-1, 'days').format("D-MMM-YYYY");
                        reporttitle += yesterday.toString();
                    } else {
                        var fromMoment = moment(req.query['datefrom']).format("D-MMM-YYYY");
                        var toMoment = moment(req.query['dateto']).format("D-MMM-YYYY");
                        reporttitle += fromMoment.toString() + '_To_' + toMoment.toString();
                    }
                    var subject = '[' + config.environment.name.toString().toUpperCase() + '-REPORT][' + source + ']' + reporttitle;
                    subject = subject.replace(/-/g, '_');
                    var content_html = '<!DOCTYPE html><html><head><title>' + reporttitle + '</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + reporttitle + '</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    content_html += '<tr>';
                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Status</th>';
                    content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Total</th>';
                    var arr_src = [];
                    if (source == 'ALL') {
                        arr_src = ['PB-Direct', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'SM-POSP', 'SM-FOS', 'DC-FOS', 'RBS'];
                    }
                    if (source == 'FM-DC') {
                        arr_src = ['DC-POSP', 'DC-NON-POSP'];
                    }
                    if (source == 'FM-SM') {
                        arr_src = ['SM-POSP', 'SM-FOS'];
                    }
                    if (source == 'PB-SS') {
                        arr_src = ['PB-SS'];
                    }

                    var arrSource = ['Total'];
                    var arr_sts = ['Search', 'Link', 'Proposal', 'Sale', 'ErpCs', 'Paypass', 'Fail', 'Dropoff', 'Premium', 'SI'];
                    for (var k in arr_src) {
                        arrSource.push(arr_src[k]);
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + arr_src[k] + '</th>';
                    }
                    content_html += '</tr>';
                    for (var k in arr_sts) {
                        content_html += '<tr>';
                        content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:#f97490" align="center"><b>' + arr_sts[k] + '</b></td>';
                        for (var k1 in arrSource) {
                            if (arrSource[k1] == 'Total') {
                                color = '#01dfd7';
                            } else {
                                color = 'white';
                            }
                            var cnt = 0;
                            if (obj_dashboard_summary.All.Summary[arrSource[k1]]) {
                                cnt = obj_dashboard_summary.All.Summary[arrSource[k1]][arr_sts[k]];
                            }
                            content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + cnt + '</td>';
                        }
                        content_html += '</tr>';
                    }
                    content_html += '</table></div><br><br>';
                    var arr_client_color = {
                        'PB-SS': '#01dfd7',
                        'PB-Direct': '#f97490',
                        'FINPEACE': 'pink',
                        'DC-POSP': '#FFC107',
                        'SM-POSP': '#4CAF50',
                        'SM-NON-POSP': '#4CAF33',
                        'SM-FBA': '#4CAF33',
                        'DC-NON-POSP': '#FF5722',
                        'DC-FBA': '#FF5722',
                        'BOT': '#4CAF50',
                        'SM-FOS': 'orange'
                    };
                    var color = 'white';
                    var arr_lead_fld = {
                        'CRN': null,
                        'Source': null,
                        'Agent': null,
                        'Customer': null,
                        'Premium': null,
                        'SI': null,
                        'DateTime': null
                    };
                    //sales report
                    content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Sales Report(#' + arr_dropoff.sale.length + ')</span>\n\
                    <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    content_html += '<tr>';
                    var table_head = arr_dropoff.sale[0];
                    for (var k in table_head) {
                        content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                    }
                    content_html += '</tr>';
                    for (var k in arr_dropoff.sale) {
                        content_html += '<tr>';
                        var ind_data = arr_dropoff.sale[k];
                        for (var k1 in ind_data) {
                            content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + ind_data[k1] + '</td>';
                        }
                        content_html += '</tr>';
                    }
                    content_html += '</table></div><br><br>';
                    if (req.query['type'] != 'custom' && req.query['type'] != 'monthly' && req.query['source'] != 'ALL') {
                        //payment dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Dropoff(#___payment_dropoff___)</span>\n\
		<br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer redirects to PG, but Premium not Paid</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        var dropoff = {
                            'all_dropoff': [],
                            'payment_dropoff': [],
                            'proposal_dropoff': [],
                            'link_dropoff': [],
                            'agent_bo_dropoff': []
                        };
                        for (var k in arr_dropoff.payment_dropoff) {
                            var ind_data = arr_dropoff.payment_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.payment_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.payment_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.payment_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___payment_dropoff___', dropoff.payment_dropoff.length);
                        //PROPOSAL dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Proposal Dropoff(#___proposal_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer opens link, but not submit proposal</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.proposal_dropoff) {
                            var ind_data = arr_dropoff.proposal_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.proposal_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.proposal_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.proposal_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___proposal_dropoff___', dropoff.proposal_dropoff.length);
                        //link dropoff
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Payment Link Dropoff(#___link_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Customer receives link, but not open link</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.link_dropoff) {
                            var ind_data = arr_dropoff.link_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.link_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.link_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.link_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___link_dropoff___', dropoff.link_dropoff.length);
                        //agent bo dropoff

                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Agent Search Dropoff(#___agent_bo_dropoff___)</span>\n\
		 <br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;font-style:italic;">Agent opens proposal page, but Not send link to Customer</span>\n\
                        <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        content_html += '<tr>';
                        for (var k in arr_lead_fld) {
                            content_html += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k + '</th>';
                        }
                        content_html += '</tr>';
                        for (var k in arr_dropoff.agent_bo_dropoff) {
                            var ind_data = arr_dropoff.agent_bo_dropoff[k];
                            if (dropoff.all_dropoff.indexOf(ind_data['PB_CRN']) > -1 || arr_sale_vehicle.crn.indexOf(ind_data['PB_CRN']) > -1) {
                                continue;
                            }
                            dropoff.all_dropoff.push(ind_data['PB_CRN']);
                            dropoff.agent_bo_dropoff.push(ind_data['PB_CRN']);
                            content_html += '<tr>';
                            for (var k1 in arr_dropoff.agent_bo_dropoff[k]) {
                                content_html += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color:' + color + ';" align="center">' + arr_dropoff.agent_bo_dropoff[k][k1] + '</td>';
                            }
                            content_html += '</tr>';
                        }
                        content_html += '</table></div><br><br>';
                        content_html = content_html.replace('___agent_bo_dropoff___', dropoff.agent_bo_dropoff.length);
                    }
                    content_html += '</body></html>';
                    res.send(content_html);
                    if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        if (req.query['dbg'] === 'yes') {
                            objModelEmail.send('notifications@policyboss.com', 'chirag.modi@policyboss.com', subject, content_html, '', '');
                        } else {
                            if (source == 'ALL') {
                                objModelEmail.send('notifications@policyboss.com', 'susheeltejuja@landmarkinsurance.in,apaar.kasliwal@landmarkinsurance.in,chirag.modi@policyboss.com,ashish.hatia@policyboss.com,varun.kaushik@policyboss.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'FM-DC') {
                                objModelEmail.send('notifications@policyboss.com', 'srinivas@policyboss.com,ashutosh.sharma@magicfinmart.com,coordinator@magicfinmart.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'FM-SM') {
                                objModelEmail.send('notifications@policyboss.com', 'susheel.menon@landmarkinsurance.in,pradeep.upadhyay@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'ALL-GS') {
                                var arr_to = [
                                    'gagandeep.singh@policyboss.com',
                                    'saroj.singh@policyboss.com',
                                    'shabana.gaus@policyboss.com',
                                    'satbir.singh@policyboss.com',
                                    'rajneesh.kumar@policyboss.com',
                                    'kalpesh.chauhan@policyboss.com',
                                    'Ganesh.venkataraman@policyboss.com',
                                    'balveer.gupt@policyboss.com',
                                    'Kaustubh.Shandilya@policyboss.com',
                                    'vishal.gaur@policyboss.com',
                                    'vikas.chauhan@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                            }
                            if (source == 'PB-SS') {
                                objModelEmail.send('notifications@policyboss.com', 'sapan.kumar@landmarkinsurance.in,', subject, content_html, '', config.environment.notification_email);
                            }
                        }

                    }

                } else if (req.hasOwnProperty('debug')) {
                    res.send('<pre>' + JSON.stringify(obj_dashboard_summary, undefined, 2) + '</pre>');
                } else {
                    res.json(obj_dashboard_summary);
                }
            }
        });
    } catch (Ex) {
        throw Ex;
        console.error('Exception', 'rm_performance', Ex);
    }
});
router.post('/nsci_lead_start', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 7; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text.toUpperCase();
        }

////console.log(makeid());

        var colLead = db.collection('nsci_leads');
        console.error(req);
        req.body = JSON.parse(JSON.stringify(req.body));
        var myobj = req.body;
        myobj['ack'] = makeid();
        var val = Math.floor(1000 + Math.random() * 9000);
        myobj['otp_created'] = val;
        colLead.insertOne(myobj, function (err, resp) {
            if (err) {
                db.close();
                res.json({'status': err});
            } else {
                //console.log("1 document inserted");
                db.close();
                var SmsLog = require('../models/sms_log');
                var objsmsLog = new SmsLog();
                var smsOtp = val.toString() + ' - OTP for NSCI Enrollment';
                objsmsLog.send_sms(myobj.mobile_no, smsOtp, 'NSCI_CAMP');
                res.json({
                    'status': 'success',
                    'ack': myobj['ack']
                });
            }
        });
    });
});
router.post('/nsci_lead_save_1', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 7; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text.toUpperCase();
        }

////console.log(makeid());

        var colLead = db.collection('nsci_leads');
        console.error(req);
        req.body = JSON.parse(JSON.stringify(req.body));
        var myobj = req.body;
        myobj['created_on'] = new Date();
        colLead.findOne({'ack': myobj['ack']}, function (err, result) {
            if (err)
                throw err;
            //res.json(result);
            if ((result.otp_created - 0) == (myobj['otp_entered'] - 0)) {
                colLead.update({'ack': myobj['ack']}, {$set: myobj}, function (err, resp) {
                    if (err) {
                        db.close();
                        res.json({'status': err});
                    } else {
                        try {
                            //console.log("1 document inserted");
                            db.close();
                            var SmsLog = require('../models/sms_log');
                            var objsmsLog = new SmsLog();
                            var smsAck = 'Thanks you for your Enrollment.\n\
	Please get your premium payment deposited at the GMC - Helpdesk at NSCI Club premises on or before 3rd November.\n\
	Ackowledge Number - ' + myobj['ack'];
                            var smsTxt = 'NSCI\n\
	==========\n\
	Name : ' + myobj.member_1_name + '\n\
	Option : ' + myobj.plan_option + '\n\
                            On : ' + myobj.created_on;
                            console.error('NSCIMSG', smsAck, smsTxt);
                            objsmsLog.send_sms(myobj.mobile_no, smsAck, 'NSCI_CAMP');
                            objsmsLog.send_sms('7666020532', smsTxt, 'NSCI_CAMP');
                            //objsmsLog.send_sms('76666020532', smsTxt, 'NSCI_CAMP');
                            res.json({
                                'status': 'success',
                                'ack': result['ack']
                            });
                        } catch (e) {
                            console.error('NCSIError', e);
                            res.json({'status': 'err'});
                        }
                    }
                });
            } else {
                res.json({
                    'status': 'otp_fail'
                });
            }
            db.close();
        });
    });
});
router.post('/nsci_lead_save', function (req, res, next) {
    var pdf = require('html-pdf');
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 7; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text.toUpperCase();
        }

////console.log(makeid());

        var colLead = db.collection('nsci_leads');
        console.error(req);
        req.body = JSON.parse(JSON.stringify(req.body));
        var myobj = req.body;
        myobj['created_on'] = new Date();
        colLead.findOne({'ack': myobj['ack']}, function (err, result) {
            if (err)
                throw err;
            //res.json(result);
            if ((result.otp_created - 0) == (myobj['otp_entered'] - 0)) {
                colLead.update({'ack': myobj['ack']}, {$set: myobj}, function (err, resp) {
                    if (err) {
                        db.close();
                        res.json({'status': err});
                    } else {
                        try {
                            //console.log("1 document inserted");
                            db.close();
                            var SmsLog = require('../models/sms_log');
                            var html_file_path = appRoot + "/resource/request_file/declaration.html";
                            var pdf_file_path = appRoot + "/tmp/pdf/declaration" + myobj['ack'] + ".pdf";
                            var pdf_web_path = "http://download.policyboss.com/pdf-files/policy/declaration" + myobj['ack'] + ".pdf";
                            var Client = require('node-rest-client').Client;
                            var client = new Client();
                            client.get('https://api-ssl.bitly.com/v3/shorten?access_token=' + bitly_access_token + '&longUrl=' + encodeURIComponent(pdf_web_path), function (data, response) {
                                //console.log(data);
                                if (data && data.status_code === 200) {
                                    var short_url = data.data.url;
                                    var htmlPol = fs.readFileSync(html_file_path, 'utf8');
                                    for (var k in myobj) {
                                        htmlPol = htmlPol.replace('___' + k + '___', myobj[k]);
                                        htmlPol = htmlPol.replace('___' + k + '___', myobj[k]);
                                        htmlPol = htmlPol.replace('___' + k + '___', myobj[k]);
                                    }
                                    var options = {format: 'Letter', timeout: 50000};
                                    pdf.create(htmlPol, options).toFile(pdf_file_path, function (err, res1) {
                                        if (err)
                                            return //console.log(err);
                                        else {
                                            var bitmap = fs.readFileSync(pdf_file_path);
                                            var pdf_binary_data = Buffer.from(bitmap).toString('base64');
                                            var objsmsLog = new SmsLog();
                                            var smsAck = 'Thanks you for your Enrollment.\n\
	Please get your premium payment deposited at the GMC - Helpdesk at NSCI Club premises on or before 3rd November.\n\
	Ackowledge Number - ' + myobj['ack'] + '\n\
        Declaration Form - ' + short_url;
                                            var smsTxt = 'NSCI\n\
	==========\n\
	Name : ' + myobj.member_1_name + '\n\
	Option : ' + myobj.plan_option + '\n\
                                            On : ' + myobj.created_on;
                                            console.error('NSCIMSG', smsAck, smsTxt);
                                            objsmsLog.send_sms(myobj.mobile_no, smsAck, 'NSCI_CAMP');
                                            objsmsLog.send_sms('7666020532', smsTxt, 'NSCI_CAMP');
                                            //objsmsLog.send_sms('76666020532', smsTxt, 'NSCI_CAMP');
                                            res.json({
                                                'status': 'success',
                                                'ack': result['ack'],
                                                'pdf': pdf_web_path,
                                                'spdf': short_url
                                            });
                                        }
                                    });
                                }
                            });
                        } catch (e) {
                            console.error('NCSIError', e);
                            res.json({'status': 'err'});
                        }
                    }
                });
            } else {
                res.json({
                    'status': 'otp_fail'
                });
            }
            db.close();
        });
    });
});
router.post('/nsci_lead_update', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        var colLead = db.collection('nsci_leads');
        console.error(req);
        var formidable = require('formidable');
        var form = new formidable.IncomingForm();
        var fs = require('fs');
        form.parse(req, function (err, fields, files) {
            console.error(fields);
            console.error('NSCIFILES', files);
            req.body = JSON.parse(JSON.stringify(req.body));
            var myobj = {};
            for (var k in fields) {
                if (fields[k] != '') {
                    myobj[k] = fields[k];
                }
            }
            myobj['modified_on'] = new Date();
            colLead.findOne({'ack': myobj['ack']}, function (err, result) {
                if (err)
                    throw err;
                if (files.hasOwnProperty('cheque_copy')) {
                    var arr_file_ext = files.cheque_copy.name.split('.');
                    var file_ext = arr_file_ext[arr_file_ext.length - 1];
                    var pg_debit_msg_file_name = 'cheque_' + myobj['ack'] + '_' + moment().format('YYYY-MM-DDTHH:mm:ss') + '.' + file_ext;
                    myobj['cheque_copy'] = pg_debit_msg_file_name;
                }
                colLead.update({'ack': myobj['ack']}, {$set: myobj}, function (err, resp) {
                    if (err) {
                        db.close();
                        res.json({'status': err});
                    } else {
                        try {

                            var pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pg_debit_msg_file_name;
                            var oldpath = files.cheque_copy.path;
                            fs.readFile(oldpath, function (err, data) {
                                if (err)
                                {
                                    console.error('Read', err);
                                }
                                //console.log('File read!');

                                // Write the file
                                fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                                    if (err)
                                    {
                                        console.error('Write', err);
                                    }
                                });
                            });
                            //console.log("1 document inserted");
                            db.close();
                            res.json({'status': 'success'});
                        } catch (e) {
                            console.error('NCSIError', e);
                            res.json({'status': 'err'});
                        }
                    }
                });
                db.close();
            });
        });
    });
});
router.post('/kotak_motor_save', function (req, res, next) {
    var pdf = require('html-pdf');
    //console.log("Start kotak_motor_save service for Kotak Motor");
    try {
        var html_file_path = appRoot + "/resource/request_file/kotak_sample_html.html";
        //var pdf_file_path = appRoot + "/tmp/pdf/kotak_motor_temp" + req.body.policy_number + ".pdf";
        //var pdf_web_path = "http://download.policyboss.com/pdf-files/policy/" + req.body.pdf_file_name;
        var pdf_file_path = "/var/www/QA/HorizonAPI/SourceCode/tmp/pdf/kotak_motor_temp" + req.body.policy_number + ".pdf";
        var pdf_web_path = "http://qa-download.policyboss.com/pdf-files/policy/" + req.body.pdf_file_name;
        var Client = require('node-rest-client').Client;
        var client = new Client();
        var htmlPol = fs.readFileSync(html_file_path, 'utf8');
        htmlPol = htmlPol.toString().replaceJson(req.body.replacedata1);
        htmlPol = htmlPol.toString().replaceJson(req.body.replacedata2);
        htmlPol = htmlPol.toString().replaceJson(req.body.replacedata3);
        htmlPol = htmlPol.toString().replaceJson(req.body.replacedata4);
        //console.log(htmlPol);
        var options = {format: 'Letter', timeout: 50000};
        pdf.create(htmlPol, options).toFile(pdf_file_path, function (err, res1) {
            if (err)
                return console.error('Kotakpdf', err);
            else {
                //var bitmap = fs.readFileSync(pdf_file_path);
                //var pdf_binary_data = Buffer.from(bitmap).toString('base64');
                res.json({
                    'status': 'success',
                    'pdf': pdf_web_path
                });
            }
        });
    } catch (e) {
        console.error('kotak_motor_save Error', e);
        res.json({'status': 'err'});
    }
});
router.get('/nsci_list', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        // Get the collection
        var colNsci = db.collection('nsci_leads');
        colNsci.find({}).sort({'created_on': -1}).toArray(function (err, itemNsci) {
            try {
                var data = {"data": []};
                var arr_filter = ["ack", "member_1_name", "membership_no", "member_1_dob", "mobile_no", "sum_insured", "plan_option", "created_on"];
                for (var k in itemNsci) {
                    var tmp = {};
                    data.data.push(itemNsci[k]);
                }
                //data.data = itemNsci;
                res.json(data);
            } catch (e) {
                res.json(e);
            }
        });
    });
});
router.get('/bajaj_vehicle_master/:product_code', function (req, res, next) {
    try {
        var soap = require('soap');
        var xml2js = require('xml2js');
        // var PostData = JSON.parse(docLog.Insurer_Request);

        //Example POST method invocation 
        var Client = require('node-rest-client').Client;
        var client = new Client();
        var request_xml = fs.readFileSync(appRoot + '/resource/request_file/BajajAllianz_Vehicle_Make.xml').toString();
        request_xml = request_xml.replace('___product_code___', req.params['product_code'])
        var args = {
            data: request_xml,
            headers: {"Content-Type": "text/xml"}
        };
        client.post('http://webservicesdev.bajajallianz.com/bjazGetVehicleMaster/bjazGetVehicleMasterPort?WSDL', args, function (data, response) {
            // parsed response body as js object 
            //console.log(data);
            if (req.query.hasOwnProperty('dbg')) {
                res.send(data);
            } else {
                // raw response 
                var strResp = JSON.stringify(data);
                //console.log(strResp);
                strResp = strResp.replace(/\$/g, 'attr');
                strResp = strResp.replace(/typ:/g, '');
                strResp = strResp.replace(/m:/g, '');
                strResp = strResp.replace(/env:/g, '');
                var objXml2Json = JSON.parse(strResp);
                var arr_vehicle_obj = objXml2Json['Envelope']['Body']['getAllVehicleMasterResponse']['pVehicleMasterList_out']['BjazWsVehicleMasterObjUser'];
                console.error('BajajNode', arr_vehicle_obj);
                var arr_vehicle_full = [];
                for (var k in arr_vehicle_obj) {
                    var ind_vehicle = {};
                    for (var k1 in  arr_vehicle_obj[k]) {
                        if (typeof arr_vehicle_obj[k][k1] !== 'object' && arr_vehicle_obj[k][k1] !== null) {
                            ind_vehicle[k1] = arr_vehicle_obj[k][k1];
                        }
                    }
                    arr_vehicle_full.push(ind_vehicle);
                }
                res.json(arr_vehicle_full);
            }
        });
    } catch (e) {
        console.error('Exception', this.constructor.name, 'service_call', e);
    }
});
router.get('/sync_erp_cs', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_erp_cs');
    try {
        var report_type = req.query['op'];
        if (report_type != 'PREVIEW' && report_type != 'EXECUTE') {
            res.send('Action Missing');
        }
        var daysbefore = 0;
        if (req.query.hasOwnProperty('daysbefore') && req.query['daysbefore'])
        {
            daysbefore = req.query['daysbefore'] - 0;
        }
        var mode = 'CS';
        if (req.query.hasOwnProperty('mode') && req.query['mode'] !== '')
        {
            mode = req.query['mode'];
        }
        var udid = '';
        if (req.query.hasOwnProperty('udid') && req.query['udid'] !== '')
        {
            udid = req.query['udid'] - 0;
        }

        //console.log('report_type', report_type);
        var dateFrom = null;
        var dateTo = null;
        var fromDate = null;
        var toDate = null;
        var today = moment().utcOffset("+05:30").startOf('Day');
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        if (req.query.hasOwnProperty('datefrom') && req.query['datefrom'] !== '' && req.query.hasOwnProperty('dateto') && req.query['dateto'] !== '') {
            fromDate = req.query['datefrom'];
            toDate = req.query['dateto'];
        } else {
            fromDate = moment(today).format("YYYY-MM-D");
            toDate = moment(today).format("YYYY-MM-D");
        }

        var arrFrom = fromDate.split('-');
        dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 1, arrFrom[2] - daysbefore);
        var arrTo = toDate.split('-');
        dateTo = new Date(arrTo[0] - 0, arrTo[1] - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        var Product_Id = {$in: [1, 10, 2, 12]};
        if (req.query.hasOwnProperty('product_id') && req.query['product_id'] !== '') {
            Product_Id = req.query['product_id'] - 0;
        }
        var cond_ud = {
            'Product_Id': Product_Id,
            "is_ghi": {$exists: false},
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo},
            "Last_Status": {$in: arr_sale}
        };
        if (Product_Id === 23) {
            cond_ud['is_ghi'] = 'yes';
        }

        var status = 'PENDING';
        if (req.query.hasOwnProperty('status') && req.query['status'] !== '')
        {
            status = req.query['status'];
        }
        if (mode === 'CS') {
            cond_ud['ERP_CS'] = status;
        }
        if (mode === 'CS_DOC') {
            cond_ud['ERP_CS'] = new RegExp('CS', 'i');
            cond_ud['Last_Status'] = 'TRANS_SUCCESS_WITH_POLICY';
            cond_ud['ERP_CS_DOC'] = status;
        }
        if (udid !== '' && udid > 0) {
            cond_ud = {'User_Data_Id': udid};
        }
        var limit = 20;
        if (req.query.hasOwnProperty('limit') && req.query['limit'] !== '') {
            limit = req.query['limit'] - 0;
        }
        console.error('ERP_CS_SYNC', 'Condition', cond_ud);
        User_Data.find(cond_ud).select(['User_Data_Id', 'Insurer_Id', 'Request_Unique_Id', 'PB_CRN', 'Last_Status', 'ERP_CS', 'ERP_CS_DOC', 'Erp_Qt_Request_Core']).limit(limit).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }
            try {
                if (!err) {
                    console.error('Log', 'CS_SYNC', dbUsers);
                    let objCSSummary = [];
                    for (let k in dbUsers) {
                        let user = dbUsers[k]._doc;
                        if (arr_sale.indexOf(user['Last_Status']) > -1) {
                            let is_cspending = false;
                            let action_type = null;
                            let url_api = '';
                            if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== null && user['ERP_CS'].toString().indexOf('CS') < 0) {
                                if (user.hasOwnProperty('Erp_Qt_Request_Core')) {
                                    if (user['Erp_Qt_Request_Core'].hasOwnProperty('___insurerco_name___')) {
                                        is_cspending = true;
                                        action_type = 'CS';
                                    } else {
                                        let Insurerco_ID = require('../models/prev_insurer');
                                        Insurerco_ID.findOne({
                                            "Insurer_ID": 101,
                                            "PreviousInsurer_Id": user['Insurer_Id']
                                        }, function (insurer_err, dbPrev_Insurer) {
                                            if (dbPrev_Insurer) {
                                                user['Erp_Qt_Request_Core']['___insurerco_id___'] = dbPrev_Insurer._doc['PreviousInsurer_Code'];
                                                user['Erp_Qt_Request_Core']['___insurerco_name___'] = dbPrev_Insurer._doc['InsurerName'];
                                            }
                                            let ObjUser_Data = {
                                                Erp_Qt_Request_Core: user['Erp_Qt_Request_Core']
                                            };
                                            if (ObjUser_Data) {
                                                User_Data.update({'User_Data_Id': user['User_Data_Id']}, {$set: ObjUser_Data}, function (err, numAffected) {
                                                    //console.error('UserDataCRNUpdate', erp_ops_type, err, numAffected);
                                                });
                                            }
                                        });
                                    }
                                } else {
                                    is_cspending = true;
                                    action_type = 'CS';
                                }
                            }
                            if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== null && user['ERP_CS'].toString().indexOf('CS') > -1) {
                                action_type = 'CS_DOC';
                                /*if (user.hasOwnProperty('ERP_CS_DOC') === false) {
                                 action_type = 'CS_DOC';
                                 } else {
                                 if (user['ERP_CS_DOC'].toString() === '') {
                                 action_type = 'CS_DOC';
                                 }
                                 }*/
                            }
                            if (action_type !== null && (action_type === 'CS' || action_type === 'CS_DOC')) {
                                user['Action'] = action_type;
                                delete user['Erp_Qt_Request_Core'];
                                objCSSummary.push(user);
                                let args = {
                                    data: {
                                        "search_reference_number": user['Request_Unique_Id'],
                                        "udid": user['User_Data_Id'],
                                        "op": 'execute',
                                        "source": "batch"
                                    },
                                    headers: {
                                        "Content-Type": "application/json"
                                    }
                                };
                                if (action_type == 'CS') {
                                    if (report_type == 'EXECUTE') {
                                        url_api = config.environment.weburl + '/quote/ERP_CS';
                                    }
                                }
                                if (action_type == 'CS_DOC') {
                                    if (report_type == 'EXECUTE') {
                                        url_api = config.environment.weburl + '/quote/erp_pdf';
                                    }
                                }
                                execute_post(url_api, args);
                                if (action_type === 'CS') {
                                    sleep(1000);
                                }
                            }
                        }
                    }
                    if (objCSSummary.length > 0) {
                        var msg = '<!DOCTYPE html><html><head><title>EPR CS SYNC</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        msg += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">ERP_CS_SYNC</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        var row_inc = 0;
                        for (var k in objCSSummary) {
                            if (row_inc === 0) {
                                msg += '<tr>';
                                for (var k_head in objCSSummary[k]) {
                                    msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k_head + '</th>';
                                }
                                msg += '</tr>';
                            }
                            msg += '<tr>';
                            for (var k_row in objCSSummary[k]) {
                                msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + objCSSummary[k][k_row] + '</td>';
                            }
                            msg += '</tr>';
                            row_inc++;
                        }
                        msg += '</table></div>';
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        var sub = '[' + config.environment.name.toString().toUpperCase() + '-' + report_type + ']';
                        var today = moment().format('YYYY-MM-DD_HH:mm:ss');
                        sub += 'ERP_' + mode + '::' + today.toString();
                        objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                    }
                    return res.json(objCSSummary);
                }
            } catch (ex) {
                console.error('Exception', 'sync_erp_cs', ex.stack);
                res.send(ex.stack);
            }

        });
    } catch (e) {
        console.error('Exception', 'sync_erp_cs', e.stack);
        res.send(e.stack);
    }
});
router.get('/hdfcergo_breakin_ids', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'hdfcergo_breakin_ids');
    try {
        var cond = {"Status": {$in: ["INSPECTION_SCHEDULED"]}};
        var day_back = 5;
        if (req.query.hasOwnProperty('range')) {
            day_back = req.query['range'];
        }

        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(today).format("YYYY-MM-D");
        var toDate = moment(today).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 1, arrFrom[2] - 0);
        dateFrom.setDate(dateFrom.getDate() - day_back);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        cond['Created_On'] = {"$gte": dateFrom, "$lte": dateTo};
        var hdfcergo_breakin = require('../models/hdfcergo_breakin');
        hdfcergo_breakin.find(cond).select(['UD_Id', 'Agent_Code', 'Proposal_Number', 'PB_CRN', 'Created_On', 'Status']).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }
            try {
                if (!err) {
                    console.error('Log', 'hdfcergo_breakin_ids', dbUsers);
                    var objCSSummary = [];
                    for (var k in dbUsers) {
                        var user = dbUsers[k]._doc;
                        //console.log('Log', 'user', user);
                        var args = {
                            data: {
                                "AgentCode": user['Agent_Code'],
                                "udid": user['UD_Id'],
                                "PB_CRN": user['PB_CRN'],
                                "PGTransNo": user['Proposal_Number'],
                                "Status": user['Status']
                            },
                            headers: {
                                "Content-Type": "application/json"
                            }
                        };
                        objCSSummary.push(user);
                        var url_api = config.environment.weburl + '/quote/hdfcergo_breakin_data';
                        execute_post(url_api, args);
                        sleep(2000);
                    }
                    //log email
                    var msg = '<!DOCTYPE html><html><head><title>EPR CS SYNC</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    msg += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">BREAKIN_SCHEDULE</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    var row_inc = 0;
                    for (var k in objCSSummary) {
                        if (row_inc === 0) {
                            msg += '<tr>';
                            for (var k_head in objCSSummary[k]) {
                                msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k_head + '</th>';
                            }
                            msg += '</tr>';
                        }
                        msg += '<tr>';
                        for (var k_row in objCSSummary[k]) {
                            msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + objCSSummary[k][k_row] + '</td>';
                        }
                        msg += '</tr>';
                        row_inc++;
                    }
                    msg += '</table></div>';
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    var sub = '[' + config.environment.name.toString().toUpperCase() + '-SCHEDULE]';
                    var today = moment().format('YYYY-MM-DD_HH:mm:ss');
                    sub += 'BREAKIN_PROCESS::' + today.toString();
                    objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                    //log email
                    res.json(objCSSummary);
                }
            } catch (ex) {
                console.error('Exception', 'hdfcergo_breakin_ids', ex);
                res.json(ex);
            }
        });
    } catch (e) {
        console.error('Exception', 'hdfcergo_breakin_ids', e);
        res.json(e);
    }
});
router.get('/sync_hdfc', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_policy_pdf');
    try {
        var report_type = req.query['op'];
        if (report_type != 'PREVIEW' && report_type != 'EXECUTE') {
            res.send('Action Missing');
        }

        var limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 10;
        var fromDate = moment().startOf('Day');
        User_Data.find({
            'Insurer_Id': 5,
            "Last_Status": 'TRANS_SUCCESS_WITH_POLICY',
            "Modified_On": {"$gte": fromDate},
        }).select(['User_Data_Id', 'PB_CRN', 'Status_History', 'Last_Status', 'Transaction_Data', 'Premium_Request', 'Verification_Request']).sort({Modified_On: -1}).limit(limit).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }
            try {
                if (!err) {
                    let objsummary_arr = [];
                    for (let k in dbUsers) {
                        try {
                            let user = dbUsers[k]._doc;
                            let sale_on = null;
                            let policy_on = null;
                            for (let q in user['Status_History']) {
                                if (user['Status_History'][q]['Status'] === 'TRANS_SUCCESS_WO_POLICY') {
                                    sale_on = user['Status_History'][q]['StatusOn'];
                                }
                                if (user['Status_History'][q]['Status'] === 'TRANS_SUCCESS_WITH_POLICY') {
                                    policy_on = user['Status_History'][q]['StatusOn'];
                                }
                            }
                            let objsummary = {
                                'User_Data_Id': user['User_Data_Id'],
                                'PB_CRN': user['PB_CRN'],
                                'SaleOn': sale_on,
                                'PolicyOn': policy_on,
                                'Diff': 0
                            };
                            if (sale_on && policy_on) {

                                let StartDate = moment(sale_on).utcOffset("+05:30").startOf('Day');
                                let EndDate = moment(policy_on).utcOffset("+05:30").startOf('Day');
                                let days_to_upload = EndDate.diff(StartDate, 'days');
                                objsummary['Diff'] = days_to_upload;
                                if (req.query['dbg'] === 'all') {
                                    objsummary_arr.push(objsummary);
                                }
                                if (req.query['dbg'] == 'yes') {
                                    objsummary_arr.push(objsummary);
                                } else {
                                    if (days_to_upload > 0) {
                                        objsummary_arr.push(objsummary);
                                        if (report_type === 'EXECUTE') {
                                            User_Data.update({'User_Data_Id': user.User_Data_Id}, {$set: {"Modified_On": sale_on}});
                                        }
                                    }
                                }
                            }
                        } catch (e3) {
                            console.error('HDFCSync', 'loop', e3);
                        }
                    }
                    res.json(objsummary_arr);
                }
            } catch (e2) {
                console.error('HDFCSync', 'databack', e2);
            }
        });
    } catch (e1) {
        console.error('HDFCSync', 'main', e1);
    }
});
router.get('/sync_policy_doc_pdf', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_policy_pdf');
    try {
        var op = req.query['op'];
        if (op !== 'PREVIEW' && op !== 'EXECUTE') {
            res.send('Action Missing');
        }


        let udid = (req.query.hasOwnProperty('udid')) ? req.query['udid'] - 0 : 0;
        let limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 10;
        let insurer_id = (req.query.hasOwnProperty('insurer_id')) ? req.query['insurer_id'] - 0 : 0;
        var url_api = config.environment.weburl + '/quote/pdf_initiate';
        var condi = {
            "Last_Status": 'TRANS_SUCCESS_WO_POLICY'
        };
        var today = moment().utcOffset("+05:30").startOf('Day');
        var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-D");
        let type = (req.query.hasOwnProperty('type')) ? req.query['type'] : 'daily';
        if (type === 'daily') {
            req.query['datefrom'] = yesterday;
            req.query['dateto'] = yesterday;
        } else if (type === 'weekly') {
            var weekstart = moment(today).add(-7, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = weekstart;
            req.query['dateto'] = yesterday;
        } else if (type === '2weeks') {
            var weekstart = moment(today).add(-14, 'days').format("YYYY-MM-D");
            req.query['datefrom'] = weekstart;
            req.query['dateto'] = yesterday;
        }

        var fromDate = null;
        var toDate = null;
        fromDate = req.query['datefrom'];
        toDate = req.query['dateto'];
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        condi['Modified_On'] = {"$gte": dateFrom, "$lte": dateTo};
        if (insurer_id > 0) {
            condi['Insurer_Id'] = insurer_id;
        }
        if (udid > 0) {
            condi = {'User_Data_Id': udid};
        }
        User_Data.find(condi).select(['User_Data_Id', 'Product_Id', 'Request_Unique_Id', 'Insurer_Id', 'PB_CRN', 'Last_Status', 'Transaction_Data', 'Premium_Request', 'Pdf_Request', 'Verification_Request', 'Modified_On']).sort({Modified_On: 1}).limit(limit).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }
            try {
                if (!err) {
                    var objsummary_arr = [];
                    var objsummary_main = [];
                    var objsummary_main_pre = {};
                    var arr_source = ['ALLSOURCE', 'DC', 'LA', 'SM', 'GS', 'EM'];
                    for (let k in arr_source) {
                        objsummary_main_pre[arr_source[k]] = {
                            'Summary': {
                                'All': {
                                    'Insurer': 'All',
                                    'Car': 0,
                                    'TW': 0,
                                    'CV': 0,
                                    'Health': 0,
                                    'Travel': 0,
                                    'Total': 0
                                }
                            },
                            'List': [],
                        };
                    }
                    for (let k in dbUsers) {
                        let user = dbUsers[k]._doc;
                        let channel = user['Premium_Request']['channel'];
                        let policy_number = user.Transaction_Data.policy_number;
                        insurer_id = user.Insurer_Id;
                        let objsummary = {
                            User_Data_Id: user.User_Data_Id,
                            PB_CRN: user.PB_CRN,
                            policy_number: policy_number,
                            Insurer: arr_ins[insurer_id] + '(ID-' + insurer_id + ')',
                            Product: Const_Product[user.Product_Id] + '(ID-' + user.Product_Id + ')',
                            Modified_On: moment(user.Modified_On).format("YYYY-MM-D")
                        };
                        if (objsummary_main_pre['ALLSOURCE']['Summary'].hasOwnProperty('ins_' + insurer_id) === false) {
                            objsummary_main_pre['ALLSOURCE']['Summary']['ins_' + insurer_id] = {
                                'Insurer': arr_ins[insurer_id] + '(ID-' + insurer_id + ')',
                                'Car': 0,
                                'TW': 0,
                                'CV': 0,
                                'Health': 0,
                                'Travel': 0,
                                'Total': 0
                            };
                        }
                        objsummary_main_pre['ALLSOURCE']['Summary']['ins_' + insurer_id][Const_Product[user.Product_Id]]++;
                        objsummary_main_pre['ALLSOURCE']['Summary']['ins_' + insurer_id]['Total']++;
                        objsummary_main_pre['ALLSOURCE']['Summary']['All'][Const_Product[user.Product_Id]]++;
                        objsummary_main_pre['ALLSOURCE']['Summary']['All']['Total']++;
                        objsummary_main_pre['ALLSOURCE']['List'].push(objsummary);
                        //channel wise
                        if (objsummary_main_pre.hasOwnProperty(channel)) {
                            if (objsummary_main_pre[channel]['Summary'].hasOwnProperty('ins_' + insurer_id) === false) {
                                objsummary_main_pre[channel]['Summary']['ins_' + insurer_id] = {
                                    'Insurer': arr_ins[insurer_id] + '(ID-' + insurer_id + ')',
                                    'Car': 0,
                                    'TW': 0,
                                    'CV': 0,
                                    'Health': 0,
                                    'Travel': 0,
                                    'Total': 0
                                };
                            }
                            objsummary_main_pre[channel]['Summary']['ins_' + insurer_id][Const_Product[user.Product_Id]]++;
                            objsummary_main_pre[channel]['Summary']['ins_' + insurer_id]['Total']++;
                            objsummary_main_pre[channel]['Summary']['All'][Const_Product[user.Product_Id]]++;
                            objsummary_main_pre[channel]['Summary']['All']['Total']++;
                            objsummary_main_pre[channel]['List'].push(objsummary);
                        }
                    }
                    let duration = fromDate;
                    if (fromDate !== toDate) {
                        duration = fromDate + ' to ' + toDate;
                    }
                    for (let k2 in objsummary_main_pre) {
                        let channel = k2;
                        objsummary_main_pre[channel]['SummaryList'] = [];
                        for (let k3 in objsummary_main_pre[channel]['Summary']) {
                            if (k3 !== 'All') {
                                objsummary_main_pre[channel]['SummaryList'].push(objsummary_main_pre[channel]['Summary'][k3]);
                            }
                        }
                        objsummary_main_pre[channel]['SummaryList'].push(objsummary_main_pre[channel]['Summary']['All']);
                        //objsummary_main.push(objsummary_main_pre['All']);
                        let content_html = '<!DOCTYPE html><html><head><title>Report</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">PENDING POLICY SUMMARY (Total # ' + objsummary_main_pre[channel]['Summary']['All']['Total'] + ') - From : ' + fromDate + ' To : ' + toDate + ' </span>';
                        content_html += arr_object_to_table(objsummary_main_pre[channel]['SummaryList']);
                        content_html += '</div><br>';
                        content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">ReportList</span>';
                        content_html += arr_object_to_table(objsummary_main_pre[channel]['List']);
                        content_html += '</div><br>';
                        content_html += '</body></html>';
                        var subject = '[HORIZON][CHANNEL-' + channel + '][RANGE-' + type.toUpperCase() + '] PENDING_POLICY :: ' + duration;
                        if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            if (req.query['dbg'] === 'yes') {
                                objModelEmail.send('notifications@policyboss.com', 'chirag.modi@policyboss.com', subject, content_html, '', config.environment.notification_email);
                            } else {
                                var arr_email_config = {
                                    'ALLSOURCE': {
                                        'to': [
                                            'techsupport@policyboss.com',
                                            'susanna.lobo@landmarkinsurance.in',
                                            'jyoti.sharma@policyboss.com'
                                        ],
                                        'cc': [
                                            'varun.kaushik@policyboss.com',
                                            'susheeltejuja@landmarkinsurance.in',
                                            'apaar.kasliwal@landmarkinsurance.in'
                                        ]
                                    },
                                    'DC': {
                                        'to': ['ashutosh.sharma@magicfinmart.com'],
                                        'cc': ['srinivas@policyboss.com']
                                    },
                                    'LA': {
                                        'to': ['ashutosh.sharma@magicfinmart.com'],
                                        'cc': ['srinivas@policyboss.com']
                                    },
                                    'SM': {
                                        'to': ['susheel.menon@landmarkinsurance.in'],
                                        'cc': []
                                    },
                                    'GS': {
                                        'to': ['saroj.singh@policyboss.com', 'shabana.gaus@policyboss.com'],
                                        'cc': ['gagandeep.singh@policyboss.com']
                                    },
                                    'EM': {
                                        'to': ['kevin.menezes@policyboss.com'],
                                        'cc': []
                                    }
                                };
                                objModelEmail.send('notifications@policyboss.com', arr_email_config[channel]['to'].join(','), subject, content_html, arr_email_config[channel]['cc'].join(','), config.environment.notification_email);
                            }
                        }

                    }
                    if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                        if (req.query['dbg'] === 'yes') {
                            res.send('<pre>' + JSON.stringify(objsummary_main_pre, undefined, 2) + '</pre>');
                        } else {
                            res.send(content_html);
                        }
                    } else {
                        res.send('<pre' + JSON.stringify(objsummary_main_pre, undefined, 2) + '</pre>');
                    }
                }
            } catch (e) {
                var resp = {
                    'ERR': e.stack,
                    'DATA': objsummary_main_pre
                };
                res.send(resp);
            }
        });
    } catch (e) {
        res.send(e.stack);
    }
});
function arr_object_to_table(arr_object) {
    let tblHtml = '<table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%">';
    let inc = 0;
    for (let k in arr_object) {
        if (inc === 0) {
            tblHtml += '<tr>';
            for (let k1 in arr_object[0]) {
                tblHtml += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k1 + '</th>';
            }
            tblHtml += '</tr>';
        }
        tblHtml += '<tr>';
        for (let k1 in arr_object[k]) {
            tblHtml += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + arr_object[k][k1] + '</td>';
        }
        tblHtml += '</tr>';
        inc++;
    }
    tblHtml += '</table>';
    return tblHtml;
}
function pdf_service_execute(user) {
    let policy_number = user.Transaction_Data.policy_number;
    let url_api = config.environment.weburl + '/quote/pdf_initiate';
    let args = {
        data: {},
        headers: {
            "Content-Type": "application/json",
            "secret_key": user['Premium_Request']['secret_key'],
            "client_key": user['Premium_Request']['client_key']
        }
    };
    if (user.hasOwnProperty('Pdf_Request') === false) {
        args['data'] = {
            "api_reference_number": user['Verification_Request']['api_reference_number'],
            "search_reference_number": user['Request_Unique_Id'] + "_" + user['User_Data_Id'],
            "policy_number": policy_number,
            "secret_key": user['Premium_Request']['secret_key'],
            "client_key": user['Premium_Request']['client_key'],
            "insurer_id": user.Insurer_Id,
            "crn": user['PB_CRN'],
            "method_type": "Pdf",
            "execution_async": "no",
            "udid": user['User_Data_Id']
        };
    } else {
        args['data'] = user.Pdf_Request;
        args['data']['udid'] = user['User_Data_Id'];
    }
    console.error('HDFCSync', args['data']);
    execute_post(url_api, args);
}
router.get('/check_pdf_size', function (req, res, next) {
//console.log('Start', this.constructor.name, 'sync_policy_pdf');
    try {
        var report_type = req.query['op'];
        if (report_type != 'PREVIEW' && report_type != 'EXECUTE') {
            res.send('Action Missing');
        }
//console.log('report_type', report_type);
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = null;
        var toDate = null;
        if (req.query.hasOwnProperty('datefrom') && req.query['datefrom'] !== '' && req.query.hasOwnProperty('dateto') && req.query['dateto'] !== '') {
            fromDate = req.query['datefrom'];
            toDate = req.query['dateto'];
        } else {
            fromDate = moment(today).subtract(3, 'd').format("YYYY-MM-D");
            toDate = moment(today).format("YYYY-MM-D");
        }
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        let cond_ud = {
            'Product_Id': {$in: [1, 2, 10, 12]},
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo},
            "Last_Status": 'TRANS_SUCCESS_WITH_POLICY'
        };
        if (req.query.hasOwnProperty('insurer_id') && req.query['insurer_id'] !== '') {
            cond_ud['Insurer_Id'] = req.query['insurer_id'] - 0;
        }
        if (req.query.hasOwnProperty('udid') && req.query['udid'] !== '') {
            cond_ud = {'User_Data_Id': req.query['udid'] - 0};
        }

        User_Data.find(cond_ud).select(['Premium_Request', 'Payment_Request', 'User_Data_Id', 'Request_Unique_Id', 'PB_CRN', 'Last_Status', 'ERP_CS', 'Transaction_Data', 'Insurer_Id', 'Product_Id', 'Status_History', 'Modified_On', 'Pdf_Request', 'Verification_Request', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }

            if (!err) {
                var objPolicySummary = [];
                for (let k in dbUsers) {
                    let user = dbUsers[k]._doc;
                    try {
                        if (user.Transaction_Data && user.Transaction_Data.policy_url) {
                            let pdf_file_name = user.Transaction_Data.policy_url;
                            pdf_file_name = pdf_file_name.split('/');
                            pdf_file_name = pdf_file_name[pdf_file_name.length - 1];
                            let pdf_sys_loc = appRoot + "/tmp/pdf/" + pdf_file_name;
                            let is_valid_policy = null;
                            if (fs.existsSync(pdf_sys_loc) && pdf_sys_loc.indexOf('.pdf') > -1) {
                                let stats = fs.statSync(pdf_sys_loc);
                                let fileSizeInBytes = stats.size;
                                let fileSizeInKb = (fileSizeInBytes / 1024).toFixed(2);
                                if (fileSizeInKb > 10) {
                                    is_valid_policy = true;
                                } else {
                                    fs.unlinkSync(pdf_sys_loc);
                                    is_valid_policy = false;
                                }
                            } else {
                                is_valid_policy = false;
                            }

                            if (is_valid_policy === false) {
                                objPolicySummary.push(user['User_Data_Id']);
                                User_Data.update({'User_Data_Id': user['User_Data_Id']}, {$set: {'Last_Status': 'TRANS_SUCCESS_WO_POLICY'}}, function (err, numAffected) {

                                });
                            }

                        }
                    } catch (e) {
                        console.error('Exception', 'check_pdf_size', e);
                    }
                }
                res.json(objPolicySummary);
            }
        });
    } catch (e) {
        console.error('Exception', 'check_pdf_size', e);
    }
});
router.get('/sync_policy_pdf', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_policy_pdf');
    try {
        var report_type = req.query['op'];
        if (report_type != 'PREVIEW' && report_type != 'EXECUTE') {
            res.send('Action Missing');
        }
        //console.log('report_type', report_type);
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = null;
        var toDate = null;
        var Base = require(appRoot + '/libs/Base');
        var objBase = new Base();
        if (req.query.hasOwnProperty('datefrom') && req.query['datefrom'] !== '' && req.query.hasOwnProperty('dateto') && req.query['dateto'] !== '') {
            fromDate = req.query['datefrom'];
            toDate = req.query['dateto'];
        } else {
            fromDate = moment(today).subtract(28, 'd').format("YYYY-MM-D");
            toDate = moment(today).format("YYYY-MM-D");
        }


        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        console.error('Log', 'sync_policy_pdf', dateFrom, dateTo);
        var policy_email = require('../models/policy_email');
        let cond_ud = {
            'Product_Id': {$in: [1, 2, 10, 12]},
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo},
            "Last_Status": 'TRANS_SUCCESS_WO_POLICY'
        };
        if (req.query.hasOwnProperty('insurer_id') && req.query['insurer_id'] !== '') {
            cond_ud['Insurer_Id'] = req.query['insurer_id'] - 0;
        }
        if (req.query.hasOwnProperty('udid') && req.query['udid'] !== '') {
            cond_ud = {'User_Data_Id': req.query['udid'] - 0};
        }



        User_Data.find(cond_ud).select(['Premium_Request', 'Payment_Request', 'User_Data_Id', 'Request_Unique_Id', 'PB_CRN', 'Last_Status', 'ERP_CS', 'Transaction_Data', 'Insurer_Id', 'Product_Id', 'Status_History', 'Modified_On', 'Pdf_Request', 'Verification_Request', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }
            try {
                if (!err) {
                    var objPolicySummary = [];
                    for (let k in dbUsers) {
                        let user = dbUsers[k]._doc;
                        try {
                            if (user.Transaction_Data && user.Transaction_Data.policy_url) {
                                let obj_cond_policy = null;
                                let is_search_sub = true;
                                let is_search_attachment = true;
                                let policy_number = user.Transaction_Data.policy_number;
                                let vehicle_registration_no = (user.Erp_Qt_Request_Core.hasOwnProperty('___registration_no___')) ? user.Erp_Qt_Request_Core['___registration_no___'] : '';
                                let proposal_id = '';
                                let customer_name = user.Erp_Qt_Request_Core['___first_name___'] + ' ' + user.Erp_Qt_Request_Core['___last_name___'];
                                if (user.Erp_Qt_Request_Core['___middle_name___'] !== '') {
                                    customer_name = user.Erp_Qt_Request_Core['___first_name___'] + ' ' + user.Erp_Qt_Request_Core['___middle_name___'] + ' ' + user.Erp_Qt_Request_Core['___last_name___'];
                                }
                                let email = user.Erp_Qt_Request_Core['___email___'];
                                let transaction_id = user.Transaction_Data.transaction_id;
                                let search_id = '';
                                let pdf_file_name = user.Transaction_Data.policy_url;
                                pdf_file_name = pdf_file_name.split('/');
                                pdf_file_name = pdf_file_name[pdf_file_name.length - 1];
                                let pdf_sys_loc = appRoot + "/tmp/pdf/" + pdf_file_name;
                                let is_valid_policy = false;
                                if (fs.existsSync(pdf_sys_loc) && pdf_sys_loc.indexOf('.pdf') > -1) {
                                    let stats = fs.statSync(pdf_sys_loc);
                                    let fileSizeInBytes = stats.size;
                                    let fileSizeInKb = (fileSizeInBytes / 1024).toFixed(2);
                                    if (fileSizeInKb > 10) {
                                        is_valid_policy = true;
                                        User_Data.update({'User_Data_Id': user['User_Data_Id']}, {$set: {'Last_Status': 'TRANS_SUCCESS_WITH_POLICY'}}, function (err, numAffected) {
                                            //console.log('UserDataPolicyDataUpdate', err, numAffected);
                                        });
                                        objBase.send_policy_upload_notification(user['User_Data_Id']);
                                    } else {
                                        fs.unlinkSync(pdf_sys_loc);
                                    }
                                }
                                if (is_valid_policy === false && pdf_file_name !== '') {
                                    var arr_insurer_schema = {
                                        'insurer_pdf_url': [
                                            1, //BAJAJ
                                            11, // TATAAIG
                                            45, // ACKO
                                            47, //DHFL 
                                            9, //RELIANCE
                                            38 // CIGNA                                          
                                        ],
                                        'insurer_pdf_api': [
                                            5, //HDFCERGO
                                            34, // religare
                                            44, // DIGIT,                                         
                                            33 // LIBERTY,                                         
                                        ]
                                    };
                                    if (user.Transaction_Data.hasOwnProperty('insurer_policy_url') && arr_insurer_schema.insurer_pdf_url.indexOf(user.Insurer_Id) > -1) {
                                        try {
                                            //console.error('sync_policy_pdf', 'bajajallianz', user.Transaction_Data);
                                            let insurer_policy_url = user.Transaction_Data.insurer_policy_url;
                                            save_file_from_url(insurer_policy_url, pdf_sys_loc);
                                        } catch (e) {
                                            console.error('sync_policy_pdf', 'bajajallianz', e, user.Transaction_Data);
                                        }
                                    } else if ((arr_insurer_schema.insurer_pdf_api.indexOf(user.Insurer_Id) > -1) && policy_number !== null && policy_number !== '') {
                                        if (user.Insurer_Id == 5 && user.Product_Id == 12) {
                                            obj_cond_policy = {
                                                'From': 'hdfcergo.service@hdfcergo.com',
                                                'Sub': new RegExp(policy_number, 'i')
                                            };
                                            search_id = policy_number;
                                        } else if (user.Insurer_Id == 5 && user.Product_Id == 2) {
                                            obj_cond_policy = {
                                                'From': 'hdfcergo.service@hdfcergo.com',
                                                'Sub': new RegExp(policy_number, 'i')
                                            };
                                            search_id = policy_number;
                                        } else {
                                            let url_api = config.environment.weburl + '/quote/pdf_initiate';
                                            let args = {
                                                data: {},
                                                headers: {
                                                    "Content-Type": "application/json",
                                                    "secret_key": user['Premium_Request']['secret_key'],
                                                    "client_key": user['Premium_Request']['client_key']
                                                }
                                            };
                                            if (user.hasOwnProperty('Pdf_Request') === false) {
                                                args['data'] = {
                                                    "api_reference_number": user['Verification_Request']['api_reference_number'],
                                                    "search_reference_number": user['Request_Unique_Id'] + "_" + user['User_Data_Id'],
                                                    "policy_number": policy_number,
                                                    "secret_key": user['Premium_Request']['secret_key'],
                                                    "client_key": user['Premium_Request']['client_key'],
                                                    "insurer_id": user.Insurer_Id,
                                                    "crn": user['PB_CRN'],
                                                    "method_type": "Pdf",
                                                    "execution_async": "no",
                                                    "udid": user['User_Data_Id']
                                                };
                                            } else {
                                                args['data'] = user.Pdf_Request;
                                                args['data']['udid'] = user['User_Data_Id'];
                                            }
                                            console.error('HDFCSync', args['data']);
                                            execute_post(url_api, args);
                                        }
                                    } else {
                                        if (user.Insurer_Id === 7) {
                                            obj_cond_policy = {
                                                'From': 'noreply@iffcotokio.co.in',
                                                'Sub': new RegExp(policy_number, 'i')
                                            };
                                            search_id = policy_number;
                                        }
                                        if (user.Insurer_Id === 5) {
                                            obj_cond_policy = {
                                                'From': 'hdfcergo.service@hdfcergo.com',
                                                'Sub': new RegExp(policy_number, 'i')
                                            };
                                            search_id = policy_number;
                                        }
                                        if (user.Insurer_Id === 33 && false) {
                                            obj_cond_policy = {
                                                'From': 'onlinesales@libertyinsurance.in',
                                                'Sub': new RegExp(policy_number, 'i')
                                            };
                                            search_id = policy_number;
                                            is_search_attachment = false;
                                        }
                                        if (user.Insurer_Id === 21) { //apollomunich now hdfchealth
                                            proposal_id = user.Payment_Request.pg_data.ProposalId;
                                            obj_cond_policy = {
                                                'From': 'relay@hdfcergohealth.com',
                                                'Sub': new RegExp(proposal_id, 'i')
                                            };
                                            search_id = proposal_id;
                                            is_search_attachment = false;
                                        }
                                        if (user.Insurer_Id === 34) { //religare
                                            proposal_id = user.Payment_Request.pg_data.ProposalId;
                                            obj_cond_policy = {
                                                'From': 'ahealthystart@religarehealthinsurance.com',
                                                'To': email,
                                                'Sub': new RegExp(policy_number, 'i')
                                            };
                                            search_id = policy_number;
                                        }
                                        /*if (user.Insurer_Id === 16) { //rahejaqbe
                                         obj_cond_policy = {
                                         'From': 'motor_f@rahejaqbe.com',
                                         'To': email,
                                         'Sub': new RegExp(vehicle_registration_no, 'i')
                                         };
                                         is_search_sub = false;
                                         is_search_attachment = false;
                                         }*/
                                        if (user.Insurer_Id === 45) { //acko
                                            obj_cond_policy = {
                                                'From': 'support@acko.com',
                                                'To': email,
                                                'Sub': new RegExp(vehicle_registration_no.replace(/\-/g, ''), 'i')
                                            };
                                            is_search_sub = false;
                                            is_search_attachment = false;
                                        }

//                                    if (user.Insurer_Id === 26) { //apollomunich
//                                        proposal_id = user.Payment_Request.pg_data.ProposalId;
//                                        obj_cond_policy = {
//                                            'From': 'retail@starhealth.in',
//                                            'To': email
//                                        };
//                                        search_id = proposal_id;
//                                        is_search_attachment = false;
//                                    }
                                        if (user.Insurer_Id === 4) {
                                            obj_cond_policy = {
                                                'From': 'fgcare@futuregenerali.in',
                                                'Sub': new RegExp(customer_name, 'i')
                                            };
                                            search_id = policy_number;
                                            is_search_sub = false;
                                        }
                                        if (user.Insurer_Id === 42) { //aditya birla
                                            obj_cond_policy = {
                                                'From': 'communication.abh@adityabirlacapital.com',
                                                'To': email,
                                                'Sub': new RegExp('Aditya Birla Health Insurance plan is issued', 'i')
                                                        //'Sub': 'Aditya Birla Health Insurance - Welcome Onboard!'
                                                        //'Sub': 'Activ Assure policy schedule - welcome email',
                                                        //'Sub': 'Aditya Birla Health Insurance',
                                            };
                                            search_id = policy_number;
                                            is_search_sub = false;
                                        }
                                        if (user.Insurer_Id === 10) {
                                            let sub = '';
                                            if (user.Product_Id == 1) {
                                                sub = 'Policy purchased (Motor) : ' + transaction_id.toString();
                                            }
                                            if (user.Product_Id == 10) {
                                                sub = 'Policy purchased (Two Wheeler) : ' + transaction_id.toString();
                                            }
                                            obj_cond_policy = {
                                                'From': 'no-reply@royalsundaram.in',
                                                'Sub': sub
                                            };
                                            search_id = transaction_id;
                                        }
                                    }
                                    //for process
                                    if (obj_cond_policy) {
                                        user['Search_Id'] = search_id;
                                        user['is_search_sub'] = is_search_sub;
                                        user['is_search_attachment'] = is_search_attachment;
                                        user['Pdf_Target'] = pdf_sys_loc;
                                        objPolicySummary[user['User_Data_Id']] = user;
                                        console.error('PolicySearchCriteria', obj_cond_policy);
                                        policy_email.findOne(obj_cond_policy).select().exec(function (err, dbPolicy) {
                                            if (err) {
                                                console.error('PolicyEmail', 'Read', err);
                                            } else {
                                                if (dbPolicy) {
                                                    for (let k1 in objPolicySummary) {
                                                        let is_sub_pass = false;
                                                        if (objPolicySummary[k1]['is_search_sub'] === false) {
                                                            is_sub_pass = true;
                                                        }
                                                        if (objPolicySummary[k1]['is_search_sub'] === true) {
                                                            if (dbPolicy.Sub.toString().indexOf(objPolicySummary[k1]['Search_Id']) > -1) {
                                                                is_sub_pass = true;
                                                            }
                                                        }
                                                        if (is_sub_pass) {
                                                            if (dbPolicy.Attachment) {
                                                                let arr_attach = dbPolicy.Attachment.split(',');
                                                                for (let k2 in arr_attach) {
                                                                    try {
                                                                        let is_attachment_pass = false;
                                                                        if (objPolicySummary[k1]['is_search_attachment'] === false) {
                                                                            is_attachment_pass = true;
                                                                        } else {
                                                                            if (arr_attach[k2].indexOf(objPolicySummary[k1]['Search_Id']) > -1) {
                                                                                is_attachment_pass = true;
                                                                            }
                                                                        }
                                                                        if (is_attachment_pass && fs.existsSync(appRoot + "/tmp/policy_email/" + arr_attach[k2])) {
                                                                            objPolicySummary[k1]['New_Policy'] = arr_attach[k2];
                                                                            objPolicySummary[k1]['Pdf_Source'] = appRoot + "/tmp/policy_email/" + arr_attach[k2];
                                                                            fs.copyFileSync(objPolicySummary[k1]['Pdf_Source'], objPolicySummary[k1]['Pdf_Target']);
                                                                            let Status_History = (objPolicySummary[k1].Status_History) ? objPolicySummary[k1].Status_History : [];
                                                                            let ObjUser_Data = {};
                                                                            let Last_Status = '';
                                                                            Last_Status = 'TRANS_SUCCESS_WITH_POLICY';
                                                                            Status_History.unshift({
                                                                                "Status": Last_Status,
                                                                                "StatusOn": new Date()
                                                                            });
                                                                            ObjUser_Data.Last_Status = Last_Status;
                                                                            ObjUser_Data.Status_History = Status_History;
                                                                            User_Data.update({'User_Data_Id': objPolicySummary[k1]['User_Data_Id']}, {$set: ObjUser_Data}, function (err, numAffected) {
                                                                                //console.log('UserDataPolicyDataUpdate', err, numAffected);
                                                                            });
                                                                            let today = new Date();
                                                                            let log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                                                                            let objSummary = {
                                                                                'User_Data_Id': objPolicySummary[k1]['User_Data_Id'],
                                                                                'PB_CRN': objPolicySummary[k1]['PB_CRN'],
                                                                                'Insurer_Id': objPolicySummary[k1]['Insurer_Id'],
                                                                                'Pdf_Source': objPolicySummary[k1]['Pdf_Source'],
                                                                                'Pdf_Target': objPolicySummary[k1]['Pdf_Target'],
                                                                                'Modified_On': objPolicySummary[k1]['Modified_On']
                                                                            };
                                                                            fs.appendFile(appRoot + "/tmp/log/email_policy_sync_" + log_file_name + ".log", JSON.stringify(objSummary, undefined, 2), function (err) {
                                                                                if (err) {
                                                                                    //return //console.log(err);
                                                                                }
                                                                                //console.log("The file was saved!");
                                                                            });
                                                                            //email notification process
                                                                            objBase.send_policy_upload_notification(objSummary['User_Data_Id']);
                                                                        }
                                                                    } catch (e3) {
                                                                        console.error('Policy_Sync', e3);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                        });
                                    }

                                }
                            }
                        } catch (e4) {
                            console.error('Policy_Sync', 'e4', e4, 'CRN', user.PB_CRN);
                        }
                    }
                    if (false) {
                        var msg = '<!DOCTYPE html><html><head><title>EPR CS SYNC</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        msg += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">ERP_CS_SYNC</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                        var row_inc = 0;
                        for (var k in objCSSummary) {
                            if (row_inc === 0) {
                                msg += '<tr>';
                                for (var k_head in objCSSummary[k]) {
                                    msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k_head + '</th>';
                                }
                                msg += '</tr>';
                            }
                            msg += '<tr>';
                            for (var k_row in objCSSummary[k]) {
                                msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + objCSSummary[k][k_row] + '</td>';
                            }
                            msg += '</tr>';
                            row_inc++;
                        }
                        msg += '</table></div>';
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        var sub = '[' + config.environment.name.toString().toUpperCase() + '-' + report_type + ']';
                        var today = moment().format('YYYY-MM-DD_HH:mm:ss');
                        sub += 'ERP_CS_SYNC::' + today.toString();
                        objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                    }
                    res.json({'Status': 'Started'});
                }
            } catch (ex) {
                console.error('Exception', 'sync_policy_pdf', ex);
                res.json(ex);
            }

        });
    } catch (e) {
        console.error('Exception', 'sync_policy_pdf', e);
        res.json(e);
    }
});
router.get('/sync_policy_pdf_adv', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_policy_pdf');
    try {
        var report_type = req.query['op'];
        if (report_type != 'PREVIEW' && report_type != 'EXECUTE') {
            res.send('Action Missing');
        }
        //console.log('report_type', report_type);
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = null;
        var toDate = null;
        var Base = require(appRoot + '/libs/Base');
        var objBase = new Base();
        if (req.query.hasOwnProperty('datefrom') && req.query['datefrom'] !== '' && req.query.hasOwnProperty('dateto') && req.query['dateto'] !== '') {
            fromDate = req.query['datefrom'];
            toDate = req.query['dateto'];
        } else {
            fromDate = moment(today).subtract(21, 'd').format("YYYY-MM-D");
            toDate = moment(today).format("YYYY-MM-D");
        }


        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        console.error('Log', 'sync_policy_pdf', dateFrom, dateTo);
        var policy_email = require('../models/policy_email');
        let cond_ud = {
            'Product_Id': {$in: [1, 2, 10, 12]},
            "Modified_On": {"$gte": dateFrom, "$lte": dateTo},
            "Last_Status": 'TRANS_SUCCESS_WO_POLICY'
        };
        if (req.query.hasOwnProperty('insurer_id') && req.query['insurer_id'] !== '') {
            cond_ud['Insurer_Id'] = req.query['insurer_id'] - 0;
        }
        if (req.query.hasOwnProperty('udid') && req.query['udid'] !== '') {
            cond_ud = {'User_Data_Id': req.query['udid'] - 0};
        }
        let pdf_mode = 'url_api';
        if (req.query.hasOwnProperty('pdf_mode') && req.query['pdf_mode'] !== '') {
            pdf_mode = req.query['pdf_mode'];
        }
        User_Data.find(cond_ud).select(['Premium_Request', 'Payment_Request', 'User_Data_Id', 'Request_Unique_Id', 'PB_CRN', 'Last_Status', 'ERP_CS', 'Transaction_Data', 'Insurer_Id', 'Product_Id', 'Status_History', 'Modified_On', 'Pdf_Request', 'Verification_Request', 'Erp_Qt_Request_Core']).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }

            if (!err) {
                var objPolicySummary = [];
                var arr_exception = {
                    'Sync_Policy_Preparation': [],
                    'Policy_Sync_Email_Search': []
                };
                for (let k in dbUsers) {
                    let user = dbUsers[k]._doc;
                    try {
                        if (user.Transaction_Data && user.Transaction_Data.policy_url) {
                            let is_search_sub = true;
                            let is_search_attachment = true;
                            let policy_number = user.Transaction_Data.policy_number;
                            let vehicle_registration_no = (user.Erp_Qt_Request_Core.hasOwnProperty('___registration_no___')) ? user.Erp_Qt_Request_Core['___registration_no___'] : '';
                            let proposal_id = '';
                            let customer_name = user.Erp_Qt_Request_Core['___first_name___'] + ' ' + user.Erp_Qt_Request_Core['___last_name___'];
                            let email = user.Erp_Qt_Request_Core['___email___'];
                            let transaction_id = user.Transaction_Data.transaction_id;
                            let search_id = '';
                            let pdf_file_name = user.Transaction_Data.policy_url;
                            pdf_file_name = pdf_file_name.split('/');
                            pdf_file_name = pdf_file_name[pdf_file_name.length - 1];
                            let pdf_sys_loc = appRoot + "/tmp/pdf/" + pdf_file_name;
                            let is_valid_policy = false;
                            if (fs.existsSync(pdf_sys_loc) && pdf_sys_loc.indexOf('.pdf') > -1) {
                                let stats = fs.statSync(pdf_sys_loc);
                                let fileSizeInBytes = stats.size;
                                let fileSizeInKb = (fileSizeInBytes / 1024).toFixed(2);
                                if (fileSizeInKb > 10) {
                                    is_valid_policy = true;
                                    User_Data.update({'User_Data_Id': user['User_Data_Id']}, {$set: {'Last_Status': 'TRANS_SUCCESS_WITH_POLICY'}}, function (err, numAffected) {
                                        //console.log('UserDataPolicyDataUpdate', err, numAffected);
                                    });
                                    objBase.send_policy_upload_notification(user['User_Data_Id']);
                                } else {
                                    fs.unlinkSync(pdf_sys_loc);
                                }
                            }
                            if (is_valid_policy === false && pdf_file_name !== '') {
                                if (pdf_mode === 'url_api') {
                                    if (user.Transaction_Data.hasOwnProperty('insurer_policy_url') && (user.Insurer_Id === 45 || user.Insurer_Id === 1 || user.Insurer_Id === 9 || (user.Insurer_Id === 38))) {
                                        try {
                                            //console.error('sync_policy_pdf', 'bajajallianz', user.Transaction_Data);
                                            let insurer_policy_url = user.Transaction_Data.insurer_policy_url;
                                            save_file_from_url(insurer_policy_url, pdf_sys_loc);
                                        } catch (e) {
                                            console.error('sync_policy_pdf', 'bajajallianz', e, user.Transaction_Data);
                                        }
                                    }
                                    if (([5, 34, 33, 44].indexOf(user.Insurer_Id) > -1) && policy_number !== null && policy_number !== '') {
                                        pdf_service_execute(user);
                                    }
                                }
                                let obj_cond_policy = null;
                                if (pdf_mode === 'email' && ([4, 5, 7, 10, 16, 21, 33, 34, 42, 45].indexOf(user.Insurer_Id) > -1) && policy_number !== null && policy_number !== '')
                                {
                                    obj_cond_policy = {
                                        'From': Const_Insurer_Email[user.Insurer_Id],
                                        'Sub': new RegExp(policy_number, 'i')
                                    };
                                    if (user.Insurer_Id === 4) {
                                        obj_cond_policy['Sub'] = new RegExp(customer_name, 'i');
                                        search_id = policy_number;
                                        is_search_sub = false;
                                    }
                                    if (user.Insurer_Id === 5) {
                                        search_id = policy_number;
                                    }
                                    if (user.Insurer_Id === 7) {
                                        search_id = policy_number;
                                    }
                                    if (user.Insurer_Id === 10) {
                                        let sub = '';
                                        if (user.Product_Id == 1) {
                                            sub = 'Policy purchased (Motor) : ' + transaction_id.toString();
                                        }
                                        if (user.Product_Id == 10) {
                                            sub = 'Policy purchased (Two Wheeler) : ' + transaction_id.toString();
                                        }
                                        obj_cond_policy['Sub'] = sub;
                                        search_id = transaction_id;
                                    }
                                    if (user.Insurer_Id === 16) { //rahejaqbe                                       
                                        obj_cond_policy['Sub'] = new RegExp(vehicle_registration_no, 'i');
                                        is_search_sub = false;
                                        is_search_attachment = false;
                                    }
                                    if (user.Insurer_Id === 21) { //apollomunich now hdfchealth
                                        proposal_id = user.Payment_Request.pg_data.ProposalId;
                                        obj_cond_policy['Sub'] = new RegExp(proposal_id, 'i');
                                        search_id = proposal_id;
                                        is_search_attachment = false;
                                    }
                                    if (user.Insurer_Id === 33) {
                                        search_id = policy_number;
                                        is_search_attachment = false;
                                    }
                                    if (user.Insurer_Id === 34) { //religare                                        
                                        search_id = policy_number;
                                        proposal_id = user.Payment_Request.pg_data.ProposalId;
                                    }
                                    if (user.Insurer_Id === 42) { //aditya birla
                                        obj_cond_policy = {
                                            'From': 'communication.abh@adityabirlacapital.com',
                                            'Sub': new RegExp('Aditya Birla Health Insurance plan is issued', 'i'),
                                            'To': email
                                        };
                                        search_id = policy_number;
                                        is_search_sub = false;
                                    }
                                    if (user.Insurer_Id === 45) { //ACKO
                                        obj_cond_policy['Sub'] = new RegExp(vehicle_registration_no.replace(/\-/g, ''), 'i');
                                        is_search_sub = false;
                                        is_search_attachment = false;
                                    }

                                    user['Search_Id'] = search_id;
                                    user['is_search_sub'] = is_search_sub;
                                    user['is_search_attachment'] = is_search_attachment;
                                    user['Pdf_Target'] = pdf_sys_loc;
                                    user['obj_cond_policy'] = obj_cond_policy;
                                    objPolicySummary[user['User_Data_Id']] = user;
                                    sync_policy_pdf_handler([user['User_Data_Id']], report_type);
                                }
                            }
                        }
                    } catch (e) {
                        arr_exception['Sync_Policy_Preparation'].push({'udid': user.User_Data_Id, 'crn': user.PB_CRN, 'err': e.stack});
                        console.error('Exception', 'Sync_Policy_Preparation', user.PB_CRN, e);
                    }
                    res.json(arr_exception);
                }
            }
        });
    } catch (e) {
        console.error('Exception', 'sync_policy_pdf', e);
        res.send(e.stack);
    }
});
function sync_policy_pdf_handler(IndPolicySummary, report_type) {
    try {
        let obj_cond_policy = IndPolicySummary['obj_cond_policy'];
        console.error('Sync_Policy', 'PolicySearchCriteria', obj_cond_policy);
        Policy_Email.findOne(obj_cond_policy).select().exec(function (err, dbPolicy) {
            if (err) {
                console.error('PolicyEmail', 'Read', err);
            } else if (dbPolicy) {
                try {
                    let is_sub_pass = false;
                    if (IndPolicySummary['is_search_sub'] === false) {
                        is_sub_pass = true;
                    }
                    if (IndPolicySummary['is_search_sub'] === true) {
                        if (dbPolicy.Sub.toString().indexOf(IndPolicySummary['Search_Id']) > -1) {
                            is_sub_pass = true;
                        }
                    }
                    if (is_sub_pass) {
                        if (dbPolicy.Attachment) {
                            let arr_attach = dbPolicy.Attachment.split(',');
                            let is_attachment_pass = false;
                            let attachment_file = '';
                            if (IndPolicySummary['is_search_attachment'] === false) {
                                is_attachment_pass = true;
                                attachment_file = arr_attach[0];
                            } else {
                                for (let k2 in arr_attach) {
                                    if (arr_attach[k2].indexOf(IndPolicySummary['Search_Id']) > -1) {
                                        is_attachment_pass = true;
                                        attachment_file = arr_attach[k2];
                                        break;
                                    }
                                }
                            }

                            if (attachment_file !== '' && is_attachment_pass && fs.existsSync(appRoot + "/tmp/policy_email/" + attachment_file)) {
                                IndPolicySummary['New_Policy'] = attachment_file;
                                IndPolicySummary['Pdf_Source'] = appRoot + "/tmp/policy_email/" + attachment_file;
                                fs.copyFileSync(IndPolicySummary['Pdf_Source'], IndPolicySummary['Pdf_Target']);
                                let Status_History = (IndPolicySummary.Status_History) ? IndPolicySummary.Status_History : [];
                                let ObjUser_Data = {};
                                let Last_Status = '';
                                Last_Status = 'TRANS_SUCCESS_WITH_POLICY';
                                Status_History.unshift({
                                    "Status": Last_Status,
                                    "StatusOn": new Date()
                                });
                                ObjUser_Data.Last_Status = Last_Status;
                                ObjUser_Data.Status_History = Status_History;
                                if (report_type == 'EXECUTE') {
                                    User_Data.update({'User_Data_Id': IndPolicySummary['User_Data_Id']}, {$set: ObjUser_Data}, function (err, numAffected) {
                                        //console.log('UserDataPolicyDataUpdate', err, numAffected);
                                        objBase.send_policy_upload_notification(IndPolicySummary['User_Data_Id']);
                                    });
                                }
                                let today = new Date();
                                let log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                                if (report_type === 'PREVIEW') {
                                    log_file_name += '_debug';
                                }
                                let objSummary = {
                                    'User_Data_Id': IndPolicySummary['User_Data_Id'],
                                    'PB_CRN': IndPolicySummary['PB_CRN'],
                                    'Insurer_Id': IndPolicySummary['Insurer_Id'],
                                    'Pdf_Source': IndPolicySummary['Pdf_Source'],
                                    'Pdf_Target': IndPolicySummary['Pdf_Target'],
                                    'Modified_On': IndPolicySummary['Modified_On']
                                };
                                fs.appendFile(appRoot + "/tmp/log/email_policy_sync_" + log_file_name + ".log", JSON.stringify(objSummary, undefined, 2), function (err) {
                                    if (err) {
                                        //return //console.log(err);
                                    }
                                    //console.log("The file was saved!");
                                });
                            }
                        }
                    }
                } catch (e3) {
                    console.error('Policy_Sync', e3);
                }
            }
        });
    } catch (e4) {
        arr_exception['Policy_Sync_Email_Search'].push({'udid': user.User_Data_Id, 'crn': user.PB_CRN, 'err': e4.stack});
        console.error('Policy_Sync', 'e4', e4, 'CRN', user.PB_CRN);
    }
}
function execute_post(url, args) {
    var Client = require('node-rest-client').Client;
    var client = new Client();
    client.post(url, args, function (data, response) {
        if (data && args.hasOwnProperty('data') && args['data'].hasOwnProperty('method_type') && args['data']['method_type'] === 'Pdf' && data.Error_Code && data.Error_Code === '') {
            //email notification process
            var Base = require(appRoot + '/libs/Base');
            var objBase = new Base();
            objBase.send_policy_upload_notification(args['data']['udid']);
        }
    });
}
router.get('/sync_fba', function (req, res, next) {
    var objfbasummary = {};
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        if (err) {
            return console.dir(err);
        } else {
            myDbClient = db;
            var dbCollFba = myDbClient.collection('fbas');
            dbCollFba.find({}).toArray(function (err, dbFbaItems) {
                if (err) {
                }
                if (dbFbaItems) {
                    for (var k in dbFbaItems) {
                        var fba_id = dbFbaItems[k]['FinMartID'] - 0;
                        objfbasummary[fba_id] = 0;
                        var Client = require('node-rest-client').Client;
                        var client = new Client();
                        var args = {
                            data: {
                                "FBAID": fba_id - 0
                            },
                            headers: {
                                "Content-Type": "application/json",
                                "token": "1234567890"
                            }
                        };
                        client.post('http://api.magicfinmart.com/api/GetFBAInfo', args, function (data, response) {
                            if (data && data.hasOwnProperty('MSG') && data['MSG'] == 'Record found !') { // for posp agent                                
                                var objFba = {};
                                for (var k in data) {
                                    objFba[k] = (!isNaN(data[k]) && data[k] != "") ? data[k] - 0 : data[k];
                                }
                                objFba['Created_On'] = new Date();
                                myDbClient.collection('fbas_copy').insertOne(objFba, function (err, docsInserted) {
                                    if (err) {
                                        console.error('Exception', 'fba_saved', err);
                                    } else {
                                        console.error('Log', 'fba_saved', fba_id);
                                    }
                                });
                            }
                        });
                    }
                    res.json(objfbasummary);
                }
            });
        }
    });
});
router.get('/sync_employee_lmtimes', function (req, res, next) {
    try {
        var Client = require('node-rest-client').Client;
        var client = new Client();
        client.get(config.pb_config.api_lmtimes_url, function (data, response) {
            if (data) {
                try {
                    if (Array.isArray(data) === true) {

                    } else {
                        data = JSON.parse(data);
                    }
                    console.error('Log', 'sync_employee_lmtimes', data);
                    let arr_user_object = [];
                    for (let k in data) {
                        if (data[k]['Company'] === 'LIBPL' || true) {
                            arr_user_object.push(data[k]);
                        }
                    }
                    if (arr_user_object.length > 0) {
                        var User = require('../models/user');
                        User.count({}, function (err, users) {
                            if (err)
                                res.send(err);
                            let cnt_existing_users = users - 0;
                            let cnt_news_users = arr_user_object.length;
                            let diff_users = cnt_news_users - cnt_existing_users;
                            diff_users = (diff_users < 0) ? (0 - diff_users) : diff_users;
                            console.error('Log', 'sync_employee_lmtimes', cnt_news_users, cnt_existing_users);
                            var moment = require('moment');
                            var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-D");
                            let obj_lmtimes = {
                                'Existing': cnt_existing_users,
                                'New': cnt_news_users,
                                'SsId_NA_Count_UID': 0,
                                'Date': today_str,
                                'SsId_NA_List_UID': []
                            };
                            //if (diff_users > 0 && diff_users < 50 || true) {
                            if (cnt_news_users > 0 && cnt_existing_users > 0) {
                                let arr_employee_uid = [];
                                for (let k in arr_user_object) {
                                    arr_employee_uid.push(arr_user_object[k]['UID']);
                                }
                                var User = require('../models/user');
                                User.remove({}, function (err, users) {
                                    var Employee = require('../models/employee');
                                    Employee.find({"Emp_Code": {$in: arr_employee_uid}, 'Role_ID': {$in: [23, 30]}}, function (err, dbEmployees) {
                                        if (dbEmployees) { // for posp agent
                                            let obj_uid_ssid = {};
                                            for (let i in dbEmployees) {
                                                obj_uid_ssid[dbEmployees[i]._doc['Emp_Code']] = dbEmployees[i]._doc['Emp_Id'];
                                            }
                                            let arr_uid_ssid_na = [];
                                            for (let k in arr_user_object) {
                                                let ss_id = 0;
                                                if (obj_uid_ssid.hasOwnProperty(arr_user_object[k]['UID'])) {
                                                    ss_id = obj_uid_ssid[arr_user_object[k]['UID']];
                                                } else {
                                                    arr_uid_ssid_na.push(arr_user_object[k]);
                                                }
                                                arr_user_object[k]['Ss_Id'] = ss_id;
                                            }
                                            obj_lmtimes['SsId_NA_Count_UID'] = arr_uid_ssid_na.length;
                                            obj_lmtimes['SsId_NA_List_UID'] = arr_uid_ssid_na;
                                            User.insertMany(arr_user_object, function (err, users) {
                                                let status = (err) ? 'ERR' : 'INFO';
                                                var sub = '[' + config.environment.name.toString().toUpperCase() + '][' + status + ']SYNC-LMTIMES::' + today_str;
                                                var email_data = '<html><body><h2><u>Landmark Employee Details</u><BR><pre>' + JSON.stringify(obj_lmtimes, undefined, 2) + '</pre><u>ERROR</u><BR><pre>' + ((status == 'ERR') ? JSON.stringify(err, undefined, 2) : 'NA') + '</pre></body></html>';
                                                var Email = require('../models/email');
                                                var objModelEmail = new Email();
                                                objModelEmail.send('noreply@policyboss.com', config.environment.notification_email, sub, email_data, 'pramod.parit@policyboss.com', '', '');
                                                res.json({'Msg': 'SYNC-LMTIMES', 'Details': obj_lmtimes});
                                            });
                                        }
                                    });
                                });
                            } else {
                                var sub = '[' + config.environment.name.toString().toUpperCase() + '][ERR]SYNC-LMTIMES::' + today_str;
                                var email_data = '<html><body><h2><u>Landmark Employee Details</u><BR><pre>' + JSON.stringify(obj_lmtimes, undefined, 2) + '</pre></body></html>';
                                var Email = require('../models/email');
                                var objModelEmail = new Email();
                                objModelEmail.send('noreply@policyboss.com', config.environment.notification_email, sub, email_data, '', '', '');
                                res.json({'Msg': 'SYNC-LMTIMES', 'Details': obj_lmtimes});
                            }
                        });
                    }
                } catch (e) {
                    console.error('Exception', 'sync_employee_lmtimes', 'step1', e);
                }
            }
        });
    } catch (e) {
        console.error('Exception', 'sync_employee_lmtimes', e);
    }
});
router.get('/sync_fba_single', function (req, res, next) {
    var objfbasummary = {};
    var fba_id = req.query['fba_id'] - 0;
    if (!fba_id) {
        res.json({'Msg': 'Fba id missing'});
    } else {
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            if (err) {
                return console.dir(err);
            } else {
                myDbClient = db;
                var dbCollFba = myDbClient.collection('fbas');
                dbCollFba.deleteOne({'FinMartID': fba_id}, function (err, obj) {
                    if (err)
                    {
                        throw err;
                    }

                    var Client = require('node-rest-client').Client;
                    var client = new Client();
                    var args = {
                        data: {
                            "FBAID": fba_id
                        },
                        headers: {
                            "Content-Type": "application/json",
                            "token": "1234567890"
                        }
                    };
                    client.post('http://api.magicfinmart.com/api/GetFBAInfo', args, function (data, response) {
                        if (data && data.hasOwnProperty('MSG') && data['MSG'] == 'Record found !') { // for posp agent                                
                            var objFba = {};
                            for (var k in data) {
                                objFba[k] = (!isNaN(data[k]) && data[k] != "") ? data[k] - 0 : data[k];
                            }
                            if (objFba['Source'] > 0) {
                                objFba['Created_On'] = new Date();
                                dbCollFba.insertOne(objFba, function (err, docsInserted) {
                                    if (err) {
                                        console.error('Exception', 'fba_saved', err);
                                        res.json({'Msg': 'FBA_SYNCED_ERROR', 'Details': err});
                                    } else {
                                        var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-USER_SYNC-FBA_SYNC';
                                        email_data = '<html><body><h2><p>Request</p><pre>' + JSON.stringify({"fba_id": (fba_id - 0)}, undefined, 2) + '</pre></body></html>';
                                        var Email = require('../models/email');
                                        var objModelEmail = new Email();
                                        objModelEmail.send('noreply@policyboss.com', config.environment.notification_email, sub, email_data, '', '', '');
                                        ss_id_creation(objFba, res);
                                        //res.json({'Msg': 'FBA_SYNCED', 'Details': objFba});
                                    }
                                });
                            } else {
                                var arr_msg = ['fba has no Source', 'FBA_ID-' + fba_id.toString()];
                                var sub = '[' + config.environment.name.toString().toUpperCase() + ']ALERT-ACCESS_DENIED-FBA_WO_SOURCE';
                                email_data = '<html><body><h2><u>Error Details</u><BR>' + arr_msg.join('<BR>') + '</h2><p>Request</p><pre>' + JSON.stringify({"fba_id": (fba_id - 0)}, undefined, 2) + '</pre><p>Response</p><pre>' + JSON.stringify(objFba, undefined, 2) + '</pre></body></html>';
                                var Email = require('../models/email');
                                var objModelEmail = new Email();
                                objModelEmail.send('noreply@policyboss.com', config.environment.notification_email, sub, email_data, '', '', '');
                                res.json({'Msg': 'Not Valid Request', 'Details': arr_msg});
                            }
                        } else {
                            console.error('FbaDataNotFound', fba_id, data);
                            var arr_msg = ['FM_BO_API_NO_DATA', 'FBA_ID-' + fba_id.toString()];
                            var sub = '[' + config.environment.name.toString().toUpperCase() + ']ALERT-ACCESS_DENIED-FM_BO_API_NO_DATA';
                            email_data = '<html><body><h2><u>Error Details</u><BR>' + arr_msg.join('<BR>') + '</h2><p>Request</p><pre>' + JSON.stringify({"fba_id": (fba_id - 0)}, undefined, 2) + '</pre><p>EmployeeData</p><pre>' + JSON.stringify(data, undefined, 2) + '</pre></body></html>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            objModelEmail.send('noreply@policyboss.com', config.environment.notification_email, sub, email_data, '', '', '');
                            res.json({'Msg': 'FM_BO_API_NO_DATA', 'Details': arr_msg});
                        }
                    });
                });
            }
        });
    }
});
function ss_id_creation(obj_fba_info, obj_res) {
    try {
        var Posp = require('../models/posp');
        Posp.findOne({Fba_Id: obj_fba_info.FinMartID.toString(), 'Email_Id': obj_fba_info.EmailId, Is_Active: true}, function (err, dbPosp) {
            try {
                let obj_ss_response = {
                    'status': 'PENDING',
                    'ss_id': 0,
                    'fba_id': obj_fba_info.FinMartID
                };
                if (dbPosp) {
                    var sub = '[' + config.environment.name.toString().toUpperCase() + '][EXISTS]POSP_SIGNUP :: FBA_ID-' + obj_fba_info.FinMartID;
                    var contentSms_Log = "POSP_SIGNUP\n\
---------------------------\n\
Agent: " + obj_fba_info.FullName + "\n\
FBA_ID: " + obj_fba_info.FinMartID + "\n\
SS_ID: " + dbPosp._doc['Ss_Id'];
                    var email_body = contentSms_Log.replace(/\n/g, '<BR>');
                    var email_data = '<!DOCTYPE html><html><head><title>POLICY_REQUESTED_APP_NOTIFICATION</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    email_data += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + email_body + '<span><br><br>';
                    email_data += '</body></html>';
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, email_data, '', '');
                    obj_ss_response['status'] = 'EXIST';
                    obj_ss_response['ss_id'] = dbPosp._doc['Ss_Id'];
                    obj_res.json(obj_ss_response);
                } else {
                    let content_ss_id_creation = fs.readFileSync(appRoot + '/resource/request_file/ss_id_creation.json').toString();
                    let obj_final = {};
                    for (let k1 in obj_fba_info) {
                        obj_final['___' + k1 + '___'] = obj_fba_info[k1];
                    }
                    var moment = require('moment');
                    obj_final['___DOB___'] = moment(obj_fba_info['DOB']).format("DD-MM-YYYY");
                    content_ss_id_creation = content_ss_id_creation.replaceJson(obj_final);
                    let obj_data = JSON.parse(content_ss_id_creation);
                    if (false) {
                        var sub = '[' + config.environment.name.toString().toUpperCase() + '][DBG]POSP_SIGNUP :: FBA_ID-' + obj_fba_info.FinMartID;
                        var contentSms_Log = "POSP_SIGNUP\n\
---------------------------\n\
Agent: " + obj_fba_info.FullName + "\n\
FBA_ID: " + obj_fba_info.FinMartID;
                        var email_body = contentSms_Log.replace(/\n/g, '<BR>');
                        var email_data = '<!DOCTYPE html><html><head><title>POLICY_REQUESTED_APP_NOTIFICATION</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        email_data += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + email_body + '<span><br><br>';
                        email_data += '<p><h1>CoreLog</h1><pre>' + JSON.stringify(obj_data, undefined, 2) + '</pre></p>';
                        email_data += '</body></html>';
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, email_data, '', '');
                    } else {
                        let args = {
                            data: obj_data,
                            headers: {
                                "Content-Type": "application/json",
                                'Username': config.pb_config.api_crn_user,
                                'Password': config.pb_config.api_crn_pass
                            }
                        };
                        var Client = require('node-rest-client').Client;
                        var client = new Client();
                        var moment = require('moment');
                        var StartDate = moment(new Date());
                        client.post(config.pb_config.api_posp_signup_url, args, function (data, response) {
                            var EndDate = moment(new Date());
                            var Call_Execution_Time = EndDate.diff(StartDate);
                            Call_Execution_Time = Math.round((Call_Execution_Time * 0.001) * 100) / 100;
                            console.error();
                            let status = 'ERR';
                            let ss_id = 0;
                            if (data && (data - 0) > 0) {
                                status = 'INFO';
                                ss_id = data - 0;
                                obj_ss_response['status'] = 'SUCCESS';
                                obj_ss_response['ss_id'] = ss_id;
                            } else {
                                obj_ss_response['status'] = 'ERROR';
                            }

                            var sub = '[' + config.environment.name.toString().toUpperCase() + '][' + status + ']POSP_SIGNUP :: FBA_ID-' + obj_fba_info.FinMartID + ',SS_ID-' + ss_id;
                            sub += '::Exec_Time-' + Call_Execution_Time + '_SEC';
                            var contentSms_Log = "POSP_SIGNUP\n\
---------------------------\n\
Agent: " + obj_fba_info.FullName + "\n\
FBA_ID: " + obj_fba_info.FinMartID + "\n\
SS_ID: " + ss_id;
                            if (status === 'INFO') {
                                var Client = require('node-rest-client').Client;
                                var client = new Client();
                                client.get(config.environment.weburl + '/report/sync_emp_master?ss_id=' + ss_id, {}, function (data, response) {});
                                client.get(config.environment.weburl + '/report/sync_posp_master?ss_id=' + ss_id, {}, function (data, response) {});
                            }

                            var email_body = contentSms_Log.replace(/\n/g, '<BR>');
                            var email_data = '<!DOCTYPE html><html><head><title>POLICY_REQUESTED_APP_NOTIFICATION</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            email_data += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + email_body + '<span><br><br>';
                            email_data += '<p><h1>CoreResponse</h1><pre>' + JSON.stringify(data, undefined, 2) + '</pre></p>';
                            //if (status === 'ERR') {
                            email_data += '<p><h1>CoreRequest</h1><pre>' + JSON.stringify(obj_data, undefined, 2) + '</pre></p>';
                            //}
                            email_data += '</body></html>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, email_data, '', '');
                            obj_res.json(obj_ss_response);
                        });
                    }
                }
            } catch (e) {
                console.error('Exception', 'ss_id_creation', 'step1', e);
            }
        });
    } catch (e) {
        console.error('Exception', 'ss_id_creation', e);
    }
}
router.post('/download_policy', function (req, res, next) {
//console.log('Start', this.constructor.name, 'download_policy');
    var obj = req.body;
    var objResponse = {
        'Status': null,
        'Details': null,
        'Pdf_Url': null,
    };
    obj['CRN'] = obj['CRN'] - 0;
    obj['ss_id'] = obj['ss_id'] - 0;
    obj['fba_id'] = obj['fba_id'] - 0;
    if (obj['CRN'] && obj['ss_id'] && obj['fba_id']) {

        var obj_condi = {
            "PB_CRN": obj['CRN']
        };
        if (obj['ss_id'] > 0 && obj['ss_id'] !== 5) {
            obj_condi['Premium_Request.ss_id'] = obj['ss_id'];
        } else if (obj['fba_id'] > 0) {
            obj_condi['Premium_Request.fba_id'] = obj['fba_id'];
        }

        User_Data.find(obj_condi).select().exec(function (err, data) {
            if (err) {
                res.send(err);
            } else {
                try {
//console.log(data);

                    if (data.length > 0) {
                        objResponse.Status = "WO_Policy";
                        for (var k in data) {
                            var status = data[k]['_doc'].Last_Status;
                            if (status === "TRANS_SUCCESS_WITH_POLICY")
                            {
                                objResponse.Pdf_Url = data[k]['_doc']['Transaction_Data']['policy_url'];
                                objResponse.Status = "Success";
                                //email notification process
                                try {
                                    var tmpuser = data[k]['_doc'];
                                    if (tmpuser['Premium_Request']['ss_id'] - 0 > 0) {
                                        var Email = require('../models/email');
                                        var objModelEmail = new Email();
                                        var product_short_name = Const_Product[tmpuser['Product_Id']];
                                        var sub = const_email_env_sub + '[' + product_short_name + '] POLICY_REQUESTED_APP CRN : ' + tmpuser['PB_CRN'];
                                        var arr_to = [];
                                        var arr_bcc = [config.environment.notification_email];
                                        var arr_cc = [];
                                        var contentSms_Log = "\n\
POLICY-PROVIDED-APP\n\
-------------------\n\
\n\Agent has request policy on finmart app and Policy is provided for download.\n\
CRN: " + tmpuser['PB_CRN'] + "\n\
Agent: " + tmpuser['Erp_Qt_Request_Core']['___posp_first_name___'] + ' ' + tmpuser['Erp_Qt_Request_Core']['___posp_last_name___'] + "\n\
Customer: " + tmpuser['Erp_Qt_Request_Core']['___first_name___'] + ' ' + tmpuser['Erp_Qt_Request_Core']['___last_name___'] + "\n\
Product: " + product_short_name + "\n\
Policy Number: " + data[k]['_doc']['Transaction_Data']['policy_number'] + "\n\
Policy Copy: " + '<a href="' + objResponse.Pdf_Url + '" target="_BLANK">Download</a>';
                                        var email_body = contentSms_Log.replace(/\n/g, '<BR>');
                                        var email_data = '<!DOCTYPE html><html><head><title>POLICY_REQUESTED_APP_NOTIFICATION</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                                        email_data += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">POLICY_REQUESTED_APP_NOTIFICATION</span><table border="1" cellpadding="3" cellspacing="0" width="90%"  >';
                                        email_data += '<tr><td  width="70%" style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + email_body + '&nbsp;</td></tr>';
                                        email_data += '</table></div><br></body></html>';
                                        if (tmpuser['Premium_Request'].hasOwnProperty('posp_email_id') && tmpuser['Premium_Request']['posp_email_id'] != null && tmpuser['Premium_Request']['posp_email_id'].toString().indexOf('@') > -1) {
                                            arr_to.push(tmpuser['Premium_Request']['posp_email_id']);
                                        }
                                        if (tmpuser['Premium_Request'].hasOwnProperty('posp_reporting_email_id') && tmpuser['Premium_Request']['posp_reporting_email_id'] != null && tmpuser['Premium_Request']['posp_reporting_email_id'].toString().indexOf('@') > -1) {
                                            arr_cc.push(tmpuser['Premium_Request']['posp_reporting_email_id']);
                                        }
                                        if (config.environment.name === 'Production') {
                                            if ((tmpuser['Premium_Request']['posp_sources']) > 0) {
                                                if ((tmpuser['Premium_Request']['posp_sources']) === 1) {
                                                    //arr_bcc.push('transactions.1920@gmail.com');//finmart-dc
                                                }
                                            }
                                        }
                                        if (arr_to.length) {
                                            objModelEmail.send('notifications@policyboss.com', arr_to.join(','), sub, email_data, arr_cc.join(','), arr_bcc.join(','), tmpuser['PB_CRN']);
                                        }
                                    }
                                } catch (e) {
                                    console.error('Exception', 'Notification_RM_PolicyUpload', e);
                                }

                                break;
                            }
                            if (status === "TRANS_SUCCESS_WO_POLICY")
                            {
                                objResponse.Pdf_Url = '';
                                objResponse.Status = "POLICY_INPROGRESS";
                                break;
                            }
                        }
                    } else {
                        objResponse.Status = "Failed";
                    }
                    res.json(objResponse);
                } catch (ex) {
                    console.error('Exception', 'user_data', ex);
                    res.json(ex);
                }
            }
        });
    } else {
        objResponse.Details = "Parameter missing";
        objResponse.Status = "Failed";
        res.json(objResponse);
    }
});
router.post('/agent_details', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'agent_details');
    var obj = req.body;
    var objResponse = {};
    obj['ss_id'] = obj['ss_id'] - 0;
    obj['fba_id'] = obj['fba_id'] - 0;
    if (obj['ss_id'] && obj['fba_id']) {
        var obj_condi = {};
        if (obj['ss_id'] > 0 && obj['ss_id'] !== 5) {
            obj_condi['Emp_Id'] = obj['ss_id'];
        } else if (obj['fba_id'] > 0) {
        }
    }
    if (obj['ss_id'] && obj['fba_id']) {
        var Employee = require('../models/employee');
        Employee.findOne({"Emp_Id": obj['ss_id']}, function (err, dbEmployee) {
            if (dbEmployee) { // for posp agent
                var agent_name = dbEmployee._doc['Emp_Name'].toString().toTitleCase();
                var obj_agent = {
                    "status": 'success',
                    "details": {
                        "ss_id": obj['Emp_Id'],
                        "fba_id": dbEmployee._doc['FBA_ID'],
                        "agent_name": agent_name
                    }
                };
            } else {
                var obj_agent = {
                    "status": 'success',
                    "details": null
                };
            }
            res.json(obj_agent);
        });
    } else {
        objResponse.Details = "Parameter missing";
        objResponse.Status = "Failed";
        res.json(objResponse);
    }
});
router.get('/posp_with_inactive_rm', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'agent_details');

    var Pb_Employee = require('../models/pb_employee');
    var Sources = req.query['source'].toString();
    var posp_cond = {};
    if (Sources == 'ALL') {
        posp_cond = {'Sources': {$in: Object.keys(config.channel.Const_POSP_Channel)}};
    } else {
        posp_cond = {'Sources': Sources};
    }
    var User = require('../models/user');
    User.find({}, function (err, users) {
        if (err)
            res.send(err);
        var arr_pb_employee = {};
        for (var k in users) {
            arr_pb_employee[users[k]._doc['UID'] - 0] = users[k]._doc;
        }
        var Posp = require('../models/posp');
        var is_direct_posp_allowed = false;
        if (Sources == '1' || Sources == '2') {
            is_direct_posp_allowed = true;
        }
        posp_cond['Is_Active'] = true;
        posp_cond['IsFOS'] = {"$ne": true};
        Posp.find(posp_cond, function (err, dbPosps) {
            var arr_posp_with_inactive_rm = [];
            for (let k in dbPosps) {
                let PospUID = dbPosps[k]._doc['Reporting_Agent_Uid'] - 0;
                if (Sources === 'ALL') {
                    let Erp_Id = dbPosps[k]._doc['Erp_Id'] - 0;
                    if (Erp_Id.toString().length == 6 && (Erp_Id.toString().charAt(0) == '6' || Erp_Id.toString().charAt(0) == '4')) {
                        // posp valid number
                    } else {
                        continue;
                    }

                    if ((dbPosps[k]._doc['Erp_Id'] - 0) > 0 && arr_pb_employee.hasOwnProperty(PospUID) === true) {
                        arr_posp_with_inactive_rm.push({
                            "VendorCode": dbPosps[k]._doc['Erp_Id'],
                            "Agent": dbPosps[k]._doc['First_Name'] + ' ' + dbPosps[k]._doc['Last_Name'],
                            "POSP_Source": dbPosps[k]._doc['Sources'],
                            "RM_Name": dbPosps[k]._doc['Reporting_Agent_Name'],
                            "RM_UID": dbPosps[k]._doc['Reporting_Agent_Uid']
                        });
                    }
                } else {
                    if (arr_pb_employee.hasOwnProperty(PospUID) === false) {
                        arr_posp_with_inactive_rm.push({
                            'SS_ID': dbPosps[k]._doc['Ss_Id'],
                            'FBA_ID': dbPosps[k]._doc['Fba_Id'],
                            "ERP_ID": dbPosps[k]._doc['Erp_Id'],
                            "Agent": dbPosps[k]._doc['First_Name'] + ' ' + dbPosps[k]._doc['Last_Name'],
                            "Source": dbPosps[k]._doc['Sources'],
                            "Reporting": dbPosps[k]._doc['Reporting_Agent_Name'] + ' , UID-' + dbPosps[k]._doc['Reporting_Agent_Uid']
                        });
                    }
                }
            }
            if (arr_posp_with_inactive_rm.length > 0) {
                var toMoment = moment().format("DDMMMYYYY");
                var channel = '';
                if (Sources == '1') {
                    channel = 'DC_POSP';
                    var reporttitle = channel + '_WITH_INACTIVE_RM_' + toMoment.toString();
                }
                if (Sources == '2') {
                    channel = 'SM_POSP';
                    var reporttitle = channel + '_WITH_INACTIVE_RM_' + toMoment.toString();
                }
                if (Sources == '8') {
                    channel = 'GS_POSP';
                    var reporttitle = channel + '_WITH_INACTIVE_RM_' + toMoment.toString();
                }
                if (Sources == '11') {
                    channel = 'EM_POSP';
                    var reporttitle = channel + '_WITH_INACTIVE_RM_' + toMoment.toString();
                }
                if (Sources == 'ALL') {
                    channel = 'ALL_POSP';
                    var reporttitle = channel + '_WITH_RM_DETAIL_' + toMoment.toString();
                }
                var subject = '[' + config.environment.name.toString().toUpperCase() + '][REPORT]' + reporttitle;
                //subject = subject.replace(/-/g, '_');
                var content_html = '<!DOCTYPE html><html><head><style>*,html,body{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>' + reporttitle + '</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                content_html += '<div class="report" ><span>' + reporttitle + ' ( Count: ' + arr_posp_with_inactive_rm.length + ')</span><br>';
                let file_weburl = config.environment.downloadurl + "/report/" + reporttitle + ".csv";
                content_html += '<p><a href="' + file_weburl + '" target="_BLANK">' + file_weburl + '</a></p>';
                var ObjectsToCsv = require('objects-to-csv');
                let csv = new ObjectsToCsv(arr_posp_with_inactive_rm);
                // Save to file:

                let csv_file = appRoot + "/tmp/report/" + reporttitle + ".csv";
                csv.toDisk(csv_file);
                /*
                 content_html += '</div><br><br></body></html>';
                 
                 content_html += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;">' + reporttitle + ' ( Count: ' + arr_posp_with_inactive_rm.length + ')</span>\n\
                 <br>\n\
                 <table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="1" cellpadding="3" cellspacing="0" width="95%"  >';
                 content_html += '<tr>';
                 for (var k in arr_posp_with_inactive_rm[0]) {
                 content_html += '<th style="font-size:10px;font-family:\'Google Sans\' ,tahoma;background-color: orange">' + k + '</th>';
                 }
                 content_html += '</tr>';
                 for (var k in arr_posp_with_inactive_rm) {
                 content_html += '<tr>';
                 for (var k1 in arr_posp_with_inactive_rm[k]) {
                 content_html += '<td style="font-size:10px;font-family:\'Google Sans\' ,tahoma;background-color:white;" align="center">' + arr_posp_with_inactive_rm[k][k1] + '</td>';
                 }
                 content_html += '</tr>';
                 }*/
                content_html += '</div><br><br></body></html>';
                if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    if (req.query['dbg'] === 'yes') {
                        objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, subject, content_html, '', '');
                    } else {
                        var arr_to = [];
                        if (Sources == '1') {
                            arr_to = ['srinivas@policyboss.com'];
                        }
                        if (Sources == '2') {
                            arr_to = ['susheel.menon@landmarkinsurance.in', 'posp.mis@policyboss.com', 'sandeep.nair@landmarkinsurance.in'];
                        }
                        if (Sources == '11') {
                            arr_to = ['kevin.menezes@policyboss.com', 'posp.mis@policyboss.com'];
                        }
                        if (Sources == '8') {
                            arr_to = [
                                'gagandeep.singh@policyboss.com',
                                'saroj.singh@policyboss.com',
                                'shabana.gaus@policyboss.com',
                                'satbir.singh@policyboss.com',
                                'rajneesh.kumar@policyboss.com',
                                'kalpesh.chauhan@policyboss.com',
                                'Ganesh.venkataraman@policyboss.com',
                                'balveer.gupt@policyboss.com',
                                'Kaustubh.Shandilya@policyboss.com',
                                'vishal.gaur@policyboss.com',
                                'vikas.chauhan@policyboss.com'
                            ];
                        }
                        if (Sources == 'ALL') {
                            arr_to = ['suresh.k@landmarkinsurance.in', 'gagandeep.singh@policyboss.com', 'pramod.parit@policyboss.com', 'srinivas@policyboss.com', 'susheel.menon@landmarkinsurance.in', 'posp.mis@policyboss.com', 'sandeep.nair@landmarkinsurance.in'];
                        }
                        objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                    }

                }
                res.send(content_html);
            } else {
                res.send('NO RECORDS');
            }
        });
    });
});
router.get('/dsa_with_inactive_rm', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'dsa_with_inactive_rm');
    var Status = 'INACTIVE';
    if (req.query.hasOwnProperty('status')) {
        Status = req.query['status'];
    }
    let arr_dsa_role = Object.keys(config.channel.Const_FOS_Role_Source).map(Number);
    var RoleID = {$in: arr_dsa_role};
    if (req.query.hasOwnProperty('roleid')) {
        RoleID = req.query['roleid'] - 0;
    }

    var User = require('../models/user');
    User.find({}, function (err, users) {
        if (err)
            res.send(err);
        var arr_pb_employee = {};
        for (var k in users) {
            arr_pb_employee[users[k]._doc['UID'] - 0] = users[k]._doc;
        }

        var Employee = require('../models/employee');
        Employee.find({'Role_ID': RoleID, 'IsActive': 1}, function (err, dbPosps) {
            var arr_posp_with_inactive_rm = [];
            for (let k in dbPosps) {
                let PospUID = dbPosps[k]._doc['UID'] - 0;
                if (Status === 'ALL') {
                    let VendorCode = dbPosps[k]._doc['VendorCode'] - 0;
                    if (VendorCode.toString().length == 6 && VendorCode.toString().charAt(0) == '7') {
                        // posp valid number
                    } else {
                        continue;
                    }

                    if (arr_pb_employee.hasOwnProperty(PospUID) === true) {
                        arr_posp_with_inactive_rm.push({
                            "DSACode": dbPosps[k]._doc['VendorCode'],
                            "Agent": dbPosps[k]._doc['Emp_Name'],
                            "Source": dbPosps[k]._doc['Role_ID'],
                            "RM_Name": dbPosps[k]._doc['Reporting_UID_Name'],
                            "RM_UID": dbPosps[k]._doc['UID']
                        });
                    }
                }
                if (Status === 'INACTIVE') {
                    if (arr_pb_employee.hasOwnProperty(PospUID) === false) {
                        arr_posp_with_inactive_rm.push({
                            'SS_ID': dbPosps[k]._doc['Emp_Id'],
                            "ERP_ID": dbPosps[k]._doc['VendorCode'],
                            "Agent": dbPosps[k]._doc['Emp_Name'],
                            "Source": dbPosps[k]._doc['Role_ID'],
                            "Reporting": dbPosps[k]._doc['Reporting_UID_Name'] + ' , UID-' + dbPosps[k]._doc['UID']
                        });
                    }
                }
            }
            if (arr_posp_with_inactive_rm.length > 0) {
                var toMoment = moment().format("DDMMMYYYY");
                if (Status === 'ALL') {
                    var reporttitle = 'DSA_RM_DETAIL_' + toMoment.toString();
                }
                if (Status === 'INACTIVE') {
                    if (RoleID == 29) {
                        var reporttitle = 'SM_DSA_WITH_INACTIVE_RM_' + toMoment.toString();
                    }
                    if (RoleID == 34) {
                        var reporttitle = 'GS_DSA_WITH_INACTIVE_RM_' + toMoment.toString();
                    }
                    if (RoleID == 39) {
                        var reporttitle = 'DC_DSA_WITH_INACTIVE_RM_' + toMoment.toString();
                    }
                    if (RoleID == 41) {
                        var reporttitle = 'EM_DSA_WITH_INACTIVE_RM_' + toMoment.toString();
                    }
                }
                var subject = '[' + config.environment.name.toString().toUpperCase() + '][REPORT]' + reporttitle;
                //subject = subject.replace(/-/g, '_');
                var content_html = '<!DOCTYPE html><html><head><style>*,html,body{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>' + reporttitle + '</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                content_html += '<div class="report" ><span>' + reporttitle + ' ( Count: ' + arr_posp_with_inactive_rm.length + ')</span>\n\
		 <br>';
                let file_weburl = config.environment.downloadurl + "/report/" + reporttitle + ".csv";
                content_html += '<p><a href="' + file_weburl + '" target="_BLANK">' + file_weburl + '</a></p>';
                var ObjectsToCsv = require('objects-to-csv');
                let csv = new ObjectsToCsv(arr_posp_with_inactive_rm);
                // Save to file:

                let csv_file = appRoot + "/tmp/report/" + reporttitle + ".csv";
                csv.toDisk(csv_file);
                content_html += '</div><br><br></body></html>';
                //res_html += '</table><pre style="width:100%">Total Agent with Inactive RM - ' + arr_posp_with_inactive_rm.length + '<br>dsa_with_inactive_rm: <br> ' + arr_posp_with_inactive_rm.join(', ') + '</pre></body></html>';
                if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    if (req.query['dbg'] === 'yes') {
                        objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, subject, content_html, '', '');
                    } else {
                        if (Status === 'ALL') {
                            objModelEmail.send('notifications@policyboss.com', 'suresh.k@landmarkinsurance.in,pramod.parit@policyboss.com,susheel.menon@landmarkinsurance.in,posp.mis@policyboss.com,sandeep.nair@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                        }
                        if (Status === 'INACTIVE') {
                            if (RoleID == 29) {
                                objModelEmail.send('notifications@policyboss.com', 'susheel.menon@landmarkinsurance.in,posp.mis@policyboss.com,sandeep.nair@landmarkinsurance.in', subject, content_html, '', config.environment.notification_email);
                            }
                            if (RoleID == 39) {
                                objModelEmail.send('notifications@policyboss.com', 'srinivas@policyboss.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (RoleID == 41) {
                                objModelEmail.send('notifications@policyboss.com', 'kevin.menezes@policyboss.com,posp.mis@policyboss.com', subject, content_html, '', config.environment.notification_email);
                            }
                            if (RoleID === 34) {
                                var arr_to = [
                                    'gagandeep.singh@policyboss.com',
                                    'saroj.singh@policyboss.com',
                                    'shabana.gaus@policyboss.com',
                                    'satbir.singh@policyboss.com',
                                    'rajneesh.kumar@policyboss.com',
                                    'kalpesh.chauhan@policyboss.com',
                                    'Ganesh.venkataraman@policyboss.com',
                                    'balveer.gupt@policyboss.com',
                                    'Kaustubh.Shandilya@policyboss.com',
                                    'vishal.gaur@policyboss.com',
                                    'vikas.chauhan@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, content_html, '', config.environment.notification_email);
                            }
                        }
                    }
                }
                res.send(content_html);
            } else {
                res.send('NO RECORDS');
            }
        });
    });
});
router.post('/quote_share', function (req, res, next) {
    var ObjResponse = req.body;
    var formatted = moment(new Date()).format('DD-MM-YYYYh:mm:ss');
    var datetime = formatted.replace(/-/g, "");
    datetime = datetime.replace(/:/g, "");
    var shareObj = JSON.parse(ObjResponse['shareresponse']);
    var html_file_path_sharequote = appRoot + "/resource/request_file/Health/quoteShare.html";
    var pdf_file_path_policy = appRoot + "/tmp/share/" + ObjResponse.CRN + '_' + datetime + '.pdf';
    var sharePdfLink = config.environment.weburl + "/tmp/share/" + ObjResponse.CRN + '_' + datetime + '.pdf';
    var HTML_pdf_file_path_policy = appRoot + "/tmp/share/" + ObjResponse.CRN + '_' + datetime + '.html';
    var html_shareQuote = fs.readFileSync(html_file_path_sharequote, 'utf8');
    var share_div = "";
    //for (var k in shareObj) 
    for (var i = 0; i < shareObj.length; i++)
    {
        var Selected_Plan_Name;
        var Selected_final_premium;
        if (shareObj[i].hasOwnProperty('Selected_Plan_Name')) {
            Selected_Plan_Name = shareObj[i].Selected_Plan_Name;
            Selected_final_premium = shareObj[i].Selected_final_premium;
        } else {
            Selected_Plan_Name = shareObj[i]['Plan_List'][0]['Plan_Name'];
            Selected_final_premium = shareObj[i]['Plan_List'][0]['Premium_Breakup']['final_premium'];
        }
        share_div += '<div class="quotes_row">'
                + '<div class="ins_img">'
                + ' <img src="http://www.policyboss.com/Images/insurer_logo/' + shareObj[i].Insurer.Insurer_Logo_Name + '">'
                + '</div>'
                + '<div class="plan" >'
                + '<div>PLAN</div>'
                + '<strong>'
                + '<div>' + Selected_Plan_Name + '</div>'
                + '</strong>'
                + '</div>'
                + '<div class="premium">'
                + '<div>PREMIUM</div>'
                + '<div class="btnWrap">'
                + '<div class="buybtn">' + Selected_final_premium * ObjResponse.multiplyBy + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
    }
    ;
    var replacedata = {
        '___agent_name___': ObjResponse.agent_name,
        '___agent_mobile___': ObjResponse.agent_mobile,
        '___agent_email___': ObjResponse.agent_email,
        '___contact_name___': ObjResponse.contact_name.toString().toTitleCase(),
        '___crn___': ObjResponse.CRN,
        '___policy_tenure___': ObjResponse.policy_tenure,
        '___share_div___': share_div
    };
    html_shareQuote = html_shareQuote.toString().replaceJson(replacedata);
    var options = {
        format: 'A4',
        timeout: 50000
    };
    pdf.create(html_shareQuote, options).toFile(pdf_file_path_policy, function (err, res) {
        if (err)
            return //console.log(err);
        else {
            fs.writeFileSync(HTML_pdf_file_path_policy, html_shareQuote);
        }
        //console.log(res);
    });
    res.json(sharePdfLink);
});
router.get('/get_crn_from_post_data', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        var colVID = db.collection('user_datas');
        var Vehicle_Inspection_Id = req.query.Proposal_No;
        //var Vehicle_Inspection_Id = 'MT1901045078T';
        colVID.find({"Payment_Request.pg_data.CustomerId": Vehicle_Inspection_Id}).toArray(function (err, result) {
            try {
                ////console.log('get_crn_from_post_data PB_CRN :',result['0']['PB_CRN']);
                ////console.log('get_crn_from_post_data Request_Unique_Id :',result['0']['Request_Unique_Id']);
                ////console.log('get_crn_from_post_data Service_Log_Unique_Id :',result['0']['Service_Log_Unique_Id']);
                var objCustomer = {
                    'CRN': result['0']['PB_CRN'],
                    'SRN': result['0']['Request_Unique_Id'],
                    'ARN': result['0']['Service_Log_Unique_Id']
                };
                ////console.log(res.json(objCustomer));
                res.json(objCustomer);
            } catch (e) {
                res.json(e);
            }
        });
    });
});
router.get('/link_report', function (req, res) {
    console.error('link_report');
    var cond_ud = {'Premium_Request.policy_expiry_date': {"$gte": '2019-06-16'}};
    var obj_schema = {
        'source': '',
        'ss_id': 'ss_id',
        'fba_id': 'posp_fba_id',
        'name': '',
        'email': 'posp_email_id',
        'mobile': 'posp_mobile_no',
        'car_count': '',
        'tw_count': ''};
    var obj_result = {};
    User_Data.find(cond_ud).exec(function (err, dbUsers) {
        if (!err) {
            console.error('link_report', dbUsers.length);
            for (var k in dbUsers) {
                try {
                    var user = dbUsers[k]._doc;
                    if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0 && user['Premium_Request']['vehicle_insurance_type'] === 'renew') {
                        if (['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'].indexOf(user['Last_Status']) > 0) {
                            continue;
                        }
                        var is_link_sent = false;
                        for (var i = 0; i < user['Status_History'].length; i++) {
                            var status = user['Status_History'][i]['Status'];
                            if (status === 'PROPOSAL_LINK_SENT') {
                                is_link_sent = true;
                                break;
                            }
                        }
                        if (is_link_sent === false) {
                            continue;
                        }


                        var email = user['Premium_Request']['posp_email_id'];
                        var ss_id = (user['Premium_Request']['ss_id'] - 0);
                        var fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
                        var agent_id = ss_id;
                        if (ss_id === 5) {
                            agent_id = fba_id;
                        }
                        if (obj_result.hasOwnProperty(agent_id) === false) {
                            obj_result[agent_id] = {};
                            for (var k in obj_schema) {
                                obj_result[agent_id][k] = '';
                                if (obj_schema[k] !== '') {
                                    obj_result[agent_id][k] = user['Premium_Request'][obj_schema[k]];
                                } else {
                                    obj_result[agent_id][k] = 0;
                                }
                            }
                            obj_result[agent_id]['name'] = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'];
                            obj_result[agent_id]['source'] = get_search_source(user);
                            obj_result[agent_id]['crn'] = user['PB_CRN'];
                        }
                        if (user['Product_Id'] == 1) {
                            obj_result[agent_id]['car_count']++;
                        }
                        if (user['Product_Id'] == 10) {
                            obj_result[agent_id]['tw_count']++;
                        }
                    }
                } catch (e) {
                    console.error('link_report', 'loop_err', e);
                }
            }
            var html_report = arrayobjectToHtml(obj_result);
            res.send(html_report);
        }
    });
});
router.get('/gmc_employee_details/:UDID', function (req, res) {
    var UDID = (req.params['UDID']);
    var db_response = {};
    var emp_gmc_db = require('../models/emp_gmc');
    try {
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var Employee_GMC = db.collection('emp_gmc');
            Employee_GMC.distinct("Year", {"UID": UDID}, (function (err, dbYear) {
                if (err) {
                    throw err;
                } else {
                    for (var i in dbYear) {
                        var year = dbYear[i];
                        db_response[year] = {};
                        var args = {
                            data: {
                                "udid": UDID,
                                "year": year
                            },
                            headers: {
                                "Content-Type": "application/json"
                            }
                        };
                        var url_api = config.environment.weburl + '/quote/\n\
';
                        //execute_post(url_api, args);
                        var Client = require('node-rest-client').Client;
                        var client = new Client();
                        client.post(url_api, args, function (data, response) {
                            var year1 = data[0]['Year'];
                            db_response[year1] = data;
                        });
                        sleep(1000);
//                        Employee_GMC.find({"UID": UDID, "Year": dbYear[i]}).toArray(function (err, dbEmployee_GMC) {
//                            if (err) {
//                                throw err;
//
//                            } else {
//                                if (dbEmployee_GMC.length > 0) {
//                                    var year1 = dbEmployee_GMC[0]['Year'];
//
//                                    db_response[year1] = dbEmployee_GMC;
//                                }
//
//                            }
//                            
//                        });

                    }
                    res.json(db_response);
                }

            })
                    );
        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }

});
function arrayobjectToHtml(objSummary, Title = 'Report', SubTitle = '', ColumnToExclude = [], high_key = '', high_val = '') {
    var msg = '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;font-weight:bold">' + Title + '</span>';
    if (SubTitle !== '') {
        msg += '<br><span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;">' + SubTitle + '</span>';
    }
    var row_inc = 0;
    if (typeof objSummary !== 'undefined') {
        var count = Array.isArray(objSummary) ? objSummary.length : Object.keys(objSummary).length;
        if (count > 0) {
            msg += '<table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
            for (var k in objSummary) {
                if (row_inc === 0) {
                    msg += '<tr>';
                    for (var k_head in objSummary[k]) {
                        if (ColumnToExclude.indexOf(k_head) < 0) {
                            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01;text-align:center;"  align="center">' + k_head + '</th>';
                        }
                    }
                    msg += '</tr>';
                }
                msg += '<tr>';
                for (var k_row in objSummary[k]) {
                    var bg = '';
                    if (high_key !== '' && high_val !== '' && high_key == k_row && high_val == objSummary[k][k_row]) {
                        bg = 'background-color: orange;';
                    }
                    if (ColumnToExclude.indexOf(k_row) < 0) {
                        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;text-align:center;' + bg + '" align="center">' + objSummary[k][k_row] + '</td>';
                    }
                }
                msg += '</tr>';
                row_inc++;
            }
            msg += '</table>';
        }
    }

    if (row_inc > 0) {

    } else {
        msg += '<br>---NO RECORD---';
    }
    msg += '</div><br>';
    return msg;
}
function objectToHtml(objSummary) {

    var msg = '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Report</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
    var row_inc = 0;
    for (var k in objSummary) {
        if (row_inc === 0) {
            msg += '<tr>';
            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Details</th>';
            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Value</th>';
            msg += '</tr>';
        }
        msg += '<tr>';
        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + k + '</td>';
        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + objSummary[k] + '</td>';
        msg += '</tr>';
        row_inc++;
    }
    msg += '</table></div>';
    return msg;
}
function sortObject(preObj) {
    var newO = {};
    Object.keys(preObj).sort(function (a, b) {
        return preObj[b] - preObj[a]
    }).map(key => newO[key] = preObj[key]);
    return newO;
}
;
function get_search_source(user) {
    var client_key_val = '';
    try {
        client_key_val = 'PB-Direct';
        var agent_id = 0;
        var fba_id = 0;
        var posp_sources = 0;
        if (user['Premium_Request']['ss_id'] > 0) {
            posp_sources = user['Premium_Request']['posp_sources'];
            var ss_id = (user['Premium_Request']['ss_id'] - 0);
            fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
            let channel = '';
            let pos_tag = 'NON-POSP';
            if (posp_sources > 0) {
                channel = user['Premium_Request']['channel'];
                if (user['Premium_Request'].hasOwnProperty('posp_erp_id') && (user['Premium_Request']['posp_erp_id'] - 0) > 0) { //posp_erp_id
                    pos_tag = 'POSP';
                } else if (ss_id !== 5) {
                    pos_tag = 'NON-POSP';
                } else if (ss_id === 5) {
                    pos_tag = 'FBA';
                }
                client_key_val = channel + '-' + pos_tag;
            } else {
                channel = user['Premium_Request']['channel'];
                if (user['Premium_Request']['posp_category'].indexOf('FOS') > -1) {
                    client_key_val = channel + '-FOS';
                } else if (user['Premium_Request']['posp_category'] === 'RBS') {
                    client_key_val = 'RBS';
                } else if (user['Premium_Request']['posp_category'] === 'MISP') {
                    client_key_val = 'MISP';
                } else {
                    client_key_val = 'PB-SS';
                }
            }
        } else if (user['Premium_Request']['user_source'] === 'tars') {
            client_key_val = 'BOT';
        } else if (user['Premium_Request'].hasOwnProperty('utm_campaign') && user['Premium_Request']['utm_campaign'] !== '') {
            client_key_val = 'PB-CAMP';
        }
    } catch (e) {
        console.error('');
    }
    return client_key_val;
}
;
router.post('/elite_membership', function (req, resp, next) {
//    console.log('Start', this.constructor.name, 'elite_membership');
    req.body = JSON.parse(JSON.stringify(req.body));
    var objRequestCore = req.body;
    var arr_name = objRequestCore['contact_name'].toUpperCase().split(' ');
    objRequestCore['first_name'] = arr_name[0];
    objRequestCore['last_name'] = arr_name[arr_name.length - 1];
    objRequestCore['middle_name'] = '';
    if (arr_name.length > 2) {
        objRequestCore['middle_name'] = arr_name[1];
    }

    var emailto = objRequestCore['customer_email'].toString();
    var mem_name = objRequestCore.first_name.toUpperCase() + ' ' + objRequestCore.last_name.toUpperCase();
    var mem_mobile = objRequestCore['phone_no'];
    var email_agent = objRequestCore['agent_email'];
    var _request = {
        '___contact_name___': objRequestCore['contact_name'].toString().toTitleCase(),
        '___agent_name___': objRequestCore['agent_name'],
        '___crn___': objRequestCore['crn'],
        '___product_name___': "Health",
        '___insurer_name___': objRequestCore['insurer_name'],
        '___agent_mobile___': objRequestCore['agent_mobile'],
        '___phone_no___': objRequestCore['phone_no'],
        '___insurance_type___': objRequestCore['insurance_type']
    };
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        if (err)
            throw err;
        var elite = require('../models/elite_members');
        _request['___img_head___'] = 'https://www.policyboss.com/Images/elite/head.jpg';
        _request['___img_bg___'] = 'https://www.policyboss.com/Images/elite/services.jpg';
        _request['___img_bullet___'] = 'https://www.policyboss.com/Images/elite/bullet-3.jpg';
        var eliteMaster = db.collection('elite_members');
        eliteMaster.findOne({Member_Name: mem_name, Member_Mobile: mem_mobile}, function (e, res) {
            if (e)
                throw e;
            if (res !== null) {
                resp.json({'Msg': 'Member Exists'});
            } else {
                var mysort = {Created_On: -1};
                eliteMaster.find({}).sort(mysort).limit(1).toArray(function (err1, result) {
                    if (err1)
                        throw err1;
//                    console.log(result);
                    var elite_ID = '';
                    if (result.length === 0) {
                        elite_ID = (config.environment.name === 'Production') ? "RBELITE00001" : "QARBELITE00001";
                        _request['___elite_Id___'] = elite_ID;
                        _request['___membership_start___'] = moment().format('DD/MM/YYYY');
                    } else {
                        var memId = result["0"]["Certificate_Id"];
                        var lastID = parseInt(memId.split("TE")[1]);
                        if (lastID > 9 && lastID <= 99) {
                            elite_ID = ((config.environment.name === 'Production') ? "RBELITE000" : "QARBELITE000") + (lastID + 1).toString();
                        } else if (lastID > 99 && lastID <= 999) {
                            elite_ID = ((config.environment.name === 'Production') ? "RBELITE00" : "QARBELITE00") + (lastID + 1).toString();
                        } else if (lastID > 999 && lastID <= 9999) {
                            elite_ID = ((config.environment.name === 'Production') ? "RBELITE0" : "QARBELITE0") + (lastID + 1).toString();
                        } else if (lastID > 9999) {
                            elite_ID = ((config.environment.name === 'Production') ? "RBELITE" : "QARBELITE") + (lastID + 1).toString();
                        } else {
                            elite_ID = ((config.environment.name === 'Production') ? "RBELITE0000" : "QARBELITE0000") + (lastID + 1).toString();
                        }
                        _request['___elite_Id___'] = elite_ID;
                        _request['___membership_start___'] = moment().format('DD/MM/YYYY');
                    }
                    var eliteMemObj = {
                        'Member_Name': mem_name,
                        'Member_Email': emailto,
                        'Member_Mobile': mem_mobile,
                        'Certificate_Id': elite_ID,
                        'CRN': (objRequestCore['crn']).toString(),
                        'Created_On': new Date()
                    };
                    eliteMem = new elite(eliteMemObj);
                    eliteMem.save(function (err2, eliteMem) {
                        if (err2) {
                            resp.json({'Msg': 'Member insert failed'});
                        } else {
                            var sub = const_email_env_sub + "Elite Membership - " + _request['___elite_Id___'] + ' - ' + objRequestCore['crn'];
                            var emailData = fs.readFileSync(appRoot + '/resource/email/Landmark_Elite_Health_eDM.html').toString();
                            emailData = emailData.replaceJson(_request);
                            var Eml = require('../models/email');
                            var objEmail = new Eml();
                            var array_bcc = [config.environment.notification_email];
                            if (config.environment.name === 'Production') {
                                array_bcc.push('susanna.lobo@landmarkinsurance.in');
                            }
                            console.error("EliteMembership", array_bcc);
                            objEmail.send('customercare@rupeeboss.com', emailto, sub, emailData, email_agent, array_bcc.join(','), objRequestCore['crn']);
                            resp.json({'Msg': 'Member Inserted'});
                        }
                    });
                });
            }
        });
    });
//    console.log('End', this.constructor.name, 'elite_membership');
});
router.post('/raiseticket', function (req, res, next) {
    try {
        var objRequest = req.body;
        var product_id = 0;
        var path = appRoot + "/tmp/ticketing/";
        var Ticket_id = objRequest["Ticket_Id"];
        var isticket_created;
        var Is_Customer = objRequest['Is_Customer'] === undefined ? false : objRequest['Is_Customer'];
        console.log(objRequest);
        console.error(objRequest);
        if ((objRequest['ss_id'] > 0 && objRequest['ss_id'] !== 5) || Is_Customer === true) {
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get(config.environment.weburl + '/posps/dsas/view/' + objRequest['ss_id'], {}, function (data, response) {
                if (data['status'] === 'SUCCESS' || Is_Customer) {
                    objRequest['agent'] = data;
                    var agentdetails = objRequest['agent']['EMP'];
                    if (objRequest["Product"] === "CAR") {
                        product_id = 1;
                    } else if (objRequest["Product"] === "BIKE") {
                        product_id = 10;
                    } else if (objRequest["Product"] === "HEALTH") {
                        product_id = 2;
                    }

                    var file_obj = [];
                    var file_ext = [];
                    for (var i = 1; i <= 4; i++) {
                        if (objRequest["file_" + i] !== null && objRequest["file_" + i] !== "" && objRequest["file_" + i] !== undefined) {
                            file_obj.push(decodeURIComponent(objRequest["file_" + i]));
                        }
                    }
                    for (var i = 1; i <= 4; i++) {
                        if (objRequest["file_ext_" + i] !== null && objRequest["file_ext_" + i] !== "" && objRequest["file_" + i] !== undefined) {
                            file_ext.push(objRequest["file_ext_" + i]);
                        }
                    }
                    console.log(file_obj);
                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                        if (err)
                            throw err;
                        autoIncrement.getNextSequence(db, 'tickets', function (err1, autoIndex) {
                            var tickets = db.collection('tickets');
                            var agg = [
                                // Group by the grouping key, but keep the valid values
                                {"$group": {
                                        "_id": "$Ticket_Id",
                                        "docId": {"$last": "$_id"},
                                        "Ticket_Id": {"$last": "$Ticket_Id"},
                                        "Category": {"$last": "$Category"},
                                        "SubCategory": {"$last": "$SubCategory"},
                                        "From": {"$last": "$From"},
                                        "To": {"$last": "$To"},
                                        "Status": {"$last": "$Status"},
                                        "Created_by": {"$last": "$Created_by"},
                                        "Created_On": {"$last": "$Created_On"},
                                        "Modified_On": {"$last": "$Modified_On"},
                                        "CRN": {"$last": "$CRN"},
                                        "Mobile_No": {"$last": "$Mobile_No"},
                                        "Vehicle_No": {"$last": "$Vehicle_No"},
                                        "Remark": {"$last": "$Remark"},
                                        "ss_id": {"$last": "$ss_id"},
                                        "SubCategory_level2": {"$last": "$SubCategory_level2"},
                                        "Product": {"$last": "$Product"}
                                    }},
                                // Then sort
                                {"$sort": {"Created_On": -1}}

                            ];
                            console.log(agg);
                            //tickets.aggregate(agg, function (err1, dbTicket1) {
                            if (err1) {
                                throw err1;
                            } else {

                                //if (dbTicket1.length > 0) {
                                //   debugger;
                                //}
                                var todayDate = new Date();
                                var NewTicket_Id;
                                if (Ticket_id === "") {
                                    //create new ticket id.
                                    NewTicket_Id = objRequest["Product"].substring(0, 2).toString().toUpperCase() + objRequest["Category"].substring(0, 2).toString().toUpperCase() + autoIndex;
                                    isticket_created = 1;
                                } else {
                                    NewTicket_Id = Ticket_id;
                                    isticket_created = 0;
                                }
                                tickets.findOne({"Ticket_Id": Ticket_id}, {sort: {"Modified_On": -1}}, function (err, dbticket) {
                                    console.log(dbticket);
                                    var arg = {};
                                    arg = {
                                        Ticket_Id: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                        Product: dbticket !== null ? dbticket['Product'] : product_id,
                                        Category: dbticket !== null ? dbticket["Category"] : objRequest["Category"],
                                        SubCategory: dbticket !== null ? dbticket["SubCategory"] : objRequest["SubCategory"],
                                        Proposal_Error_Msg: objRequest["Proposal_Error_Msg"],
                                        From: dbticket !== null ? dbticket["From"] : (Is_Customer === true ? objRequest["Created_By"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') '),
                                        To: dbticket !== null ? dbticket["To"] : (Is_Customer === true ? objRequest["Created_By"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') '),
                                        Status: objRequest["Status"] === "0" ? dbticket["Status"] : objRequest["Status"],
                                        Created_By: dbticket !== null ? dbticket["Created_By"] : (Is_Customer === true ? objRequest["Created_By"] : agentdetails.Emp_Name + ' (' + agentdetails.UID + ') '),
                                        Modified_By: agentdetails.Emp_Id,
                                        Created_On: dbticket !== null ? dbticket["Created_On"] : todayDate,
                                        Modified_On: todayDate,
                                        CRN: dbticket !== null ? dbticket["CRN"] : objRequest["CRN"] - 0,
                                        Mobile_No: dbticket !== null ? dbticket["Mobile_No"] : objRequest["Mobile_No"],
                                        Vehicle_No: dbticket !== null ? dbticket["Vehicle_No"] : objRequest["Vehicle_No"],
                                        Remark: objRequest["Remark"],
                                        ss_id: dbticket !== null ? dbticket["ss_id"] : agentdetails.Emp_Id,
                                        SubCategory_level2: objRequest["SubCategory_level2"],
                                        CRN_owner: dbticket !== null ? dbticket["CRN_owner"] : objRequest["CRN_owner"],
                                        IsActive: 1,
                                        fba_id: dbticket !== null ? dbticket["fba_id"] : agentdetails.FBA_ID,
                                        CRN_fba_id: dbticket !== null ? dbticket["CRN_fba_id"] : objRequest["CRN_fba_id"],
                                        channel: dbticket !== null ? dbticket["channel"] : objRequest["channel"],
                                        subchannel: dbticket !== null ? dbticket["subchannel"] : objRequest["subchannel"],
                                        UploadFiles: dbticket !== null ? dbticket["UploadFiles"] : "",
                                        Ticket_Code: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                        Agent_Email_Id: dbticket !== null ? dbticket['Agent_Email_Id'] : agentdetails.Email_Id,
                                        Transaction_On: dbticket !== null ? dbticket["Transaction_On"] : objRequest["Transaction_On"],
                                        Source: objRequest["Source"],
                                        RM_Email_Id: dbticket !== null ? dbticket["RM_Email_Id"] : objRequest["rm_email_id"]

                                    };
                                    var filecount = 0;
                                    if (dbticket !== null) {
                                        var objticket = {};
                                        objticket['IsActive'] = 0;
                                        tickets.updateMany({'Ticket_Id': NewTicket_Id}, {$set: {"IsActive": 0}}, function (err, numAffected) {
                                            if (err) {
                                                res.json({Msg: 'Ticket_Not_Saved', Details: err});
                                            } else {
                                                //res.json({Msg: 'Success_Created', Details: numAffected});
                                            }
                                        });
                                        for (var j = 1 in dbticket["UploadFiles"]) {
                                            if (dbticket["UploadFiles"][j] !== null) {
                                                filecount = dbticket["UploadFiles"]["file_count"];
                                            }
                                        }
                                    }

                                    tickets.insertOne(arg, function (err, res1) {
                                        if (err)
                                            throw err;
                                        if (res1["insertedCount"] > 0) {

                                            //user_details
                                            var userdetails = {
                                                data: {
                                                    "Ticket_id": NewTicket_Id,
                                                    "isticket_created": isticket_created,
                                                    "Modified_By": agentdetails.Emp_Id
                                                },
                                                headers: {
                                                    "Content-Type": "application/json"
                                                }
                                            };
                                            console.log(response);
                                            //Upload documnent
                                            if (file_obj.length > 0) {
                                                var objfile = {
                                                    "file_1": null,
                                                    "file_2": null,
                                                    "file_3": null,
                                                    "file_4": null};
                                                var objdata = {'UploadFiles': objfile};
                                                if (!fs.existsSync(appRoot + "/tmp/ticketing/" + NewTicket_Id)) {
                                                    fs.mkdirSync(appRoot + "/tmp/ticketing/" + NewTicket_Id);
                                                }
                                                for (var i in file_obj) {
                                                    var data = file_obj[i].replace(/^data:image\/\w+;base64,/, "");
                                                    if (data === "") {
                                                        res1.json({'msg': 'Something Went Wrong'});
                                                    } else {
                                                        var buf = new Buffer(data, 'base64');
                                                        fs.writeFile(path + '/' + NewTicket_Id + '/' + NewTicket_Id + '_file_' + (parseInt(filecount) + 1) + '.' + file_ext[i], buf);
                                                        objdata.UploadFiles["file_" + (parseInt(filecount) + 1)] = config.environment.downloadurl + '/ticketing/' + NewTicket_Id + '/' + NewTicket_Id + '_file_' + (parseInt(filecount) + 1) + '.' + file_ext[i];
                                                        objdata.UploadFiles["file_count"] = (parseInt(filecount) + 1);
                                                        //fs.writeFile(path + '/' + NewTicket_Id + '_file_' + i + '.' + file_ext[i], buf);
                                                        //objdata.UploadFiles[i] = config.environment.weburl + '/tmp/ticketing/' + NewTicket_Id + '_file_' + i + '.' + file_ext[i];
                                                    }
                                                }
                                                tickets.findAndModify({'Ticket_Id': NewTicket_Id}, [["Modified_On", -1]], {$set: objdata}, {}, function (err, numAffected) {
                                                    console.log('UserDataUpdated', err, numAffected);
                                                    if (err) {
                                                        objdata['Msg'] = err;
                                                    } else {
                                                        objdata['Msg'] = numAffected;
                                                    }
                                                });
                                            }
                                            //Send Mail
                                            var Email = require('../models/email');
                                            var objModelEmail = new Email();
                                            var environment = config.environment.name === 'Production' ? "" : "QA-";
                                            if (objRequest["CRN"] !== "" || objRequest["CRN"] !== null || objRequest["CRN"] !== undefined) {
                                                var subject = "[TICKET] " + NewTicket_Id + " - " + objRequest["CRN"] + " " + environment + objRequest["Product"] + '-' + objRequest["Category"] + '-' + objRequest["SubCategory"];
                                            } else {
                                                var subject = "[TICKET] " + NewTicket_Id + " " + environment + objRequest["Product"] + '-' + objRequest["Category"] + '-' + objRequest["SubCategory"];
                                            }
                                            var rm_emailid = dbticket !== null ? dbticket["RM_Email_Id"] : objRequest["rm_email_id"];
                                            var cc = 'techsupport@policyboss.com';
                                            cc += rm_emailid !== "" ? ";" + rm_emailid : '';
                                            var mail_content = '<html><body>' +
                                                    'Ticket is created.' +
                                                    '<p></p>Ticket No - ' + NewTicket_Id +
                                                    '<p></p>CRN  - ' + objRequest["CRN"] +
                                                    '<p></p>Status  - ' + objRequest["Status"] +
                                                    '<p></p>Product  - ' + objRequest["Product"] +
                                                    '<p></p>Remarks  - ' + objRequest["Remark"] +
                                                    '<p></p>You will be notified once ticket is resolved.' +
                                                    '<p></p>You can check ticket status in my ticket section.' +
                                                    '</body></html>';
                                            var email_id;
                                            if (Is_Customer) {
                                                email_id = objRequest["Agent_Email"];
                                            } else {
                                                email_id = agentdetails.Email_Id;
                                            }
                                            if (objRequest["Category"] === "Quotation") {
                                                email_id += ";quotesupport@policyboss.com";
                                            }
                                            if (post_sale.indexOf(objRequest["Category"]) >= 0) {
                                                if (agentdetails.Email_Id !== "jyoti.sharma@policyboss.com") {
                                                    email_id += ";jyoti.sharma@policyboss.com";
                                                }

                                                cc += ";susanna.lobo@landmarkinsurance.in";
                                            }
                                            if (email_id !== null || email_id !== undefined) {
                                                objModelEmail.send('noreply@policyboss.com', email_id, subject, mail_content, cc, config.environment.notification_email, objRequest["CRN"]);
                                            }

                                            if (Ticket_id === "") {
                                                res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is created.', 'Created_On': moment(todayDate).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss")});
                                            } else {
                                                res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is updated.', 'Created_On': moment(todayDate).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss")});
                                            }

                                            //user_details end
                                        } else {
                                            res.json({'Status': "Fail", 'Msg': "No Ticket raised"});
                                        }
                                        //console.log(res);
                                    });
                                });
                            }
                        });
                    });
                    //res.json({'Status': "Inserted Succefully"});
                } else {
                    objRequest['agent'] = 'NA';
                }
            });
        }
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.get('/ticket_Comments/:Ticket_Id', function (req, res) {
    try {
        var Ticket_id = req.params['Ticket_Id'];
        var ObjResposne = [];
        var tickets = require('../models/ticket');
        tickets.find({"Ticket_Id": Ticket_id}).sort({"Modified_On": -1}).exec(function (err, dbtickets) {
            if (err) {
                res.send(err);
            } else {
                console.log(dbtickets.length);
                for (var i in dbtickets) {
                    var dbtickets1 = dbtickets[i]._doc;
                    var Obj = {
                        "Remark": dbtickets1['Remark'],
                        "UploadFiles": dbtickets1['UploadFiles']
                    };
                    ObjResposne.push(Obj);
                }
                res.json(ObjResposne);
            }
        });
        //});

    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/admin_raiseticket', LoadSession1, function (req, res, next) {
    try {
        var product_id = 0;
        var fields = req.fields;
        var files = req.files;
        var objRequest;
        objRequest = fields;
        var Ticket_id = objRequest["Ticket_Id"];
        if (objRequest["Product"] === "CAR") {
            product_id = 1;
        } else if (objRequest["Product"] === "BIKE") {
            product_id = 10;
        } else if (objRequest["Product"] === "HEALTH") {
            product_id = 2;
        }

        //console.log(file_obj);
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            if (err)
                throw err;
            var autoIncrement = require("mongodb-autoincrement");
            autoIncrement.getNextSequence(db, 'tickets', function (err1, autoIndex) {
                if (err1) {
                    throw err1;
                } else {
                    var tickets = db.collection('tickets');
                    var todayDate = new Date();
                    var isticket_created;
                    var NewTicket_Id;
                    if (Ticket_id === "") {
                        //create new ticket id.
                        NewTicket_Id = objRequest["Product"].substring(0, 2).toString().toUpperCase() + objRequest["Category_Name"].substring(0, 2).toString().toUpperCase() + autoIndex;
                        isticket_created = 1;
                    } else {
                        NewTicket_Id = Ticket_id;
                        isticket_created = 0;
                    }
                    tickets.findOne({"Ticket_Id": Ticket_id}, {sort: {"Modified_On": -1}}, function (err, dbticket) {
                        //console.log(dbticket);
                        var arg = {};
                        if (objRequest.hasOwnProperty('page_action') && objRequest['page_action'] !== '') {
                            arg = {
                                Ticket_Id: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                Product: dbticket !== null ? dbticket['Product'] : product_id,
                                Category: dbticket !== null ? dbticket["Category"] : objRequest["Category_Name"],
                                SubCategory: dbticket !== null ? dbticket["SubCategory"] : objRequest["SubCategory"],
                                From: dbticket !== null ? dbticket["From"] : req.obj_session.user.fullname + "(" + req.obj_session.user.uid + ")",
                                To: dbticket !== null ? dbticket["To"] : req.obj_session.user.fullname + "(" + req.obj_session.user.uid + ")",
                                Status: objRequest["Status"] === "0" ? dbticket["Status"] : objRequest["Status"],
                                Created_By: dbticket !== null ? dbticket["Created_By"] : req.obj_session.user.fullname,
                                Modified_By: req.obj_session.user.ss_id,
                                Created_On: dbticket !== null ? dbticket["Created_On"] : todayDate,
                                Modified_On: todayDate,
                                CRN: dbticket !== null ? dbticket["CRN"] : objRequest["CRN"],
                                Mobile_No: dbticket !== null ? dbticket["Mobile_No"] : objRequest["Mobile_No"],
                                Vehicle_No: dbticket !== null ? dbticket["Vehicle_No"] : objRequest["Vehicle_No"],
                                Remark: objRequest["txt_remark"],
                                ss_id: req.obj_session.user.ss_id,
                                CRN_owner: dbticket !== null ? dbticket["CRN_owner"] : objRequest["CRN_owner"],
                                IsActive: 1,
                                fba_id: req.obj_session.user.fba_id,
                                CRN_fba_id: dbticket !== null ? dbticket["CRN_fba_id"] : objRequest["CRN_fba_id"],
                                channel: dbticket !== null ? dbticket["channel"] : objRequest["channel"],
                                subchannel: dbticket !== null ? dbticket["subchannel"] : objRequest["subchannel"],
                                //UploadFiles: dbticket !== null ? dbticket["UploadFiles"] : "",
                                Modified_By_Name: req.obj_session.user.fullname,
                                Agent_Email_Id: req.obj_session.user.email,
                                Transaction_On: dbticket !== null ? dbticket["Transaction_On"] : objRequest["Transaction_On"]
                            };
                        } else {
                            arg = {
                                Ticket_Id: dbticket !== null ? dbticket['Ticket_Id'] : NewTicket_Id,
                                Product: dbticket !== null ? dbticket['Product'] : product_id,
                                Category: dbticket !== null ? dbticket["Category"] : objRequest["Category"],
                                SubCategory: dbticket !== null ? dbticket["SubCategory"] : objRequest["SubCategory"],
                                From: dbticket !== null ? dbticket["From"] : objRequest["From"],
                                To: dbticket !== null ? dbticket["To"] : objRequest["To"],
                                Status: objRequest["Status"] === "0" ? dbticket["Status"] : objRequest["Status"],
                                Created_By: dbticket !== null ? dbticket["Created_By"] : objRequest["Created_By"],
                                Modified_By: objRequest["ss_id"] - 0,
                                Created_On: dbticket !== null ? dbticket["Created_On"] : (objRequest["Created_On"] === "" ? todayDate : objRequest["Created_On"]),
                                Modified_On: todayDate,
                                CRN: dbticket !== null ? dbticket["CRN"] : objRequest["CRN"],
                                Mobile_No: dbticket !== null ? dbticket["Mobile_No"] : objRequest["Mobile_No"],
                                Vehicle_No: dbticket !== null ? dbticket["Vehicle_No"] : objRequest["Vehicle_No"],
                                Remark: objRequest["Remark"],
                                ss_id: dbticket !== null ? dbticket["ss_id"] : objRequest["ss_id"] - 0,
                                SubCategory_level2: objRequest["SubCategory_level2"],
                                CRN_owner: dbticket !== null ? dbticket["CRN_owner"] : objRequest["CRN_owner"],
                                IsActive: 1,
                                fba_id: dbticket !== null ? dbticket["fba_id"] : objRequest["fba_id"],
                                CRN_fba_id: dbticket !== null ? dbticket["CRN_fba_id"] : objRequest["CRN_fba_id"],
                                channel: dbticket !== null ? dbticket["channel"] : objRequest["channel"],
                                subchannel: dbticket !== null ? dbticket["subchannel"] : objRequest["subchannel"],
                                //UploadFiles: dbticket !== null ? dbticket["UploadFiles"] : ""
                            };
                        }
                        tickets.insertOne(arg, function (err, res1) {
                            if (err)
                                throw err;
                            if (res1["insertedCount"] > 0) {
                                if (objRequest.hasOwnProperty('page_action') && objRequest['page_action'] !== '') {
                                    //Upload documnent
                                    var objfile = {
                                        "file_1": null,
                                        "file_2": null,
                                        "file_3": null,
                                        "file_4": null};
                                    var objdata = {'UploadFiles': objfile};
                                    if (files !== null) {
                                        if (!fs.existsSync(appRoot + "/tmp/ticketing/" + NewTicket_Id)) {
                                            fs.mkdirSync(appRoot + "/tmp/ticketing/" + NewTicket_Id);
                                        }// for policy copy
                                        for (var i in files) {

                                            var pdf_file_name = i + "." + files[i].name.split('.')[1];
                                            var pdf_sys_loc_horizon = appRoot + "/tmp/ticketing/" + NewTicket_Id + "/" + req.obj_session.user.ss_id + "_" + pdf_file_name;
                                            var pdf_web_path_horizon = config.environment.downloadurl + "/tmp/ticketing/" + NewTicket_Id + "/" + req.obj_session.user.ss_id + "_" + pdf_file_name;
                                            objdata.UploadFiles[i] = pdf_web_path_horizon;
                                            var oldpath = files[i].path;
                                            fs.readFile(oldpath, function (err, data) {
                                                if (err)
                                                {
                                                    console.error('Read', err);
                                                }
                                                console.log('File read!');
                                                // Write the file
                                                fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                                                    if (err)
                                                    {
                                                        console.error('Write', err);
                                                    }

                                                });
                                                // Delete the file
                                                fs.unlink(oldpath, function (err) {
                                                    if (err)
                                                        throw err;
                                                    console.log('File deleted!');
                                                });
                                            });
                                            sleep(1000);
                                        }
                                        tickets.update({'Ticket_Id': NewTicket_Id}, {$set: objdata}, function (err, numAffected) {
                                            console.log('UserDataUpdated', err, numAffected);
                                            if (err) {
                                                objdata['Msg'] = err;
                                            } else {
                                                objdata['Msg'] = numAffected;
                                            }
                                        });
                                    }
                                }
                                var Email = require('../models/email');
                                var objModelEmail = new Email();
                                var environment = config.environment.name === 'Production' ? "" : "QA-";
                                var subject = NewTicket_Id + "  " + environment + " " + objRequest["Product"] + '-' + objRequest["Category_Name"] + '-' + objRequest["SubCategory"];
                                var mail_content = '<html><body>' +
                                        'Ticket is created.' +
                                        '<p></p>Ticket No - ' + NewTicket_Id +
                                        '<p></p>CRN  - ' + objRequest["CRN"] +
                                        '<p></p>Status  - ' + objRequest["Status"] +
                                        '<p></p>Product  - ' + objRequest["Product"] +
                                        '<p></p>Remarks  - ' + objRequest["Remark"] +
                                        '<p></p>You will be notified once ticket is resolved.' +
                                        '<p></p>You can check ticket status in my ticket section.' +
                                        '</body></html>';
                                if (req.obj_session.user.email !== null || req.obj_session.user.email !== undefined) {
                                    objModelEmail.send('noreply@policyboss.com', req.obj_session.user.email, subject, mail_content, '', '');
                                }
                                objModelEmail.send('noreply@policyboss.com', 'techsupport@policyboss.com', subject, mail_content, '', '');
                                if (Ticket_id === "") {
                                    res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is created.', 'Created_On': moment(objRequest["Created_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss")});
                                } else {
                                    res.json({'Status': "Success", 'Ticket_Id': NewTicket_Id, 'CRN': objRequest["CRN"], 'Category': objRequest["Category"], 'SubCategory': objRequest["SubCategory"], 'Msg': 'Ticket is updated.', 'Created_On': moment(objRequest["Created_On"]).format("YYYY-MM-DD HH:mm:ss"), 'Transaction_On': moment(objRequest["Transaction_On"]).format("YYYY-MM-DD HH:mm:ss")});
                                }

                            } else {
                                res.json({'Status': "Fail", 'Msg': "No Ticket raised"});
                            }
                            ////console.log(res);
                        });
                    });
                }
            });
        });
        //res.json({'Status': "Inserted Succefully"});
    } catch (err) {
        console.log(err);
        console.error("catch" + err);
        res.json({'msg': 'error'});
    }
});
router.get('/getCRNdetails/:CRN', function (req, res) {
    try {
        var CRN = req.params['CRN'];
        var ObjArrResponse = [];
        var objResponse = {};
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            User_Data.find({'PB_CRN': CRN}).exec(function (err, dbUsers) {
                if (err)
                    throw err

                if (dbUsers.length > 0) {
                    for (var i in dbUsers) {
                        var user_data = dbUsers[i]._doc;
                        objResponse['Product'] = user_data['Product_Id'];
                        objResponse['Vehicle_No'] = user_data['Premium_Request']['registration_no'];
                        objResponse['Mobile_No'] = user_data['Premium_Request']['mobile'];
                    }
                    ObjArrResponse.push(objResponse);
                }
                res.json(ObjArrResponse);
            })
        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
});
router.get('/gettickingCategory1', function (req, res) {
    try {
        var obj = [];
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var arr = [
                {
                    $lookup:
                            {
                                from: "ticking_subcategory",
                                localField: "Category_Id",
                                foreignField: "Category_Id",
                                as: "SubCategory"
                            }
                }
            ]
            db.collection('ticking_category').aggregate(arr).toArray(function (err, dbCategory) {
                if (err) {
                    res.send(err);
                } else {
                    //console.log(dbCategory);

                    res.json(dbCategory)
                }

            })


        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
});
router.get('/getticketing_category', function (req, res) {
    try {
        var obj = [];
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            db.collection('ticketing_category').find({}).toArray(function (err, dbCategory) {
                if (err) {
                    res.send(err);
                } else {
                    //console.log(dbCategory);
                    for (var i in dbCategory) {
                        obj.push(dbCategory[i]['Category_Id'] + ':' + dbCategory[i]['Category']);
                    }
                    res.json(obj);
                }

            })

        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
});
router.get('/getticketingSubCategory/:category', function (req, res) {
    try {
        var obj = [];
        var category_id = req.params['category'] - 0;
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            db.collection('ticketing_subcategory').find({"Category_Id": category_id}).toArray(function (err, dbsubCategory) {
                if (err) {
                    res.send(err);
                } else {
                    //console.log(dbsubCategory);
                    for (var i in dbsubCategory) {
                        obj.push(dbsubCategory[i]['SubCategory']);
                    }
                    res.json(obj);
                }

            })

        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/ticket/getticketsList', function (req, res) {
    try {
        var objCategory = [];
        var ObjResposne = [];
        var objRequest = req.body;
        var ss_id = 0;
        var roleType = objRequest["role_type"];
        if (objRequest["Category"] != "") {
            objCategory = objRequest["Category"].split(',');
        }
        ss_id = objRequest["ss_id"] - 0;
        var Condition = [];
        var fromDate = new Date();
        fromDate.setHours(0, 0, 0, 0);
        var toDate = new Date();
        toDate.setHours(23, 59, 59, 999);
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(today).format("YYYY-MM-D");
        var toDate = moment(today).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        // //console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        if (roleType == "tickets") {
            Condition = {"ss_id": ss_id,
                "Created_On": {$gte: dateFrom, $lt: dateTo}
            }
        } else {
            Condition = {"Category": {$in: objCategory},
                "Created_On": {$gte: dateFrom, $lt: dateTo}
            }
        }
        var agg = [
            // Group by the grouping key, but keep the valid values
            {"$group": {
                    "_id": "$Ticket_Id",
                    "docId": {"$last": "$_id"},
                    "Ticket_Id": {"$last": "$Ticket_Id"},
                    "Category": {"$last": "$Category"},
                    "SubCategory": {"$last": "$SubCategory"},
                    "From": {"$last": "$From"},
                    "To": {"$last": "$To"},
                    "Status": {"$last": "$Status"},
                    "Created_by": {"$last": "$Created_by"},
                    "Created_On": {"$last": "$Created_On"},
                    "Modified_On": {"$last": "$Modified_On"},
                    "CRN": {"$last": "$CRN"},
                    "Mobile_No": {"$last": "$Mobile_No"},
                    "Vehicle_No": {"$last": "$Vehicle_No"},
                    "Remark": {"$last": "$Remark"},
                    "ss_id": {"$last": "$ss_id"},
                    "SubCategory_level2": {"$last": "$SubCategory_level2"},
                    "Product": {"$last": "$Product"}
                }},
//            {"$match": {$or: [
//                        {"Category": {$in: objCategory},
//                            "Created_On": {$gte: dateFrom, $lt: dateTo}
//                        }, {"ss_id": ss_id}]
//                }
//            },
            {"$match": Condition
            },
            // Then sort
            {"$sort": {"Modified_On": -1}}

        ]
        // //console.log(Condition);

        var tickets = require('../models/tickets');
        tickets.aggregate(agg, function (err, dbTicket) {
            if (err) {
                res.send(err);
                console.error(err);
            } else {
                //console.log(dbTicket);
                for (var i in dbTicket) {
                    var productname = "";
                    if (dbTicket[i]["Product"] == 1) {
                        productname = "CAR";
                    } else if (dbTicket[i]["Product"] == 10) {
                        productname = "BIKE";
                    } else if (dbTicket[i]["Product"] == 2) {
                        productname = "HEALTH";
                    }

                    var Action_name = "";
                    if (objRequest["Category"] == "") {
                        Action_name = "Action";
                    } else {
                        if (dbTicket[i]["Status"] == "Open") {
                            Action_name = "Start";
                        } else {
                            Action_name = "Action";
                        }
                    }

                    var Obj = {
                        "Ticket_Id": dbTicket[i]['Ticket_Id'],
                        "Product": productname,
                        "Category": dbTicket[i]['Category'],
                        "SubCategory": dbTicket[i]['SubCategory'],
                        "Status": dbTicket[i]['Status'],
                        "Created_By": dbTicket[i]['Created_By'],
                        "From": dbTicket[i]['From'],
                        "Mobile_No": dbTicket[i]['Mobile_No'],
                        "Vehicle_No": dbTicket[i]['Vehicle_No'],
                        "Remark": dbTicket[i]['Remark'],
                        "CRN": dbTicket[i]['CRN'],
                        "Created_On_UI": moment(dbTicket[i]['Created_On']).format("DD/MM/YYYY"),
                        "Created_On": dbTicket[i]['Created_On'],
                        "SubCategory_level2": dbTicket[i]['SubCategory_level2'],
                        "ss_id": dbTicket[i]['ss_id'],
                        "Action_name": Action_name

                    }
                    ObjResposne.push(Obj);
                }
                res.json(ObjResposne);
            }
        })
        //  });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/ticket/get_ReportedticketsList', function (req, res) {
    try {
        var objCategory = [];
        var ObjResposne = [];
        var objRequest = req.body;
        var ss_id = 0;
        if (objRequest["Category"] != "") {
            objCategory = objRequest["Category"].split(',');
        }
        ss_id = objRequest["ss_id"] - 0; //var category = req.params["Category"].toString();

        var Condition = [];
        var fromDate = new Date();
        fromDate.setHours(0, 0, 0, 0);
        var toDate = new Date();
        toDate.setHours(23, 59, 59, 999);
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(today).format("YYYY-MM-D");
        var toDate = moment(today).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        //console.log('DateRange', 'from', dateFrom, 'to', dateTo);

        Condition = {"ss_id": ss_id,
            "Created_On": {$gte: dateFrom, $lt: dateTo}
        }

        var agg = [
            // Group by the grouping key, but keep the valid values
            {"$group": {
                    "_id": "$Ticket_Id",
                    "docId": {"$last": "$_id"},
                    "Ticket_Id": {"$last": "$Ticket_Id"},
                    "Category": {"$last": "$Category"},
                    "SubCategory": {"$last": "$SubCategory"},
                    "From": {"$last": "$From"},
                    "To": {"$last": "$To"},
                    "Status": {"$last": "$Status"},
                    "Created_by": {"$last": "$Created_by"},
                    "Created_On": {"$last": "$Created_On"},
                    "Modified_On": {"$last": "$Modified_On"},
                    "CRN": {"$last": "$CRN"},
                    "Mobile_No": {"$last": "$Mobile_No"},
                    "Vehicle_No": {"$last": "$Vehicle_No"},
                    "Remark": {"$last": "$Remark"},
                    "ss_id": {"$last": "$ss_id"},
                    "SubCategory_level2": {"$last": "$SubCategory_level2"},
                    "Product": {"$last": "$Product"}
                }},
//            {"$match": {$or: [
//                        {"Category": {$in: objCategory},
//                            "Created_On": {$gte: dateFrom, $lt: dateTo}
//                        }, {"ss_id": ss_id}]
//                }
//            },
            {"$match": {Condition}
            },
            // Then sort
            {"$sort": {"Modified_On": -1}}

        ]
        // //console.log(Condition);

        var tickets = require('../models/tickets');
        tickets.aggregate(agg, function (err, dbTicket) {
            if (err) {
                res.send(err);
                console.error(err);
            } else {
                //console.log(dbTicket);
                for (var i in dbTicket) {
                    var productname = "";
                    if (dbTicket[i]["Product"] == 1) {
                        productname = "CAR";
                    } else if (dbTicket[i]["Product"] == 10) {
                        productname = "TW";
                    } else if (dbTicket[i]["Product"] == 2) {
                        productname = "HEALTH";
                    }
                    var Obj = {
                        "Ticket_Id": dbTicket[i]['Ticket_Id'],
                        "Product": productname,
                        "Category": dbTicket[i]['Category'],
                        "SubCategory": dbTicket[i]['SubCategory'],
                        "Status": dbTicket[i]['Status'],
                        "Created_By": dbTicket[i]['Created_By'],
                        "From": dbTicket[i]['From'],
                        "Mobile_No": dbTicket[i]['Mobile_No'],
                        "Vehicle_No": dbTicket[i]['Vehicle_No'],
                        "Remark": dbTicket[i]['Remark'],
                        "CRN": dbTicket[i]['CRN'],
                        "Created_On_UI": moment(dbTicket[i]['Created_On']).format("DD/MM/YYYY"),
                        "Created_On": dbTicket[i]['Created_On'],
                        "SubCategory_level2": dbTicket[i]['SubCategory_level2'],
                        "ss_id": dbTicket[i]['ss_id']
                    }
                    ObjResposne.push(Obj);
                }
                res.json(ObjResposne);
            }

        })

        //  });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
});
router.get('/getticket/:Ticket_Id', function (req, res) {
    try {
        var Ticket_id = req.params['Ticket_Id'];
        var Condition = [];
        var sort = {};
        var ObjResposne = [];
        Condition = {"Ticket_Id": Ticket_id};
        sort = {"Modified_On": -1};
        console.log(Condition);
        //MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        var tickets = require('../models/ticket');
        tickets.find(Condition).sort(sort).limit(1).exec(function (err, dbtickets) {
            //tickets.find({"Ticket_Id": Ticket_id}).sort({"Modified_On": -1}).exec(function (err, dbtickets) {
            //tickets.find({"Ticket_Id": Ticket_id},{}, function (err, dbtickets) {
            if (err) {
                res.send(err);
            } else {
                console.log(dbtickets.length);
                //var dbtickets = dbtickets[0]._doc;
                for (var i in dbtickets) {
                    var dbtickets1 = dbtickets[i]._doc;
                    //for (var i in dbCategory) {
                    var productname = "";
                    //var Create
                    if (dbtickets1["Product"] === 1) {
                        productname = "CAR";
                    } else if (dbtickets1["Product"] === 10) {
                        productname = "BIKE";
                    } else if (dbtickets1["Product"] === 2) {
                        productname = "HEALTH";
                    }
                    var Obj = {
                        "Ticket_Id": dbtickets1['Ticket_Id'],
                        "Product": productname,
                        "Category": dbtickets1['Category'],
                        "SubCategory": dbtickets1['SubCategory'],
                        "Status": dbtickets1['Status'],
                        "Created_By": dbtickets1['Created_By'],
                        "From": dbtickets1['From'],
                        "To": dbtickets1['To'],
                        "Mobile_No": dbtickets1['Mobile_No'],
                        "Vehicle_No": dbtickets1['Vehicle_No'],
                        "Remark": dbtickets1['Remark'],
                        "CRN": dbtickets1['CRN'],
                        "Created_On_UI": moment(dbtickets1['Created_On']).format("DD/MM/YYYY"),
                        "Created_On": dbtickets1['Created_On'],
                        "Modified_On_UI": moment(dbtickets1['Modified_On']).format("DD/MM/YYYY"),
                        "Modified_On": dbtickets1['Modified_On'],
                        "ss_id": dbtickets1['ss_id'],
                        "UploadFiles": dbtickets1['UploadFiles']
                    };
                    ObjResposne.push(Obj);
                }
                res.json(ObjResposne);
            }
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.get('/CheckTickitingCategory/:UDID', function (req, res) {
    try {
        var UDID = req.params["UDID"];
        UDID = new RegExp(UDID, 'i');
        var Condition = {$or: [
                {$or: [{"Level_1": UDID}]},
                {$or: [{"Level_2": UDID}]},
                {$or: [{"Level_3": UDID}]}
            ]};
        var obj = [];
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            db.collection('ticketing_category').find({"Level_1": UDID}).toArray(function (err, dbCategory) {
                //  db.collection('ticketing_category').find(Condition).exec(function (err, dbCategory) {
                if (err) {
                    res.send(err);
                } else {
                    //console.log(dbCategory);
                    for (var i in dbCategory) {
                        // obj.push(dbCategory[i]['Category_Id'] + ':' + dbCategory[i]['Category']);
                        obj.push(dbCategory[i]['Category']);
                    }
                    res.json(obj);
                }

            })

        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
})

router.post('/ticket/search', function (req, res) {
    try
    {
        var objRequest = req.body;
        var objResponse = [];
        var mysort = "";
        var roleType = objRequest["role_type"];
        if (objRequest["Category"] !== "") {
            objCategory = objRequest["Category"].split(',');
        }
        ss_id = objRequest["ss_id"] - 0;
        var Condition = {};
        var today = moment().utcOffset("+05:30").startOf('Day');
        var fromDate = moment(objRequest["from_date"] === "" ? today : objRequest["from_date"]).format("YYYY-MM-D");
        var toDate = moment(objRequest["to_date"] === "" ? today : objRequest["to_date"]).format("YYYY-MM-D");
        var arrFrom = fromDate.split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = toDate.split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        console.log('DateRange', 'from', dateFrom, 'to', dateTo);
        if (objRequest["search_by"] !== "CurrentDate") {
            if (objRequest["search_by"] === "ticketid") {
                //Condition["Ticket_Id"] = objRequest["search_byvalue"];
                Condition["Ticket_Id"] = new RegExp(objRequest["search_byvalue"], 'i');
            } else if (objRequest["search_by"] === "CRN") {
                Condition["CRN"] = objRequest["search_byvalue"];
            } else {
                if (roleType === "tickets") {
                    Condition = {"ss_id": ss_id,
                        "Created_On": {$gte: dateFrom, $lt: dateTo}
                    };
                } else {
                    Condition = {"Category": {$in: objCategory},
                        "Modified_On": {$gte: dateFrom, $lt: dateTo}
                    };
                }
                if (objRequest["status"] !== "") {
                    Condition["Status"] = objRequest["status"];
                }
            }
            mysort = {Modified_On: -1};
        } else {
            if (roleType === "tickets") {
                Condition = {"ss_id": ss_id,
                    "Created_On": {$gte: dateFrom, $lt: dateTo}
                };
            } else {
                Condition = {"Category": {$in: objCategory},
                    "Modified_On": {$gte: dateFrom, $lt: dateTo}
                };
            }
            if (objRequest["status"] !== "") {
                Condition["Status"] = objRequest["status"];
            }
        }
        console.log(Condition);
        var agg = [
            // Group by the grouping key, but keep the valid values
            {"$group": {
                    "_id": "$Ticket_Id",
                    "docId": {"$last": "$_id"},
                    "Ticket_Id": {"$last": "$Ticket_Id"},
                    "Category": {"$last": "$Category"},
                    "SubCategory": {"$last": "$SubCategory"},
                    "From": {"$last": "$From"},
                    "To": {"$last": "$To"},
                    "Status": {"$last": "$Status"},
                    "Created_By": {"$last": "Created_By"},
                    "Created_On": {"$last": "$Created_On"},
                    "Modified_On": {"$last": "$Modified_On"},
                    "CRN": {"$last": "$CRN"},
                    "Mobile_No": {"$last": "$Mobile_No"},
                    "Vehicle_No": {"$last": "$Vehicle_No"},
                    "Remark": {"$last": "$Remark"},
                    "ss_id": {"$last": "$ss_id"},
                    "SubCategory_level2": {"$last": "$SubCategory_level2"},
                    "Product": {"$last": "$Product"},
                    "UploadFiles": {"$last": "$UploadFiles"},
                    "Agent_Email_Id": {"$last": "$Agent_Email_Id"}

                }},
            {"$match": Condition},
            // Then sort
            {"$sort": {"Modified_On": -1}}
        ];
        var tickets = require('../models/ticket');
        tickets.aggregate(agg, function (err, dbTicket) {
            if (err) {
                throw err;
            } else {
                console.log(dbTicket);
                for (var i in dbTicket) {
                    var productname = "";
                    // var Create;
                    if (dbTicket[i]["Product"] === 1) {
                        productname = "CAR";
                    } else if (dbTicket[i]["Product"] === 10) {
                        productname = "BIKE";
                    } else if (dbTicket[i]["Product"] === 2) {
                        productname = "HEALTH";
                    }
                    var Action_name = "";
                    if (objRequest["Category"] === "") {
                        Action_name = "Action";
                    } else {
                        if (dbTicket[i]["Status"] === "Open" && objRequest["role_type"] !== "tickets") {
                            Action_name = "Start";
                        } else {
                            Action_name = "Action";
                        }
                    }

                    var Obj = {
                        "Ticket_Id": dbTicket[i]['Ticket_Id'],
                        "Product": productname,
                        "Category": dbTicket[i]['Category'],
                        "SubCategory": dbTicket[i]['SubCategory'],
                        "Status": dbTicket[i]['Status'],
                        "Created_By": dbTicket[i]['Created_By'],
                        "From": dbTicket[i]['From'],
                        "Mobile_No": dbTicket[i]['Mobile_No'],
                        "Vehicle_No": dbTicket[i]['Vehicle_No'],
                        "Remark": dbTicket[i]['Remark'],
                        "CRN": dbTicket[i]['CRN'],
                        "Created_On_UI": moment(dbTicket[i]['Created_On']).format("DD/MM/YYYY"),
                        "Created_On": dbTicket[i]['Created_On'],
                        "SubCategory_level2": dbTicket[i]['SubCategory_level2'],
                        "ss_id": dbTicket[i]['ss_id'],
                        "Action_name": Action_name,
                        "Modified_On_UI": moment(dbTicket[i]['Modified_On']).format("DD/MM/YYYY"),
                        "Modified_On": dbTicket[i]['Modified_On'],
                        "UploadFiles": dbTicket[i]['UploadFiles'],
                        "Agent_Email_Id": dbTicket[i]['Agent_Email_Id'],
                        "Ageing": dbTicket[i]['Status'] === "Resolved" ? parseInt((dbTicket[i]['Modified_On'] - dbTicket[i]['Created_On']) / (1000 * 60 * 60 * 24)) : "",
                        "Close_Date": dbTicket[i]['Status'] === "Resolved" ? moment(dbTicket[i]['Modified_On']).format("DD/MM/YYYY") : ""
                    };
                    objResponse.push(Obj);
                }
                res.json(objResponse);
            }
        });
    } catch (err) {
        console.log(err);
        res.json({'msg': 'error'});
    }
});
router.post('/ticket/getSubCategoryLevel', function (req, res) {
    try {
        var objRequest = req.body;
        var SubCategoryLevel = objRequest["level"] - 0;
        var SubCategory = objRequest["subcategory"];
        var objResponse = [];
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            db.collection('ticketing_subcategory').find({"SubCategory": SubCategory}).toArray(function (err, dbsubCategory) {
                if (err) {
                    res.send(err);
                } else {
                    //console.log(dbsubCategory);
                    for (var i in dbsubCategory) {
                        if (SubCategoryLevel == 2) {
                            for (var j in dbsubCategory[i]['SubCategory_Level2']) {
                                objResponse.push(dbsubCategory[i]['SubCategory_Level2'][j]);
                            }
                        }

                    }
                    res.json(objResponse);
                }
            })

        });
    } catch (err) {
        //console.log(err);
        res.json({'msg': 'error'});
    }
})
router.get('/update_entry_number', function (req, res) {
    return res.json('stopped');
    var today = moment().utcOffset("+05:30").startOf('Day');
    var daybefore = (req.query.hasOwnProperty('daybefore')) ? req.query['daybefore'] - 0 : 5;
    var limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 20;
    var udid = (req.query.hasOwnProperty('udid')) ? req.query['udid'] - 0 : 0;
    var startday = 0 - daybefore;
    var endday = (0 - daybefore) + 1;
    var from_date = moment(today).add(startday, 'days').format("YYYY-MM-D");
    var to_date = moment(today).add(endday, 'days').format("YYYY-MM-D");
    var cond = {
        "Last_Status": {
            "$in": ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY']
        },
        'ERP_CS': new RegExp('CS', 'i'),
        'ERP_ENTRY': 'PENDING',
        "Modified_On": {"$gte": from_date, "$lte": to_date},
        "Product_Id": {"$in": [1, 10]}
    };
    if (udid > 0) {
        cond = {'User_Data_Id': udid};
    }
    User_Data.find(cond).select(['User_Data_Id', 'Product_Id', 'Premium_Request.vehicle_insurance_type', 'Request_Unique_Id', 'PB_CRN', 'Last_Status', 'ERP_CS', 'ERP_ENTRY', 'ERP_CS_DOC', "Proposal_Request_Core.registration_no", "Erp_Qt_Request_Core.___mobile___"]).limit(limit).exec(function (err, dbUsers) {
        if (err) {
            res.send(err);
        }
        try {
            if (!err) {
                var Client = require('node-rest-client').Client;
                var client = new Client();
                console.error('Log', 'CS_SYNC', dbUsers);
                let objCSSummary = [];
                for (let k in dbUsers) {
                    let user = dbUsers[k]._doc;
                    if ([1, 10].indexOf(user['Product_Id']) < 0) {
                        continue;
                    }
                    if (user['Premium_Request']['vehicle_insurance_type'] !== 'renew') {
                        continue;
                    }

                    let mobile = user["Erp_Qt_Request_Core"]["___mobile___"];
                    let api_url = 'http://202.131.96.98:8010/GenesysService.svc/GetCustomerInformation?v=' + mobile;
                    let reg_number = user["Proposal_Request_Core"]["registration_no"].replaceAll("-", "");
                    let objInd = {
                        'UDID': user["User_Data_Id"],
                        'CRN': user['PB_CRN'],
                        //'MOBILE': mobile,
                        'REG': reg_number,
                        'ENTRY': 'PENDING',
                    };
                    objCSSummary.push(objInd);
                    if (req.query.hasOwnProperty('dbg') === false) {
                        client.get(api_url, function (data) {
                            console.error('ERP_ENTRY_SYNC', 'ERPDATA', data);
                            if (data && data.hasOwnProperty("string") && data["string"].hasOwnProperty("_")) {
                                let agent_data = [];
                                let agent_sub_data = [];
                                agent_data = data["string"]["_"].split(";");
                                console.error('ERP_ENTRY_SYNC', 'agent_data', agent_data);
                                if (agent_data.length > 0) {
                                    for (let sub in agent_data) {
                                        agent_sub_data = agent_data[sub].split(",");
                                        console.error('ERP_ENTRY_SYNC', agent_sub_data[12]);
                                        if (reg_number === agent_sub_data[12]) {
                                            let entry_number = agent_sub_data[8];
                                            let setQuery = {};
                                            setQuery['ERP_ENTRY'] = entry_number;
                                            var today = new Date();
                                            var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                                            objInd['ENTRY'] = entry_number;
                                            fs.appendFile(appRoot + "/tmp/log/erp_entry_sync_" + log_file_name + ".log", JSON.stringify(objInd, undefined, 2), function (err) {
                                                if (err) {
                                                    //return //console.log(err);
                                                }
                                                //console.log("The file was saved!");
                                            });
                                            User_Data.update({"User_Data_Id": user["User_Data_Id"]}, {$set: setQuery}, function (err, numAffected) {
                                                if (err)
                                                    throw err;
                                                //console.log('update_entry_number ', user["Proposal_Request_Core"].registration_no + '|' + entry_number);
                                            });
                                            break;
                                        }
                                    }
                                }
                            }
                        });
                        sleep(500);
                    }
                }
                var ArrMsg = objCSSummary;
                if (ArrMsg.length > 0) {
                    var msg = '<!DOCTYPE html><html><head><title>ERP_ENTRY_SYNC</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    msg += '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">ERP_ENTRY_SYNC</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
                    var row_inc = 0;
                    for (var k in ArrMsg) {
                        if (row_inc === 0) {
                            msg += '<tr>';
                            for (var k_head in ArrMsg[k]) {
                                msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">' + k_head + '</th>';
                            }
                            msg += '</tr>';
                        }
                        msg += '<tr>';
                        for (var k_row in ArrMsg[k]) {
                            msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + ArrMsg[k][k_row] + '</td>';
                        }
                        msg += '</tr>';
                        row_inc++;
                    }
                    msg += '</table></div>';
                    msg += '</body></html>';
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    var sub = '[' + config.environment.name.toString().toUpperCase() + '-SCHEDULER]';
                    var today = moment().format('YYYY-MM-DD_HH:mm:ss');
                    sub += 'ERP_ENTRY_SYNC::' + today.toString();
                    objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '');
                }
                res.json(objCSSummary);
            }
        } catch (ex) {
            console.error(ex);
            res.json({"Status": "Fail", "Msg": ex});
        }

    });
});
router.post('/RM_report', function (req, res) {
    console.error('RM_report');
    var objRequest = req.body;
    var UID = objRequest['uid'] - 0;
    var SwitchUser_type = objRequest['user'];
    var today = moment().utcOffset("+05:30").startOf('Day');
    var fromDate = moment(objRequest["from_date"] == "" ? today : objRequest["from_date"]).format("YYYY-MM-D");
    var toDate = moment(objRequest["to_date"] == "" ? today : objRequest["to_date"]).format("YYYY-MM-D");
    var arrFrom = fromDate.split('-');
    var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
    var arrTo = toDate.split('-');
    var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
    dateTo.setDate(dateTo.getDate() + 1);
    //console.log('DateRange', 'from', dateFrom, 'to', dateTo);

    var cond_ud = {'Premium_Request.posp_reporting_agent_uid': UID, 'Created_On': {$gte: dateFrom, $lt: dateTo}};
    //console.log(cond_ud);

    var objArr_Response = [];
    var obj_schema = {
        'source': '',
        'ss_id': 'ss_id',
        'fba_id': 'posp_fba_id',
        'name': '',
        'email': 'posp_email_id',
        'mobile': 'posp_mobile_no',
        'car_count': '',
        'tw_count': '',
        'health_count': ''};
    var objSwitchUserType = {
        'DC-POSP': ['DC-POSP'],
        'DC-NON-POSP': ['DC-NON-POSP'],
        'SM-POSP': ['SM-POSP'],
        'SM-NON-POSP': ['SM-NON-POSP'],
        'SM-FOS': ['SM-FOS'],
        'RBS': ['RBS'],
        'PB-SS': ['PB-SS'],
        'GS-All': ['GS-FOS', 'GS-POSP', 'GS-NON-POSP', 'GS-FBA'],
        'EM-All': ['EM-FOS', 'EM-POSP'],
        'DC-All': ['DC-POSP', 'DC-NON-POSP', 'DC-FBA'],
        'SM-All': ['SM-POSP', 'SM-NON-POSP', 'SM-FBA']
    }

    var obj_result = {};
    User_Data.find(cond_ud).exec(function (err, dbUsers) {
        if (!err) {
            console.error('RM_report', dbUsers.length);
            for (var k in dbUsers) {
                try {
                    var user = dbUsers[k]._doc;
                    var user_type = get_search_source(user);
                    if (objSwitchUserType[SwitchUser_type].indexOf(user_type) > -1)
                    {
                        if (user['Premium_Request'].hasOwnProperty('ss_id') && (user['Premium_Request']['ss_id'] - 0) > 0) {
                            var email = user['Premium_Request']['posp_email_id'];
                            var ss_id = (user['Premium_Request']['ss_id'] - 0);
                            var fba_id = (user['Premium_Request']['posp_fba_id'] - 0);
                            var agent_id = ss_id;
                            if (ss_id === 5) {
                                agent_id = fba_id;
                            }
                            if (obj_result.hasOwnProperty(agent_id) === false) {
                                obj_result[agent_id] = {};
                                for (var k in obj_schema) {
                                    obj_result[agent_id][k] = '';
                                    if (obj_schema[k] !== '') {
                                        obj_result[agent_id][k] = user['Premium_Request'][obj_schema[k]];
                                    } else {
                                        obj_result[agent_id][k] = 0;
                                    }
                                }
                                obj_result[agent_id]['name'] = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'];
                                obj_result[agent_id]['source'] = get_search_source(user);
                            }
                            if (user['Product_Id'] == 1) {
                                obj_result[agent_id]['car_count']++;
                            }
                            if (user['Product_Id'] == 10) {
                                obj_result[agent_id]['tw_count']++;
                            }
                            if (user['Product_Id'] == 2) {
                                obj_result[agent_id]['health_count']++;
                            }
                        }
                    }
                } catch (e) {
                    console.error('RM_report', 'loop_err', e);
                }

            }
            objArr_Response.push(obj_result);
            res.json(objArr_Response);
            //var html_report = arrayobjectToHtml(obj_result);
            ////console.log(html_report);
            //res.send(html_report);

        }
    });
});
function save_file_from_url(insurer_policy_url, pdf_sys_loc) {
    try {
        var http = null;
        if (insurer_policy_url.indexOf('https') > -1) {
            http = require('https');
        } else {
            http = require('http');
        }

        var file_horizon = fs.createWriteStream(pdf_sys_loc);
        http.get(insurer_policy_url, function (response) {
            response.pipe(file_horizon);
        });
    } catch (e) {
        console.error('save_file_from_url', insurer_policy_url, pdf_sys_loc, e);
    }
}
function GetReportingAssignedAgent(req, res, next) {
    try {
        var objRequestCore = req.query;
        objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
        if (objRequestCore.hasOwnProperty('page_action') && objRequestCore['page_action'] && objRequestCore.hasOwnProperty('uid') && objRequestCore['uid']
                ) {
            if (objRequestCore['page_action'] === 'posp_daily') {
                var Posp = require('../models/posp');
                Posp.find({"Reporting_Agent_Uid": objRequestCore.uid - 0, 'Is_Active': true}, {'Ss_Id': 1}, function (err, dbAgents) {
                    if (err) {
                        res.send(err);
                    } else {
                        if (dbAgents) {
                            var arr_rm_ssid = [];
                            for (var k in dbAgents) {
                                arr_rm_ssid.push(dbAgents[k]._doc['Ss_Id']);
                            }
                            req.rm_ssid_list = arr_rm_ssid;
                            console.error('GetReportingAssignedAgent', arr_rm_ssid)
                            return next();
                        } else {
                            return res.status(401).json({'Msg': 'Not Authorized'});
                        }
                    }
                });
            } else if (objRequestCore['page_action'] === 'dsa_daily') {
                var Employee = require('../models/employee');
                Employee.find({"Role_ID": {$in: [29, 34]}, "UID": objRequestCore.uid - 0, 'IsActive': 1}, {'Emp_Id': 1}, function (err, dbAgents) {
                    if (err) {
                        res.send(err);
                    } else {
                        if (dbAgents) {
                            var arr_rm_ssid = [];
                            for (var k in dbAgents) {
                                arr_rm_ssid.push(dbAgents[k]._doc['Emp_Id']);
                            }
                            console.error('GetReportingAssignedAgent', arr_rm_ssid)
                            req.rm_ssid_list = arr_rm_ssid;
                            return next();
                        } else {
                            return res.status(401).json({'Msg': 'Not Authorized'});
                        }
                    }
                });
            } else {
                return next();
            }
        } else {
            return next();
        }
    } catch (e) {
        console.error('Exception', 'GetReportingAssignedAgent', e);
        return next();
    }
}
function LoadSession1(req, res, next) {
    try {
        var formidable = require('formidable');
        var form = new formidable.IncomingForm();
        form.parse(req, function (err, fields, files) {
            var objRequestCore;
            var objRequestCoreFiles;
            if (JSON.stringify(fields) !== "{}") {
                objRequestCore = fields;
                objRequestCoreFiles = files;
            } else {
                JSON.stringify(req.body);
                objRequestCore = req.body;
            }

            if (req.method == "GET") {
                objRequestCore = req.query;
            }
            objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
            if (objRequestCore.hasOwnProperty('session_id') && objRequestCore['session_id'] != '') {
                var Session = require('../models/session');
                Session.findOne({"_id": objRequestCore['session_id']}, function (err, dbSession) {
                    if (err) {
                        res.send(err);
                    } else {
                        if (dbSession) {
                            dbSession = dbSession._doc;
                            var obj_session = JSON.parse(dbSession['session']);
                            req.obj_session = obj_session;
                            req.fields = objRequestCore;
                            req.files = objRequestCoreFiles;
                            return next();
                        } else {
                            return res.status(401).json({'Msg': 'Session Expired.Not Authorized'});
                        }
                    }
                });
            } else {
                return next();
            }
        });
    } catch (e) {
        console.error('Exception', 'LoadSession', e);
        return next();
    }
}

function LoadSession(req, res, next) {
    try {
        var objRequestCore = req.body;
        if (req.method == "GET") {
            objRequestCore = req.query;
        }
        objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
        if (objRequestCore.hasOwnProperty('session_id') && objRequestCore['session_id'] != '') {
            var Session = require('../models/session');
            Session.findOne({"_id": objRequestCore['session_id']}, function (err, dbSession) {
                if (err) {
                    res.send(err);
                } else {
                    if (dbSession) {
                        dbSession = dbSession._doc;
                        var obj_session = JSON.parse(dbSession['session']);
                        req.obj_session = obj_session;
                        return next();
                    } else {
                        return res.status(401).json({'Msg': 'Session Expired.Not Authorized'});
                    }
                }
            });
        } else {
            return next();
        }
    } catch (e) {
        console.error('Exception', 'LoadSession', e);
        return next();
    }
}
router.post('/change_password', LoadSession, function (req, res, next) {
    var obj_password = {
        "SS_ID": req.obj_session.user.ss_id,
        "oldPassword": req.body.current_password,
        "newPassword": req.body.new_password
    };
    var args = {
        data: obj_password,
        headers: {
            "Content-Type": "application/json",
            'Username': config.pb_config.api_crn_user,
            'Password': config.pb_config.api_crn_pass
        }
    };
    var Client = require('node-rest-client').Client;
    var client = new Client();
    ////console.log('args', args);
    client.post(config.pb_config.api_password_url, args, function (data, response) {
        if (data) {
            var contentSms_Log = "PASSWORD-CHANGE-ACK\n\
---------------------------\n\
Agent: " + req.obj_session.user.fullname + '(SS_ID:' + req.obj_session.user.ss_id + ', FBA_ID:' + req.obj_session.user.fba_id + ")\n\
";
            var email_body = contentSms_Log.replace(/\n/g, '<BR>');
            var email_data = '<!DOCTYPE html><html><head><title>POLICY_REQUESTED_APP_NOTIFICATION</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
            email_data += '<div class="report"><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">' + email_body + '<span></body></html>';
            var Email = require('../models/email');
            var objModelEmail = new Email();
            var sub = '[' + config.environment.name.toString().toUpperCase() + '] PASSWORD CHANGED';
            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, email_data, '', '');
            /*
             var today = new Date();
             var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
             let objInd ;
             fs.appendFile(appRoot + "/tmp/log/erp_entry_sync_" + log_file_name + ".log", JSON.stringify(objInd, undefined, 2), function (err) {
             if (err) {
             //return //console.log(err);
             }
             //console.log("The file was saved!");
             });
             */
        }
    });
});
router.get('/getLeadBoardList/:Product_Id/:Ss_Id/:Fba_Id/:Page/:Mobile', function (req, res, next) {
    try {
        var ss_id = parseInt(req.params.Ss_Id);
        var Page = req.params.Page - 0;
        var Skip = 0;
        var Limit = 10;
        var objRes = {
            'leads': null,
            'length': null,
            'status': null
        };
        var Condition = {
            "ss_id": ss_id,
            "Status": "PENDING"
        };
        var Lead = require('../models/leads');
        var pageCount = 0;
        Lead.find(Condition).count(function (e, count) {
            console.log("called lead model : ", count);
            pageCount = count;
            if (Page > 1) {
                Skip = Limit * (Page - 1);
            }
            console.error('Page : ', Page, ', Skip : ', Skip, ', Limit : ', Limit, ', pageCount : ', pageCount);
            //Lead.find(Condition).sort({ss_id:-1}).select(['ss_id', 'previous_policy_number', 'prev_policy_start_date', 'policy_expiry_date', 'engine_number', 'chassis_number', 'Model_Name', 'company_name', 'Customer_Name', 'Customer_Address', 'mobile', 'mobile2', 'vehicle_insurance_type', 'issued_by_username', 'registration_no', 'nil_dept', 'rti']).skip(Skip).limit(Limit).exec(function (er, dbLead) {
            Lead.find(Condition).skip(Skip).limit(Limit).exec(function (er, dbLead) {
                try {
                    if (!er) {
                        var arr_User_Data = [];
                        for (var k in dbLead) {
                            try {
                                var user = dbLead[k]._doc;
                                //var user = dbLead[k];
                                var objUD = {
                                    'ss_id': user['ss_id'],
                                    'lead_id': user['lead_id'],
                                    'previous_policy_number': user['previous_policy_number'],
                                    'prev_policy_start_date': user['prev_policy_start_date'],
                                    'policy_expiry_date': user['policy_expiry_date'],
                                    'engine_number': user['engine_number'],
                                    'chassis_number': user['chassis_number'],
                                    'Model_Name': user['Model_Name'],
                                    'company_name': user['company_name'],
                                    'Customer_Name': user['Customer_Name'],
                                    'Customer_Address': user['Customer_Address'],
                                    'mobile': user['mobile'],
                                    'mobile2': user['mobile2'],
                                    'vehicle_insurance_type': user['vehicle_insurance_type'],
                                    'issued_by_username': user['issued_by_username'],
                                    'PageCount': Math.round(pageCount / 10),
                                    'registration_no': user['registration_no'],
                                    'nil_dept': user['nil_dept'],
                                    'rti': user['rti'],
                                    'Make_Name': user['Make_Name'],
                                    'Model_ID': user['Model_ID'],
                                    'Model_Name': user['Model_Name'],
                                    'Variant_Name': user['Variant_Name'],
                                    'Vehicle_ID': user['Vehicle_ID'],
                                    'Fuel_ID': user['Fuel_ID'],
                                    'Fuel_Name': user['Fuel_Name'],
                                    'RTO_City': user['RTO_City'],
                                    'VehicleCity_Id': user['VehicleCity_Id'],
                                    'VehicleCity_RTOCode': user['VehicleCity_RTOCode'],
                                    'vehicle_registration_date': user['vehicle_registration_date'],
                                    'vehicle_manf_date': user['vehicle_manf_date'],
                                    'prev_insurer_id': user['prev_insurer_id'],
                                    'vehicle_ncb_current': user['vehicle_ncb_current'],
                                    'is_claim_exists': user['is_claim_exists']
                                };
                                arr_User_Data.push(objUD);
                            } catch (e) {
                                console.error('UDBG', e);
                            }
                        }
                        res.json(arr_User_Data);
                    } else {
                        console.error('Exception', 'QuickListDBError', er);
                        res.send(er);
                    }
                } catch (e1) {
                    console.error('Exception', 'QuickList1', e1);
                }
            });
        });
    } catch (ex) {
        objRes.status = ex;
        res.json(objRes);
    }
});
router.post('/getleadData', function (req, res) {
    try {
        var ObjRequest = req.body;
        var Condition = {
            "Lead_Id": parseInt(ObjRequest['lead_id'])
        };
        var Lead = require('../models/leads');
        Lead.find(Condition).exec(function (er, dbLead) {
            try {
                if (!er) {
                    for (var k in dbLead) {
                        try {
                            var user = dbLead[k]._doc;
                            //var user = dbLead[k];
                            var objUD = {
                                'ss_id': user['ss_id'],
                                'lead_id': user['Lead_Id'],
                                'previous_policy_number': user['previous_policy_number'],
                                'prev_policy_start_date': user['prev_policy_start_date'],
                                'policy_expiry_date': user['policy_expiry_date'],
                                'engine_number': user['engine_number'],
                                'chassis_number': user['chassis_number'],
                                'Model_Name': user['Model_Name'],
                                'company_name': user['company_name'],
                                'Customer_Name': user['Customer_Name'],
                                'Customer_Address': user['Customer_Address'],
                                'mobile': user['mobile'],
                                'mobile2': user['mobile2'],
                                'vehicle_insurance_type': user['vehicle_insurance_type'],
                                'issued_by_username': user['issued_by_username'],
                                'registration_no': user['registration_no'],
                                'nil_dept': user['nil_dept'],
                                'rti': user['rti'],
                                'Make_Name': user['Make_Name'],
                                'Model_ID': user['Model_ID'],
                                'Model_Name': user['Model_Name'],
                                'Variant_Name': user['Variant_Name'],
                                'Vehicle_ID': user['Vehicle_ID'],
                                'Fuel_ID': user['Fuel_ID'],
                                'Fuel_Name': user['Fuel_Name'],
                                'RTO_City': user['RTO_City'],
                                'VehicleCity_Id': user['VehicleCity_Id'],
                                'VehicleCity_RTOCode': user['VehicleCity_RTOCode'],
                                'vehicle_registration_date': user['vehicle_registration_date'],
                                'vehicle_manf_date': user['vehicle_manf_date'],
                                'prev_insurer_id': user['prev_insurer_id'],
                                'vehicle_ncb_current': user['vehicle_ncb_current'],
                                'is_claim_exists': user['is_claim_exists'],
                                'lead_type': user['lead_type']
                            };
                        } catch (e) {
                            console.error('UDBG', e);
                        }
                    }
                    res.json(objUD);
                } else {
                    console.error('Exception', 'getleadData', er);
                    res.send(er);
                }
            } catch (e1) {
                console.error('Exception', 'getleadData', e1);
            }
        });
    } catch (e) {
    }
});
router.get('/searchLead/:Product_Id/:Type/:Ss_Id/:Fba_Id/:Searched_By/:Searched_Value/:Page/:Mobile', function (req, res, next) {
    try {
        var ss_id = parseInt(req.params.Ss_Id);
        var Page = req.params.Page - 0;
        var Skip = 0;
        var Limit = 10;
        var Product_Id = req.params.Product_Id - 0;
        var Search_Key = req.params.Searched_By;
        var Search_Val = req.params.Searched_Value;
        var objRes = {
            'leads': null,
            'length': null,
            'status': null
        };
        var Condition = {};
        if (Search_Key === 'Prev_Policy_No') {
            Condition['previous_policy_number'] = Search_Val;
        } else if (Search_Key === 'Chassis_No') {
            Condition['chassis_number'] = Search_Val;
        } else if (Search_Key === 'Reg_No') {
            Condition['registration_no'] = Search_Val;
        } else if (Search_Key === 'Engine_No') {
            Condition['engine_number'] = Search_Val;
        } else {
            Condition['ss_id'] = ss_id;
        }
        Condition['ss_id'] = ss_id;
        var Lead = require('../models/leads');
        var pageCount = 0;
        Lead.find(Condition).count(function (e, count) {
            console.log("called lead model : ", count);
            pageCount = count;
        });
        if (Page > 1) {
            Skip = Limit * (Page - 1);
        }
        console.error('Page : ', Page, ', Skip : ', Skip, ', Limit : ', Limit, ', pageCount : ', pageCount);
        Lead.find(Condition).skip(Skip).limit(Limit).exec(function (er, dbLead) {
            try {
                if (!er) {
                    var arr_User_Data = [];
                    for (var k in dbLead) {
                        try {
                            var user = dbLead[k]._doc;
                            //var user = dbLead[k];
                            var objUD = {
                                'ss_id': user['ss_id'],
                                'lead_id': user['lead_id'],
                                'previous_policy_number': user['previous_policy_number'],
                                'prev_policy_start_date': user['prev_policy_start_date'],
                                'policy_expiry_date': user['policy_expiry_date'],
                                'engine_number': user['engine_number'],
                                'chassis_number': user['chassis_number'],
                                'Model_Name': user['Model_Name'],
                                'company_name': user['company_name'],
                                'Customer_Name': user['Customer_Name'],
                                'Customer_Address': user['Customer_Address'],
                                'mobile': user['mobile'],
                                'mobile2': user['mobile2'],
                                'vehicle_insurance_type': user['vehicle_insurance_type'],
                                'issued_by_username': user['issued_by_username'],
                                'PageCount': Math.round(pageCount / 10),
                                'registration_no': user['registration_no'],
                                'nil_dept': user['nil_dept'],
                                'rti': user['rti'],
                                'Make_Name': user['Make_Name'],
                                'Model_ID': user['Model_ID'],
                                'Model_Name': user['Model_Name'],
                                'Variant_Name': user['Variant_Name'],
                                'Vehicle_ID': user['Vehicle_ID'],
                                'Fuel_ID': user['Fuel_ID'],
                                'Fuel_Name': user['Fuel_Name'],
                                'RTO_City': user['RTO_City'],
                                'VehicleCity_Id': user['VehicleCity_Id'],
                                'VehicleCity_RTOCode': user['VehicleCity_RTOCode'],
                                'vehicle_registration_date': user['vehicle_registration_date'],
                                'vehicle_manf_date': user['vehicle_manf_date'],
                                'prev_insurer_id': user['prev_insurer_id'],
                                'vehicle_ncb_current': user['vehicle_ncb_current'],
                                'is_claim_exists': user['is_claim_exists']

                            };
                            arr_User_Data.push(objUD);
                        } catch (e) {
                            console.error('UDBG', e);
                        }
                    }
                    res.json(arr_User_Data);
                } else {
                    console.error('Exception', 'QuickListDBError', er);
                    res.send(er);
                }
            } catch (e1) {
                console.error('Exception', 'QuickList1', e1);
            }
        });
    } catch (ex) {
        objRes.status = ex;
        res.json(objRes);
    }
});
//  router.get('/disposition_status_get/:CRN', function (req, res, next) {
//        try {
//            var CRN = parseInt(req.params['CRN']);
//            var arr_User_Data = [];
////            var disposition_history = require('../models/disposition_history');
//            disposition.find({"PB_CRN": CRN}).sort({"Modified_On": -1}).exec(function (err, dbRequest) {
//                console.log(dbRequest);
//                var objResonse = {};
//
//                for (var i in dbRequest) {
//                    var dbRequest_data = dbRequest[i]["_doc"];
//                    var objResonse = {
//                        "Status": dbRequest_data["Status"],
//                        "SubStatus": dbRequest_data["SubStatus"],
//                        "Occured_On": dbRequest_data["Modified_On"]
//                    };
//                    arr_User_Data.push(objResonse);
//                }
//                res.json(arr_User_Data);
//            });
//
//        } catch (err) {
//            console.log(err);
//            res.json({'msg': 'error'});
//        }
//    });
//    router.get('/disposition_master_Statuslist', function (req, res, next) {
//        var disposition_master = require('../models/disposition_master');
//
//        try {
//            var objStatus =[];
//            var objSubStatus =[];
//           // var agg = [{"$group": {_id: "$Status_Id", "Status": {"$last": "$Status"}}}, {"$sort": {"Status_Id": 1}}];
//            var agg = [{$group: {_id: "$Status_Id", "Status": {"$first": "$Status"}, Substatuslist: {$push: {Sub_Status: "$Sub_Status", Sub_Status_Id: "$Sub_Status_Id"}}}},
//            {$sort: {'Status_Id': 1}}];
//            var objResponse = {};
//            disposition_master.aggregate(agg, function (err, dbData) {
//                if(err)
//                    throw(err);
//                for (var i in dbData) {
//                    // obj.push(dbCategory[i]['Category_Id'] + ':' + dbCategory[i]['Category']);
//                    objStatus.push({
//                        Status_Id: dbData[i]['_id'],
//                        Status: dbData[i]['Status']
//                    });
//                    for(var j in dbData[i]['Substatuslist']){
//                        objSubStatus.push({
//                        Status_Id: dbData[i]['_id'],
//                        Sub_Status: dbData[i]['Substatuslist'][j]['Sub_Status']
//                    });
//                    }
//
//                }
//                objResponse={"Status" :objStatus,"SubStatus" :objSubStatus } 
//                res.json(objResponse);
//            });
//
//        } catch (err) {
//            console.log(err);
//            res.json({'msg': 'error'});
//        }
//    });

//    router.get('/disposition_master_list/:Status_Id', function (req, res, next) {
//        var disposition_master = require('../models/disposition_master');
//        var Status_Id = parseInt(req.params['Status_Id']);
//        try {
//
//            disposition_master.find({"Status_Id": Status_Id}).exec(function (err, dbRequest) {
//                console.log(dbRequest);
//                res.json(dbRequest);
//            });
//
//        } catch (err) {
//            console.log(err);
//            res.json({'msg': 'error'});
//        }
//    });
router.post('/getProposalInsurer_Master', function (req, res) {
    try {
        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
            var objRequest = req.body;
            var SRN = objRequest.search_reference_number.split('_')[0];
            var dbCollLog = db.collection('service_logs');
            var cond_service_logs = {'Request_Unique_Id': SRN, 'Method_Type': 'Proposal'};
            dbCollLog.find(cond_service_logs).toArray(function (err, dbLogItems) {
                if (err) {
                    return console.dir(err);
                } else {
                    var obj = [];
                    //console.log(dbLogItems);
                    //res.json(dbLogItems);
                    for (var i in dbLogItems) {
                        obj.push(dbLogItems[i]['Insurer_Id']);
                    }
                    res.json(obj);
                }
            });
        });
    } catch (e) {
        console.error('ProposalInsurer_Master', 'Error', e);
    }
});
router.post('/save_log', function (req, res, next) {
    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
        req.body = JSON.parse(JSON.stringify(req.body));
        var colname = 'logs_dev';
        var myobj = {};
        myobj = {'Logs_Dev_Id': 0};
        if (req.query['env'] === 'Production') {
            colname = 'logs_live';
            myobj = {'Logs_Live_Id': 0};
        }
        if (req.query['env'] === 'QA') {
            colname = 'logs_qa';
            myobj = {'Logs_Qa_Id': 0};
        }
        var colLead = db.collection(colname);
        myobj['Type'] = req.query['type'];
        myobj['Detail'] = req.body;
        myobj['CreatedOn'] = new Date();
        var autoIncrement = require("mongodb-autoincrement");
        autoIncrement.getNextSequence(db, colname, function (err1, autoIndex) {
            var pk = Object.keys(myobj)[0];
            myobj[pk] = autoIndex;
            colLead.insertOne(myobj, function (err, resp) {
                if (err) {
                    res.json({'status': err});
                    throw err;
                }
                //console.log("1 document inserted");
                db.close();
                res.json({'status': 'SUCCESS', 'id': autoIndex});
            });
        });
    });
});
router.get('/erp_policy_summary', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_policy_pdf');

    if (req.query.hasOwnProperty('ERP_CS_LIST') && req.query['ERP_CS_LIST'] !== '') {
        let arr_erp_cs = req.query['ERP_CS_LIST'].split(',');
        let cond_ud = {
            'ERP_CS': {$in: arr_erp_cs}
        };
        User_Data.find(cond_ud).select(['User_Data_Id', 'PB_CRN', 'ERP_CS', 'Transaction_Data', 'Last_Status']).exec(function (err, dbUsers) {
            if (err) {
                res.send(err);
            }

            if (!err) {
                var arrPolicySummary = [];
                for (let k in dbUsers) {

                    let user = dbUsers[k]._doc;
                    let obj_policy = {
                        'ERP_CS': user['ERP_CS'],
                        'PB_CRN': user['PB_CRN'],
                        'Last_Status': user['Last_Status'],
                        'Policy_Status': 'PENDING',
                        'URL': 'NA'
                    };
                    try {
                        let policy_status = 'NA';
                        if (user.Transaction_Data && user.Transaction_Data.policy_url) {
                            let pdf_file_name = user.Transaction_Data.policy_url;
                            pdf_file_name = pdf_file_name.split('/');
                            pdf_file_name = pdf_file_name[pdf_file_name.length - 1];
                            let pdf_sys_loc = appRoot + "/tmp/pdf/" + pdf_file_name;
                            policy_status = 'EMPTY';
                            if (fs.existsSync(pdf_sys_loc) && pdf_sys_loc.indexOf('.pdf') > -1) {
                                let stats = fs.statSync(pdf_sys_loc);
                                let fileSizeInBytes = stats.size;
                                let fileSizeInKb = (fileSizeInBytes / 1024).toFixed(2);
                                if (fileSizeInKb > 10) {
                                    policy_status = 'VALID';
                                    obj_policy['URL'] = user.Transaction_Data.policy_url;
                                }
                            }
                        }
                        obj_policy['Policy_Status'] = policy_status;
                    } catch (e) {

                    }
                    arrPolicySummary.push(obj_policy);
                }
                var html_report = arrayobjectToHtml(arrPolicySummary);
                res.send(html_report);
            }
        });
    } else {
        res.send('EMPTY_CS_LIST');
    }
});
router.get('/process_already_closed', function (req, res) {
    var User_Data_Id = req.query['ud'] - 0;
    var Registration_Number = '';
    var obj_crn_summary = {
        'MODE': (req.query['debug'] === 'yes') ? 'DEBUG' : 'LIVE',
        'MAIN': {},
        'SAME_REG_PREMIUM_REQ': null,
        'SAME_REG_PROPOSAL_REQ': null,
        'ALL_UD': [],
        'ALL_CRN': []
    };
    if (User_Data_Id) {
        User_Data.findOne({'User_Data_Id': User_Data_Id, 'Last_Status': {$in: ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY']}}, function (err, dbUserData) {
            if (err) {

            } else {
                if (dbUserData) {
                    dbUserData = dbUserData._doc;
                    let Product_Id = dbUserData.Product_Id;
                    Registration_Number = dbUserData['Proposal_Request_Core']['registration_no'];
                    obj_crn_summary.MAIN['PB_CRN'] = dbUserData['PB_CRN'];
                    obj_crn_summary.MAIN['User_Data_Id'] = dbUserData['User_Data_Id'];
                    obj_crn_summary.MAIN['Registration_Number'] = Registration_Number;
                    obj_crn_summary.MAIN['Modified_On'] = dbUserData['Modified_On'];
                    obj_crn_summary.MAIN['Premium_Request'] = dbUserData['Premium_Request'];
                    obj_crn_summary.MAIN['Product_Id'] = dbUserData['Product_Id'];
                    if (dbUserData['PB_CRN'] > 0) {
                        obj_crn_summary['ALL_CRN'].push(dbUserData['PB_CRN']);
                        if ([1, 10, 12].indexOf(dbUserData['Product_Id']) > -1 && dbUserData['Premium_Request']['vehicle_insurance_type'] === 'renew' && Registration_Number.toString().toUpperCase().indexOf('AA-1234') === -1) {
                            var today = moment().utcOffset("+05:30").startOf('Day');
                            var T_MIN_1_MON = moment(today).add(-30, 'days').format("YYYY-MM-DD");
                            var today_str = moment(today).format("YYYY-MM-DD");
                            var arrFrom = T_MIN_1_MON.split('-');
                            var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
                            var arrTo = today_str.split('-');
                            var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
                            dateTo.setDate(dateTo.getDate() + 1);
                            User_Data.find({
                                'Product_Id': Product_Id,
                                'Modified_On': {"$gte": dateFrom, "$lte": dateTo},
                                "$or": [
                                    {'Proposal_Request_Core.registration_no': Registration_Number},
                                    {'Premium_Request.registration_no': Registration_Number}
                                ]
                            }).select('User_Data_Id PB_CRN Modified_On').exec(function (err, dbUserDatas) {
                                obj_crn_summary['SAME_REG_REQ'] = [];
                                if (dbUserDatas) {
                                    for (let j in dbUserDatas) {
                                        dbUserDatas[j] = dbUserDatas[j]._doc;
                                        let obj_data = {
                                            'User_Data_Id': dbUserDatas[j]['User_Data_Id'],
                                            'PB_CRN': dbUserDatas[j]['PB_CRN'],
                                            'Registration_Number': Registration_Number,
                                            'Modified_On': dbUserDatas[j]['Modified_On'].toLocaleString()
                                        };
                                        obj_crn_summary['SAME_REG_REQ'].push(obj_data);
                                        if (obj_data['PB_CRN'] > 0) {
                                            obj_crn_summary['ALL_CRN'].push(obj_data['PB_CRN']);
                                        }
                                        //obj_crn_summary['ALL'].push(obj_data['User_Data_Id']);
                                    }
                                }
                                process_already_closed(obj_crn_summary, res);
                            });
                        } else {
                            obj_crn_summary['SAME_REG_REQ'] = [];
                            process_already_closed(obj_crn_summary, res);
                        }
                    } else {
                        res.send('User_Data_Id::Zero_CRN');
                    }
                } else {
                    res.send('User_Data_Id::No_Data');
                }
            }
        });
    } else {
        res.send('User_Data_Id::Empty');
    }
});
function ArrayUnique(arr) {
    var filteredArray = arr.filter(function (item, pos) {
        return arr.indexOf(item) == pos;
    });
    return filteredArray;
}
function process_already_closed(obj_crn_summary, res) {
    if (obj_crn_summary['SAME_REG_REQ'] !== null) {
        if (obj_crn_summary['ALL_CRN'].length > 0) {
            obj_crn_summary['ALL_CRN'] = ArrayUnique(obj_crn_summary['ALL_CRN']);
            User_Data.find({
                'PB_CRN': {$in: obj_crn_summary['ALL_CRN']},
                'User_Data_Id': {$ne: obj_crn_summary['MAIN']['User_Data_Id']},
                'Last_Status': {$ne: 'ALREADY_CLOSED'}
            }).exec(function (err, dbUserDatas) {
                var Link = require('../models/link');
                let Obj_Link_Self = {
                    'Status': 'SALE',
                    'Modified_On': obj_crn_summary['MAIN']['Modified_On']
                };
                Link.update({
                    'User_Data_Id': obj_crn_summary['MAIN']['User_Data_Id']
                }, {$set: Obj_Link_Self}, {multi: true}, function (err, numAffected) {

                });
                var Proposal = require('../models/proposal');
                let Obj_Proposal_Self = {
                    'Status': 'SALE',
                    'Modified_On': obj_crn_summary['MAIN']['Modified_On']
                };
                Proposal.update({
                    'User_Data_Id': obj_crn_summary['MAIN']['User_Data_Id']
                }, {$set: Obj_Proposal_Self}, {multi: true}, function (err, numAffected) {

                });
                if (dbUserDatas) {
                    let arr_crn_closed = [];
                    for (let j in dbUserDatas) {
                        dbUserDatas[j] = dbUserDatas[j]._doc;
                        let obj_data = {
                            'User_Data_Id': dbUserDatas[j]['User_Data_Id'],
                            'PB_CRN': dbUserDatas[j]['PB_CRN'],
                            'Modified_On': dbUserDatas[j]['Modified_On'].toLocaleString()
                        };
                        arr_crn_closed.push(obj_data);
                        obj_crn_summary['ALL_UD'].push(obj_data['User_Data_Id'] - 0);
                    }
                    if (obj_crn_summary['MODE'] === 'LIVE' && obj_crn_summary['ALL_UD'].length > 0) {
                        let Obj_Other_Transaction = {
                            'Last_Status': 'ALREADY_CLOSED',
                            //'Modified_On': obj_crn_summary['MAIN']['Modified_On'],
                            'Disposition_Status': 'ALREADY_CLOSED',
                            'Disposition_SubStatus': 'CLOSED_BY_OTHER_TRANSACTION',
                            'Disposition_Modified_On': new Date()
                        };
                        User_Data.update({
                            'User_Data_Id': {$in: obj_crn_summary['ALL_UD']}
                        }, {$set: Obj_Other_Transaction}, {multi: true}, function (err, numAffected) {

                        });
                        let Obj_Link_Other = {
                            'Status': 'CLOSED'
                                    //'Modified_On': obj_crn_summary['MAIN']['Modified_On']
                        };
                        Link.update({
                            'User_Data_Id': {$in: obj_crn_summary['ALL_UD']}
                        }, {$set: Obj_Link_Other}, {multi: true}, function (err, numAffected) {

                        });
                        let Obj_Proposal_Other = {
                            'Status': 'CLOSED'
                                    //'Modified_On': obj_crn_summary['MAIN']['Modified_On']
                        };
                        Proposal.update({
                            'User_Data_Id': {$in: obj_crn_summary['ALL_UD']}
                        }, {$set: Obj_Proposal_Other}, {multi: true}, function (err, numAffected) {

                        });
                        //leads renewal
                        if ([1, 10, 12].indexOf(obj_crn_summary['MAIN']['Product_Id']) > -1 && obj_crn_summary['MAIN']["Registration_Number"] !== null && obj_crn_summary['MAIN']["Registration_Number"].indexOf('-') > -1) {
                            let arr_veh_num = obj_crn_summary['MAIN']["Registration_Number"].split('-');
                            let last_forth_veh_num = arr_veh_num[3];
                            if (last_forth_veh_num !== '') {
                                var Leads = require('../models/leads');
                                let Obj_Lead_Self = {
                                    'lead_status': 'SALE',
                                    'Modified_On': obj_crn_summary['MAIN']['Modified_On']
                                };
                                Leads.update({
                                    'registration_no': obj_crn_summary['MAIN']["Registration_Number"]
                                }, {$set: Obj_Lead_Self}, {multi: true}, function (err, numAffected) {
                                    console.error('DEBUG', 'ALREADY_CLOSED_LEAD_CLOSE', obj_crn_summary['MAIN']['PB_CRN'], obj_crn_summary['MAIN']["Registration_Number"], err, numAffected);
                                });
                            }
                        }
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        var sub = '';
                        if (obj_crn_summary['MAIN']['Premium_Request']['ss_id'] > 0) {
                            sub = const_email_env_sub + '[CRN:' + obj_crn_summary['MAIN']['PB_CRN'] + '] POSP_TRANSACTION_CLOSED_PROCESS';
                            let arr_to = [];
                            let arr_cc = [];
                            if (obj_crn_summary['MAIN']['Premium_Request'].hasOwnProperty('posp_email_id') && obj_crn_summary['MAIN']['Premium_Request']['posp_email_id'] != null && obj_crn_summary['MAIN']['Premium_Request']['posp_email_id'].toString().indexOf('@') > -1) {
                                arr_to.push(obj_crn_summary['MAIN']['Premium_Request']['posp_email_id']);
                            }
                            if (obj_crn_summary['MAIN']['Premium_Request'].hasOwnProperty('posp_reporting_email_id') && obj_crn_summary['MAIN']['Premium_Request']['posp_reporting_email_id'] != null && obj_crn_summary['MAIN']['Premium_Request']['posp_reporting_email_id'].toString().indexOf('@') > -1) {
                                arr_cc.push(obj_crn_summary['MAIN']['Premium_Request']['posp_reporting_email_id']);
                            }
                            let Title = 'Already Closed Report(#' + arr_crn_closed.length + ')';
                            let msg_agent = '<html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><style>*, html, body{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style></head><body><h1><u>CRN_CLOSED_PROCESS</u></h1>CRN : ' + obj_crn_summary['MAIN']['PB_CRN'] + (([1, 10, 12].indexOf(obj_crn_summary['MAIN']['Product_Id']) > -1) ? '<br>Registration Number : ' + obj_crn_summary['MAIN']['Registration_Number'] : '') + '<br><br>Transaction is completed as SALE.<br>Hence, Following other transactions are auto disposed as "ALREADY_CLOSED", because these were created using same CRN or Registration Number.' + arrayobjectToHtml(arr_crn_closed, Title) + '</body></html>';
                            //objModelEmail.send('notifications@policyboss.com', arr_to.join(','), sub, msg_agent, arr_cc.join(','), config.environment.notification_email, obj_crn_summary['MAIN']['PB_CRN']);
                        }
                        delete obj_crn_summary['MAIN']['Premium_Request'];
                        var msg = '<html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><style>*, html, body{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style></head><body><h1>CRN_CLOSED_PROCESS</h1>CRN : ' + obj_crn_summary['MAIN']['PB_CRN'] + (([1, 10, 12].indexOf(obj_crn_summary['MAIN']['Product_Id']) > -1) ? '<br>Registration Number : ' + obj_crn_summary['MAIN']['Registration_Number'] : '') + '<br><br>Transaction is completed as SALE.<br>Hence, Following other transactions are auto disposed as "ALREADY_CLOSED", because these were created using same CRN or Registration Number.<pre>' + JSON.stringify(obj_crn_summary, undefined, 2) + '</pre></body></html>';
                        sub = '[PROCESS] DUPLICATE_CRN_CLOSED for CRN : ' + obj_crn_summary['MAIN']['PB_CRN'];
                        //objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, msg, '', '', obj_crn_summary['MAIN']['PB_CRN']);
                    }
                }
                res.send('<pre>' + JSON.stringify(obj_crn_summary, undefined, 2) + '</pre>');
            });
        } else {
            res.send('<pre>' + JSON.stringify(obj_crn_summary, undefined, 2) + '</pre>');
        }

    }
}
router.get('/link_followup/list', function (req, res) {
    try {
        let followup_freq = (req.query.hasOwnProperty('followup_freq')) ? req.query['followup_freq'] - 0 : 7;
        let channel = (req.query.hasOwnProperty('channel')) ? req.query['channel'] : 'ALL';
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
        //var followup_t_min_7 = moment(today).add(-7, 'days').format("YYYY-MM-DD");
        var followup_t_min_3 = moment(today).add(-3, 'days').format("YYYY-MM-DD");
        //var followup_t_today = moment(today).format("YYYY-MM-D");
        //var followup_t_plus_1 = moment(today).add(1, 'days').format("YYYY-MM-DD");
        //var followup_t_plus_2 = moment(today).add(2, 'days').format("YYYY-MM-DD");
        var followup_t_plus_30 = moment(today).add(30, 'days').format("YYYY-MM-DD");
        var followup_t_plus_45 = moment(today).add(45, 'days').format("YYYY-MM-DD");
        let Condi_Link = {
            'Status': 'LINK',
            'Premium_Request.policy_expiry_date': {$gte: followup_t_min_3, $lte: followup_t_plus_30}
        };
        if (channel != 'ALL' && channel != '') {
            Condi_Link['Premium_Request.channel'] = channel;
        }
        console.error('Followup', Condi_Link);
        let obj_link_schema = {
            //'Already_Expired_Last_3_to_7_Days': -4,
            'Already_Expired_within_3_Days': -1,
            'Expiring_Today': 0,
            'Expiring_in_within_3_Days': 3,
            'Expiring_in_Next_3_to_7_Days': 7,
            'Expiring_in_Next_7_to_15_Days': 15,
            'Expiring_in_Beyond_15_Days': 60
        };
        var Link = require('../models/link');
        Link.find(Condi_Link).sort({'Modified_On': -1}).select().limit().exec(function (err, dbLinks) {
            try {
                let obj_summary = {
                    'summary': {
                        'Already_Expired_within_3_Days': {'slab': 'Already_Expired_within_3_Days', 'count': 0, 'premium': 0},
                        'Expiring_Today': {'slab': 'Expiring_Today', 'count': 0, 'premium': 0},
                        'Expiring_in_within_3_Days': {'slab': 'Expiring_in_within_3_Days', 'count': 0, 'premium': 0},
                        'Expiring_in_Next_3_to_7_Days': {'slab': 'Expiring_in_Next_3_to_7_Days', 'count': 0, 'premium': 0},
                        'Expiring_in_Next_7_to_15_Days': {'slab': 'Expiring_in_Next_7_to_15_Days', 'count': 0, 'premium': 0},
                        'Expiring_in_Beyond_15_Days': {'slab': 'Expiring_in_Beyond_15_Days', 'count': 0, 'premium': 0},
                        'ALL': {'slab': 'ALL', 'count': 0, 'premium': 0}
                    },
                    'list': [],
                    'rm': {},
                    'posp': {}
                };
                for (let k in dbLinks) {
                    let obj_link = dbLinks[k]._doc;
                    try {
                        let Policy_Expiry_Date = moment(obj_link['Premium_Request']['policy_expiry_date']).utcOffset("+05:30").startOf('Day');
                        let days_diff = Policy_Expiry_Date.diff(today, 'days');
                        days_diff = days_diff - 0;
                        //console.error('Followup', 'step-1', days_diff);
                        let follow_slab = 'Pending';
                        for (let j in obj_link_schema) {
                            if (days_diff <= obj_link_schema[j]) {
                                follow_slab = j;
                                break;
                            }
                        }
                        obj_summary['summary'][follow_slab]['count']++;
                        obj_summary['summary']['ALL']['count']++;
                        obj_summary['summary'][follow_slab]['premium'] += obj_link['Payment_Request']['final_premium'] - 0;
                        obj_summary['summary']['ALL']['premium'] += obj_link['Payment_Request']['final_premium'] - 0;
                        let posp_name = obj_link['Premium_Request']['posp_first_name'] + ' ' + obj_link['Premium_Request']['posp_last_name'];
                        let posp_email = obj_link['Premium_Request']['posp_email_id'];
                        let rm_uid = obj_link['Premium_Request']['posp_reporting_agent_uid'];
                        let posp_key = obj_link['Premium_Request']['ss_id'] + '_' + obj_link['Premium_Request']['fba_id'];
                        let rm_name = obj_link['Premium_Request']['posp_reporting_agent_name'];
                        let rm_email = obj_link['Premium_Request']['posp_reporting_email_id'];
                        let rm_mobile = obj_link['Premium_Request']['posp_reporting_mobile_number'];
                        if (obj_link['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && obj_link['Premium_Request']['posp_reporting_agent_uid'] > 0) {
                            rm_uid = obj_link['Premium_Request']['posp_reporting_agent_uid_core'];
                            rm_name = obj_link['Premium_Request']['posp_reporting_agent_name_core'];
                        }
                        let obj_followup = {
                            'Followup_Slab': follow_slab,
                            "Product": obj_link['Payment_Request']['product_name'],
                            "Source": obj_link['Premium_Request']['channel'] + '-' + obj_link['Premium_Request']['subchannel'],
                            "Premium": obj_link['Payment_Request']['final_premium'] - 0,
                            "PB_CRN": obj_link['PB_CRN'],
                            "User_Data_Id": obj_link['User_Data_Id'],
                            "Customer": obj_link['Premium_Request']['contact_name'] + ' ' + obj_link['Premium_Request']['last_name'],
                            "Search_On": obj_link['Created_On'].toLocaleString(),
                            "Policy_Expiry_Date": obj_link['Premium_Request']['policy_expiry_date'],
                            "Days_Diff": days_diff,
                            "Insurer": obj_link['Payment_Request']['insurer_name'],
                            "Posp": posp_name,
                            "FbaId": obj_link['Premium_Request']['fba_id'],
                            "SSId": obj_link['Premium_Request']['ss_id'],
                            "Reporting": rm_name,
                            "ReportingUID": rm_uid,
                            "ReportingEmail": rm_email,
                            "ReportingMobile": rm_mobile
                        };
                        obj_summary['list'].push(obj_followup);
                        if (req.query.hasOwnProperty('emailtorm') && req.query['emailtorm'] === 'yes') {
                            if (rm_uid !== null && rm_email && rm_uid > 0 && rm_email.indexOf('@') > -1 && rm_email.indexOf('.UID@policyboss.com') === -1) {
                                let rm_key = rm_uid + '___' + rm_email;
                                if (obj_summary['rm'].hasOwnProperty(rm_key) === false) {
                                    obj_summary['rm'][rm_key] = {
                                        'details': {
                                            "Reporting": rm_name,
                                            "ReportingUID": rm_uid,
                                            "ReportingEmail": rm_email,
                                            "ReportingMobile": rm_mobile
                                        },
                                        'summary': {
                                            'Already_Expired_within_3_Days': {'slab': 'Already_Expired_within_3_Days', 'count': 0, 'premium': 0},
                                            'Expiring_Today': {'slab': 'Expiring_Today', 'count': 0, 'premium': 0},
                                            'Expiring_in_within_3_Days': {'slab': 'Expiring_in_within_3_Days', 'count': 0, 'premium': 0},
                                            'Expiring_in_Next_3_to_7_Days': {'slab': 'Expiring_in_Next_3_to_7_Days', 'count': 0, 'premium': 0},
                                            'Expiring_in_Next_7_to_15_Days': {'slab': 'Expiring_in_Next_7_to_15_Days', 'count': 0, 'premium': 0},
                                            'Expiring_in_Beyond_15_Days': {'slab': 'Expiring_in_Beyond_15_Days', 'count': 0, 'premium': 0},
                                            'ALL': {'slab': 'ALL', 'count': 0, 'premium': 0}
                                        },
                                        'list': []
                                    };
                                }
                                obj_summary['rm'][rm_key]['summary'][follow_slab]['count']++;
                                obj_summary['rm'][rm_key]['summary']['ALL']['count']++;
                                obj_summary['rm'][rm_key]['summary'][follow_slab]['premium'] += obj_link['Payment_Request']['final_premium'] - 0;
                                obj_summary['rm'][rm_key]['summary']['ALL']['premium'] += obj_link['Payment_Request']['final_premium'] - 0;
                                let obj_followup_rm = {};
                                for (let i in obj_followup) {
                                    if (['Reporting', 'ReportingUID', 'ReportingEmail', 'ReportingMobile'].indexOf(i) < 0) {
                                        obj_followup_rm[i] = obj_followup[i];
                                    }
                                }
                                obj_summary['rm'][rm_key]['list'].push(obj_followup_rm);
                            }
                        }
                        if (req.query.hasOwnProperty('emailtoposp') && req.query['emailtoposp'] === 'yes') {
                            if (posp_key !== null && posp_email && posp_email.indexOf('@') > -1) {
                                if (obj_summary['posp'].hasOwnProperty(posp_key) === false) {
                                    obj_summary['posp'][posp_key] = {
                                        'posp_details': {
                                            "Name": posp_name,
                                            "FbaId": obj_link['Premium_Request']['fba_id'],
                                            "SSId": obj_link['Premium_Request']['ss_id'],
                                            "Email_Id": posp_email
                                        },
                                        'rm_details': {
                                            "Reporting": rm_name,
                                            "ReportingUID": rm_uid,
                                            "ReportingEmail": rm_email,
                                            "ReportingMobile": rm_mobile
                                        },
                                        'summary': {
                                            'Already_Expired_within_3_Days': {'slab': 'Already_Expired_within_3_Days', 'count': 0, 'premium': 0},
                                            'Expiring_Today': {'slab': 'Expiring_Today', 'count': 0, 'premium': 0},
                                            'Expiring_in_within_3_Days': {'slab': 'Expiring_in_within_3_Days', 'count': 0, 'premium': 0},
                                            'Expiring_in_Next_3_to_7_Days': {'slab': 'Expiring_in_Next_3_to_7_Days', 'count': 0, 'premium': 0},
                                            'Expiring_in_Next_7_to_15_Days': {'slab': 'Expiring_in_Next_7_to_15_Days', 'count': 0, 'premium': 0},
                                            'Expiring_in_Beyond_15_Days': {'slab': 'Expiring_in_Beyond_15_Days', 'count': 0, 'premium': 0},
                                            'ALL': {'slab': 'ALL', 'count': 0, 'premium': 0}
                                        },
                                        'list': []
                                    };
                                }
                                obj_summary['posp'][posp_key]['summary'][follow_slab]['count']++;
                                obj_summary['posp'][posp_key]['summary']['ALL']['count']++;
                                obj_summary['posp'][posp_key]['summary'][follow_slab]['premium'] += obj_link['Payment_Request']['final_premium'] - 0;
                                obj_summary['posp'][posp_key]['summary']['ALL']['premium'] += obj_link['Payment_Request']['final_premium'] - 0;
                                let obj_followup_rm = {};
                                for (let i in obj_followup) {
                                    if (['Posp', 'FbaId', 'SSId', 'Reporting', 'ReportingUID', 'ReportingEmail', 'ReportingMobile'].indexOf(i) < 0) {
                                        obj_followup_rm[i] = obj_followup[i];
                                    }
                                }
                                obj_summary['posp'][posp_key]['list'].push(obj_followup_rm);
                            }
                        }
                    } catch (e) {
                        console.error('Exception', 'link_followup-list_error', 'after-db', obj_link.User_Data_Id, e);
                        var objErr = {
                            'Data': obj_link,
                            'Error': e.stack
                        };
                        res.json(objErr);
                    }
                }

                obj_summary['list'].sort((a, b) => (a.Days_Diff > b.Days_Diff) ? 1 : -1);
                var subject = '';
                if (req.query.hasOwnProperty('email') && req.query['email'] === 'no' && req.query['dbg'] === 'yes') {

                } else {
                    if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                        var res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        res_report += '<p><h1>HORIZON PAYMENT LINK FOLLOWUP REPORT :: ' + today_str + '</h1></p>';
                        res_report += '<p><h1>Summary</h1>' + arrayobjectToHtml(obj_summary['summary']) + '</p>';
                        res_report += '<p><h1>List</h1>';
                        if (true) {
                            let reporttitle = channel + '-PENDING_PAYMENT_LINK-' + today_str;
                            var ObjectsToCsv = require('objects-to-csv');
                            let csv = new ObjectsToCsv(obj_summary['list']);
                            // Save to file:
                            let csv_file = appRoot + "/tmp/report/" + reporttitle + ".csv";
                            csv.toDisk(csv_file);
                            let file_weburl = config.environment.downloadurl + "/report/" + reporttitle + ".csv";
                            res_report += '<a href="' + file_weburl + '" target="_BLANK">' + file_weburl + '</a>';
                        }
                        res_report += '</p>';
                        res_report += '</body></html>';
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        subject = '[HORIZON][' + channel + '] PENDING_PAYMENT_LINK :: ' + today_str;
                        if (req.query['dbg'] === 'yes') {
                            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, subject, res_report, '', '');
                        } else {
                            if (channel === 'ALL') {
                                objModelEmail.send('notifications@policyboss.com', 'susheeltejuja@landmarkinsurance.in,apaar.kasliwal@landmarkinsurance.in,chirag.modi@policyboss.com,varun.kaushik@policyboss.com', subject, res_report, '', config.environment.notification_email);
                            }
                            if (channel === 'DC') {
                                objModelEmail.send('notifications@policyboss.com', 'srinivas@policyboss.com,ashutosh.sharma@magicfinmart.com,coordinator@magicfinmart.com', subject, res_report, '', config.environment.notification_email);
                            }
                            if (channel === 'SM') {
                                objModelEmail.send('notifications@policyboss.com', 'susheel.menon@landmarkinsurance.in', subject, res_report, '', config.environment.notification_email);
                            }
                            if (channel === 'GS') {
                                var arr_to = [
                                    'gagandeep.singh@policyboss.com',
                                    'saroj.singh@policyboss.com',
                                    'shabana.gaus@policyboss.com',
                                    'satbir.singh@policyboss.com',
                                    'rajneesh.kumar@policyboss.com',
                                    'kalpesh.chauhan@policyboss.com',
                                    'Ganesh.venkataraman@policyboss.com',
                                    'balveer.gupt@policyboss.com',
                                    'Kaustubh.Shandilya@policyboss.com',
                                    'vishal.gaur@policyboss.com',
                                    'vikas.chauhan@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, res_report, '', config.environment.notification_email);
                            }
                            if (channel === 'EM') {
                                var arr_to = [
                                    'kevin.menezes@policyboss.com',
                                    'manju.gonda@policyboss.com',
                                    'mandeep.singh@policyboss.com'
                                ];
                                objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject, res_report, '', config.environment.notification_email);
                            }
                        }
                    }
                    if (req.query.hasOwnProperty('emailtorm') && req.query['emailtorm'] === 'yes') {
                        subject = '[HORIZON][' + channel + '] RM_PENDING_PAYMENT_LINK :: ' + today_str;
                        for (let i in obj_summary['rm']) {
                            let rm_email = obj_summary['rm'][i]['details']['ReportingEmail'];
                            obj_summary['rm'][i]['list'].sort((a, b) => (a.Days_Diff > b.Days_Diff) ? 1 : -1);
                            let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            res_report += '<p><h1>HORIZON PAYMENT LINK FOLLOWUP REPORT :: ' + today_str + '</h1></p>';
                            res_report += '<p><h1>Details</h1>' + objectToHtml(obj_summary['rm'][i]['details']) + '</p>';
                            res_report += '<p><h1>Summary</h1>' + arrayobjectToHtml(obj_summary['rm'][i]['summary']) + '</p>';
                            res_report += '<p><h1>List</h1>';
                            res_report += arrayobjectToHtml(obj_summary['rm'][i]['list']);
                            res_report += '</p>';
                            res_report += '</body></html>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            subject = '[REPORT][UID-' + obj_summary['rm'][i]['details']['ReportingUID'] + '][' + channel + '] RM_PENDING_PAYMENT_LINK :: ' + today_str;
                            objModelEmail.send('notifications@policyboss.com', rm_email, subject, res_report, config.environment.notification_email, '');
                        }
                    }
                    if (req.query.hasOwnProperty('emailtoposp') && req.query['emailtoposp'] === 'yes') {
                        for (let i in obj_summary['posp']) {
                            let rm_email = obj_summary['posp'][i]['rm_details']['ReportingEmail'];
                            let posp_email = obj_summary['posp'][i]['posp_details']['Email_Id'];
                            obj_summary['posp'][i]['list'].sort((a, b) => (a.Days_Diff > b.Days_Diff) ? 1 : -1);
                            let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            res_report += '<p><h1>HORIZON PAYMENT LINK FOLLOWUP REPORT :: ' + today_str + '</h1></p>';
                            res_report += '<p><h1>Posp Details</h1>' + objectToHtml(obj_summary['posp'][i]['posp_details']) + '</p>';
                            res_report += '<p><h1>RM Details</h1>' + objectToHtml(obj_summary['posp'][i]['rm_details']) + '</p>';
                            res_report += '<p>' + arrayobjectToHtml(obj_summary['posp'][i]['summary'], 'Pending Payment Link Summary') + '</p>';
                            res_report += '<p>' + arrayobjectToHtml(obj_summary['posp'][i]['list'], 'Pending Payment Link List') + '</p>';
                            res_report += '</body></html>';
                            var Email = require('../models/email');
                            var objModelEmail = new Email();
                            subject = '[REPORT][SSID-' + obj_summary['posp'][i]['posp_details']['SSId'] + ',FBAID-' + obj_summary['posp'][i]['posp_details']['FbaId'] + '][' + channel + '] POSP_PENDING_PAYMENT_LINK :: ' + today_str;
                            objModelEmail.send('notifications@policyboss.com', posp_email, subject, res_report, '', config.environment.notification_email, '');
                        }
                    }
                }
                res.send('<pre>' + JSON.stringify(obj_summary, undefined, 2) + '</pre>');
            } catch (e) {
                console.error('Exception', 'link_followup-list', 'after-db', e);
                res.send(e.stack);
            }
        });
    } catch (e) {
        console.error('Exception', 'link_followup-list', e);
        res.send(e.stack);
    }
});
router.get('/link_followup/customer', function (req, res) {
    try {
        let followup_freq = (req.query.hasOwnProperty('followup_freq')) ? req.query['followup_freq'] - 0 : 7;
        let channel = (req.query.hasOwnProperty('channel')) ? req.query['channel'] : 'ALL';
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
        let Condi_Link = {
            'Status': 'LINK'
        };
        if (channel != 'ALL' && channel != '') {
            Condi_Link['Premium_Request.channel'] = channel;
        }
        let obj_link_schema = {
            'Expired_Yesterday': -1,
            'Expiring_Today': 0,
            'Expiring_on_3_Days': 3,
            'Expiring_on_7_Days': 7,
            'Expiring_on_15_Days': 15,
            'Expiring_on_30_Days': 30
        };
        let arr_expiry_range = [];
        for (let k in obj_link_schema) {
            arr_expiry_range.push(moment(today).add(obj_link_schema[k], 'days').format("YYYY-MM-DD"));
        }
        Condi_Link['Expiry_Date'] = {$in: arr_expiry_range};
        var Link = require('../models/link');
        Link.find(Condi_Link).sort({'Modified_On': -1}).select().limit().exec(function (err, dbLinks) {
            try {
                let obj_summary = {
                    'condition': Condi_Link,
                    'summary': {
                        'Expired_Yesterday': {'slab': 'Expired_Yesterday', 'count': 0},
                        'Expiring_Today': {'slab': 'Expiring_Today', 'count': 0},
                        'Expiring_on_3_Days': {'slab': 'Expiring_on_3_Days', 'count': 0},
                        'Expiring_on_7_Days': {'slab': 'Expiring_on_7_Days', 'count': 0},
                        'Expiring_on_15_Days': {'slab': 'Expiring_on_15_Days', 'count': 0},
                        'Expiring_on_30_Days': {'slab': 'Expiring_on_30_Days', 'count': 0},
                        'ALL': {'slab': 'ALL', 'count': 0}
                    },
                    'list': []
                };
                var Client = require('node-rest-client').Client;
                var client = new Client();
                for (let k in dbLinks) {
                    let obj_link = dbLinks[k]._doc;
                    try {
                        let Policy_Expiry_Date = moment(obj_link['Premium_Request']['policy_expiry_date']).utcOffset("+05:30").startOf('Day');
                        let days_diff = Policy_Expiry_Date.diff(today, 'days');
                        days_diff = days_diff - 0;
                        let follow_slab = 'Pending';
                        for (let j in obj_link_schema) {
                            if (days_diff === obj_link_schema[j]) {
                                follow_slab = j;
                                break;
                            }
                        }
                        obj_summary['summary'][follow_slab]['count']++;
                        obj_summary['summary']['ALL']['count']++;
                        let obj_followup = {
                            'Followup_Slab': follow_slab,
                            "Product": obj_link['Payment_Request']['product_name'],
                            "Source": obj_link['Premium_Request']['channel'] + '-' + obj_link['Premium_Request']['subchannel'],
                            "Premium": obj_link['Payment_Request']['final_premium'] - 0,
                            "PB_CRN": obj_link['PB_CRN'],
                            "User_Data_Id": obj_link['User_Data_Id'],
                            "Search_On": obj_link['Created_On'].toLocaleString(),
                            "Policy_Expiry_Date": obj_link['Premium_Request']['policy_expiry_date'],
                            "Reminder": obj_link['Reminder']
                        };
                        obj_summary['list'].push(obj_followup);
                        if (req.query['emailtocustomer'] === 'yes') {
                            obj_link['Payment_Request']['link_id'] = obj_link['Link_Id'];
                            var args = {
                                data: obj_link['Payment_Request'],
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            };
                            client.post(config.environment.weburl + '/quote/send_payment_link', args, function (data, response) {});
                        }
                    } catch (e) {
                        console.error('Exception', 'link_followup-list_error', 'after-db', obj_link.User_Data_Id, e);
                        var objErr = {
                            'Data': obj_link,
                            'Error': e.stack
                        };
                        res.json(objErr);
                    }
                }
                obj_summary['list'].sort((a, b) => (a.Days_Diff > b.Days_Diff) ? 1 : -1);
                var subject = '';
                if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                    var res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    res_report += '<p><h1>HORIZON PAYMENT LINK FOLLOWUP REPORT :: ' + today_str + '</h1></p>';
                    res_report += '<p><h1>Summary</h1>' + arrayobjectToHtml(obj_summary['summary']) + '</p>';
                    res_report += '<p><h1>List</h1>';
                    if (true) {
                        let reporttitle = channel + '-CUSTOMER_FOLLOWUP-PENDING_PAYMENT_LINK-' + today_str;
                        var ObjectsToCsv = require('objects-to-csv');
                        let csv = new ObjectsToCsv(obj_summary['list']);
                        // Save to file:
                        let csv_file = appRoot + "/tmp/report/" + reporttitle + ".csv";
                        csv.toDisk(csv_file);
                        let file_weburl = config.environment.downloadurl + "/report/" + reporttitle + ".csv";
                        res_report += '<a href="' + file_weburl + '" target="_BLANK">' + file_weburl + '</a>';
                    }
                    res_report += '</p>';
                    res_report += '</body></html>';
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    subject = '[HORIZON][' + channel + '] CUSTOMER_FOLLOWUP :: PENDING_PAYMENT_LINK :: ' + today_str;
                    if (req.query['dbg'] === 'yes') {
                        objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, subject, res_report, '', '');
                    } else {
                        objModelEmail.send('notifications@policyboss.com', 'chirag.modi@policyboss.com,varun.kaushik@policyboss.com', subject, res_report, '', config.environment.notification_email);
                    }
                }
                res.send('<pre>' + JSON.stringify(obj_summary, undefined, 2) + '</pre>');
            } catch (e) {
                console.error('Exception', 'link_followup-customer', 'after-db', e);
                res.send(e.stack);
            }
        });
    } catch (e) {
        console.error('Exception', 'link_followup-customer', e.stack);
        res.send(e.stack);
    }
});
router.post('/upload_doc', function (req, res, next) {
    try {


        var formidable = require('formidable');
        var form = new formidable.IncomingForm();
        var fs = require('fs');
        form.parse(req, function (err, fields, files) {

            console.log('multer');
            var upload = multer({storage: storage}).single('DocFile')
            upload(req, res, function (err) {
                var Ticket_Id = fields['Ticket_Id'];
                var DocName = fields['DocName'];
                var filename = files.DocFile.name;
                console.log("---------" + filename);
                var destination = store_path + "/" + Ticket_Id + "/" + filename;
                var source = store_path + "/" + Ticket_Id + "/" + filename;
                //make a folder with fbaid in current folder and move file with new name as docType
                move(source, Ticket_Id, DocName, function (err) {
                    //console.log("-------------------------------moved")
                    if (err) {
                        console.log(err);
                        res.json("Upload failed", null, res);
                    } else
                    {
                        var extension = source.split(".");
                        console.log("***********" + DocName);
                        newFilePath = appRoot + "/tmp/ticketing/" + Ticket_Id + "/" + DocName + "." + extension[extension.length - 1];
                        console.log(newFilePath);
                        res.json("Success", newFilePath, res);
                    }
                });
            });
        });
    } catch (err) {
        console.log(err);
        res.json({'Status': 'error'});
    }
});
var store_path = appRoot + "/tmp/ticketing/";
function move(oldPath, ticketid, newname, cb) {


    var store_path = appRoot + "/tmp/ticketing/";
    ensureExists(store_path + "/" + ticketid, 0777, function (err) {
        if (err) // handle folder creation error
            cb(err);
        else // we're all good
        {
            getNewName(oldPath, newname, ticketid, function (newFilePath) {
                fs.rename(oldPath, newFilePath, (err) => {
                    if (err)
                        cb(err);
                    //console.log('Rename complete!');
                    cb();
                });
            });
        }
    });
}
;
function ensureExists(path, mask, cb) {
    if (typeof mask == 'function') { // allow the `mask` parameter to be optional
        cb = mask;
        mask = 0777;
    }
    fs.mkdir(path, mask, function (err) {
        if (err) {
            if (err.code == 'EEXIST')
                cb(null); // ignore the error if the folder already exists
            else
                cb(err); // something else went wrong
        } else
            cb(null); // successfully created folder
    });
}
function getNewName(oldPath, newname, fbaid, cb) {
    var extension = oldPath.split(".");
    filename = newname + '.' + extension[extension.length - 1];
    newFilePath = store_path + "/" + fbaid + "/" + filename;
    cb(newFilePath);
}
function getSortedData(data, prop, isAsc) {
    return data.sort((a, b) => {
        return (a[prop] < b[prop] ? -1 : 1) * (isAsc ? 1 : -1)
    });
}
router.get('/bulk_log', function (req, res) {
    let StartDate = moment(req.query['datestart']).utcOffset("+05:30").startOf('Day');
    let NoofDays = req.query['noofdays'] - 0;
    let arr_url = [];
    for (let k = 0; k < NoofDays; k++) {
        let start = moment(StartDate).add(k, 'days').format("YYYY-MM-DD");
        var Client = require('node-rest-client').Client;
        var client = new Client();
        let durl = 'http://horizon.policyboss.com:5000/report/daily_real?datefrom=' + start + '&dateto=' + start + '&ss_id=7582&session_id=' + req.query['session_id'] + '&uid=107602&page_action=' + req.query['page_action'] + '&channel=' + req.query['channel'];
        if (req.query['dbg'] == 'yes') {

        } else {
            client.get(durl);
        }
        arr_url.push(durl);
    }
    res.json(arr_url);
});
router.get('/erp_region/list', function (req, res) {
    var cache_key = 'live_erp_region_list';
    if (fs.existsSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log")) {
        var cache_content = fs.readFileSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log").toString();
        var obj_cache_content = JSON.parse(cache_content);
        res.json(obj_cache_content);
    } else {
        let ErpRegion = require('../models/erp_region');
        ErpRegion.find({}, '-_id', function (err, dbErpRegions) {
            if (err)
            {
                res.send(err);
            } else {
                let obj_erp_region = {};
                for (let k in dbErpRegions) {
                    obj_erp_region[dbErpRegions[k]._doc['Wrong Region']] = dbErpRegions[k]._doc['Correct Region'];
                }
                fs.writeFile(appRoot + "/tmp/cachemaster/" + cache_key + ".log", JSON.stringify(obj_erp_region), function (err) {});
                res.json(dbErpRegions);
            }
        });
    }
});
router.get('/coronacare/geturl/:fba_id', LoadSession, function (req, res) {
    let fba_id = req.params['fba_id'] - 0;
    var Client = require('node-rest-client').Client;
    var client = new Client();
    client.get(config.environment.weburl + '/posps/dsas/viewbyfbaid/' + fba_id, {}, function (data, response) {
        let ss_id = 0;
        if (data['status'] === 'SUCCESS') {
            if (data['POSP'].hasOwnProperty('Ss_Id') && data['POSP']['Ss_Id'] > 0) {
                ss_id = data['POSP']['Ss_Id'];
            } else if (data['EMP'].hasOwnProperty('Emp_Id') && data['EMP']['Emp_Id'] > 0) {
                ss_id = data['EMP']['Emp_Id'];
            }
            let url = 'http://di8vsggi846z0.cloudfront.net/fmweb/CoronaCare/coronacare_index.html?ss_id=' + ss_id + '&fba_id=' + fba_id + '&v=20200313&sub_fba_id=0&ip_address=38:a4:ed:5a:a:53&mac_address=38:a4:ed:5a:a:53&app_version=2.3.4&device_id=6814f4d68cf88565&product_id=17&login_ssid=';
            res.redirect(url);
        } else {
            req.send('Please contact IT');
        }
    });
});
router.get('/calender/list_by_range', LoadSession, function (req, res) {
    try {
        let reportModel = require('../models/report');
        let start_date = req.query['start'].split('T00')[0];
        let end_date = req.query['end'].split('T00')[0];
        let channel;
        if (req.query.hasOwnProperty('channel') && req.query['channel'] != '') {
            channel = req.query['channel'];
        } else {
            channel = req.obj_session.user.role_detail.channel;
        }
        var cache_key = 'calender_' + channel + '_' + start_date + '_' + end_date;
        if (cache_key && fs.existsSync(appRoot + "/tmp/historic/" + cache_key + ".log")) {
            var cache_content = fs.readFileSync(appRoot + "/tmp/historic/" + cache_key + ".log").toString();
            var cache_content_stat = fs.statSync(appRoot + "/tmp/historic/" + cache_key + ".log");
            var obj_cache_content = JSON.parse(cache_content);
            obj_cache_content['Stats'] = cache_content_stat;
            res.json(obj_cache_content);
        } else {
            let condi_report = {
                'Channel': channel,
                "Report_Date": {"$gte": start_date, "$lte": end_date}
            };
            console.error('DEBUG', condi_report);
            reportModel.find(condi_report).select('All Agent Report_Date').exec(function (err, dbReports) {
                if (err) {
                    res.json({'Status': err});
                } else {
                    try {
                        let arr_report = [];
                        if (dbReports) {
                            let arr_report = [];
                            let arr_stage = ['Search', 'Sale', 'Premium'];
                            for (let k in dbReports) {
                                for (let j in arr_stage) {
                                    arr_report.push({
                                        "title": arr_stage[j] + " : " + dbReports[k]._doc.All.Summary[arr_stage[j]].total,
                                        "start": dbReports[k]._doc['Report_Date']
                                    });
                                }
                            }
                            fs.writeFile(appRoot + "/tmp/historic/" + cache_key + ".log", JSON.stringify(arr_report), function (err) {
                                if (err) {
                                    return console.error(err);
                                }
                            });
                            res.json(arr_report);
                        }
                    } catch (e) {
                        res.send(e.stack);
                    }
                }
            });
        }
    } catch (e) {
        res.send(e.stack);
    }
});
function agent_activity_summary_handler(req, res, data) {
    try {
        if (data.user_data !== null &&
                data.agent !== null &&
                data.login !== null &&
                data.user !== null &&
                data.share !== null &&
                data.sync !== null &&
                data.obj_sync_analysis_summary !== null &&
                data.link !== null &&
                data.search !== null &&
                data.ticket !== null &&
                data.renewal !== null &&
                data.sync_lead !== null) {
            let dbUser_Datas = data.user_data;
            var obj_final_response = {
                'obj_agent_summary': {},
                'obj_share_summary': {},
                'obj_sync_summary': {},
                'obj_sync_analysis_summary': {},
                'obj_callcenter_summary': {},
                'obj_callcenter_branch_summary': {},
                'obj_ticket_summary': {},
                'obj_link_summary': {},
                'obj_search_summary': {},
                'obj_renewal_summary': {},
                'obj_sync_lead_summary': {}
            };
            var obj_callcenter_summary = {};
            var obj_callcenter_branch_summary = {};
            var obj_agent_summary = {
                'PBS': {
                    'Type': 'PBS',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': [],
                },
                'DC': {
                    'Type': 'DC',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': []
                },
                'SM': {
                    'Type': 'SM',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': []
                },
                'GS': {
                    'Type': 'GS',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': [],
                },
                'SG': {
                    'Type': 'SG',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': [],
                },
                'EM': {
                    'Type': 'EM',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': [],
                },
                'LA': {
                    'Type': 'LA',
                    'Total': 0,
                    'Total_List': [],
                    'Active': 0,
                    'Active_List': [],
                    'Total_RM': 0,
                    'Total_RM_List': [],
                    'Active_RM': 0,
                    'Active_RM_List': [],
                    'Login_RM': 0,
                    'Login_RM_List': [],
                }
            };
            let dbUsers = data.user;
            let obj_users = {};
            let obj_users_full = {};
            for (let k in dbUsers) {
                let user = dbUsers[k]._doc;
                let UID = user['UID'] - 0;
                let Ss_Id = user['Ss_Id'] - 0;
                if (obj_users.hasOwnProperty(UID) === false && Ss_Id !== 0) {
                    obj_agent_summary['PBS']['Total']++;
                    //obj_agent_summary['PBS']['Total_List'].push(UID);
                    obj_users[UID] = Ss_Id;
                    user['Department'] = ((user['Company'].toString().toLowerCase() == 'rupeeboss') ? 'RB-' : '') + user['Dept_Short_Name'];
                    obj_users_full[Ss_Id] = user;
                    let Department = user['Department'];
                    if (obj_callcenter_summary.hasOwnProperty(Department) === false) {
                        obj_callcenter_summary[Department] = {
                            'Department': Department,
                            'Total': 0,
                            'Login': 0,
                            'Login_List': [],
                            'Not_Login': 0,
                            'Not_Login_List': [],
                            'Active': 0,
                            'Active_List': [],
                            'Not_Active': 0,
                            'Not_Active_List': [],
                            'Sale': 0,
                            'Sale_List': [],
                            'NOP': 0,
                            'NOP_List': [],
                            'Car': 0,
                            'TW': 0,
                            'Health': 0,
                            'CV': 0,
                            'CoronaCare': 0
                        };
                    }
                    obj_callcenter_summary[Department]['Total']++;
                    let Branch = user['Branch'].toString().toUpperCase();
                    if (obj_callcenter_branch_summary.hasOwnProperty(Branch) === false) {
                        obj_callcenter_branch_summary[Branch] = {
                            'Branch': Branch,
                            'Total': 0,
                            'Login': 0,
                            'Login_List': [],
                            'Not_Login': 0,
                            'Not_Login_List': [],
                            'Active': 0,
                            'Active_List': [],
                            'Not_Active': 0,
                            'Not_Active_List': [],
                            'Sale': 0,
                            'Sale_List': [],
                            'NOP': 0,
                            'NOP_List': [],
                            'Car': 0,
                            'TW': 0,
                            'Health': 0,
                            'CV': 0,
                            'CoronaCare': 0
                        };
                    }
                    obj_callcenter_branch_summary[Branch]['Total']++;
                }
            }

            let dbLogins = data.login;
            console.error('Agent_summary_handler', dbLogins.length);
            let arr_logins = [];
            for (let k in dbLogins) {
                let login = dbLogins[k]._doc;
                let ss_id = login['ss_id'] - 0;
                if (arr_logins.indexOf(ss_id) < 0) {
                    arr_logins.push(ss_id);
                }
                if (obj_users_full.hasOwnProperty(ss_id)) {
                    let Department = obj_users_full[ss_id]['Department'];
                    if (obj_callcenter_summary[Department]['Login_List'].indexOf(ss_id) < 0) {
                        obj_callcenter_summary[Department]['Login_List'].push(ss_id);
                        obj_callcenter_summary[Department]['Login']++;
                    }
                    let Branch = obj_users_full[ss_id]['Branch'].toString().toUpperCase();
                    if (obj_callcenter_branch_summary[Branch]['Login_List'].indexOf(ss_id) < 0) {
                        obj_callcenter_branch_summary[Branch]['Login_List'].push(ss_id);
                        obj_callcenter_branch_summary[Branch]['Login']++;
                    }
                }
            }


            for (let k in dbUser_Datas) {
                try {
                    let user_data = dbUser_Datas[k]._doc;
                    let channel = user_data['Premium_Request']['channel'];
                    let product = Const_Product[user_data['Product_Id'].toString()];
                    let subchannel = user_data['Premium_Request']['subchannel'];
                    if (subchannel === 'DIRECT') {
                        continue;
                    }
                    let ss_id = user_data['Premium_Request']['ss_id'];
                    let rm_uid = user_data['Premium_Request']['posp_reporting_agent_uid'];
                    let rm_name = user_data['Premium_Request']['posp_reporting_agent_name'];
                    if (user_data['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user_data['Premium_Request']['posp_reporting_agent_uid_core'] > 0) {
                        rm_uid = user_data['Premium_Request']['posp_reporting_agent_uid_core'];
                    }
                    let rm_sid = obj_users.hasOwnProperty(rm_uid) ? obj_users[rm_uid] : 0;
                    channel = (channel === 'CC') ? 'PBS' : channel;
                    if (['PBS', 'DC', 'EM', 'SM', 'GS', 'LA', 'SG'].indexOf(channel) < 0) {
                        continue;
                    }

                    if (channel === 'PBS') {
                        if (obj_agent_summary[channel]['Active_List'].indexOf(rm_uid) < 0) {
                            obj_agent_summary[channel]['Active']++;
                            obj_agent_summary[channel]['Active_List'].push(rm_uid);
                        }
                        if (obj_users_full.hasOwnProperty(ss_id)) {
                            let Department = obj_users_full[ss_id]['Department'];
                            if (['TRANS_SUCCESS_WITH_POLICY', 'TRANS_SUCCESS_WO_POLICY'].indexOf(user_data['Last_Status']) > -1) {
                                if (obj_callcenter_summary[Department]['Sale_List'].indexOf(ss_id) < 0) {
                                    obj_callcenter_summary[Department]['Sale_List'].push(ss_id);
                                    obj_callcenter_summary[Department]['Sale']++;
                                }
                                obj_callcenter_summary[Department]['NOP']++;
                                obj_callcenter_summary[Department]['NOP_List'].push(user_data['User_Data_Id']);
                                if (obj_callcenter_summary[Department].hasOwnProperty(product) === false) {
                                    obj_callcenter_summary[Department][product] = 0;
                                }
                                obj_callcenter_summary[Department][product]++;
                            }
                            if (obj_callcenter_summary[Department]['Active_List'].indexOf(ss_id) < 0) {
                                obj_callcenter_summary[Department]['Active_List'].push(ss_id);
                                obj_callcenter_summary[Department]['Active']++;
                            }

                            let Branch = obj_users_full[ss_id]['Branch'].toString().toUpperCase();
                            if (['TRANS_SUCCESS_WITH_POLICY', 'TRANS_SUCCESS_WO_POLICY'].indexOf(user_data['Last_Status']) > -1) {
                                if (obj_callcenter_branch_summary[Branch]['Sale_List'].indexOf(ss_id) < 0) {
                                    obj_callcenter_branch_summary[Branch]['Sale_List'].push(ss_id);
                                    obj_callcenter_branch_summary[Branch]['Sale']++;
                                }
                                obj_callcenter_branch_summary[Branch]['NOP']++;
                                obj_callcenter_branch_summary[Branch]['NOP_List'].push(user_data['User_Data_Id']);
                                if (obj_callcenter_branch_summary[Branch].hasOwnProperty(product) === false) {
                                    obj_callcenter_branch_summary[Branch][product] = 0;
                                }
                                obj_callcenter_branch_summary[Branch][product]++;
                            }
                            if (obj_callcenter_branch_summary[Branch]['Active_List'].indexOf(ss_id) < 0) {
                                obj_callcenter_branch_summary[Branch]['Active_List'].push(ss_id);
                                obj_callcenter_branch_summary[Branch]['Active']++;
                            }
                        }
                    } else {
                        if (obj_agent_summary[channel]['Active_List'].indexOf(ss_id) < 0) {
                            obj_agent_summary[channel]['Active']++;
                            obj_agent_summary[channel]['Active_List'].push(ss_id);
                        }
                    }


                    if (subchannel === 'POSP' || subchannel === 'FOS') {
                        if (obj_agent_summary[channel]['Active_RM_List'].indexOf(rm_sid) < 0) {
                            obj_agent_summary[channel]['Active_RM']++;
                            obj_agent_summary[channel]['Active_RM_List'].push(rm_sid);
                        }
                    }
                } catch (e) {

                }
            }
            try {
                for (let k in obj_users_full) {
                    let Department = obj_users_full[k]['Department'];
                    let Branch = obj_users_full[k]['Branch'].toString().toUpperCase();
                    let ss_id = k - 0;
                    if (obj_callcenter_summary[Department]['Active_List'].indexOf(ss_id) < 0) {
                        if (obj_callcenter_summary[Department]['Not_Active_List'].indexOf(ss_id) < 0) {
                            obj_callcenter_summary[Department]['Not_Active_List'].push(ss_id);
                            obj_callcenter_summary[Department]['Not_Active']++;
                        }
                    }
                    if (obj_callcenter_branch_summary[Branch]['Active_List'].indexOf(ss_id) < 0) {
                        if (obj_callcenter_branch_summary[Branch]['Not_Active_List'].indexOf(ss_id) < 0) {
                            obj_callcenter_branch_summary[Branch]['Not_Active_List'].push(ss_id);
                            obj_callcenter_branch_summary[Branch]['Not_Active']++;
                        }
                    }

                    if (arr_logins.indexOf(ss_id) < 0) {
                        let Department = obj_users_full[ss_id]['Department'];
                        if (obj_callcenter_summary[Department]['Not_Login_List'].indexOf(ss_id) < 0) {
                            obj_callcenter_summary[Department]['Not_Login_List'].push(ss_id);
                            obj_callcenter_summary[Department]['Not_Login']++;
                        }
                        let Branch = obj_users_full[ss_id]['Branch'].toString().toUpperCase();
                        if (obj_callcenter_branch_summary[Branch]['Not_Login_List'].indexOf(ss_id) < 0) {
                            obj_callcenter_branch_summary[Branch]['Not_Login_List'].push(ss_id);
                            obj_callcenter_branch_summary[Branch]['Not_Login']++;
                        }
                    }
                }
            } catch (e) {
                console.error('AgentProcess', e.stack);
            }

            //posp summary process
            let dbPosps = data.agent;
            let obj_posp_channel_to_source = swap(config.channel.Const_POSP_Channel);
            console.error('Agent_summary_handler', dbPosps.length);
            let arr_rm_ssid = [];
            let obj_posps_list = {};
            for (let k in dbPosps) {
                try {
                    let posp = dbPosps[k]._doc;
                    let ss_id = posp['Ss_Id'] - 0;
                    let rm_uid = posp['Reporting_Agent_Uid'] - 0;
                    let rm_sid = obj_users[rm_uid];
                    let Sources = posp['Sources'];
                    obj_posps_list[ss_id] = posp['First_Name'] + ' ' + posp['Last_Name'];
                    if (obj_posp_channel_to_source.hasOwnProperty(Sources)) {
                        let channel = obj_posp_channel_to_source[Sources];
                        if (arr_rm_ssid.indexOf(rm_sid) < 0) {
                            arr_rm_ssid.push(rm_sid);
                        }

                        obj_agent_summary[channel]['Total']++;
                        //obj_agent_summary[channel]['Total_List'].push(ss_id);

                        if (obj_users.hasOwnProperty(rm_uid)) {
                            if (obj_agent_summary[channel]['Total_RM_List'].indexOf(rm_uid) < 0) {
                                obj_agent_summary[channel]['Total_RM']++;
                                obj_agent_summary[channel]['Total_RM_List'].push(rm_uid);
                            }
                        }

                        if (arr_logins.indexOf(rm_sid) > -1) {
                            if (obj_agent_summary[channel]['Login_RM_List'].indexOf(rm_sid) < 0) {
                                obj_agent_summary[channel]['Login_RM']++;
                                obj_agent_summary[channel ]['Login_RM_List'].push(rm_sid);
                            }
                        }
                    }
                } catch (e) {

                }
            }
            let arr_user_ss_id = Object.values(obj_users);
            for (let k in arr_logins) {
                let non_agent_rm_ssid = arr_logins[k];
                if (arr_rm_ssid.indexOf(non_agent_rm_ssid) < 0 && arr_user_ss_id.indexOf(non_agent_rm_ssid) > -1) {
                    if (obj_agent_summary['PBS']['Login_RM_List'].indexOf(non_agent_rm_ssid) < 0) {
                        obj_agent_summary['PBS']['Login_RM']++;
                        obj_agent_summary['PBS']['Login_RM_List'].push(non_agent_rm_ssid);
                    }
                }
            }
            obj_agent_summary['SM']['Total_RM_List'] = [];
            obj_agent_summary['DC']['Total_RM_List'] = [];
            obj_agent_summary['GS']['Total_RM_List'] = [];
            obj_agent_summary['EM']['Total_RM_List'] = [];
            let obj_share_summary = {
                'ALL': []
            };
            for (let k in Const_Product) {
                obj_share_summary[Const_Product[k]] = [];
            }
            obj_share_summary['GroupHealth'] = [];
            let dbShares = data.share;
            for (let k in dbShares) {
                try {
                    let Share = dbShares[k]._doc;
                    let product = (Share['product_id'] == 23) ? 'GroupHealth' : Const_Product[Share['product_id'].toString()];
                    obj_share_summary['ALL'].push(Share['ss_id']);
                    obj_share_summary[product].push(Share['ss_id']);
                } catch (e) {
                }
            }
            let dbsyncs = data.sync;
            let obj_sync_summary = {
                'All': {
                    'Contact': 0,
                    'Channel': {},
                    'Sync_Count': 0,
                    'Found_Count': 0,
                    'Match_Count': 0,
                    'Agent': 0,
                    'Agent_List': [],
                    'Lead_Count': 0,
                    'Sale_Count': 0,
                    'Rsa_Visit_Count': 0,
                    'Rsa_Issue_Count': 0
                },
                'Range': {
                    'Contact': 0,
                    'Channel': {},
                    'Sync_Count': 0,
                    'Found_Count': 0,
                    'Match_Count': 0,
                    'Agent': 0,
                    'Agent_List': [],
                    'Lead_Count': 0,
                    'Sale_Count': 0
                }
            };
            obj_sync_summary['All'].Agent = dbsyncs.all.length;
            obj_sync_summary['Range'].Agent = dbsyncs.range.length;
            let SyncType = 'All';
            for (let k in dbsyncs[SyncType.toLowerCase()]) {
                try {
                    let Sync = dbsyncs[SyncType.toLowerCase()][k]._doc;
                    obj_sync_summary[SyncType].Contact += Sync['contact'];
                    obj_sync_summary[SyncType].Sync_Count += Sync['sync'];
                    obj_sync_summary[SyncType].Found_Count += Sync['found'];
                    obj_sync_summary[SyncType].Match_Count += Sync['valid'];
                    obj_sync_summary[SyncType].Lead_Count += Sync['lead'];
                    obj_sync_summary[SyncType].Sale_Count += Sync['sale'];
                    obj_sync_summary[SyncType].Rsa_Visit_Count += Sync['rsa_visited'];
                    obj_sync_summary[SyncType].Rsa_Issue_Count += Sync['rsa_issued'];
                    obj_sync_summary[SyncType].Agent_List.push(Sync);
                    if (obj_sync_summary[SyncType].Channel.hasOwnProperty(Sync['channel']) === false) {
                        obj_sync_summary[SyncType].Channel[Sync['channel']] = {
                            'Channel': Sync['channel'],
                            'Agent': 0,
                            'Contact': 0,
                            'Sync_Contact': 0,
                            'Found_Contact': 0,
                            'Match_Contact': 0,
                            'Lead_Contact': 0,
                            'Sale_Contact': 0,
                            'Rsa_Visit_Contact': 0,
                            'Rsa_Issue_Contact': 0
                        };
                    }
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Agent']++;
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Contact'] += Sync['contact'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Sync_Contact'] += Sync['sync'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Found_Contact'] += Sync['found'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Match_Contact'] += Sync['valid'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Lead_Contact'] += Sync['lead'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Sale_Contact'] += Sync['sale'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Rsa_Visit_Contact'] += Sync['rsa_visited'];
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Rsa_Issue_Contact'] += Sync['rsa_issued'];
                } catch (e) {
                }
            }

            SyncType = 'Range';
            for (let k in dbsyncs[SyncType.toLowerCase()]) {
                try {
                    let Sync = dbsyncs[SyncType.toLowerCase()][k];
                    obj_sync_summary[SyncType].Contact += Sync['agent_contact_count'] - 0;
                    obj_sync_summary[SyncType].Sync_Count += Sync['sync_contact_count'] - 0;
                    obj_sync_summary[SyncType].Found_Count += Sync['found_contact_count'] - 0;
                    obj_sync_summary[SyncType].Match_Count += Sync['match_contact_count'] - 0;
                    obj_sync_summary[SyncType].Sale_Count += Sync['sale_contact_count'] - 0;
                    obj_sync_summary[SyncType].Agent_List.push(Sync);
                    if (obj_sync_summary[SyncType].Channel.hasOwnProperty(Sync['channel']) === false) {
                        obj_sync_summary[SyncType].Channel[Sync['channel']] = {
                            'Channel': Sync['channel'],
                            'Agent': 0,
                            'Contact': 0,
                            'Sync_Contact': 0,
                            'Found_Contact': 0,
                            'Match_Contact': 0,
                            'Sale_Contact': 0,
                        };
                    }
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Agent']++;
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Contact'] += Sync['agent_contact_count'] - 0;
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Sync_Contact'] += Sync['sync_contact_count'] - 0;
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Found_Contact'] += Sync['found_contact_count'] - 0;
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Match_Contact'] += Sync['match_contact_count'] - 0;
                    obj_sync_summary[SyncType].Channel[Sync['channel']]['Sale_Contact'] += Sync['sale_contact_count'] - 0;
                } catch (e) {
                }
            }
            obj_sync_analysis_summary = data.obj_sync_analysis_summary;
            let dblinks = data.link;
            let obj_link_summary = {
                'Already_Expired_within_3_Days': {'Slab': 'Already_Expired_within_3_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_Today': {'Slab': 'Expiring_Today', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_within_3_Days': {'Slab': 'Expiring_in_within_3_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Next_3_to_7_Days': {'Slab': 'Expiring_in_Next_3_to_7_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Next_7_to_15_Days': {'Slab': 'Expiring_in_Next_7_to_15_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Beyond_15_Days': {'Slab': 'Expiring_in_Beyond_15_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'ALL': {'Slab': 'ALL', 'Count': 0, 'Premium': 0, 'List': []}
            };
            for (let k in obj_link_summary) {
                for (let j in Const_Product_Link) {
                    obj_link_summary[k][Const_Product_Link[j]] = 0;
                }
            }
            let obj_link_schema = {
                'Already_Expired_within_3_Days': -1,
                'Expiring_Today': 0,
                'Expiring_in_within_3_Days': 3,
                'Expiring_in_Next_3_to_7_Days': 7,
                'Expiring_in_Next_7_to_15_Days': 15,
                'Expiring_in_Beyond_15_Days': 60
            };
            var today = moment().utcOffset("+05:30").startOf('Day');
            // console.error("LINKDBG", dblinks.length);
            if (dblinks.length > 0) {
                //console.error("LINKDBGFIRST", dblinks.length, dblinks[0]._doc);
            }
            let arr_link_crn = [];
            for (let k in dblinks) {
                try {
                    let dblink = dblinks[k]._doc;
                    if (arr_link_crn.indexOf(dblink['PB_CRN']) > -1) {
                        continue;
                    }
                    arr_link_crn.push(dblink['PB_CRN']);
                    let Product_Name = Const_Product_Link[dblink['Product_Id'].toString()];
                    let Policy_Expiry_Date_Core = dblink['Expiry_Date'];
                    if (Policy_Expiry_Date_Core === '') {
                        Policy_Expiry_Date_Core = moment(dblink['Created_On']).format("YYYY-MM-DD").add(7, 'days');
                    }
                    let Policy_Expiry_Date = moment(Policy_Expiry_Date_Core).utcOffset("+05:30").startOf('Day');
                    let days_diff = Policy_Expiry_Date.diff(today, 'days');
                    days_diff = days_diff - 0;
                    let follow_slab = 'Pending';
                    for (let j in obj_link_schema) {
                        if (days_diff <= obj_link_schema[j]) {
                            follow_slab = j;
                            break;
                        }
                    }
                    obj_link_summary[follow_slab]['Count']++;
                    obj_link_summary[follow_slab][Product_Name]++;
                    obj_link_summary['ALL']['Count']++;
                    obj_link_summary['ALL'][Product_Name]++;
                    obj_link_summary[follow_slab]['Premium'] += dblink['Payment_Request']['final_premium'] - 0;
                    obj_link_summary[follow_slab]['List'].push(dblink['Link_Id']);
                    obj_link_summary['ALL']['Premium'] += dblink['Payment_Request']['final_premium'] - 0;
                } catch (e) {
                }
            }

            //forsearch start
            let dbsearches = data.search;
            let obj_search_summary = {
                'Already_Expired_Yesterday': {'Slab': 'Already_Expired_Yesterday', 'Count': 0, 'List': []},
                'Expiring_Today': {'Slab': 'Expiring_Today', 'Count': 0, 'List': []},
                'Expiring_Tomorrow': {'Slab': 'Expiring_Tomorrow', 'Count': 0, 'List': []},
                'Expiring_in_Next_2_to_5_Days': {'Slab': 'Expiring_in_Next_2_to_5_Days', 'Count': 0, 'List': []},
                'Expiring_in_Next_5_to_10_Days': {'Slab': 'Expiring_in_Next_5_to_10_Days', 'Count': 0, 'List': []},
                'Expiring_in_Beyond_10_Days': {'Slab': 'Expiring_in_Beyond_10_Days', 'Count': 0, 'List': []},
                'ALL': {'Slab': 'ALL', 'Count': 0, 'List': []}
            };
            for (let k in obj_search_summary) {
                for (let j in Const_Product_Link) {
                    obj_search_summary[k][Const_Product_Link[j]] = 0;
                }
            }
            var obj_search_schema = {
                'Already_Expired_Yesterday': -1,
                'Expiring_Today': 0,
                'Expiring_Tomorrow': 1,
                'Expiring_in_Next_2_to_5_Days': 2,
                'Expiring_in_Next_5_to_10_Days': 5,
                'Expiring_in_Beyond_10_Days': 11
            };
            var today = moment().utcOffset("+05:30").startOf('Day');
            let arr_search_crn = [];
            for (let k in dbsearches) {
                try {
                    let dbsearch = dbsearches[k]._doc;
                    if (arr_search_crn.indexOf(dbsearch['PB_CRN']) > -1) {
                        continue;
                    }
                    arr_search_crn.push(dbsearch['PB_CRN']);
                    let Product_Name = Const_Product_Link[dbsearch['Product_Id'].toString()];
                    let Policy_Expiry_Date_Core = dbsearch['Premium_Request'].hasOwnProperty('policy_expiry_date') ? dbsearch['Premium_Request']['policy_expiry_date'] : '';
                    if (Policy_Expiry_Date_Core === '') {
                        Policy_Expiry_Date_Core = moment(dbsearch['Created_On']).format("YYYY-MM-DD").add(7, 'days');
                    }
                    let Policy_Expiry_Date = moment(Policy_Expiry_Date_Core).utcOffset("+05:30").startOf('Day');
                    let days_diff = Policy_Expiry_Date.diff(today, 'days');
                    days_diff = days_diff - 0;
                    let follow_slab = 'Pending';
                    for (let j in obj_search_schema) {
                        if (days_diff <= obj_search_schema[j]) {
                            follow_slab = j;
                            break;
                        }
                    }
                    obj_search_summary[follow_slab]['Count']++;
                    obj_search_summary[follow_slab][Product_Name]++;
                    obj_search_summary['ALL']['Count']++;
                    obj_search_summary['ALL'][Product_Name]++;
                    obj_search_summary[follow_slab]['List'].push(dbsearch['User_Data_Id']);
                } catch (e) {
                }
            }
            //for search finish
            //for renewal
            let dbrenewals = data.renewal;
            let obj_renewal_summary = {
                'Already_Expired_within_3_Days': {'Slab': 'Already_Expired_within_3_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_Today': {'Slab': 'Expiring_Today', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_within_3_Days': {'Slab': 'Expiring_in_within_3_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Next_3_to_7_Days': {'Slab': 'Expiring_in_Next_3_to_7_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Next_7_to_15_Days': {'Slab': 'Expiring_in_Next_7_to_15_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Beyond_15_Days': {'Slab': 'Expiring_in_Beyond_15_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'ALL': {'Slab': 'ALL', 'Count': 0, 'Premium': 0, 'List': []}
            };
            for (let k in obj_renewal_summary) {
                for (let j in Const_Product_Link) {
                    obj_renewal_summary[k][Const_Product_Link[j]] = 0;
                }
            }
            var today = moment().utcOffset("+05:30").startOf('Day');
            for (let k in dbrenewals) {
                try {
                    let dbrenewal = dbrenewals[k]._doc;
                    let Product_Name = Const_Product_Link[dbrenewal['Product_Id'].toString()];
                    let Policy_Expiry_Date_Core = dbrenewal['policy_expiry_date'];
                    if (moment(Policy_Expiry_Date_Core, 'YYYY-MM-DD', true).isValid() === false) {
                        Policy_Expiry_Date_Core = dbrenewal['renewal_data']['Erp_Qt_Request_Core']['___policy_end_date___'];
                    }
                    let Policy_Expiry_Date = moment(Policy_Expiry_Date_Core).utcOffset("+05:30").startOf('Day');
                    let days_diff = Policy_Expiry_Date.diff(today, 'days');
                    days_diff = days_diff - 0;
                    let follow_slab = 'Pending';
                    for (let j in obj_link_schema) {
                        if (days_diff <= obj_link_schema[j]) {
                            follow_slab = j;
                            break;
                        }
                    }
                    obj_renewal_summary[follow_slab]['Count']++;
                    obj_renewal_summary[follow_slab][Product_Name]++;
                    obj_renewal_summary['ALL']['Count']++;
                    obj_renewal_summary['ALL'][Product_Name]++;
                    obj_renewal_summary[follow_slab]['Premium'] += dbrenewal['renewal_data']['Erp_Qt_Request_Core']['___final_premium___'] - 0;
                    obj_renewal_summary[follow_slab]['List'].push(dbrenewal['Lead_Id']);
                    obj_renewal_summary['ALL']['Premium'] += dbrenewal['renewal_data']['Erp_Qt_Request_Core']['___final_premium___'] - 0;
                } catch (e) {
                }
            }
            //for renewal
            let dbSync_Leads = data.sync_lead;
            let obj_sync_lead_summary = {
                'Already_Expired_within_3_Days': {'Slab': 'Already_Expired_within_3_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_Today': {'Slab': 'Expiring_Today', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_within_3_Days': {'Slab': 'Expiring_in_within_3_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Next_3_to_7_Days': {'Slab': 'Expiring_in_Next_3_to_7_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Next_7_to_15_Days': {'Slab': 'Expiring_in_Next_7_to_15_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'Expiring_in_Beyond_15_Days': {'Slab': 'Expiring_in_Beyond_15_Days', 'Count': 0, 'Premium': 0, 'List': []},
                'ALL': {'Slab': 'ALL', 'Count': 0, 'Premium': 0, 'List': []}
            };
            for (let k in obj_sync_lead_summary) {
                obj_sync_lead_summary[k]['Car'] = 0;
            }
            var today = moment().utcOffset("+05:30").startOf('Day');
            for (let k in dbSync_Leads) {
                try {
                    let dbSync_Lead = dbSync_Leads[k]._doc;
                    let Product_Name = Const_Product_Link[dbSync_Lead['Product_Id'].toString()];
                    let Policy_Expiry_Date_Core = dbSync_Lead['policy_expiry_date'];
                    if (moment(Policy_Expiry_Date_Core, 'YYYY-MM-DD', true).isValid() === false) {
                        //Policy_Expiry_Date_Core = dbrenewal['renewal_data']['Erp_Qt_Request_Core']['___policy_end_date___'];
                    }
                    let Policy_Expiry_Date = moment(Policy_Expiry_Date_Core).utcOffset("+05:30").startOf('Day');
                    let days_diff = Policy_Expiry_Date.diff(today, 'days');
                    days_diff = days_diff - 0;
                    let follow_slab = 'Pending';
                    for (let j in obj_link_schema) {
                        if (days_diff <= obj_link_schema[j]) {
                            follow_slab = j;
                            break;
                        }
                    }
                    obj_sync_lead_summary[follow_slab]['Count']++;
                    obj_sync_lead_summary[follow_slab][Product_Name]++;
                    obj_sync_lead_summary['ALL']['Count']++;
                    obj_sync_lead_summary['ALL'][Product_Name]++;
                    obj_sync_lead_summary[follow_slab]['List'].push(dbSync_Lead['Lead_Id']);
                    //obj_sync_lead_summary['ALL']['Premium'] += dbrenewal['renewal_data']['Erp_Qt_Request_Core']['___final_premium___'] - 0;
                } catch (e) {
                }
            }
            //sync_lead

            let dbTickets = data.ticket;
            var obj_ticket_summary = {
                'Category': {},
                'Status': {}
            };
            var arr_ticket_status = [
                "Open",
                "InProgress",
                "Closed",
                "Resolved",
                "Reopened",
                "Cancel",
                "Send to Insurer",
                "Received to Customer",
                "Received from Insurer",
                "Send to Customer"
            ];
            for (let k in dbTickets) {
                try {
                    let Ticket = dbTickets[k]._doc;
                    if (obj_ticket_summary['Category'].hasOwnProperty(Ticket['Category']) === false) {
                        obj_ticket_summary['Category'][Ticket['Category']] = {
                            'Name': Ticket['Category'],
                            'Count': 0,
                            'List': [],
                        };
                        for (let j in arr_ticket_status) {
                            obj_ticket_summary['Category'][Ticket['Category']][arr_ticket_status[j]] = 0;
                        }
                    }
                    obj_ticket_summary['Category'][Ticket['Category']]['Count']++;
                    obj_ticket_summary['Category'][Ticket['Category']]['List'].push(Ticket['Ticket_Id']);
                    if (obj_ticket_summary['Status'].hasOwnProperty(Ticket['Status']) === false) {
                        obj_ticket_summary['Status'][Ticket['Status']] = {
                            'Name': Ticket['Status'],
                            'Count': 0,
                            'List': []
                        };
                    }
                    obj_ticket_summary['Category'][Ticket['Category']][Ticket['Status']]++;
                    obj_ticket_summary['Status'][Ticket['Status']]['Count']++;
                    obj_ticket_summary['Status'][Ticket['Status']]['List'].push(Ticket['Ticket_Id']);
                } catch (e) {
                }
            }

            obj_final_response['obj_sync_summary'] = obj_sync_summary;
            obj_final_response['obj_sync_analysis_summary'] = obj_sync_analysis_summary;
            obj_final_response['obj_agent_summary'] = obj_agent_summary;
            obj_final_response['obj_share_summary'] = obj_share_summary;
            obj_final_response['obj_callcenter_summary'] = obj_callcenter_summary;
            obj_final_response['obj_callcenter_branch_summary'] = obj_callcenter_branch_summary;
            obj_final_response['obj_ticket_summary'] = obj_ticket_summary;
            obj_final_response['obj_link_summary'] = obj_link_summary;
            obj_final_response['obj_search_summary'] = obj_search_summary;
            obj_final_response['obj_renewal_summary'] = obj_renewal_summary;
            obj_final_response['obj_sync_lead_summary'] = obj_sync_lead_summary;
            res.json(obj_final_response);
        }
    } catch (e) {
        res.send(e.stack);
    }

}
router.get('/users/agent_activity_summary', LoadSession, function (req, res, next) {
//console.log('Start', this.constructor.name, 'quick_report');
    try {
        var today = moment().utcOffset("+05:30").startOf('Day');
        var arrFrom = req.query['datefrom'].split('-');
        var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
        var arrTo = req.query['dateto'].split('-');
        var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
        dateTo.setDate(dateTo.getDate() + 1);
        var data = {
            'user_data': null,
            'agent': null,
            'login': null,
            'user': null,
            'share': null,
            'sync': null,
            'obj_sync_analysis_summary': null,
            'ticket': null,
            'link': null,
            'search': null,
            'renewal': null,
            'sync_lead': null,
            'exec_time': {},
        };
        var followup_t_min_3 = moment(today).add(-3, 'days').format("YYYY-MM-DD");
        var followup_t_plus_45 = moment(today).add(45, 'days').format("YYYY-MM-DD");
        var followup_t_min_1 = moment(today).add(-1, 'days').format("YYYY-MM-DD");
        var followup_t_plus_12 = moment(today).add(12, 'days').format("YYYY-MM-DD");
        var cond_ud = {"Modified_On": {"$gte": dateFrom, "$lte": dateTo}};
        var cond_share = {"Modified_On": {"$gte": dateFrom, "$lte": dateTo}};
        var cond_ticket = {"Modified_On": {"$gte": dateFrom, "$lte": dateTo}};
        var cond_sync = {'ss_id': {$ne: 0}, 'channel': {$ne: null}};
        var cond_posp = {'Is_Active': true};
        //var cond_user = {'Company': 'LIBPL'};
        var cond_user = {};
        var cond_login = {
            "login_time": {"$gte": dateFrom, "$lte": dateTo}
        };
        let cond_renewal = {
            'lead_type': 'renewal',
            'lead_status': 'pending',
            'policy_expiry_date': {$gte: followup_t_min_3, $lte: followup_t_plus_45}
        };
        let cond_sync_lead = {
            'Product_Id': 1,
            'lead_type': 'sync_contacts',
            'lead_status': 'pending',
            'policy_expiry_date': {$gte: followup_t_min_3, $lte: followup_t_plus_45}
        };
        let cond_link = {
            'Status': {$in: ['LINK', 'PROPOSAL']},
            'Expiry_Date': {$gte: followup_t_min_3, $lte: followup_t_plus_45}
        };
        let cond_search = {
            "Product_Id": {$in: [1, 10, 2, 12]},
            'Last_Status': {$in: ['SEARCH', 'ADDON_APPLY', 'ADDON_QUOTE_APPLY', 'PROPOSAL_SAVE_AGENT', 'BUY_NOW_AGENT', 'INSPECTION_REJECTED']},
            'Link_Id': {$exists: false},
            'Premium_Request.policy_expiry_date': {$gte: followup_t_min_1, $lte: followup_t_plus_12}
        };
        var arr_ssid = [];
        if (req.obj_session.hasOwnProperty('users_assigned')) {
            var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
            arr_ssid = combine_arr.split(',').filter(Number).map(Number);
        }
        arr_ssid.push(req.obj_session.user.ss_id);
        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
            if (req.query['page_action'] === 'all_daily') {
            } else if (req.query['page_action'] === 'ch_all_daily') {
                if (req.query.hasOwnProperty('channel') && req.query['channel'] != '') {
                    channel = req.query['channel'];
                } else {
                    channel = req.obj_session.user.role_detail.channel;
                }
//cond_ud['Premium_Request.channel'] = channel;                
                let obj_posp_channel_to_source = swap(config.channel.Const_POSP_Channel);
                cond_posp['Sources'] = obj_posp_channel_to_source[channel];
                cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
                cond_share['ss_id'] = {$in: arr_ssid};
                cond_link['Premium_Request.channel'] = channel;
                cond_search['Premium_Request.channel'] = channel;
                cond_renewal['renewal_data.Premium_Request.channel'] = channel;
                cond_ticket['ss_id'] = {$in: arr_ssid};
                cond_login['ss_id'] = {$in: arr_ssid};
                cond_sync['channel'] = channel;
                cond_user['Ss_Id'] = {$in: arr_ssid};
                cond_sync_lead['channel'] = channel;
            } else if (req.query['page_action'] === 'my_daily') {
                cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
                cond_share['ss_id'] = {$in: arr_ssid};
                cond_posp['Ss_Id'] = {$in: req.obj_session.users_assigned.Team.POSP};
                cond_search['Premium_Request.ss_id'] = {$in: arr_ssid};
                cond_link['Premium_Request.ss_id'] = {$in: arr_ssid};
                cond_renewal['ss_id'] = {$in: arr_ssid};
                cond_ticket['ss_id'] = {$in: arr_ssid};
                cond_login['ss_id'] = {$in: arr_ssid};
                cond_sync['ss_id'] = {$in: arr_ssid};
                cond_user['Ss_Id'] = {$in: arr_ssid};
                cond_sync_lead['ss_id'] = {$in: arr_ssid};
            }

            User_Data.find(cond_ud).select('Premium_Request Last_Status Product_Id User_Data_Id').exec(function (err, dbUserDatas) {
                if (dbUserDatas) {
                    data.user_data = dbUserDatas;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            console.error('DBG', 'Agent_Summary', 'cond_search', cond_search);
            User_Data.find(cond_search).select('Premium_Request PB_CRN Last_Status Product_Id User_Data_Id Created_On').exec(function (err, dbUserDatas) {
                if (dbUserDatas) {
                    data.search = dbUserDatas;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            let Sync_Contact = require('../models/sync_contact');
            let Sync_Contact_Summary = require('../models/sync_contact_summary');
            console.error('Agent_Summary', 'cond_sync', cond_sync);
            var summary;
            /*var sync_agg = [
             {"$match": cond_sync},
             {$group: {
             _id: {ss_id: "$ss_id", fba_id: "$fba_id", 'channel': "$channel"},
             agent_contact_count: {$sum: 1},
             sync_contact_count: {$sum: "$Is_Synced"},
             found_contact_count: {$sum: "$Is_Found"},
             match_contact_count: {$sum: "$valid_count"}
             }},
             {$project: {_id: 0, ss_id: "$_id.ss_id", fba_id: "$_id.fba_id", channel: '$_id.channel', agent_contact_count: 1, sync_contact_count: 1, found_contact_count: 1, match_contact_count: 1}},
             {$sort: {'agent_contact_count': -1}}
             ];*/
            Sync_Contact_Summary.find(cond_sync).exec(function (err, dbSyncContactsAll) {
                summary = {
                    'all': dbSyncContactsAll,
                    'range': null
                };
                let cond_sync_range = cond_sync;
                cond_sync_range.Created_On = {"$gte": dateFrom, "$lte": dateTo};
                var sync_agg = [
                    {"$match": cond_sync_range},
                    {$group: {
                            _id: {ss_id: "$ss_id", fba_id: "$fba_id", 'channel': "$channel"},
                            agent_contact_count: {$sum: 1},
                            sync_contact_count: {$sum: "$Is_Synced"},
                            found_contact_count: {$sum: "$Is_Found"},
                            match_contact_count: {$sum: "$valid_count"}
                        }},
                    {$project: {_id: 0, ss_id: "$_id.ss_id", fba_id: "$_id.fba_id", channel: '$_id.channel', agent_contact_count: 1, sync_contact_count: 1, found_contact_count: 1, match_contact_count: 1}},
                    {$sort: {'agent_contact_count': -1}}
                ];
                Sync_Contact.aggregate(sync_agg).exec(function (err, dbSyncContactsRange) {
                    summary.range = dbSyncContactsRange;
                    data.sync = summary;
                    agent_activity_summary_handler(req, res, data);
                });
            });
            let args = {
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get(config.environment.weburl + '/sync_contacts/synced_data_behaviour?cache=yes', args, function (dataRest, response) {
                data.obj_sync_analysis_summary = dataRest;
                agent_activity_summary_handler(req, res, data);
            });
            let Product_Share_History = require('../models/product_share_history');
            Product_Share_History.find(cond_share).select().exec(function (err, dbProduct_Share_Histories) {
                if (dbProduct_Share_Histories) {
                    data.share = dbProduct_Share_Histories;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            var Posp = require('../models/posp');
            console.error('Agent_Summary', 'cond_posp', cond_posp);
            Posp.find(cond_posp, function (err, dbPosps) {
                if (dbPosps) {
                    data.agent = dbPosps;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            var Login = require('../models/logins');
            console.error('Agent_Summary', 'cond_login', cond_login);
            Login.find(cond_login, function (err, dbLogins) {
                if (dbLogins) {
                    data.login = dbLogins;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            var User = require('../models/user');
            console.error('Agent_Summary', 'User');
            User.find(cond_user, function (err, dbUsers) {
                if (dbUsers) {
                    data.user = dbUsers;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            var Ticket = require('../models/ticket');
            console.error('Agent_Summary', 'Ticket');
            Ticket.find(cond_ticket, function (err, dbTickets) {
                if (dbTickets) {
                    data.ticket = dbTickets;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            var Link = require('../models/link');
            console.error('Agent_Summary', 'Link', cond_link);
            Link.find(cond_link).sort({'Modified_On': -1}).select().limit().exec(function (err, dbLinks) {
                if (dbLinks) {
                    data.link = dbLinks;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            var Leads = require('../models/leads');
            console.error('Agent_Summary', 'Leads', cond_renewal);
            Leads.find(cond_renewal).sort({'_id': -1}).select().limit().exec(function (err, dbLeads) {
                if (dbLeads) {
                    data.renewal = dbLeads;
                    agent_activity_summary_handler(req, res, data);
                }
            });
            console.error('Agent_Summary', 'Sync_Leads', cond_sync_lead);
            Leads.find(cond_sync_lead).exec(function (err, dbSyncLeads) {
                if (dbSyncLeads) {
                    data.sync_lead = dbSyncLeads;
                    agent_activity_summary_handler(req, res, data);
                }
            });
        }
    } catch (e) {
        res.send(e.stack);
    }
}
);
router.post('/links/list_by_linkid', function (req, res, next) {
    var Link = require('../models/link');
    console.error('Agent_Summary', 'Link', cond_link);
    var arr_link_id = req.body['link_list'].split(',').filter(Number).map(Number)
    var cond_link = {'Link_Id': {$in: arr_link_id}};
    Link.find(cond_link).sort({'Expiry_Date': -1}).select().limit().exec(function (err, dbLinks) {
        if (dbLinks) {
            let arr_links_data = [];
            try {
                for (let k in dbLinks) {
                    let dbLink = dbLinks[k]._doc;
                    let reporting = dbLink['Premium_Request']['posp_reporting_agent_name'];
                    let rm_uid = dbLink['Premium_Request']['posp_reporting_agent_uid'];
                    if (dbLink['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && dbLink['Premium_Request']['posp_reporting_agent_uid_core'] > 0) {
                        reporting = dbLink['Premium_Request']['posp_reporting_agent_name_core'];
                        rm_uid = dbLink['Premium_Request']['posp_reporting_agent_uid_core'];
                    }

                    arr_links_data.push({
                        'Link_Id': dbLink['Link_Id'],
                        'Status': dbLink['Status'],
                        'CRN': dbLink['PB_CRN'],
                        'Insurer': arr_ins[dbLink['Insurer_Id']],
                        'Product': Const_Product[dbLink['Product_Id'].toString()],
                        'Customer': dbLink['Payment_Request']['contact_name'],
                        'Premium': Math.round(dbLink['Premium']),
                        'Agent': dbLink['Payment_Request']['agent_name'],
                        'Reporting': reporting,
                        'Ss_Id': dbLink['Premium_Request']['ss_id'],
                        'Fba_Id': dbLink['Premium_Request']['fba_id'],
                        'RM_UID': rm_uid,
                        'Source': dbLink['Premium_Request']['channel'] + '-' + dbLink['Premium_Request']['subchannel'],
                        'Expiry_On': (dbLink['Expiry_Date'] != '') ? dbLink['Expiry_Date'] : 'NA',
                        'Link_On': dbLink['Created_On'].toLocaleString()
                    });
                }
                res.json(arr_links_data);
            } catch (e) {
                res.send(e.stack);
            }
        }
    });
});
router.post('/leads/renewal_list_by_leadid', function (req, res, next) {
    var Leads = require('../models/leads');
    var arr_link_id = req.body['lead_list'].split(',').filter(Number).map(Number)
    var cond_lead = {'Lead_Id': {$in: arr_link_id}};
    Leads.find(cond_lead).sort({'policy_expiry_date': 1}).select().limit().exec(function (err, dbLeads) {
        if (dbLeads) {
            let arr_renewal_data = [];
            try {
                for (let k in dbLeads) {
                    let dbLead = dbLeads[k]._doc;
                    if (dbLead['lead_type'] === 'renewal') {
                        let reporting = dbLead['renewal_data']['Premium_Request']['posp_reporting_agent_name'];
                        let rm_uid = dbLead['renewal_data']['Premium_Request']['posp_reporting_agent_uid'];
                        if (dbLead['renewal_data']['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && dbLead['renewal_data']['Premium_Request']['posp_reporting_agent_uid_core'] > 0) {
                            reporting = dbLead['renewal_data']['Premium_Request']['posp_reporting_agent_name_core'];
                            rm_uid = dbLead['renewal_data']['Premium_Request']['posp_reporting_agent_uid_core'];
                        }
                        let agent_name = dbLead['renewal_data']['Premium_Request']['posp_first_name'] + ' ' + dbLead['renewal_data']['Premium_Request']['posp_last_name'];
                        arr_renewal_data.push({
                            'Lead_Id': dbLead['Lead_Id'],
                            'CRN': dbLead['PB_CRN'],
                            'Insurer': arr_ins[dbLead['prev_insurer_id']],
                            'Product': Const_Product[dbLead['Product_Id'].toString()],
                            'Customer': dbLead['Customer_Name'],
                            'PYP_Premium': Math.round(dbLead['renewal_data']['Erp_Qt_Request_Core']['___final_premium___']),
                            'Agent': agent_name,
                            'PYP_Reporting': reporting,
                            'Ss_Id': dbLead['renewal_data']['Premium_Request']['ss_id'],
                            'Fba_Id': dbLead['renewal_data']['Premium_Request']['fba_id'],
                            'RM_UID': rm_uid,
                            'Source': dbLead['renewal_data']['Premium_Request']['channel'] + '-' + dbLead['renewal_data']['Premium_Request']['subchannel'],
                            'Expiry_On': (dbLead['policy_expiry_date'] != '') ? dbLead['policy_expiry_date'] : 'NA',
                            //'Link_On': dbLink['Created_On'].toLocaleString()
                        });
                    }
                    if (dbLead['lead_type'] === 'sync_contacts') {
                        let agent_name = 'ss_id:' + dbLead['ss_id'] + ',fba_id:' + dbLead['fba_id'];
                        arr_renewal_data.push({
                            'Lead_Id': dbLead['Lead_Id'],
                            //'CRN': 'NA',
                            //'Insurer': 'NA',
                            'Product': Const_Product[dbLead['Product_Id'].toString()],
                            'Customer': dbLead['Customer_Name'],
                            'Registration_No': (dbLead['registration_no'] != '') ? dbLead['registration_no'] : 'NA',
                            'Agent': agent_name,
                            //'Reporting': 'NA',
                            //'Source': 'NA',                            
                            'Expiry_On': (dbLead['policy_expiry_date'] != '') ? dbLead['policy_expiry_date'] : 'NA',
                            'Lead_On': dbLead['Created_On'].toLocaleString()
                        });
                    }
                }
                res.json(arr_renewal_data);
            } catch (e) {
                res.send(e.stack);
            }
        }
    });
});
router.post('/users/list_from_posp_lm', LoadSession, function (req, res, next) {
    //console.log('Start', this.constructor.name, 'quick_report');
    try {
        let data_source = (req.query.hasOwnProperty('data_source') && req.query['data_source'] !== '') ? req.query['data_source'] : 'posp';
        let search_key = (req.query.hasOwnProperty('search_key') && req.query['search_key'] !== '') ? req.query['search_key'] : 'Ss_Id';
        if (data_source === 'posp') {
            let arr_ss_id = req.body['user_list'].split(',').filter(Number).map(Number);
            let cond_posp = {'Ss_Id': {$in: arr_ss_id}};
            var Posp = require('../models/posp');
            console.error('list_by_ssid_uid', 'cond_posp', cond_posp);
            Posp.find(cond_posp).select('Ss_Id First_Name Last_Name Agent_City Erp_Id').exec(function (err, dbPosps) {
                if (dbPosps) {
                    let arr_user = [];
                    for (let k in dbPosps) {
                        arr_user.push({
                            'Ss_Id': dbPosps[k]._doc['Ss_Id'],
                            'Name': dbPosps[k]._doc['First_Name'] + ' ' + dbPosps[k]._doc['Last_Name'],
                            'Erp_Id': dbPosps[k]._doc['Erp_Id'],
                            'Location': dbPosps[k]._doc['Agent_City']
                        })
                    }
                    res.json(arr_user);
                }
            });
        }
        if (data_source === 'lm') {
            let cond_user = {'Ss_Id': {$in: req.body['user_list'].split(',').filter(Number).map(Number)}};
            if (search_key == 'UID') {
                cond_user = {'UID': {$in: req.body['user_list'].split(',').filter(Number).map(Number)}};
            }
            var User = require('../models/user');
            console.error('list_by_ssid_uid', 'cond_posp', cond_user);
            User.find(cond_user).select().exec(function (err, dbUsers) {
                if (dbUsers) {
                    let arr_user = [];
                    let arr_user_lite = {};
                    for (let k in dbUsers) {
                        arr_user_lite[dbUsers[k]._doc['UID']] = dbUsers[k]._doc['Employee_Name'];
                    }
                    for (let k in dbUsers) {
                        let dbUser = dbUsers[k]._doc;
                        arr_user.push({
                            'Ss_Id': dbUser['Ss_Id'],
                            'Name': dbUser['Employee_Name'],
                            'Erp_Id': dbUser['UID'],
                            'Location': dbUser['Branch'],
                            'Department': dbUser['Dept_Short_Name'],
                            'Designation': dbUser['Designation'],
                            'Reporting': arr_user_lite.hasOwnProperty(dbUser['Direct_Reporting_UID']) ? arr_user_lite[dbUser['Direct_Reporting_UID']] : 'NA'
                        });
                    }
                    res.json(arr_user);
                }
            });
        }
    } catch (e) {
        res.send(e.stack);
    }
});
function swap(json) {
    var ret = {};
    for (var key in json) {
        ret[json[key]] = key;
    }
    return ret;
}

router.get('/iciciLombard_check_inspection_status', function (req, res2) {
    let callingService = '', Error_Msg = '';
    //var breakin_inspection_id = req.params['breakin_inspection_id'];
    let breakin_inspection_id = "";
    let args = {};
    try {
        if (config.environment.name.toString() === 'Production') {
            callingService = 'https://app9.icicilombard.com/ILServices/Motor/v1/Breakin/GetStatus';
        } else {
            callingService = 'https://cldilbizapp02.cloudapp.net:9001/ILServices/motor/v1/Breakin/GetStatus';
        }

        var Icici_Token = require(appRoot + '/models/icici_token');
        Icici_Token.findOne({'Product_Id': 1}, null, {sort: {'Created_On': -1}}, function (err, dbIciciToken) {
            if (err) {
                console.error('/iciciLombard_check_inspection_status Icici Token not Found', err);
            } else {
                process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;
                //var dbIciciToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjZCN0FDQzUyMDMwNUJGREI0RjcyNTJEQUVCMjE3N0NDMDkxRkFBRTEiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJhM3JNVWdNRnY5dFBjbExhNnlGM3pBa2ZxdUUifQ.eyJuYmYiOjE1OTEwODY4ODYsImV4cCI6MTU5MTA5MDQ4NiwiaXNzIjoiaHR0cHM6Ly9jbGRpbGJpemFwcDAyLmNsb3VkYXBwLm5ldDo5MDAxL2NlcmJlcnVzIiwiYXVkIjpbImh0dHBzOi8vY2xkaWxiaXphcHAwMi5jbG91ZGFwcC5uZXQ6OTAwMS9jZXJiZXJ1cy9yZXNvdXJjZXMiLCJlc2Jtb3RvciJdLCJjbGllbnRfaWQiOiJyby5sYW5kbWFyayIsInN1YiI6IjJhYjIxM2E0LTBlZTItNDgzNS05YWUyLTFkZGFhMjYwYzlhMCIsImF1dGhfdGltZSI6MTU5MTA4Njg4NiwiaWRwIjoibG9jYWwiLCJzY29wZSI6WyJlc2Jtb3RvciJdLCJhbXIiOlsiY3VzdG9tIl19.lWlhLSkiY9Pkc5G9GMWpINr2pBObx4GR9VLGDQi2hXz49idW9D7pK9mUTkuh9sVxcpq4sm0sqR0k6JnkSC9qVNAGDKGODpf6gJy3bO0dP9Kq0N_5OKPNMmQiAXwIKUIWD67csHlrJoa0FNCo_P0bYpfbaHc4uSLN3kd9TUVPiCHcQisYFYbg4p0j0h7osm8lDHQ05vQ6O-zLoHJVdFpnat5xyD7OU1NNfLNia8iIN7EhfIyda9INFRoExfxBRzEwCIFwP6ZZv5lIhbek_FrJhG_J_ElEUVx52n2lS8scvTer3toF-Sb-DbpgQvLqYVUgQwfmwTM42R2F9yu8K9mu0Q";
                console.log('iciciLombard_check_inspection_status() dbIciciToken from DB : ', dbIciciToken);
                args = {
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json",
                        "Authorization": "Bearer " + dbIciciToken['Token']
                    }
                };
                //console.log('iciciLombard_check_inspection_status Request :: ', JSON.stringify(args));

                let Client = require('node-rest-client').Client;
                let client = new Client();
                client.get(callingService, args, function (data, response) {
                    console.error('ICICI Lombard - GetStatus service - Response : ', JSON.stringify(data));
                    if (data) {
                        let queryObj = {
                            Insurer_Id: 6,
                            Insurer_Response: data,
                            Created_On: new Date()
                        };
                        let MongoClient = require('mongodb').MongoClient;
                        MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err, db) {
                            if (err) {
                                throw err;
                            } else {
                                let iciciinspectionBreakins = db.collection('icici_inspection_breakins');
                                iciciinspectionBreakins.insertOne(queryObj, function (err, inspectionBreakinsdb) {
                                    if (err) {
                                        throw err;
                                    } else {
                                        console.log("iciciLombard_check_inspection_status() inspectionBreakinsdb : ", inspectionBreakinsdb.insertedCount, inspectionBreakinsdb.result);
                                    }
                                });
                            }
                        });
                        //data['status'] = 'true';
                        //data['statusMessage'] = 'Success';
                        //data['inspectionStatus'] = 'Recommended';
                        //data['breakInInsuranceID'] = breakin_inspection_id;
                        if ((data.hasOwnProperty('status') && data['status'] === 'true') && (data.hasOwnProperty('statusMessage') && data['statusMessage'] === 'Success') && (data.hasOwnProperty('inspectionStatus') && (data['inspectionStatus'] === 'Recommended' || data['inspectionStatus'] === 'Rejected'))) {
                            if (data.hasOwnProperty('breakInInsuranceID')) {
                                console.error('ICICI Lombard - GetStatus service - Response - Breakin ID : ', data['breakInInsuranceID']);
                                breakin_inspection_id = data['breakInInsuranceID'];
                                let inspectionSchedules = require(appRoot + '/models/inspection_schedule');
                                inspectionSchedules.findOne({Inspection_Id: breakin_inspection_id}, function (err, dbUsers) {
                                    if (err) {
                                        res2.send(err);
                                    } else {
                                        try {
                                            if (dbUsers) {
                                                let args2 = {
                                                    data: dbUsers['_doc'],
                                                    headers: {
                                                        "Content-Type": "application/json"
                                                    }
                                                };
                                                console.error('ICICI Lombard - /quote/iciciLombard_update_inspection_status - POST calling Request : ', JSON.stringify(args2));
                                                let url_api = config.environment.weburl + '/quote/iciciLombard_update_inspection_status';
                                                execute_post(url_api, args2);
                                                sleep(2000);
                                                res2.json({'Status': Error_Msg});
                                            }
                                        } catch (ex) {
                                            console.error('Exception in iciciLombard_check_inspection_status() for inspectionSchedules db details : ', ex);
                                            res2.send(ex, dbUsers);
                                        }
                                    }
                                });
                            }
                        } else if ((data.hasOwnProperty('status') && data['status'] === 'false') && (data.hasOwnProperty('statusMessage') && data['statusMessage'] === 'Failed') && (data.hasOwnProperty('message') && data['message'] === 'No more Item in Queue')) {
                            console.error('ICICI Lombard GetStatus : ', data['message']);
                            Error_Msg = data['message'];
                            res2.json({'Status': Error_Msg});
                        } else {
                            console.error('ICICI Lombard GetStatus : ', JSON.stringify(data));
                            Error_Msg = JSON.stringify(data);
                            res2.json({'Status': Error_Msg});
                        }
                    }
                });
            }
        });
    } catch (ex2) {
        console.error('Exception in iciciLombard_check_inspection_status() for User_Data db details : ', ex2);
        res2.json({'Status': ex2});
    }
//res2.json({'Status': Error_Msg});
});
router.get('/scheduler/pg_drop_followup', function (req, res, next) {
    //console.log('Start', this.constructor.name, 'sync_policy_pdf');
    try {
        var report_type = req.query['op'];
        if (report_type != 'PREVIEW' && report_type != 'EXECUTE') {
            res.send('Action Missing');
        }
        var now = moment().utcOffset("+05:30");
        var fromDate = null;
        var toDate = null;
        let minute_slab = (req.query.hasOwnProperty('minute_slab') && req.query['minute_slab'] !== '') ? (req.query['minute_slab'] - 0) : 45;
        fromDate = moment(now).subtract(minute_slab, 'minutes');
        toDate = moment(now).subtract(30, 'minutes');
        let cond_ud = {
            'Product_Id': {$in: [1, 2, 10, 12]},
            "Modified_On": {"$gte": fromDate, "$lte": toDate},
            "Last_Status": 'PROPOSAL_SUBMIT'
        };
        let response_summary = {
            'query': cond_ud,
            'from': fromDate.toLocaleString(),
            'to': toDate.toLocaleString(),
            'short_count': 0,
            'count': 0
        };
        User_Data.find(cond_ud).select().exec(function (err, dbUsers) {
            let objPGDropoffSummary = {};
            if (err) {
                res.send(err);
            }
            try {
                if (err) {
                    response_summary['err'] = err;
                } else {
                    let Client = require('node-rest-client').Client;
                    let client = new Client();
                    let SmsLog = require('../models/sms_log');
                    let objsmsLog = new SmsLog();
                    let sms_data_core = fs.readFileSync(appRoot + '/resource/sms/pgdropoff_all.txt').toString();
                    let email_data_core = fs.readFileSync(appRoot + '/resource/email/Send_Pg_Dropoff.html').toString();
                    let Email = require('../models/email');
                    let objModelEmail = new Email();
                    for (let k in dbUsers) {
                        let user = dbUsers[k]._doc;
                        let reporting = user['Premium_Request']['posp_reporting_agent_name'];
                        let rm_uid = user['Premium_Request']['posp_reporting_agent_uid'];
                        if (user['Premium_Request'].hasOwnProperty('posp_reporting_agent_uid_core') && user['Premium_Request']['posp_reporting_agent_uid_core'] > 0) {
                            reporting = user['Premium_Request']['posp_reporting_agent_name_core'];
                            rm_uid = user['Premium_Request']['posp_reporting_agent_uid_core'];
                        }
                        let agent_name = user['Premium_Request']['posp_first_name'] + ' ' + user['Premium_Request']['posp_last_name'];
                        let obj_data = {
                            'User_Data_Id': user['User_Data_Id'],
                            'PB_CRN': user['PB_CRN'],
                            'Proposal_Id': user['Proposal_Id'],
                            'Created_On': user['Created_On'].toLocaleString(),
                            'Modified_On': user['Modified_On'],
                            'Modified_On_HRB': user['Modified_On'].toLocaleString(),
                            'Product_Id': user['Product_Id'],
                            'Product': Const_Product[user['Product_Id']],
                            'Insurer_Id': user['Insurer_Id'],
                            'Insurer': arr_ins[user['Insurer_Id']],
                            'Customer': user['Erp_Qt_Request_Core']['___first_name___'] + ' ' + user['Erp_Qt_Request_Core']['___last_name___'],
                            'Agent': agent_name,
                            'Agent_Mobile': user['Erp_Qt_Request_Core']['___posp_mobile_no___'],
                            'Reporting': reporting,
                            'Reporting_Mobile': user['Erp_Qt_Request_Core']['___posp_reporting_mobile_number___'],
                            'Rm_UID': rm_uid,
                            'Expiry_Date': user['Premium_Request']['policy_expiry_date'],
                            'Ss_Id': user['Premium_Request']['ss_id'],
                            'Fba_Id': user['Premium_Request']['fba_id'],
                            'Premium': Math.round(user['Erp_Qt_Request_Core']['___final_premium___']),
                            'PGDropoff_Link': config.environment.horizonurl + '/pg-dropoff?crn=' + user['PB_CRN'] + '&udid=' + user['User_Data_Id'] + '&proposal_id=' + user['Proposal_Id'],
                            'Short_Url': '',
                            'Sms': ''
                        };
                        objPGDropoffSummary[user['User_Data_Id']] = obj_data;
                        client.get(config.environment.shorten_url + '?longUrl=' + encodeURIComponent(obj_data['PGDropoff_Link']), function (data, response) {
                            if (data && data.Short_Url !== '') {
                                try {
                                    //objPGDropoffSummary[user['User_Data_Id']]['Short_Url'] = data.Short_Url;
                                    //response_summary.short_count++;
                                    obj_data['short_url'] = data.Short_Url;
                                    let obj_communication = {};
                                    for (let j in obj_data) {
                                        obj_communication['___' + j.toLowerCase() + '___'] = obj_data[j];
                                    }
                                    //processed commmunication start
                                    let arr_sms_receiver = [];
                                    let sms_data = sms_data_core.replaceJson(obj_communication);
                                    // objPGDropoffSummary[user['User_Data_Id']]['Sms'] = sms_data;
                                    //pg_drop_off_handler(req, res, response_summary, objPGDropoffSummary);

                                    arr_sms_receiver.push(obj_data['Agent_Mobile']); // agent mobile
                                    if (user.Premium_Request.hasOwnProperty('posp_reporting_mobile_number') && user.Premium_Request['posp_reporting_mobile_number'] > 0) {
                                        arr_sms_receiver.push(user.Premium_Request['posp_reporting_mobile_number']);
                                    }
                                    if (Const_CH_Contact.hasOwnProperty(user.Premium_Request['channel']) && user.Premium_Request['channel'] != 'SM') {
                                        arr_sms_receiver.push(Const_CH_Contact[user.Premium_Request['channel']]['mob']);
                                    }
                                    if (report_type === 'PREVIEW') {
                                        arr_sms_receiver = ['7666020532'];
                                    }
                                    for (let j = 0; j < arr_sms_receiver.length; j++) {
                                        objsmsLog.send_sms(arr_sms_receiver[j], sms_data, 'PGDROP', obj_data['PB_CRN']);
                                    }
                                    //email start
                                    let sub = '[ALERT][PG-DROP-OFF] Payment Status Unknown for CRN : ' + obj_data['PB_CRN'] + ', Proposal_Id : ' + obj_data['Proposal_Id'];
                                    let email_data = email_data_core.replaceJson(obj_communication);
                                    let arr_to = [user.Premium_Request['posp_email_id']];
                                    let arr_cc = [];
                                    let arr_bcc = [config.environment.notification_email];
                                    if (Const_CH_Contact.hasOwnProperty(user.Premium_Request['channel']) && user.Premium_Request['channel'] != 'SM') {
                                        arr_bcc.push(Const_CH_Contact[user.Premium_Request['channel']]['email']);
                                    }
                                    if (user.Premium_Request.hasOwnProperty('posp_reporting_email_id') && user.Premium_Request['posp_reporting_email_id'] != '' && user.Premium_Request['posp_reporting_email_id'] != null && user.Premium_Request['posp_reporting_email_id'].indexOf('@') > -1) {
                                        arr_cc.push(user.Premium_Request['posp_reporting_email_id']);
                                    }
                                    if (report_type === 'PREVIEW') {
                                        arr_to = ['chirag.modi@policyboss.com'];
                                        arr_cc = [];
                                        arr_bcc = [config.environment.notification_email];
                                    }
                                    objModelEmail.send('customercare@policyboss.com', arr_to.join(','), sub, email_data, arr_cc.join(','), arr_bcc.join(','), obj_data['PB_CRN']);
                                    //email finish
                                    //process commmunication finish

                                } catch (e) {
                                    console.error('Exception', 'PG_DROP_OFF', e.stack, obj_data);
                                    res.send(e.stack);
                                }
                            }
                        });
                    }
                }
            } catch (e) {
                response_summary.exception = e.stack;
                res.send('<pre>' + JSON.stringify(response_summary, undefined, 2) + '</pre>');
            }
            response_summary.count = Object.keys(objPGDropoffSummary).length;
            response_summary.response = objPGDropoffSummary;
            res.send('<pre>' + JSON.stringify(response_summary, undefined, 2) + '</pre>');
        });
    } catch (e) {
        res.send(e.stack);
    }
});
router.get('/kotak_health_mis', function (req, res, next) {
    try {
        let type = (req.query.hasOwnProperty('type') && req.query['type'] !== '') ? req.query['type'] : '';
        let StartDate = moment().utcOffset("+05:30").startOf('Day');
        let EndDate = moment().utcOffset("+05:30").startOf('Day');
        if (type === 'DAILY') {
            StartDate = moment().utcOffset("+05:30").startOf('Day');
            EndDate = moment().utcOffset("+05:30").endOf('Day');
        }
        if (type === 'CUSTOM') {
            StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
            EndDate = moment(req.query['dateto']).utcOffset("+05:30").endOf('Day');
        }
        if (type === 'ALL') {

        }
        var mysql = require('mysql');
        var con = mysql.createConnection({
            host: "finmart.cmqvgkpd8u77.ap-south-1.rds.amazonaws.com",
            user: "finmart_user",
            password: "finmart0909",
            database: "BackOffice"
        });
        con.connect(function (err) {
            if (err)
            {
                res.send(err);
            } else {
                let sql = ' select * from elitekotakcustomerdetails ';
                let cond = {};
                if (type === 'ALL') {
                } else {
                    cond = {'createddate': {$gte: StartDate, $lte: EndDate}};
                    sql += " where createddate between '" + StartDate.format('YYYY-MM-DD') + " 00:00:00' and '" + EndDate.format('YYYY-MM-DD') + " 23:59:59'";
                }

                con.query(sql, function (err, result) {
                    if (err) {
                        res.send(err);
                    } else {
                        console.log("Result: " + result);
                        var Elite_Kotak_Customer_Details = require('../models/elitekotakcustomerdetails');
                        Elite_Kotak_Customer_Details.remove(cond, function (err, DbRemoved) {
                            Elite_Kotak_Customer_Details.insertMany(result, function (err, DbInserted) {
                                console.error('DBG', 'DbSync_Contact_Summary', 'save', err);
                            });
                        });
                        //res.json(result);
                    }
                });
                let sql1 = ' select * from elitekotakrazorpaydata ';
                let cond1 = {};
                if (type === 'ALL') {
                } else {
                    cond1 = {'CreatedDate': {$gte: StartDate, $lte: EndDate}};
                    sql1 += " where CreatedDate between '" + StartDate.format('YYYY-MM-DD') + " 00:00:00' and '" + EndDate.format('YYYY-MM-DD') + " 23:59:59'";
                }
                con.query(sql1, function (err, result) {
                    if (err) {
                        res.send(err);
                    } else {
                        var Elite_Kotak_Razorpay_Data = require('../models/elitekotakrazorpaydata');
                        Elite_Kotak_Razorpay_Data.remove(cond1, function (err, DbRemoved) {
                            Elite_Kotak_Razorpay_Data.insertMany(result, function (err, DbInserted) {
                                console.error('DBG', 'DbSync_Contact_Summary', 'save', err);
                            });
                        });
                    }
                });
                let sql2 = ' select * from elitekotakrazorpayinvoice ';
                let cond2 = {};
                if (type === 'ALL') {
                } else {
                    cond2 = {'CreatedDate': {$gte: StartDate, $lte: EndDate}};
                    sql2 += " where CreatedDate between '" + StartDate.format('YYYY-MM-DD') + " 00:00:00' and '" + EndDate.format('YYYY-MM-DD') + " 23:59:59'";
                }
                con.query(sql2, function (err, result) {
                    if (err) {
                        res.send(err);
                    } else {
                        console.log("Result: " + result);
                        var Elite_Kotak_Razorpay_Invoice = require('../models/elitekotakrazorpayinvoice');
                        Elite_Kotak_Razorpay_Invoice.remove(cond2, function (err, DbRemoved) {
                            Elite_Kotak_Razorpay_Invoice.insertMany(result, function (err, DbInserted) {
                                console.error('DBG', 'DbSync_Contact_Summary', 'save', err);
                            });
                        });
                        //res.json(result);
                    }
                });
                res.send('Sync Started');
            }
        });
    } catch (e) {
        res.send(e.stack);
    }
});
router.get('/sales_summary', LoadSession, function (req, res, next) {
    try {
        var arr_product = ['All', 'Car', 'CV', 'TW', 'Health', 'HospiCash', 'CoronaCare', 'Travel', 'Term'];
        let x;
        var obj_dashboard_summary = {};
        for (x of arr_product) {
            obj_dashboard_summary[x] = {
                'Summary': {}
            };
        }
        //obj_dashboard_summary['All'].Summary.Total.total++;
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        var today = moment().utcOffset("+05:30").startOf('Day');
        let type = (req.query.hasOwnProperty('type') && req.query['type'] !== '') ? req.query['type'] : '';
        let StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
        let EndDate = moment().utcOffset("+05:30").startOf('Day');
        if (type === 'DAILY') {
            StartDate = moment().utcOffset("+05:30").startOf('Day');
            EndDate = moment().utcOffset("+05:30").endOf('Day');
        }
        if (type === 'WEEKLY') {
            StartDate = moment().utcOffset("+05:30").startOf('week');
            EndDate = moment().utcOffset("+05:30").endOf('week');
        }
        if (type === 'MONTHLY') {
            StartDate = moment().utcOffset("+05:30").startOf('month');
            EndDate = moment().utcOffset("+05:30").endOf('month');
        }
        if (type === 'QUARTERLY') {
            StartDate = moment().utcOffset("+05:30").startOf('quarter');
            EndDate = moment().utcOffset("+05:30").endOf('quarter');
        }
        if (type === 'CUSTOM') {
            StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
            EndDate = moment(req.query['dateto']).utcOffset("+05:30").endOf('Day');
        }
        var cond_ud = {
            'Last_Status': {$in: arr_sale},
            "Modified_On": {"$gte": StartDate, "$lte": EndDate}
        };
        let channel = '';
        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
            if (req.query['page_action'] === 'all_daily') {
                if (req.query.hasOwnProperty('channel') && req.query['channel'] !== '' && req.query['channel'] !== 'ALL') {
                    if (req.query['channel'] === 'PBS' || req.query['channel'] === 'RBS') {
                        cond_ud['Premium_Request.subchannel'] = req.query['channel'];
                    } else {
                        cond_ud['Premium_Request.channel'] = req.query['channel'];
                    }
                }
                db_cache_key += '_all_daily';
            } else if (req.query['page_action'] === 'ch_all_daily') {
                var arr_ch_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                channel = req.obj_session.user.role_detail.channel;
                cond_ud = {
                    'Last_Status': {$in: arr_sale},
                    "Modified_On": {"$gte": StartDate, "$lte": EndDate},
                    "$or": [
                        {'Premium_Request.channel': channel},
                        {'Premium_Request.ss_id': {$in: arr_ch_ssid}}
                    ]
                };
                db_cache_key += '_ch_all_daily_' + channel;
            } else if (req.query['page_action'] === 'my_daily') {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);
                    cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
                }
                arr_ssid.push(req.obj_session.user.ss_id);
                cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
            }
            var reportModel = require('../models/report');
            var db_cache_key = '';
            var cache_key = '';
            var is_db_cache = false;
            reportModel.findOne({'Cache_Key': db_cache_key}, function (err, dbReport) {
                if (dbReport) {
                    res.json(dbReport._doc);
                } else {
                    var arr_status = ['Total', 'Sale', 'ErpCs', 'Renewal', 'Premium', 'Sum_Insured', 'Comm_Premium'];
                    var arr_src_all = ['total', 'PB-Direct', 'PB-CAMP', 'BOT', 'PB-SS', 'DC-POSP', 'DC-NON-POSP', 'DC-FBA', 'SM-POSP', 'SM-NON-POSP', 'SM-FBA', 'SM-FOS', 'DC-FOS', 'GS-FOS', 'GS-POSP', 'EM-FOS', 'EM-POSP', 'LA-FOS', 'LA-POSP', 'RBS'];
                    for (var k in arr_status) {
                        for (var k1 in arr_product) {
                            obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]] = {};
                            for (var k2 in arr_src_all) {
                                obj_dashboard_summary[arr_product[k1]]['Summary'][arr_status[k]][arr_src_all[k2]] = 0;
                            }
                        }
                    }
                    var arr_duration = {6: 'LESS THAN 6 HRS', 24: 'BETN 6 TO 24 HRS', 48: 'BETN 1 TO 2 DAYS', 120: 'BETN 2 TO 5 DAYS', 5000: 'MORE THEN 5 DAYS'};
                    var arr_hour_slot = {6: '12AM_TO_6AM', 12: '6AM_TO_12PM', 18: '12PM_TO_6PM', 21: '6PM_TO_9PM', 24: '9PM_TO_12AM'};
                    for (var k in arr_product) {
                        obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Nop'] = {};
                        obj_dashboard_summary[arr_product[k]]['Summary']['Insurer_Premium'] = {};
                        /*obj_dashboard_summary[arr_product[k]]['Summary']['Duration'] = {};
                         for (var q in arr_duration) {
                         obj_dashboard_summary[arr_product[k]]['Summary']['Duration'][arr_duration[q]] = 0;
                         }
                         obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'] = {};
                         for (var q in arr_hour_slot) {
                         obj_dashboard_summary[arr_product[k]]['Summary']['Payment_Preferred_Time'][arr_hour_slot[q]] = 0;
                         }*/
                        obj_dashboard_summary[arr_product[k]]['Summary']['Platform'] = {'PolicyBoss.com': 0};
                        if (arr_product[k] == 'Car' || arr_product[k] == 'TW' || arr_product[k] == 'CV') {
                            obj_dashboard_summary[arr_product[k]]['Summary']['Make'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Rto'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Fuel'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Cc'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Sub_Type'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Rollover'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['ZD'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['NCB'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['CPA'] = {};
                        }
                        if (arr_product[k] == 'Health' || arr_product[k] == 'HospiCash' || arr_product[k] == 'CoronaCare') {
                            obj_dashboard_summary[arr_product[k]]['Summary']['SI'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Policy_Type'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['Member_Count'] = {};
                            obj_dashboard_summary[arr_product[k]]['Summary']['City'] = {};
                        }
                    }
                    obj_dashboard_summary['ERP_CS_SUMMARY'] = {
                        'ALL': {count: 0},
                        'POLICYPENDING': {count: 0, list: []},
                        'PENDING': {count: 0, list: []},
                        'INPROGRESS': {count: 0, list: []},
                        'DUPLICATE': {count: 0, list: []},
                        'VALIDATION': {count: 0, list: []},
                        'TRYAGAIN': {count: 0, list: []},
                        'EXCEPTION': {count: 0, list: []},
                        'DONE': {count: 0, list: []},
                        'POLICYPUSHPENDING': {count: 0, list: []}

                    };
                    obj_dashboard_summary['RENEWAL_SUMMARY'] = {count: 0, list: []};
                    User_Data.find(cond_ud).select(['User_Data_Id', 'PB_CRN', 'Product_Id', 'Report_Summary', 'Link_Request', 'Premium_Request', 'Proposal_Request', 'Last_Status', 'Status_History', 'Created_On', 'Modified_On', 'Client_Id', 'Transaction_Data', 'ERP_CS', 'ERP_CS_DOC', 'Erp_Qt_Request_Core', 'Proposal_Request_Core', 'Insurer_Id']).exec(function (err, dbUsers) {
                        if (err) {
                            return res.send(err);
                        } else {

                            obj_dashboard_summary['condition'] = cond_ud;
                            for (let k in dbUsers) {
                                let Last_Status = 'Sale';
                                let user = dbUsers[k]._doc;
                                try {
                                    if ([1, 2, 3, 4, 10, 12, 17].indexOf(user['Product_Id']) > -1) {

                                    } else {
                                        continue;
                                    }

                                    let product = Const_Product[user['Product_Id']];
                                    if (user['Product_Id'] === 2 && user['Premium_Request']['is_hospi'] === 'yes') {
                                        product = 'HospiCash';
                                    }
                                    //console.log('Product', product);
                                    let client_key_val = 'PB-Direct';
                                    let agent_id = user['Premium_Request']['ss_id'];
                                    client_key_val = get_search_source(user);
                                    obj_dashboard_summary['All'].Summary.Total.total++;
                                    obj_dashboard_summary['All'].Summary.Total[client_key_val]++;
                                    if (!(user.hasOwnProperty('Erp_Qt_Request_Core') && user['Erp_Qt_Request_Core'] !== null)) {
                                        user['Erp_Qt_Request_Core'] = {};
                                        for (let y in user['Proposal_Request']) {
                                            user['Erp_Qt_Request_Core']['___' + y + '___'] = user['Proposal_Request'][y];
                                        }
                                    }
                                    var platform = 'PolicyBoss.com';
                                    if (user['Premium_Request'].hasOwnProperty('app_version')) {
                                        platform = user['Premium_Request']['app_version'].toString();
                                        if (platform === '2.0' && user['Premium_Request'].hasOwnProperty('device_id') === false) {
                                            platform = 'PolicyBoss.com';
                                        }
                                    }
                                    let insurer_id = 0;
                                    if (user['Erp_Qt_Request_Core'].hasOwnProperty('___insurer_id___')) {
                                        insurer_id = user['Erp_Qt_Request_Core']['___insurer_id___'];
                                    } else {
                                        insurer_id = user['Insurer_Id'];
                                    }
                                    var insurer_name = arr_ins[insurer_id];
                                    Last_Status = 'Sale';
                                    var transaction_amount = 0;
                                    transaction_amount = (user['Transaction_Data']['transaction_amount'] - 0) > 0 ? (user['Transaction_Data']['transaction_amount'] - 0) : (user['Erp_Qt_Request_Core']['___final_premium___'] - 0);
                                    transaction_amount = Math.round(transaction_amount);
                                    if (user.hasOwnProperty('ERP_CS') && user['ERP_CS'] !== '') {
                                        obj_dashboard_summary['All'].Summary['ErpCs'].total++;
                                        obj_dashboard_summary['All'].Summary['ErpCs'][client_key_val]++;
                                        obj_dashboard_summary[product].Summary['ErpCs'].total++;
                                        obj_dashboard_summary[product].Summary['ErpCs'][client_key_val]++;
                                        //cs summary start
                                        let ErpStatus = user['ERP_CS'];
                                        if (user['ERP_CS'].indexOf('CS') === 0) {
                                            ErpStatus = 'DONE';
                                        }
                                        obj_dashboard_summary['ERP_CS_SUMMARY']['ALL']['count']++;
                                        obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['count']++;
                                        obj_dashboard_summary['ERP_CS_SUMMARY'][ErpStatus]['list'].push(user['User_Data_Id']);
                                        if (user['Last_Status'] === 'TRANS_SUCCESS_WO_POLICY') {
                                            obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['count']++;
                                            obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPENDING']['list'].push(user['User_Data_Id']);
                                        }
                                        if (ErpStatus === 'DONE' && user.hasOwnProperty('ERP_CS_DOC') && user['ERP_CS_DOC'] === 'PENDING') {
                                            obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['count']++;
                                            obj_dashboard_summary['ERP_CS_SUMMARY']['POLICYPUSHPENDING']['list'].push(user['User_Data_Id']);
                                        }
                                        //cs summary stop
                                    }
                                    if (user.hasOwnProperty('Proposal_Request_Core') && user['Proposal_Request_Core'].hasOwnProperty('renewal_crn_udid')) {
                                        obj_dashboard_summary['All'].Summary['Renewal'].total++;
                                        obj_dashboard_summary['All'].Summary['Renewal'][client_key_val]++;
                                        obj_dashboard_summary[product].Summary['Renewal'].total++;
                                        obj_dashboard_summary[product].Summary['Renewal'][client_key_val]++;
                                        obj_dashboard_summary['RENEWAL_SUMMARY']['count']++;
                                        obj_dashboard_summary['RENEWAL_SUMMARY']['list'].push(user['User_Data_Id']);
                                        //cs summary stop
                                    }

                                    if (user['Erp_Qt_Request_Core']['___product_id___'] == 2 && user['Erp_Qt_Request_Core'].hasOwnProperty('___topup_applied___') && user['Erp_Qt_Request_Core']['___topup_applied___'] == true)
                                    {
                                        insurer_name += ' + TopUp';
                                    }
                                    if (transaction_amount > 0) {
                                        obj_dashboard_summary['All'].Summary['Premium'].total += transaction_amount;
                                        obj_dashboard_summary['All'].Summary['Premium'][client_key_val] += transaction_amount;
                                        obj_dashboard_summary[product].Summary['Premium'].total += transaction_amount;
                                        obj_dashboard_summary[product].Summary['Premium'][client_key_val] += transaction_amount;
                                        if (obj_dashboard_summary[product]['Summary']['Insurer_Premium'].hasOwnProperty(insurer_name) === false) {
                                            obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Insurer_Premium'][insurer_name] += transaction_amount;
                                    }


                                    if (obj_dashboard_summary[product]['Summary']['Insurer_Nop'].hasOwnProperty(insurer_name) === false) {
                                        obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name] = 0;
                                    }
                                    obj_dashboard_summary[product]['Summary']['Insurer_Nop'][insurer_name]++;
                                    //for product

                                    if (obj_dashboard_summary[product]['Summary']['Platform'].hasOwnProperty(platform) === false) {
                                        obj_dashboard_summary[product]['Summary']['Platform'][platform] = 0;
                                    }
                                    obj_dashboard_summary[product]['Summary']['Platform'][platform]++;
                                    if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {

                                        if (user['Erp_Qt_Request_Core']['___vehicle_insurance_type___'] == 'renew') {

                                            if (obj_dashboard_summary[product]['Summary']['Rollover'].hasOwnProperty(arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]) === false) {
                                                obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Rollover'][arr_ins[user['Erp_Qt_Request_Core']['___prev_insurer_id___']]]++;
                                            //for ncb
                                            var NCB = '';
                                            if (user['Erp_Qt_Request_Core']['___is_claim_exists___'] == 'yes') {
                                                NCB = 'WITH_CLAIM';
                                            } else {
                                                NCB = 'NCB_' + user['Erp_Qt_Request_Core']['___vehicle_ncb_current___'];
                                            }

                                            if (obj_dashboard_summary[product]['Summary']['NCB'].hasOwnProperty(NCB) === false) {
                                                obj_dashboard_summary[product]['Summary']['NCB'][NCB] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['NCB'][NCB]++;
                                        }
                                        //for zd
                                        var ZD = '';
                                        if (user['Erp_Qt_Request_Core']['___addon_zero_dep_cover___'] == 'yes') {
                                            ZD = 'WITH_ZD';
                                        } else {
                                            ZD = 'WITHOUT_ZD';
                                        }

                                        if (obj_dashboard_summary[product]['Summary']['ZD'].hasOwnProperty(ZD) === false) {
                                            obj_dashboard_summary[product]['Summary']['ZD'][ZD] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['ZD'][ZD]++;
                                        //for zd
                                        var CPA = '';
                                        if (user['Erp_Qt_Request_Core']['___is_pa_od___'] === 'yes' && user['Erp_Qt_Request_Core']['___premium_breakup_tp_cover_owner_driver_pa___'] > 0) {
                                            CPA = 'WITH_CPA';
                                        } else {
                                            CPA = 'WITHOUT_CPA';
                                        }

                                        if (obj_dashboard_summary[product]['Summary']['CPA'].hasOwnProperty(CPA) === false) {
                                            obj_dashboard_summary[product]['Summary']['CPA'][CPA] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['CPA'][CPA]++;
                                        //for product
                                        var Make = user['Erp_Qt_Request_Core']['___pb_make_name___'];
                                        if (obj_dashboard_summary[product]['Summary']['Make'].hasOwnProperty(Make) === false) {
                                            obj_dashboard_summary[product]['Summary']['Make'][Make] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Make'][Make]++;
                                        var Rto = user['Erp_Qt_Request_Core']['___registration_no_1___'];
                                        if (obj_dashboard_summary[product]['Summary']['Rto'].hasOwnProperty(Rto) === false) {
                                            obj_dashboard_summary[product]['Summary']['Rto'][Rto] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Rto'][Rto]++;
                                        if (obj_dashboard_summary[product]['Summary']['Fuel'].hasOwnProperty(user['Erp_Qt_Request_Core']['___pb_fuel_name___']) === false) {
                                            obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Fuel'][user['Erp_Qt_Request_Core']['___pb_fuel_name___']]++;
                                        if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']) === false) {
                                            obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___vehicle_insurance_type___']]++;
                                        var Policy_Sub_Type = (user['Erp_Qt_Request_Core'].hasOwnProperty('___vehicle_insurance_subtype___')) ? user['Erp_Qt_Request_Core']['___vehicle_insurance_subtype___'] : '1CH_0TP';
                                        Policy_Sub_Type = const_policy_subtype[Policy_Sub_Type];
                                        if (obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'].hasOwnProperty(Policy_Sub_Type) === false) {
                                            obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type] = 0;
                                        }
                                        obj_dashboard_summary[product]['Summary']['Policy_Sub_Type'][Policy_Sub_Type]++;
                                    }
                                    var sum_insured = 0;
                                    if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 12) {
                                        sum_insured = (user['Erp_Qt_Request_Core']['___vehicle_expected_idv___'] - 0);
                                    }
                                    if (user['Product_Id'] == 2 || user['Product_Id'] == 17) {
                                        sum_insured = (user['Erp_Qt_Request_Core']['___health_insurance_si___'] - 0);
                                    }
                                    if (user['Product_Id'] == 3) {
                                        sum_insured = (user['Erp_Qt_Request_Core']['___sum_insured___'] - 0);
                                    }
                                    sum_insured = Math.round(sum_insured);
                                    if (sum_insured > 0) {
                                        obj_dashboard_summary['All'].Summary['Sum_Insured'].total += sum_insured;
                                        obj_dashboard_summary['All'].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                        obj_dashboard_summary[product].Summary['Sum_Insured'].total += sum_insured;
                                        obj_dashboard_summary[product].Summary['Sum_Insured'][client_key_val] += sum_insured;
                                        if (user['Product_Id'] == 2 || user['Product_Id'] == 17) {
                                            if (obj_dashboard_summary[product]['Summary']['SI'].hasOwnProperty(sum_insured) === false) {
                                                obj_dashboard_summary[product]['Summary']['SI'][sum_insured] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['SI'][sum_insured]++;
                                            if (obj_dashboard_summary[product]['Summary']['Policy_Type'].hasOwnProperty(user['Erp_Qt_Request_Core']['___health_insurance_type___']) === false) {
                                                obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Policy_Type'][user['Erp_Qt_Request_Core']['___health_insurance_type___']]++;
                                            var Member_Count = user['Erp_Qt_Request_Core']['___member_count___'] - 0;
                                            if (obj_dashboard_summary[product]['Summary']['Member_Count'].hasOwnProperty(Member_Count) === false) {
                                                obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['Member_Count'][Member_Count]++;
                                            var City = user['Erp_Qt_Request_Core']['___city_name___'] + '-' + user['Erp_Qt_Request_Core']['___state_name___'];
                                            if (obj_dashboard_summary[product]['Summary']['City'].hasOwnProperty(City) === false) {
                                                obj_dashboard_summary[product]['Summary']['City'][City] = 0;
                                            }
                                            obj_dashboard_summary[product]['Summary']['City'][City]++;
                                        }
                                    }
                                    if (user['Status_History'] && false) {
                                        //PROPOSAL_LINK_SENT
                                        var sale_complete_on = null, link_sent_on = null, payment_preferred_time = null;
                                        for (var q in user['Status_History']) {
                                            if (agent_id > 0 && user['Status_History'][q]['Status'] == 'PROPOSAL_LINK_SENT' && link_sent_on === null) {
                                                link_sent_on = user['Status_History'][q]['StatusOn'];
                                            }
                                            if (arr_sale.indexOf(user['Status_History'][q]['Status']) > -1 && sale_complete_on === null) {
                                                sale_complete_on = user['Status_History'][q]['StatusOn'];
                                            }
                                        }
                                        var EndDate = moment(sale_complete_on);
                                        var payment_hour = moment(sale_complete_on).utcOffset("+05:30").hour() - 0;
                                        if (agent_id > 0) {
                                            var StartDate = moment(link_sent_on);
                                            var duration_tmp = moment.duration(EndDate.diff(StartDate));
                                            var hours = duration_tmp.asHours() - 0;
                                            var Duration = null;
                                            for (var q in arr_duration) {
                                                if (hours < q) {
                                                    Duration = arr_duration[q];
                                                    break;
                                                }
                                            }
                                            if (Duration === null) {
                                                Duration = 'MORE THEN 5 DAYS';
                                            }
                                            obj_dashboard_summary[product]['Summary']['Duration'][Duration]++;
                                        }
                                        var Payment_Hour_Slot = null;
                                        for (var q in arr_hour_slot) {
                                            if (payment_hour < q) {
                                                Payment_Hour_Slot = arr_hour_slot[q];
                                                break;
                                            }
                                        }
                                        obj_dashboard_summary[product]['Summary']['Payment_Preferred_Time'][Payment_Hour_Slot]++;
                                    }


                                    if (user['Product_Id'] == 1 || user['Product_Id'] == 10 || user['Product_Id'] == 2 || user['Product_Id'] == 12 || user['Product_Id'] == 17) {
                                        var Comm_Premium = 0;
                                        if (user['Product_Id'] == 2 || user['Product_Id'] == 17) {
                                            var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                        } else {
                                            if (user['Premium_Request'].hasOwnProperty('vehicle_insurance_subtype') && user['Premium_Request']['vehicle_insurance_subtype'].indexOf('0CH') > -1) {
                                                var Comm_Premium = Math.round(user['Erp_Qt_Request_Core']['___net_premium___'] - 0);
                                            } else {
                                                var Comm_Premium = Math.round((user['Erp_Qt_Request_Core']['___premium_breakup_od_final_premium___'] - 0) + (user['Erp_Qt_Request_Core']['___premium_breakup_addon_final_premium___'] - 0));
                                            }
                                        }

                                        if (Comm_Premium > 0) {
                                            obj_dashboard_summary['All'].Summary['Comm_Premium'].total += Comm_Premium;
                                            obj_dashboard_summary['All'].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                            obj_dashboard_summary[product].Summary['Comm_Premium'].total += Comm_Premium;
                                            obj_dashboard_summary[product].Summary['Comm_Premium'][client_key_val] += Comm_Premium;
                                        }

                                    }
                                    obj_dashboard_summary['All'].Summary[Last_Status].total++;
                                    obj_dashboard_summary['All'].Summary[Last_Status][client_key_val]++;
                                    obj_dashboard_summary[product].Summary[Last_Status].total++;
                                    obj_dashboard_summary[product].Summary[Last_Status][client_key_val]++;
                                } catch (e) {
                                    obj_dashboard_summary['Err'].push({
                                        'CRN': user['PB_CRN'],
                                        'Product': user['Product_Id'],
                                        'Err': e.stack
                                    })
                                    console.error('DBG', 'Sales_Summary', 'reportexception', user['PB_CRN'], e.stack);
                                }
                            }
                            if (is_db_cache) {
                                var reportModel = require('../models/report');
                                var reportObj = {};
                                reportObj['Cache_Key'] = db_cache_key;
                                for (let k in obj_dashboard_summary) {
                                    reportObj[k] = obj_dashboard_summary[k];
                                }
                                reportObj['Report_Date'] = req.query['datefrom'];
                                reportObj['Channel'] = (channel == "") ? 'ALL' : channel;
                                reportObj['Created_On'] = new Date();
                                console.error('Dbg', 'ReportSave', reportObj);
                                var reportModelObj = new reportModel(reportObj);
                                reportModelObj.save(function (err2, dbReport) {
                                    if (err2) {
                                        console.error('Exception', 'sales_summary', err2);
                                    }
                                });
                            }
                            if (cache_key) {
                                fs.writeFile(appRoot + "/tmp/cachereport/" + cache_key + ".log", JSON.stringify(obj_dashboard_summary), function (err) {
                                    if (err) {
                                        return console.error(err);
                                    }
                                });
                            }
                            var obj_cache_content = obj_dashboard_summary;
                            return res.json(obj_cache_content);
                        }
                    });
                }
            });
        }
    } catch (Ex) {
        console.error('Exception', 'sales_summary', Ex);
        res.send(Ex.stack);
    }
});
router.get('/sales_historic_summary', LoadSession, function (req, res, next) {
    try {
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        let report_type = (req.query.hasOwnProperty('report_type') && req.query['report_type'] !== '') ? req.query['report_type'] : 'NOP';
        let Product_Id = (req.query.hasOwnProperty('Product_Id') && req.query['Product_Id'] !== '') ? req.query['Product_Id'] : '';
        let Insurer_Id = (req.query.hasOwnProperty('Insurer_Id') && req.query['Insurer_Id'] !== '') ? req.query['Insurer_Id'] : '';
        let channel = (req.query.hasOwnProperty('channel') && req.query['channel'] !== '') ? req.query['channel'] : '';
        let subchannel = (req.query.hasOwnProperty('subchannel') && req.query['subchannel'] !== '') ? req.query['subchannel'] : '';
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_start = moment().utcOffset("+05:30").startOf('Day');
        var today_end = moment().utcOffset("+05:30").endOf('Day');
        var yesterday = moment().add(-1, 'days').utcOffset("+05:30").endOf('Day');
        var weekstart = moment().utcOffset("+05:30").startOf('week');
        weekstart = moment(weekstart).add(1, 'days');
        let weekstart_prev = moment(weekstart).add(-7, 'days').startOf('Day');
        let weekend_prev = moment(weekstart).add(-1, 'days').endOf('Day');
        let obj_sale_historic = {
            'TODAY': {
                'start': today_start,
                'end': today_end,
                'count': null
            },
            'WEEKLY': {
                'start': weekstart,
                'end': yesterday,
                'count': null
            },
            'WEEKLY-PREVIOUS': {
                'start': weekstart_prev,
                'end': weekend_prev,
                'count': null
            },
            'MONTHLY': {
                'start': moment().utcOffset("+05:30").startOf('month'),
                'end': yesterday,
                'count': null
            },
            'MONTHLY-PREVIOUS': {
                'start': moment().subtract(1, 'month').utcOffset("+05:30").startOf('month'),
                'end': moment().subtract(1, 'month').utcOffset("+05:30").endOf('month'),
                'count': null
            },
            'MONTHLY-PREVIOUS-2': {
                'start': moment().subtract(2, 'month').utcOffset("+05:30").startOf('month'),
                'end': moment().subtract(2, 'month').utcOffset("+05:30").endOf('month'),
                'count': null
            },
            'MONTHLY-PREVIOUS-3': {
                'start': moment().subtract(3, 'month').utcOffset("+05:30").startOf('month'),
                'end': moment().subtract(3, 'month').utcOffset("+05:30").endOf('month'),
                'count': null
            },
            'QUARTERLY': {
                'start': moment().utcOffset("+05:30").startOf('quarter'),
                'end': yesterday,
                'count': null
            },
            'QUARTERLY-PREVIOUS': {
                'start': moment().subtract(1, 'quarter').utcOffset("+05:30").startOf('quarter'),
                'end': moment().subtract(1, 'quarter').utcOffset("+05:30").endOf('quarter'),
                'count': null
            },
            'QUARTERLY-PREVIOUS-2': {
                'start': moment().subtract(2, 'quarter').utcOffset("+05:30").startOf('quarter'),
                'end': moment().subtract(2, 'quarter').utcOffset("+05:30").endOf('quarter'),
                'count': null
            },
            'YEARLY': {
                'start': moment('2020-04-01').utcOffset("+05:30").startOf('day'),
                'end': yesterday,
                'count': null
            },
            'YEARLY-2019': {
                'start': moment('2019-04-01').utcOffset("+05:30").startOf('day'),
                'end': moment('2020-03-31').utcOffset("+05:30").endOf('day'),
                'count': null
            },
            'YEARLY-2018': {
                'start': moment('2018-04-01').utcOffset("+05:30").startOf('day'),
                'end': moment('2019-03-31').utcOffset("+05:30").endOf('day'),
                'count': null
            },
            'YEARLY-2017': {
                'start': moment('2017-04-01').utcOffset("+05:30").startOf('day'),
                'end': moment('2018-03-31').utcOffset("+05:30").endOf('day'),
                'count': null
            },
            'ALL': {
                'start': moment('2017-04-01').utcOffset("+05:30").startOf('day'),
                'end': yesterday,
                'count': null
            }
        };
        let cond_ud = {};
        let db_cache_key = 'sale_historic';
        if (req.query.hasOwnProperty('page_action') && req.query['page_action'] !== '') {
            if (req.query['page_action'] === 'all_daily') {
                db_cache_key += '_all_daily';
            } else if (req.query['page_action'] === 'ch_all_daily') {
                var arr_ch_ssid = [];
                var arr_ch_list = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                arr_ch_list = req.obj_session.user.role_detail.channel_transaction;
                cond_ud = {
                    "$or": [
                        {'Premium_Request.channel': {$in: arr_ch_list}},
                        {'Premium_Request.ss_id': {$in: arr_ch_ssid}}
                    ]
                };
                db_cache_key += '_ch_all_daily_' + channel;
            } else if (req.query['page_action'] === 'my_daily') {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);
                    cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
                }
                arr_ssid.push(req.obj_session.user.ss_id);
                cond_ud['Premium_Request.ss_id'] = {$in: arr_ssid};
            }
            if (report_type === 'NOP' || report_type === 'NOP-ACTIVE_AGENT') {
                cond_ud['Last_Status'] = {$in: arr_sale};
            }
            if (Product_Id !== '') {
                if (Product_Id === 'HospiCash') {
                    cond_ud['Product_Id'] = 2;
                    cond_ud['Premium_Request.is_hospi'] = 'yes';
                } else {
                    Product_Id = Product_Id - 0;
                    cond_ud['Product_Id'] = Product_Id;
                }
            }
            if (Insurer_Id !== '') {
                Insurer_Id = Insurer_Id - 0;
                cond_ud['Insurer_Id'] = Insurer_Id;
            }
            if (channel !== '') {
                if (channel === 'PBS') {
                    subchannel = '';
                    cond_ud['Premium_Request.channel'] = 'CC';
                    cond_ud['Premium_Request.subchannel'] = 'PBS';
                } else if (channel === 'RBS') {
                    subchannel = '';
                    cond_ud['Premium_Request.channel'] = 'CC';
                    cond_ud['Premium_Request.subchannel'] = 'RBS';
                } else if (channel === 'DIRECT' && req.query['page_action'] === 'all_daily') {
                    subchannel = '';
                    cond_ud['Premium_Request.ss_id'] = 0;
                } else {
                    cond_ud['Premium_Request.channel'] = channel;
                }
            }
            if (subchannel !== '') {
                cond_ud['Premium_Request.subchannel'] = subchannel;
            }
            for (let k in obj_sale_historic) {
                cond_ud['Modified_On'] = {'$gte': obj_sale_historic[k]['start'], '$lte': obj_sale_historic[k]['end']};
                if (report_type === 'NOP' || report_type === 'SEARCH') {
                    User_Data.count(cond_ud).exec(function (err, dbUsersCount) {
                        if (err) {
                            return res.send(err);
                        } else {
                            obj_sale_historic[k]['count'] = dbUsersCount || 0;
                            sale_historic_handler(obj_sale_historic, req, res);
                        }
                    });
                }
                if (report_type === 'NOP-ACTIVE_AGENT' || report_type === 'SEARCH-ACTIVE_AGENT') {
                    /*if (cond_ud.hasOwnProperty('ss_id') === false) {
                     cond_ud['ss_id'] = {'$ne': 0};
                     }*/
                    User_Data.distinct('Premium_Request.ss_id', cond_ud).exec(function (err, dbActiveAgent) {
                        if (err) {
                            return res.send(err);
                        } else {
                            obj_sale_historic[k]['count'] = dbActiveAgent.length;
                            sale_historic_handler(obj_sale_historic, req, res);
                        }
                    });
                }
            }
        }
    } catch (Ex) {
        console.error('Exception', 'sales_summary', Ex.stack);
        res.send(Ex.stack);
    }
});
router.get('/campaign_performace', LoadSession, function (req, res, next) {
    try {
        var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        let utm_source = (req.query.hasOwnProperty('utm_source') && req.query['utm_source'] !== '') ? req.query['utm_source'] : 'LERP_FRESH';
        let report_type = (req.query.hasOwnProperty('report_type') && req.query['report_type'] !== '') ? req.query['report_type'] : 'NOP';
        let Product_Id = (req.query.hasOwnProperty('Product_Id') && req.query['Product_Id'] !== '') ? req.query['Product_Id'] : '';
        let Insurer_Id = (req.query.hasOwnProperty('Insurer_Id') && req.query['Insurer_Id'] !== '') ? req.query['Insurer_Id'] : '';
        let channel = (req.query.hasOwnProperty('channel') && req.query['channel'] !== '') ? req.query['channel'] : '';
        let subchannel = (req.query.hasOwnProperty('subchannel') && req.query['subchannel'] !== '') ? req.query['subchannel'] : '';
        var today = moment().utcOffset("+05:30").startOf('Day');
        var today_start = moment().utcOffset("+05:30").startOf('Day');
        var today_end = moment().utcOffset("+05:30").endOf('Day');
        var yesterday = moment().add(-1, 'days').utcOffset("+05:30").endOf('Day');
        let obj_sale_historic = {
            'TODAY': {
                'start': today_start,
                'end': today_end,
                'count': null
            },
            'MONTHLY': {
                'start': moment().utcOffset("+05:30").startOf('month'),
                'end': yesterday,
                'count': null
            },
            'QUARTERLY': {
                'start': moment().utcOffset("+05:30").startOf('quarter'),
                'end': yesterday,
                'count': null
            },
            'YEARLY': {
                'start': moment('2020-04-01').utcOffset("+05:30").startOf('day'),
                'end': yesterday,
                'count': null
            }
        };
        let cond_ud = {};
        if (report_type === 'NOP') {
            cond_ud['Last_Status'] = {$in: arr_sale};
        }
        if (report_type === 'PROPOSAL') {
            cond_ud['Last_Status'] = {$nin: ['SEARCH', 'TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY']};
        }


        if (Product_Id !== '') {
            if (Product_Id === 'HospiCash') {
                cond_ud['Product_Id'] = 2;
                cond_ud['Premium_Request.is_hospi'] = 'yes';
            } else {
                Product_Id = Product_Id - 0;
                cond_ud['Product_Id'] = Product_Id;
            }
        }
        if (Insurer_Id !== '') {
            Insurer_Id = Insurer_Id - 0;
            cond_ud['Insurer_Id'] = Insurer_Id;
        }

        if (utm_source === 'non_camp') {
            cond_ud['Premium_Request.ss_id'] = 0;
            cond_ud['Premium_Request.utm_source'] = {$exists: false};
            cond_ud['Premium_Request.quote_mode'] = {$exists: false};
        } else if (utm_source === 'other_camp') {
            cond_ud['Premium_Request.ss_id'] = 0;
            cond_ud['Premium_Request.utm_source'] = {$exists: true, $nin: ['LERP_FRESH', 'LERP_Renewal', 'agent_campaign']};
        } else if (utm_source === 'LERP_FRESH') {
            cond_ud['Premium_Request.utm_source'] = {$in: ['LERP_FRESH', 'LERP_Renewal']};
            cond_ud['Premium_Request.mobile'] = {$ne: '9999999999'};
        } else {
            cond_ud['Premium_Request.utm_source'] = utm_source;
        }

        for (let k in obj_sale_historic) {
            cond_ud['Modified_On'] = {'$gte': obj_sale_historic[k]['start'], '$lte': obj_sale_historic[k]['end']};
            if (report_type === 'U_SEARCH') {
                User_Data.distinct('PB_CRN', cond_ud).exec(function (err, dbUsersList) {
                    if (err) {
                        return res.send(err);
                    } else {
                        obj_sale_historic[k]['count'] = dbUsersList.length || 0;
                        sale_historic_handler(obj_sale_historic, req, res);
                    }
                });
            } else {
                User_Data.count(cond_ud).exec(function (err, dbUsersCount) {
                    if (err) {
                        return res.send(err);
                    } else {
                        obj_sale_historic[k]['count'] = dbUsersCount || 0;
                        sale_historic_handler(obj_sale_historic, req, res);
                    }
                });
            }
        }
    } catch (Ex) {
        console.error('Exception', 'campaign_performace', Ex.stack);
        res.send(Ex.stack);
    }
});
router.post('/lead_allocation', function (req, res) {
    var lead_allocation = require('../models/lead_allocation');
    //var objdata = new lead_allocation();
    var ObjRequest = req.body.request_json;
    var objArray = [];
    for (var i in  ObjRequest) {
        var objdata = {};
        for (var key in ObjRequest[i]) {
            if (key === "Lead_Id" || key === "Caller_Id") {
                objdata[key] = parseInt(ObjRequest[i][key]);
            } else {
                objdata[key] = ObjRequest[i][key];
            }

        }
        objdata.Created_On = new Date();
        objdata.Modified_On = new Date();
        //objArray.push(objdata);
        var objModel = new lead_allocation(objdata);
        objModel.save(function (err, objDbUserData) {
            if (err) {
                res.json({'Status': "Failure"});
            } else {
                res.json({'Status': "Success"});
            }
        });
    }
});
router.post('/lead_disposition_save', function (req, res) {
    var lead_disposition = require('../models/lead_disposition');
    var formidable = require('formidable');
    var form = new formidable.IncomingForm();
    var fs = require('fs');
    form.parse(req, function (err, fields, files) {
        console.log(fields);
        var pdf_web_path = "";
        if (files.hasOwnProperty('disposition_file')) {

            var pdf_file_name = files['disposition_file'].name;
            var path = appRoot + "/tmp/disposition/";
            var pdf_sys_loc_horizon = path + fields["lead_id"] + '/' + pdf_file_name;
            pdf_web_path = config.environment.downloadurl + "/disposition/" + fields["lead_id"] + '/' + pdf_file_name;
            var oldpath = files.disposition_file.path;
            if (fs.existsSync(path + fields["lead_id"]))
            {

            } else
            {
                fs.mkdirSync(path + fields["lead_id"]);
            }
            fs.readFile(oldpath, function (err, data) {
                if (err) {
                    console.error('Read', err);
                }
                console.log('File read!');
                // Write the file
                fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                    if (err) {
                        console.error('Write', err);
                    }
                });
                // Delete the file
                fs.unlink(oldpath, function (err) {
                    if (err)
                        throw err;
                    console.log('File deleted!');
                });
            });
        }
        var arg = {
            Lead_Id: fields["lead_id"],
            Status: fields["dsp_status"],
            Sub_Status: fields["dsp_substatus"],
            Created_On: new Date(),
            Modified_On: new Date(),
            Remark: fields["dsp_remarks"],
            ss_id: fields["ss_id"],
            Is_Latest: 1,
            fba_id: fields["fba_id"],
            File_Name: pdf_web_path,
            Lead_Status: fields["Lead_Status"],
            Customer_Name: fields["Customer_Name"],
            Customer_Mobile: fields["Customer_Mobile"],
            Policy_Expiry_Date: fields["Policy_expiry_date"],
            Next_Call_Date: fields["Next_Call_Date"]
        };
        var dispositionObj = new lead_disposition(arg);
        dispositionObj.save(function (err) {
            if (err)
                throw err;
            console.log('File uploaded and moved!');
            var lead = require('../models/leads');
            var objData = {'lead_disposition': fields["dsp_status"],
                'lead_subdisposition': fields["dsp_substatus"],
                'lead_disposition_assigned_on': new Date()
            };
            lead.update({'Lead_Id': fields["lead_id"]}, objData, function (err, doc) {
                //console.log('email_event_update', err, doc);
            });
            res.json({'Msg': 'Success'});
        });
    });
});
function sale_historic_handler(obj_sale_historic, req, res) {
    let all_done = true;
    for (let k in obj_sale_historic) {
        if (obj_sale_historic[k]['count'] === null) {
            all_done = false;
            break;
        }
    }
    if (all_done === true) {
        res.json(obj_sale_historic);
    }
}
router.get('/active_agent', LoadSession, function (req, res, next) {
    try {
        let arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
        let todayEod = moment().utcOffset("+05:30").endOf('Day').format('YYYY-MM-DD');
        let dateto = (req.query.hasOwnProperty('dateto')) ? req.query['dateto'] : todayEod;
        dateto = moment(dateto).utcOffset("+05:30").endOf('Day');
        let datefrom = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
        let cond_ud = {
            "Last_Status": {$in: arr_sale},
            "Premium_Request.ss_id": {$gt: 0},
            "Modified_On": {"$gte": datefrom, "$lte": dateto}
        };
        let Product_Id = (req.query.hasOwnProperty('product_id')) ? req.query['product_id'] - 0 : 0;
        let channel = (req.query.hasOwnProperty('channel')) ? req.query['channel'] : '';
        let subchannel = (req.query.hasOwnProperty('subchannel')) ? req.query['subchannel'] : '';
        if (Product_Id > 0) {
            cond_ud['Product_Id'] = Product_Id;
        }
        if (channel !== '') {
            cond_ud['Premium_Request.channel'] = channel;
        }
        if (subchannel !== '') {
            cond_ud['Premium_Request.subchannel'] = subchannel;
        }

        User_Data.find(cond_ud).select({'Premium_Request': 1}).exec(function (err, dbUserDatas) {
            if (err) {
                return res.send(err);
            } else {
                try {
                    let obj_agent = {};
                    for (let k in dbUserDatas) {
                        let obj_ud = dbUserDatas[k]._doc;
                        let ss_id = obj_ud['Premium_Request']['ss_id'];
                        if (obj_agent.hasOwnProperty(ss_id) === false) {
                            obj_agent[ss_id] = {
                                'ss_id': ss_id,
                                'fba_id': obj_ud['Premium_Request']['fba_id'] || 0,
                                'erp_id': obj_ud['Premium_Request']['posp_erp_id'] || 0,
                                'agent_name': obj_ud['Premium_Request']['posp_first_name'] + ' ' + obj_ud['Premium_Request']['posp_last_name'],
                                'agent_city': obj_ud['Premium_Request']['posp_agent_city'] || 'NA',
                                'channel': obj_ud['Premium_Request']['channel'] || 'NA',
                                'subchannel': obj_ud['Premium_Request']['subchannel'] || 'NA'
                            };
                        }
                    }
                    let content_html = '<!DOCTYPE html><html><head><title>Agent Report</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    content_html += '<div class="report" >Agent List(Total Count : ' + Object.keys(obj_agent).length + ')<span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">ReportList</span>';
                    content_html += arr_object_to_table(Object.values(obj_agent));
                    content_html += '</div><br>';
                    content_html += '</body></html>';
                    res.send(content_html);
                } catch (e) {
                    res.send(e.stack);
                }
            }
        });
    } catch (Ex) {
        console.error('Exception', 'active_agent', Ex.stack);
        res.send(Ex.stack);
    }
});
router.post('/razorpay_payment', function (req, res) {
    try {
        var objres = {};
        var razorpay_payment = require('../models/razorpay_payment');
        var razorpay_payment_data = new razorpay_payment();
        for (var key in req.body)
        {
            razorpay_payment_data[key] = req.body[key];
        }
        razorpay_payment_data.Created_On = new Date();
        razorpay_payment_data.Modified_On = new Date();
        razorpay_payment_data.Transaction_Status = "Pending";
        razorpay_payment.find({}).sort({"Transaction_Id": -1}).limit(1).exec(function (err1, dbRequest) {
            if (err1)
            {

            } else {
                razorpay_payment_data.save(function (err) {
                    if (err) {
                        objres = {
                            "MSG": err,
                            "Status": "Fail",
                            "Transaction_Id": "0"
                        };
                        res.json(objres);
                    } else {
                        if (dbRequest.length === 0)
                        {
                            objres = {
                                "MSG": "Congratulation !! Transaction data updated successfully. Kindly note your Transaction Id : 1",
                                "Status": "Success",
                                "Transaction_Id": 1
                            };
                            res.json(objres);
                        } else
                        {
                            objres = {
                                "MSG": "Congratulation !! Transaction data updated successfully. Kindly note your Transaction Id : " + (dbRequest[0]['_doc'].Transaction_Id - 0 + 1),
                                "Status": "Success",
                                "Transaction_Id": dbRequest[0]['_doc'].Transaction_Id - 0 + 1
                            };
                            res.json(objres);
                        }
                    }
                });
            }
        });
    } catch (e) {
        objres = {
            "MSG": e.stack,
            "Status": "Fail",
            "Transaction_Id": "0"
        };
        res.json(objres);
    }
});
router.get('/posp_inquiry_report', function (req, res, next) {
    let Posp_Inquiry = require('../models/posp_enquiry');
    let StartDate = moment().add(-1, 'days').utcOffset("+05:30").startOf('Day');
    let EndDate = moment().add(-1, 'days').utcOffset("+05:30").endOf('Day');
    let cond = {
        'Created_On': {'$gte': StartDate, '$lte': EndDate}
    };
    Posp_Inquiry.find(cond, function (err, dbPospInquiries) {
        try {
            let obj_posp = {
                'channel_1': [],
                'channel_2': [],
                'channel_3': [],
                'channel_4': []
            };
            for (let k in dbPospInquiries) {
                let channel_id = k % 4;
                obj_posp['channel_' + (channel_id + 1)].push(dbPospInquiries[k]._doc);
            }
            if (dbPospInquiries.length > 0) {
                let inc = 0;
                var ObjectsToCsv = require('objects-to-csv');
                var toMoment = moment().add(-1, 'days').utcOffset("+05:30").format("DDMMMYYYY");
                for (let k in obj_posp) {
                    inc++;
                    var reporttitle = 'posp_inquiry_' + k + '_' + toMoment;
                    var content_html = '<!DOCTYPE html><html><head><style>*,html,body{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>POSP INQUIRY</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                    content_html += '<div class="report" ><span>POSP INQUIRY ( Count: ' + obj_posp[k].length + ')</span><br>';
                    let file_weburl = config.environment.downloadurl + "/report/" + reporttitle + ".csv";
                    content_html += '<p><a href="' + file_weburl + '" target="_BLANK">' + file_weburl + '</a></p>';
                    let csv = new ObjectsToCsv(obj_posp[k]);
                    let csv_file = appRoot + "/tmp/report/" + reporttitle + ".csv";
                    csv.toDisk(csv_file);
                    content_html += '</div><br><br></body></html>';
                    if (req.query.hasOwnProperty('email') && req.query['email'] === 'yes') {
                        var Email = require('../models/email');
                        var objModelEmail = new Email();
                        var subject = '[REPORT][POSPINQUIRY]';
                        if (inc == 1) {
                            arr_to = ['srinivas@policyboss.com'];
                        }
                        if (inc == 2) {
                            arr_to = ['susheel.menon@landmarkinsurance.in'];
                        }
                        if (inc == 3) {
                            arr_to = ['kevin.menezes@policyboss.com'];
                        }
                        if (inc == 4) {
                            arr_to = ['gagandeep.singh@policyboss.com'];
                        }
                        subject += ' ALLOTED TO ' + arr_to[0].split('@')[0] + ' :: ' + toMoment;
                        if (req.query['dbg'] === 'yes') {
                            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, subject.toUpperCase(), content_html, '', '');
                        } else {
                            objModelEmail.send('notifications@policyboss.com', arr_to.join(','), subject.toUpperCase(), content_html, 'varun.kaushik@policyboss.com', config.environment.notification_email);
                        }
                    }
                }
                res.send('SEND');
            } else {
                res.send('NO RECORDS');
            }
        } catch (e) {
            res.send(e.stack);
        }
    });
});
router.post('/product_share_url', function (req, res) {
    try {
        var product_share = require('../models/product_share');
        var product_share_history = require('../models/product_share_history');
        var objReq = req.body;
        var ss_id = objReq['ss_id'] - 0;
        var fba_id = objReq['fba_id'] - 0;
        var sub_fba_id = objReq['sub_fba_id'] - 0;
        var product_id = objReq['product_id'] - 0;
        var product_name = "";
        var send_url, URL = "";
        var msg = "";
        if (product_id === 17)
        {
            msg = "Beat The Pandemic by choosing Corona Insurance along with wellness benefits such as Doctor on Call, Message Relay and more.\n\n";
            msg += "Ensure no unplanned medical event disrupts the safety of your family.\n\n";
            msg += "Stay Safe, Insure Online\n";
        } else if (product_id === 23)
        {
            msg = "Secure your good health via a health insurance offering hosp. Upto SI, 405 day care treatments, life long renewablity and much more.\n\n";
            msg += "No Medicals up to age 50.\n\n";
            msg += "Stay Safe, Stay Healthy, Stay Insured\n";
        } else
        {
            msg = "Let's beat the threat of Corona Virus together, by minimizing risk from personal interactions.\n\n";
            msg += "In case you intend to purchase any insurance product, contact me or click here!\n\n";
            msg += "Stay Safe, Make Insurance Payments/ Purchase Online!\n";
        }
        if (ss_id === 0 || product_id === 0 || product_id === "") {
            res.json({'Msg': "Ss_id,Fba_id,Product_id is Required", 'URL': "", 'Status': "Failure"});
        } else
        {
            if (product_id === 1) {
                product_name = "Car";
                URL = "https://www.policyboss.com/car-insurance?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPCI";
            } else if (product_id === 10) {
                product_name = "Bike";
                URL = "https://www.policyboss.com/two-wheeler-insurance?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPTW";
            } else if (product_id === 2) {
                product_name = "Health";
                URL = "https://www.policyboss.com/Health/?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPHI";
            } else if (product_id === 12) {
                product_name = "CV";
                URL = "https://www.policyboss.com/commercial-vehicle-insurance/commercial-vehicle-insurance.html?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPCV";
            } else if (product_id === 17) {
                product_name = "Corona Care";
                URL = 'http://horizon.policyboss.com/wellness_product?ss_id=' + ss_id + '&fba_id=' + fba_id + '&sub_fba_id=' + sub_fba_id;
            } else if (product_id === 23) {
                product_name = "Group Health Care";
                URL = 'http://qa-horizon.policyboss.com/kotak-group-health-care?ss_id=' + ss_id + '&fba_id=' + fba_id + '&sub_fba_id=' + sub_fba_id;
            } else if (product_id === 22) {
                product_name = "Hospi Fund";
                URL = "https://www.policyboss.com/Health/?utm_source=agent_campaign&utm_medium=" + ss_id + "_" + fba_id + "_" + sub_fba_id + "&utm_campaign=FMPHI";
            }
            var Client = require('node-rest-client').Client;
            var client = new Client();
            var bitlyURL;
            if (product_id === 17 || product_id === 23)
            {
                bitlyURL = "https://api-ssl.bitly.com/v3/shorten?access_token=" + config.environment.bitly_access_token + '&longUrl=' + encodeURIComponent(URL);
            } else
            {
                bitlyURL = config.environment.shorten_url + '?longUrl=' + encodeURIComponent(URL);
            }
            var pro_share = new product_share();
            product_share.find({"ss_id": ss_id, "fba_id": fba_id, "product_id": product_id}, function (err, dbData) {
                if (dbData.length > 0) {
                    var count = parseInt(dbData[0]._doc['Share_Count']) + 1;
                    send_url = dbData[0]._doc['URL'];
                    var objProduct = {
                        "Share_Count": count,
                        "Modified_On": new Date()
                    };
                    product_share.update({"ss_id": ss_id, "fba_id": fba_id, "product_id": product_id}, {$set: objProduct}, function (err, objproduct_share) {
                        if (err) {
                            res.json({'Msg': err, 'URL': "", 'Status': "Failure"});
                        } else {
                            var objproduct_share_history = new product_share_history();
                            for (var key in req.body) {
                                objproduct_share_history[key] = req.body[key];
                            }
                            objproduct_share_history.Created_On = new Date();
                            objproduct_share_history.Modified_On = new Date();
                            objproduct_share_history.URL = send_url;
                            objproduct_share_history.save(function (err1) {
                                if (err1) {
                                    res.json({'Msg': err1, 'URL': "", 'Status': "Failure"});
                                } else {
                                    res.json({'Msg': msg, 'URL': send_url, 'Status': "Success"});
                                }
                            });
                        }
                    });
                } else
                {
                    client.get(bitlyURL, function (data, response) {
                        console.log('Bitly-', data);
                        if (product_id === 17 || product_id === 23)
                        {
                            if (data && data.status_code === 200) {
                                send_url = data.data.url;
                            }
                        } else {
                            if (data && data.Short_Url !== "") {
                                send_url = data.Short_Url;
                            }
                        }
                        for (var key in req.body) {
                            pro_share[key] = req.body[key];
                        }
                        pro_share.Created_On = new Date();
                        pro_share.Modified_On = new Date();
                        pro_share.Share_Count = 1;
                        pro_share.URL = send_url;
                        pro_share.save(function (err) {
                            if (err) {
                                res.json({'Msg': err, 'URL': "", 'Status': "Failure"});
                            } else {
                                var objproduct_share_history = new product_share_history();
                                for (var key in req.body) {
                                    objproduct_share_history[key] = req.body[key];
                                }
                                objproduct_share_history.Created_On = new Date();
                                objproduct_share_history.Modified_On = new Date();
                                objproduct_share_history.URL = send_url;
                                objproduct_share_history.save(function (err1) {
                                    if (err1) {
                                        res.json({'Msg': err1, 'URL': "", 'Status': "Failure"});
                                    } else {
                                        res.json({'Msg': msg, 'URL': send_url, 'Status': "Success"});
                                    }
                                });
                            }
                        });
                    });
                }
            });
            //});
        }

    } catch (e) {
        res.json({'Msg': e, 'URL': "", 'Status': "Failure"});
    }
});
function pg_drop_off_handler(req, res, response_summary, objPGDropoffSummary) {
    if (response_summary.short_count === Object.keys(objPGDropoffSummary).length) {
        response_summary.count = objPGDropoffSummary.length;
        response_summary.response = objPGDropoffSummary;
        res.send('<pre>' + JSON.stringify(response_summary, undefined, 2) + '</pre>');
    }
}
module.exports = router;
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var config = require('config');
var mongoose = require('mongoose');
var MongoClient = require('mongodb').MongoClient;
var path = require('path');
var fs = require('fs');
var moment = require('moment');
var appRoot = path.dirname(path.dirname(require.main.filename));
var Email = require('../models/email');
var Sync_Contact = require('../models/sync_contact');
var sync_contact_erp_data = require('../models/sync_contact_erp_data');
var http = require('http');

var const_free_lead = 25;
let obj_RsaData;
mongoose.connect(config.db.connection + ':27017/' + config.db.name, {useMongoClient: true}); // connect to our database
module.exports.controller = function (app) {
    app.get('/sync_contacts/sync_sale', function (req, res, next) {
        try {
            var User_Data = require('../models/user_data');
            var arr_sale = ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY'];
            var today = moment().utcOffset("+05:30").startOf('Day');
            var yesterday = moment(today).add(-1, 'days').format("YYYY-MM-DD");
            let type = (req.query.hasOwnProperty('type') && req.query['type'] !== '') ? req.query['type'] : '';
            if (type === 'DAILY') {
                StartDate = moment(today).add(-1, 'days').startOf('Day');
                EndDate = moment(today).add(-1, 'days').endOf('Day');
            }
            if (type === 'CUSTOM') {
                StartDate = moment(req.query['datefrom']).utcOffset("+05:30").startOf('Day');
                EndDate = moment(req.query['dateto']).utcOffset("+05:30").endOf('Day');
            }
            var cond_ud = {
                'Product_Id': 1,
                'Last_Status': {$in: arr_sale},
                "Modified_On": {"$gte": StartDate, "$lte": EndDate}
            };
            User_Data.find(cond_ud).sort({User_Data_Id: 1}).select({User_Data_Id: 1, PB_CRN: 1, ERP_CS: 1, 'Premium_Request': 1, 'Proposal_Request_Core': 1, Modified_On: 1}).exec(function (err, dbUserDatas) {
                if (err) {
                    return res.send(err);
                }
                try {
                    var arr_report = {
                        'summary': {
                            'total': 0,
                            'process': 0,
                            'found': 0,
                            'err': 0
                        },
                        'list': {},
                        'found': [],
                        'err': [],
                    };
                    arr_report['summary']['total'] = dbUserDatas.length;
                    for (let j in dbUserDatas) {
                        let ud = dbUserDatas[j]._doc;
                        try {
                            let ss_id = ud['Premium_Request']['ss_id'];
                            let mobile = ud['Proposal_Request_Core']['mobile'] - 0;
                            let obj_Ud = {
                                'ss_id': ss_id,
                                'User_Data_Id': ud['User_Data_Id'],
                                'PB_CRN': ud['PB_CRN'],
                                'Mobile': mobile,
                                'On': ud['Modified_On'],
                                'Registration_No': ud['Proposal_Request_Core']['registration_no'],
                                'Name': ud['Proposal_Request_Core']['first_name'] + ' ' + ud['Proposal_Request_Core']['last_name'],
                                'Vehicle': ud['Premium_Request']['vehicle_full'],
                                'YOM': ud['Premium_Request']['vehicle_manf_date'].split('-')[0].toString()
                            };
                            arr_report['list'][ss_id + '_' + mobile] = obj_Ud;
                            sale_sync_handler(req, res, arr_report, ss_id, mobile, obj_Ud);
                        } catch (e) {
                            arr_report['summary']['process']++;
                            arr_report['summary']['err']++;
                            arr_report['err'].push({
                                'DT': ud.PB_CRN,
                                'err': e.stack
                            });
                            if (arr_report['summary']['total'] === arr_report['summary']['process']) {
                                sync_contact_sale_match_email(arr_report, req);
                                res.send('<pre>' + JSON.stringify(arr_report) + '</pre>');
                            }
                        }
                    }
                } catch (e) {
                    res.send(e.stack);
                }
                //res.send('<pre>' + JSON.stringify(arr_report) + '</pre>');
            });
        } catch (e) {
            res.send(e.stack);
        }
    });
    function sale_sync_handler(req, res, arr_report, ss_id, mobile, obj_Ud) {
        var Condi_Sync_Contanct_Lead = {
            'ss_id': ss_id,
            'sync_Mobile': mobile.toString(),
            //'Is_Customer_Data': null,
            //'yom': obj_Ud['YOM']
        };
        sync_contact_erp_data.findOne(Condi_Sync_Contanct_Lead).exec(function (err, db_sync_contact_erp_data) {
            if (!err) {
                arr_report['summary']['process']++;
                try {
                    arr_report['list'][ss_id + '_' + mobile]['found'] = 'no';
                    if (db_sync_contact_erp_data) {
                        arr_report['list'][ss_id + '_' + mobile]['found'] = 'yes';
                        arr_report['list'][ss_id + '_' + mobile]['lead_yom'] = db_sync_contact_erp_data._doc['yom'] || 'NA';
                        arr_report['list'][ss_id + '_' + mobile]['lead_name'] = db_sync_contact_erp_data._doc['name'] || 'NA';
                        arr_report['list'][ss_id + '_' + mobile]['lead_vehicle'] = (db_sync_contact_erp_data._doc['make']) ? db_sync_contact_erp_data._doc['make'] + '|' + db_sync_contact_erp_data._doc['model'] + '|' + db_sync_contact_erp_data._doc['variant'] : 'NA';
                        arr_report['summary']['found']++;
                        arr_report['found'].push(arr_report['list'][ss_id + '_' + mobile]);
                    }
                    if (req.query['op'] === 'execute') {
                        sync_contact_erp_data.update(Condi_Sync_Contanct_Lead, {$set: {'Is_Sale': 1, 'Sale_On': obj_Ud['On'], 'Sale_Crn': obj_Ud['PB_CRN']}}).exec(function (err, sync_contact_erp_data_count) {
                            console.error('DBG', 'sale_sync', Condi_Sync_Contanct_Lead, sync_contact_erp_data_count);
                        });
                    }
                    if (arr_report['summary']['total'] === arr_report['summary']['process']) {
                        sync_contact_sale_match_email(arr_report, req);
                        res.send('<pre>' + JSON.stringify(arr_report) + '</pre>');
                    }
                } catch (e) {
                    arr_report['summary']['err']++;
                    arr_report['err'].push({
                        'DT': obj_Ud.PB_CRN,
                        'cberr': e.stack
                    });
                    if (arr_report['summary']['total'] === arr_report['summary']['process']) {
                        sync_contact_sale_match_email(arr_report, req);
                        res.send('<pre>' + JSON.stringify(arr_report) + '</pre>');
                    }
                }
            }
        });
    }
    function sync_contact_sale_match_email(arr_report, req) {
        var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
        var Email = require('../models/email');
        var objModelEmail = new Email();
        let sub = ((req.query['op'] === 'execute') ? '' : '[PREVIEW]') + '[SCHEDULER]SYNC_CONTACT::SALE_MATCH:Total-' + arr_report['found'].length + '::On-' + moment().format('YYYYMMDD_HH:mm:ss');
        let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
        res_report += '<p><h1>SYNC CONTACT LEAD ALLOCATION REPORT :: Total Lead - ' + arr_report['found'].length + ' :: ' + today_str + '</h1></p>';
        res_report += arrayobjectToHtml(arr_report['found'], 'SYNC CONTACT :: SALE MATCH', '', ['Mobile', 'found']);
        res_report += '</p>';
        res_report += '</body></html>';
        objModelEmail.send('customercare@policyboss.com', config.environment.notification_email, sub, res_report, '', '', '');
    }

    app.post('/sync_contacts/contact_entry', agent_details_pre, function (req, res) {
        var objRequestCore = req.body;
        // console.log("POST :: objRequestCore :: ", objRequestCore);
        var fbaid = objRequestCore['fbaid'] - 0;
        var ssid = objRequestCore['ssid'] - 0;
        var syncPospSummary = {
            'Message': '',
            'Status': '',
            'StatusNo': 0
        };
        var mobile_list = [];
        var arrContact = [];
        var exist_contact = [];
        var today = moment().utcOffset("+05:30");
        var today_str = moment(today).format("YYYYMMD");
        var objRequest = {
            'dt': today.toLocaleString(),
            'resp': req.body
        };
        fs.appendFile(appRoot + "/tmp/log/contact_" + today_str + ".log", JSON.stringify(objRequest) + "\r\n", function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("The file was saved!");
        });
        if (ssid > 0 && ssid !== 5)
        {
            for (var k in objRequestCore['contactlist'])
            {
                mobile_list.push(objRequestCore['contactlist'][k]['mobileno']);
            }
            var cond = {
                "mobileno": {
                    "$in": mobile_list
                },
                'ss_id': ssid
            };
            //console.log(cond);
            MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err1, db) {
                var sync_contacts = db.collection('sync_contacts');
                sync_contacts.find(cond).toArray(function (err2, dbItems) {
                    //exist_contact = dbItems;
                    if (err2) {
                        syncPospSummary.Message = err2;
                        syncPospSummary.Status = 'Error';
                        syncPospSummary.StatusNo = 1;
                        res.json(syncPospSummary);
                    } else {
                        let obj_raw_data = {};
                        if (objRequestCore.hasOwnProperty('raw_data') && objRequestCore['raw_data'] && objRequestCore['raw_data'] !== null && objRequestCore['raw_data'] !== '') {
                            objRequestCore['raw_data'] = JSON.parse(objRequestCore['raw_data']);
                            for (let k in objRequestCore['raw_data']) {
                                try {
                                    let data_key = objRequestCore['raw_data'][k]['displayName'] + '-' + objRequestCore['raw_data'][k]['phoneNumbers'][0]['normalizedNumber'].replace('+91', '');
                                    data_key = data_key.replace(/ /g, '_');
                                    if (obj_raw_data.hasOwnProperty(data_key) === false) {
                                        obj_raw_data[data_key] = [];
                                    }
                                    obj_raw_data[data_key].push(objRequestCore['raw_data'][k]);
                                } catch (e) {
                                    console.error('Exception', 'sync_contact', 'rawdata_process', objRequestCore['raw_data'][k], e.stack);
                                }
                            }
                            console.error('DBG', 'raw_data', obj_raw_data);
                        }

                        for (let i in dbItems) {
                            exist_contact.push(dbItems[i]['mobileno']);
                        }
                        for (let j in objRequestCore['contactlist'])
                        {
                            try {
                                let objContacts = {};
                                let mobileno = objRequestCore['contactlist'][j]['mobileno'].toString();
                                let name = objRequestCore['contactlist'][j]['name'].toString();
                                let data_key_2 = name + '-' + mobileno;
                                data_key_2 = data_key_2.replace(/ /g, '_');
                                console.error('DBG', 'raw_data_2', data_key_2);
                                if (obj_raw_data.hasOwnProperty(data_key_2)) {
                                    objContacts['raw_data'] = obj_raw_data[data_key_2];
                                }
                                if (exist_contact.indexOf(objRequestCore['contactlist'][j]['mobileno']) > -1)
                                {
                                    objContacts['name'] = name;
                                    objContacts['Modified_On'] = new Date();
                                    let myquery = {mobileno: mobileno, ss_id: ssid};
                                    let newvalues = {$set: objContacts};
                                    Sync_Contact.update(myquery, newvalues, {multi: false}, function (err, numAffected) {
                                        if (err)
                                        {
                                            console.error('Exception', 'Contact_Sync_Save_Err', err);
                                        }
                                    });

                                } else
                                {
                                    objContacts['mobileno'] = mobileno;
                                    objContacts['name'] = name;
                                    objContacts['ss_id'] = ssid;
                                    objContacts['fba_id'] = fbaid;
                                    objContacts['channel'] = req.agent['channel'];
                                    objContacts['Created_On'] = new Date();
                                    objContacts['Modified_On'] = new Date();
                                    objContacts['Short_Code'] = randomString(10);
                                    arrContact.push(objContacts);
                                }
                            } catch (e) {
                                console.error('Exception', 'sync_contact', 'data_process_loop', e.stack);
                            }
                        }
                        if (arrContact.length > 0)
                        {
                            sync_contacts.insertMany(arrContact, function (err3, data) {
                                if (err3) {
                                    syncPospSummary.Message = err3;
                                    syncPospSummary.Status = 'Error';
                                    syncPospSummary.StatusNo = 1;
                                    res.json(syncPospSummary);
                                } else {
                                    syncPospSummary.Message = 'Contact Added Successfully.';
                                    syncPospSummary.Status = 'success';
                                    syncPospSummary.StatusNo = 0;
                                    res.json(syncPospSummary);
                                }
                                db.close();
                            });
                        } else
                        {
                            syncPospSummary.Message = 'Contact Added Successfully.';
                            syncPospSummary.Status = 'success';
                            syncPospSummary.StatusNo = 0;
                            res.json(syncPospSummary);
                        }
                        //console.log(arrContact);
                    }
                });
            });
        } else
        {
            syncPospSummary.Message = 'Ss_Id not exist.Kindly contact tech support.';
            syncPospSummary.Status = 'Error';
            syncPospSummary.StatusNo = 1;
            res.json(syncPospSummary);
        }
    });
    app.get('/sync_contacts/sc_pr', function (req, res) {
        try {
            let limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 10;
            Sync_Contact.find({'Short_Code': {'$exists': false}}).limit(limit).exec(function (err, emp_data) {
                try {
                    let arr_id = [];
                    if (emp_data.length > 0) {
                        for (let i in emp_data) {
                            let d_id = emp_data[i]._doc['_id'];
                            arr_id.push(d_id);
                            if (req.query['op'] === 'execute') {
                                Sync_Contact.update({'_id': d_id}, {$set: {'Short_Code': randomString(10)}}, {multi: false}, function (err, numAffected) {
                                    if (err)
                                    {
                                        //console.error('Exception', 'Contact_Sync_Save_Err', err);
                                    }
                                });
                            }
                        }
                    }
                    res.send('<pre>' + arr_id[0] + '===' + arr_id.length + '</pre>');
                } catch (e) {
                    res.send('<pre>' + e.stack + '</pre>');
                }
            });
        } catch (e) {
            res.send('<pre>' + e.stack + '</pre>');
        }
    });
    app.get('/sync_contacts/erp_sync_contact', function (req, res) {
        try {
            //var arg = {$where: "this._id.getTimestamp() >= ISODate('2017-02-25')"};
            //var limit = req.params['limit'] -0;
            var limit = 100;
            let successCount = 0;
            let failCount = 0;
            let emp_json_data = {};
            var objRequestCore = req.body;
            if (req.query.hasOwnProperty('limit') && req.query['limit'] - 0 > 0) {
                limit = req.query['limit'] - 0;
            }
            var range = (req.query.hasOwnProperty('range') && req.query['range'] !== '') ? req.query['range'] : 'daterange';
            var ss_id = (req.query.hasOwnProperty('ss_id') && req.query['ss_id'] !== '') ? (req.query['ss_id'] - 0) : 0;
            var batch = (req.query.hasOwnProperty('batch') && req.query['batch'] !== '') ? (req.query['batch'] - 0) : 20;

            var sync_con = {
                'ss_id': {$ne: 0},
                'sync_date': {$exists: false}
                //'channel': {$ne: 'PBS'}
            };
            if (ss_id > 0) {
                sync_con['ss_id'] = ss_id;
            }

            if (range === 'daterange') {
                var start_date = new Date();
                start_date.setDate(start_date.getDate() - 2);
                start_date.setHours(00, 00, 00, 000);
                var end_date = new Date();
                end_date.setDate(end_date.getDate() + 0);
                end_date.setHours(00, 00, 00, 000);
                var today = moment().utcOffset("+05:30").startOf('Day');
                var from_date = moment(today).format("YYYY-MM-D");
                var to_date = moment(today).format("YYYY-MM-D");
                sync_con['Created_On'] = {$gte: start_date, $lte: end_date};
            }
            Sync_Contact.find(sync_con).limit(limit).exec(function (err, emp_data) {
                try {
                    if (err)
                    {
                        res.json({Msg: 'Error', Error_Msg: err});
                    } else
                    {
                        console.log('emp_data : ' + emp_data);
                        if (emp_data.length > 0) {
                            var Client = require('node-rest-client').Client;
                            var client = new Client();
                            for (let i in emp_data) {
                                let emp_data_val = emp_data[i]._doc;
                                if (emp_json_data.hasOwnProperty(emp_data_val['ss_id']))
                                {
                                    emp_json_data[emp_data_val['ss_id']] = emp_json_data[emp_data_val['ss_id']] + ',' + emp_data_val['mobileno'];
                                } else
                                {
                                    emp_json_data[emp_data_val['ss_id']] = emp_data_val['mobileno'];
                                }
                            }
                            let objCallSummary = {
                                'main': {
                                    'total_job': 0,
                                    'done_job': 0,
                                    'success_job_cnt': 0,
                                    'nodetail_job_cnt': 0,
                                    'fail_job_cnt': 0,
                                    'mobile_received_cnt': 0,
                                    'mobile_not_received_cnt': 0,
                                    'mobile_data_cnt': 0,
                                    'total_contact': emp_data.length,
                                },
                                'success_job': [],
                                'fail_job': [],
                                'nodetail_job': []
                            };
                            for (let k in emp_json_data)
                            {
                                let ss_id_mobile = emp_json_data[k].split(',');
                                let ss_id = k;
                                let newArray = new Array(Math.ceil(ss_id_mobile.length / batch)).fill().map((_, i) => ss_id_mobile.slice(i * batch, i * batch + batch));
                                //let newArray = new Array(Math.ceil(ss_id_mobile.length / 10)).fill().map((_, i) => ss_id_mobile.slice(i * 10, i * 10 + 10));
                                objCallSummary.main.total_job += newArray.length;
                                for (let arrayData of newArray) {
                                    let arr_calling_data = arrayData.join(',');
                                    let url_api = config.environment.weburl + '/sync_contacts/emp_data?mobile=' + arr_calling_data + '&ss_id=' + ss_id;
                                    client.get(url_api, function (data, response) {
                                        objCallSummary.main.done_job++;
                                        try {
                                            if (data && data.hasOwnProperty('Summary')) {
                                                data.Summary.url = url_api;
                                                data.Summary.status = data.Msg;
                                                if (data.Msg === 'Success')
                                                {
                                                    objCallSummary.success_job.push(data.Summary);
                                                    objCallSummary.main.mobile_received_cnt += data.Summary.mobile_received;
                                                    objCallSummary.main.mobile_data_cnt += data.Summary.total_data;
                                                } else if (data.Msg === 'NoDetails')
                                                {
                                                    objCallSummary.main.mobile_not_received_cnt += data.Summary.mobile_not_received;
                                                    objCallSummary.nodetail_job.push(data.Summary);
                                                } else
                                                {
                                                    objCallSummary.fail_job.push(data.Summary);
                                                }
                                            } else {
                                                var SummaryErr = {
                                                    'url': url_api,
                                                    'err': data,
                                                    'status': 'api_failed'
                                                };
                                                objCallSummary.fail_job.push(SummaryErr);
                                            }
                                        } catch (e) {
                                            var SummaryErr = {
                                                'url': url_api,
                                                'err': e.stack,
                                                'status': 'api_exception'
                                            };
                                            console.error('Exception', 'post_call_error', e.stack);
                                            objCallSummary.fail_job.push(SummaryErr);
                                        }
                                        sync_contact_email(objCallSummary);
                                    });
                                }
                            }
                            res.json({'msg': 'data processed ' + emp_data.length});
                        } else {
                            res.json({'msg': 'No Data Avilable'});
                        }
                    }
                } catch (err) {
                    console.error('Exeception', 'erp_sync_contact', err.stack);
                    res.json({'msg': 'error', Error_Msg: err.stack});
                }
            });
        } catch (ex) {
            res.json(ex);
        }

    });

    app.get('/sync_contacts/emp_data', agent_details_pre, function (req, res) {
        var obj_summary = {
            'mobile_sent': 0,
            'mobile_received': 0,
            'mobile_not_received': 0,
            'total_data': 0,
            'error': ''
        };
        try {
            var objRequest = this;
            let mobileno = req.query['mobile'];
            obj_summary.mobile_sent = mobileno.split(',').length;
            var Ss_Id = req.query['ss_id'];
            var erp_id = 0;
            let mobilenoarr = mobileno.split(',');
            let emp_json_mobile = {};
            for (let i in mobilenoarr) {
                emp_json_mobile[mobilenoarr[i]] = [];
            }
            let fba_id = 0;
            if (req.hasOwnProperty('agent')) {
                if (req.agent['user_type'] === 'POSP') {
                    erp_id = req.agent['POSP']['Erp_Id'];
                    fba_id = req.agent['POSP']['Fba_Id'];

                }
                if (req.agent['user_type'] === 'FOS') {
                    erp_id = req.agent['EMP']['VendorCode'];
                    fba_id = req.agent['EMP']['FBA_ID'];
                }
                if (req.agent['user_type'] === 'EMP') {
                    erp_id = req.agent['EMP']['UID'];
                    fba_id = req.agent['EMP']['FBA_ID'];
                }
                /*if (req.agent['user_type'] === 'RBS') {
                 erp_id = req.agent['EMP']['UID'];
                 }*/
                fba_id = ((fba_id - 0) > 0) ? (fba_id - 0) : 0;
                erp_id = ((erp_id - 0) > 0) ? (erp_id - 0) : 0;
            }

            var objRequest_new = {
                "mobileno": mobileno,
                "ss_id": Ss_Id - 0
            };
            objRequest = objRequest_new;
            var url_api = 'http://ci.landmarkerp.com/RBServices.svc/getSyncData?MobileNo=' + mobileno + '&POSPID=' + erp_id + '&fbaid=' + fba_id;
            if (erp_id === 0 && fba_id === 0) {
                console.error('DBG', 'call_erp_sync', 'ss_id', Ss_Id, 'url', url_api);
            }
            //let url_api = 'http://ci.landmarkerp.com/RBServices.svc/getSyncData?MobileNo=9898147711,8860120841,8826630003,9810617900&POSPID=600501';
            //let url_api = 'http://ci.landmarkerp.com/RBServices.svc/getSyncData?MobileNo=9811556768,9800556768,9844556768,9811556768&POSPID=600501';
            var Client = require('node-rest-client').Client;
            var client = new Client();

            client.get(url_api, function (data, response) {
                try {
                    var today = moment().utcOffset("+05:30");
                    var today_str = moment(today).format("YYYYMMD");

                    let  status = '';
                    var objLog = {};
                    if (data) {
                        if (typeof data === 'string' && data.indexOf('{') > -1)
                        {
                            data = JSON.parse(data);
                        }
                        var todayDate = new Date();
                        if (data.hasOwnProperty('getSyncDataResult')) {
                            objLog = {
                                'dt': today.toLocaleString(),
                                'url': url_api,
                                'resp': data
                            };
                            fs.appendFile(appRoot + "/tmp/log/erp_fetch_" + today_str + ".log", JSON.stringify(objLog) + "\r\n", function (err) {
                                if (err) {
                                    return console.log(err);
                                }
                            });
                            if (data['getSyncDataResult'] !== '' && data['getSyncDataResult'].length > 0)
                            {
                                status = 'Success';
                                let edata = data['getSyncDataResult'];
                                obj_summary.total_data = edata.length;
                                for (let k in edata)
                                {
                                    if (objRequest['mobileno'].indexOf(edata[k].Phone) > -1) {
                                        emp_json_mobile[edata[k].Phone].push(edata[k]);
                                    }
                                }
                            } else {
                                status = 'NoDetails';
                            }
                        } else {
                            status = 'Data_Node_Missing';
                        }
                    } else {
                        status = 'Data_Null';
                    }
                    if (status === 'Data_Null' || status === 'Data_Node_Missing') {
                        objLog = {
                            'dt': today.toLocaleString(),
                            'url': url_api,
                            'resp': status
                        };
                        fs.appendFile(appRoot + "/tmp/log/erp_fetch_err_" + today_str + ".log", JSON.stringify(objLog) + "\r\n", function (err) {
                            if (err) {
                                return console.log(err);
                            }
                        });
                    } else {
                        var todayDate = new Date();
                        for (let insertData in emp_json_mobile)
                        {
                            try {
                                let arg = {};
                                if (emp_json_mobile[insertData].length > 0)
                                {
                                    obj_summary.mobile_received++;
                                    arg = {
                                        erp_core_response: emp_json_mobile[insertData],
                                        response_count: emp_json_mobile[insertData].length,
                                        sync_date: todayDate,
                                        'Is_Found': 1
                                    };
                                } else
                                {
                                    obj_summary.mobile_not_received++;
                                    arg = {
                                        erp_core_response: '',
                                        response_count: 0,
                                        sync_date: todayDate,
                                        'Is_Found': 0
                                    };
                                }
                                arg['Is_Synced'] = 1;
                                let myquery = {mobileno: insertData.toString(), ss_id: objRequest.ss_id - 0};
                                let newvalues = {$set: arg};

                                Sync_Contact.update(myquery, newvalues, {multi: true}, function (err, numAffected) {
                                    if (err)
                                    {
                                        console.error('Exception', 'Contact_Sync_Save', err);
                                    }
                                });
                            } catch (e) {
                                console.error('Exception', 'sync_contact_for_loop', e.stack);
                            }
                        }
                    }
                    return res.json({'Msg': status, 'Summary': obj_summary});
                } catch (ex) {
                    obj_summary.error = ex.stack;
                    console.error('Exception', 'Empdata', ex.stack)
                    return res.json({'Msg': 'Exception', 'Summary': obj_summary});
                }
            });
        } catch (errex) {
            obj_summary.error = errex.stack;
            console.error('Exception', 'Empdata', errex.stack)
            return res.json({'Msg': 'Exception', 'Summary': obj_summary});
        }
    });
    function getInsurerId(name) {
        var insurer_list = {
            "AEGON RELIGARE LIFE INSURANCE CO LTD": 25,
            "APOLLO MUNICH HEALTH INSURANCE CO LTD": 21,
            "BAJAJ ALLIANZ GENERAL INSURANCE CO LTD": 1,
            "BAJAJ ALLIANZ LIFE INSURANCE COMPANY LTD": 23,
            "BHARTI AXA GENERAL INSURANCE COMPANY LIMITED": 2,
            "BIRLA SUN LIFE INSURANCE COMPANY LIMITED": 32,
            "CHOLAMANDALAM MS GENERAL INSURANCE COMPANY LTD": 3,
            "DLF PRAMERICA LIFE INSURANCE COMPANY LTD": 22,
            "FUTURE GENERALI INDIA INSURANCE COMPANY LTD": 4,
            "HDFC ERGO GENERAL INSURANCE CO LTD": 5,
            "HDFC LIFE INSURANCE COMPANY LTD": 28,
            "ICICI LOMBARD GENERAL INSURANCE CO LTD": 6,
            "ICICI PRUDENTIAL LIFE INSURANCE COMPANY LIMITED": 39,
            "IFFCO-TOKIO GENERAL INSURANCE CO LTD": 7,
            "LIFE INSURANCE CORPORATION OF INDIA": 31,
            "MAX BUPA HEALTH INSURANCE CO LTD": 20,
            "NATIONAL INSURANCE CO LTD": 8,
            "RELIANCE GENERAL INSURANCE CO LTD": 9,
            "RELIGARE HEALTH INSURANCE COMPANY LTD": 34,
            "SBI GENERAL INSURANCE COMPANY LIMITED": 17,
            "SHRIRAM GENERAL INSURANCE COMPANY LTD": 18,
            "STAR HEALTH AND ALLIED INSURANCE COMPANY LIMITED": 26,
            "TATA AIG GENERAL INSURANCE CO LTD": 11,
            "THE NEW INDIA ASSURANCE CO LTD": 12,
            "THE ORIENTAL INSURANCE CO LTD": 13,
            "UNITED INDIA INSURANCE CO LTD": 14,
            "UNIVERSAL SOMPO GENERAL INSURANCE CO LTD": 19,
            "TATA AIA LIFE INSURANCE COMPANY LTD": 37,
            "BHARTI AXA LIFE INSURANCE CO LTD": 29,
            "MAGMA HDI GENERAL INSURANCE CO LTD": 35,
            "LIBERTY GENERAL INSURANCE LTD": 33,
            "RAHEJA QBE GENERAL INSURANCE CO LTD": 16,
            "INDIAN HEALTH ORGANISATION PVT LTD": 36,
            "CIGNA TTK HEALTH INSURANCE COMPANY LIMITED": 38,
            "KOTAK MAHINDRA GENERAL INSURANCE CO LTD": 30,
            "ROYAL SUNDARAM GENERAL INSURANCE COMPANY LIMITED": 10,
            "ADITYA BIRLA HEALTH INSURANCE COMPANY LIMITED": 42,
            "ACKO GENERAL INSURANCE LIMITED": 45,
            "GO DIGIT GENERAL INSURANCE LTD": 44,
            "DHFL GENERAL INSURANCE LIMITED": 47,
            "EDELWEISS GENERAL INSURANCE CO LTD": 46
        };
        var insurer_id = insurer_list.hasOwnProperty(name) ? insurer_list[name] : 0;
        return insurer_id;
    }
    app.get('/sync_contacts/erp_response_core_data', function (req, res, next) {
        //var Ss_Id = req.params.ss_id - 0;
        //var Fba_Id = req.params.fba_id - 0;

        var erp_sync_contact = {
            'response_count': {$gt: 0},
            'erp_core_response': {$exists: true},
            'Is_Migrate': {$exists: false}
        };
        var product_list = {
            "MOTOR": 1,
            "TWO WHEELER": 10,
            "HEALTH": 2
        };
        var erp_sync_response = {};
        var limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 1000;
        Sync_Contact.find(erp_sync_contact).limit(limit).exec(function (err, data) {
            if (data.length > 0) {
                for (let i in data) {
                    let erp_core_res = data[i]['_doc'];
                    let erp_core_response = erp_core_res['erp_core_response'];
                    let valid_data_count = erp_core_res.hasOwnProperty('valid_count') ? erp_core_res['valid_count'] : 0;
                    if (erp_core_response.length > 0) {
                        erp_sync_response[erp_core_res['ss_id'] + '_' + erp_core_res['fba_id'] + '_' + erp_core_res['mobileno']] = [];
                        if (req.query['op'] == 'execute') {
                            for (let j in erp_core_response) {
                                let edata_user = erp_core_response[j];
                                if (edata_user !== null) {
                                    try {
                                        let str_expiry_date;
                                        let vehicle_registration_date = '';
                                        let vehicle_manf_date = '';
                                        let policyexpirydate = '';
                                        let t_date = '';
                                        let erp_qt_data;
                                        //5/27/2018 12:00:00 AM
                                        if (edata_user['RegistrationDate'] !== null && edata_user['RegistrationDate'] !== '' && edata_user['RegistrationDate'] !== "undefined")//7/19/2018 12:00:00 AM
                                        {
                                            vehicle_registration_date = edata_user['RegistrationDate'].split(' ')[0];
                                            t_date = moment(vehicle_registration_date, 'M/D/YYYY', true);
                                            if (t_date.isValid() === true) {
                                                vehicle_registration_date = moment(vehicle_registration_date, 'M/D/YYYY').format('YYYY-MM-DD');
                                            }
                                            vehicle_registration_date = (vehicle_registration_date === '1900-01-01') ? '' : vehicle_registration_date;
                                        }
                                        if (edata_user['ManufacturingDate'] !== null && edata_user['ManufacturingDate'] !== '' && edata_user['ManufacturingDate'] !== "undefined")//7/19/2018 12:00:00 AM
                                        {
                                            vehicle_manf_date = edata_user['ManufacturingDate'].split(' ')[0];
                                            t_date = moment(vehicle_manf_date, 'M/D/YYYY', true);
                                            if (t_date.isValid() === true) {
                                                vehicle_manf_date = moment(vehicle_manf_date, 'M/D/YYYY').format('YYYY-MM-DD');
                                            }
                                            vehicle_manf_date = (vehicle_manf_date === '1900-01-01') ? '' : vehicle_manf_date;
                                        }
                                        if (edata_user['ExpiryDate'] !== null && edata_user['ExpiryDate'] !== '' && edata_user['ExpiryDate'] !== "undefined")//7/19/2018 12:00:00 AM
                                        {
                                            policyexpirydate = edata_user['ExpiryDate'];
                                            t_date = moment(policyexpirydate, 'DD MMM YYYY', true);
                                            if (t_date.isValid() === true) {
                                                str_expiry_date = moment(policyexpirydate, 'DD MMM YYYY').format('YYYY-MM-DD');
                                                //for year
                                                let mon = moment(str_expiry_date).format('M') - 0;
                                                let cur_mon = moment().format('M') - 0;
                                                let yr = moment().format('YYYY');
                                                if (mon < cur_mon) {
                                                    yr = (yr - 0) + 1;
                                                }
                                                let arr_exp = str_expiry_date.split('-');
                                                arr_exp[0] = yr;
                                                str_expiry_date = arr_exp.join('-');
                                                //for year

                                            } else {
                                                str_expiry_date = '';
                                            }
                                        }

                                        let product_id = product_list[edata_user['ProductName']];
                                        let reg_no = edata_user['RegistrationNo'];
                                        let reg_no_processed = '';
                                        reg_no = reg_no.toString().toUpperCase().trim();
                                        if (reg_no !== '' && reg_no.indexOf('APPL') === -1 && reg_no.indexOf('$') === -1) {
                                            reg_no_processed = reg_no_format(reg_no);
                                        } else {
                                            reg_no = '';
                                            reg_no_processed = '';
                                        }
                                        let arg1 = {
                                            "ss_id": erp_core_res.ss_id,
                                            "fba_id": erp_core_res.fba_id,
                                            "channel": erp_core_res.channel,
                                            "sync_Mobile": erp_core_res.mobileno,
                                            "sync_Name": erp_core_res.name || 'NA',
                                            "name": edata_user['ClientName'],
                                            "email": edata_user['EMail'],
                                            "mobile": erp_core_res.mobileno,
                                            "product": edata_user['ProductName'],
                                            "policy_expiry_date": str_expiry_date,
                                            "erp_qt": (edata_user['erp_QT'] !== null) ? edata_user['erp_QT'].toUpperCase() : '',
                                            "registration_no": reg_no,
                                            'vehicle_insurance_type': edata_user['InsuranceType'],
                                            'make': edata_user['Make'],
                                            'model': edata_user['Model'],
                                            'variant': edata_user['SubModel'],
                                            'city': edata_user['City'],
                                            'yom': (isNaN(edata_user['YOM']) === false) ? edata_user['YOM'].toString() : '',
                                            'rto_city': edata_user['RTO_City'],
                                            'rto_state': edata_user['RTO_State'],
                                            "registration_no_processed": reg_no_processed,
                                            "product_id": product_id,
                                            'vehicle_id': 0,
                                            'rto_id': 0,
                                            'vehicle_manf_date': vehicle_manf_date,
                                            'vehicle_registration_date': vehicle_registration_date,
                                            "Last_Lead_Created_On": '',
                                            "Is_Lead_Created": 0,
                                            "Is_Valid": 0,
                                            "Created_On": erp_core_res.sync_date,
                                            "Modified_On": erp_core_res.sync_date
                                        };
                                        //edata_user['Make'] !== '' && edata_user['Model'] !== '' &&
                                        if (isNaN(edata_user['YOM']) === false && str_expiry_date !== '') {
                                            valid_data_count++;
                                            arg1['Is_Valid'] = 1;
                                        }
                                        erp_sync_response[erp_core_res['ss_id'] + '_' + erp_core_res['fba_id'] + '_' + erp_core_res['mobileno']].push(arg1);
                                        if (req.query['op'] === 'execute') {
                                            let check_sync_data = {
                                                'ss_id': arg1['ss_id'],
                                                'erp_qt': arg1['erp_qt'],
                                                "mobile": arg1['mobileno']
                                            };
                                            sync_contact_erp_data.count(check_sync_data).exec(function (err, syncCount) {
                                                syncCount = syncCount - 0;
                                                if (syncCount > 0) {
                                                    console.error('DBG', 'sync_contact', 'count', syncCount, check_sync_data);
                                                } else
                                                {
                                                    let data_sync_contact = new sync_contact_erp_data(arg1);
                                                    data_sync_contact.save(function (err1) {
                                                        if (err1) {
                                                            console.log('Error : ' + err1);
                                                        } else {
                                                            console.log("Success");
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    } catch (e) {
                                        let err_catch = {
                                            'err': e.stack,
                                            'data': edata_user
                                        };
                                        console.error('Exception', 'sync_contact_core_data', err_catch);
                                        erp_sync_response[erp_core_res['ss_id'] + '_' + erp_core_res['fba_id'] + '_' + erp_core_res['mobileno']].push(err_catch);
                                    }
                                }
                            }
                            Sync_Contact.update({'ss_id': erp_core_res['ss_id'], 'fba_id': erp_core_res['fba_id'], 'mobileno': erp_core_res['mobileno']}, {$set: {'Is_Migrate': 'yes', 'valid_count': valid_data_count}}, {multi: true}, function (err, numAffected) {
                                if (err) {
                                    return res.send(err);
                                } else {
                                }
                            });
                        }
                    }
                }
                var today = moment().utcOffset("+05:30");
                var today_str = moment(today).format("YYYYMMD");
                var objRequest = {
                    'dt': today.toLocaleString(),
                    'resp': erp_sync_response
                };
                fs.appendFile(appRoot + "/tmp/log/contact_migration_" + today_str + ".log", JSON.stringify(objRequest) + "\r\n", function (err) {
                    if (err) {
                        return console.log(err);
                    }
                });
                res.send('<pre>Data Processed - ' + Object.keys(erp_sync_response).length + '</pre>');
            } else {
                res.json({'status': 'fail', 'msg': 'No Data Available'});
            }
        });
    });
    app.get('/sync_contacts/set_lead_data_main', function (req, res, next) {
        var Email = require('../models/email');
        var objModelEmail = new Email();
        let Client = require('node-rest-client').Client;
        let client = new Client();
        let op = (req.query.hasOwnProperty('op') && req.query['op'] !== '') ? req.query['op'] : 'preview';
        let limit = (req.query.hasOwnProperty('limit') && req.query['limit'] !== '') ? req.query['limit'] - 0 : 100;
        let ss_id = (req.query.hasOwnProperty('ss_id') && req.query['ss_id'] !== '') ? req.query['ss_id'] - 0 : 0;
        let email_agent = (req.query.hasOwnProperty('email_agent') && req.query['email_agent'] !== '') ? req.query['email_agent'] : 'no';
        client.get(config.environment.weburl + '/sync_contacts/data_count?sync_summary=yes', {}, function (data, response) {
            if (data) {
                let Cond_Sync_Contact_Summary = {'lead': {'$lt': const_free_lead}, 'valid': {'$gt': 0}, 'lead_bal': {'$gt': 0}};
                if (ss_id > 0) {
                    Cond_Sync_Contact_Summary['ss_id'] = ss_id;
                }
                var Sync_Contact_Summary = require('../models/sync_contact_summary');
                Sync_Contact_Summary.find(Cond_Sync_Contact_Summary).limit(limit).exec(function (err, Sync_Contact_Summary_Datas) {
                    try {
                        if (Sync_Contact_Summary_Datas && Sync_Contact_Summary_Datas.length > 0) {
                            let obj_summary = {
                                'condi': Cond_Sync_Contact_Summary,
                                'summary': {
                                    'total': Sync_Contact_Summary_Datas.length,
                                    'eligible': 0,
                                    'not_eligible': 0,
                                    'lead_processed': 0
                                },
                                'eligible_list': [],
                                'not_eligible_list': [],
                            };

                            for (let k in Sync_Contact_Summary_Datas) {
                                let Sync_Contact_Summary_Data = Sync_Contact_Summary_Datas[k]._doc;
                                let ss_id = Sync_Contact_Summary_Data['ss_id'];
                                let fba_id = Sync_Contact_Summary_Data['fba_id'];
                                let channel = Sync_Contact_Summary_Data['channel'];
                                let dataval = Sync_Contact_Summary_Data['valid'];
                                let lead = Sync_Contact_Summary_Data['lead'];
                                let data_bal = dataval - lead;
                                let lead_bal = 0;
                                if (data_bal > const_free_lead) {
                                    lead_bal = const_free_lead - lead;
                                } else {
                                    lead_bal = data_bal;
                                }

                                if (data_bal >= lead_bal && lead_bal > 0 && data_bal > 0) {
                                    let agent_lead_url = config.environment.weburl + '/sync_contacts/set_lead_data_agent?op=' + op + '&limit=' + lead_bal + '&mode=agent&email_agent=' + email_agent + '&ss_id=' + ss_id + '&fba_id=' + fba_id;
                                    obj_summary['summary']['eligible']++;
                                    obj_summary['summary']['lead_processed'] += lead_bal;
                                    obj_summary['eligible_list'].push({
                                        'channel': channel,
                                        'ss_id': ss_id,
                                        'fba_id': fba_id,
                                        'agent_lead_url': agent_lead_url,
                                        'data': dataval,
                                        'data_bal': data_bal,
                                        'lead': lead,
                                        'lead_bal': lead_bal,
                                        'eligible': 'yes'
                                    });
                                    if (op === 'execute') {
                                        client.get(agent_lead_url, {}, function (data, response) {
                                        });
                                    }
                                } else {
                                    obj_summary['not_eligible_list'].push({
                                        'channel': channel,
                                        'ss_id': ss_id,
                                        'fba_id': fba_id,
                                        'agent_lead_url': '',
                                        'data': dataval,
                                        'data_bal': data_bal,
                                        'lead': lead,
                                        'lead_bal': lead_bal,
                                        'eligible': 'no'
                                    });
                                    obj_summary['summary']['not_eligible']++;
                                }
                            }
                            var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
                            let sub = '[SCHEDULER]INFO-LEAD_SYNC_CONTACT_MAIN-Agent:' + obj_summary['eligible_list'].length + '-' + moment().format('YYYYMMDD_HH:mm:ss');
                            let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                            res_report += '<p><h1>SYNC CONTACT LEAD ALLOCATION REPORT :: Total Agent - ' + obj_summary['eligible_list'].length + ' :: ' + today_str + '</h1></p>';
                            res_report += '<p><h1>SUMMARY</h1>' + objectToHtml(obj_summary['summary']) + '</p>';
                            res_report += arrayobjectToHtml(obj_summary['eligible_list'], 'ELIGIBLE_AGENT_LIST', 'Agent list who are eligible for lead allocation', ['agent_lead_url']);
                            res_report += arrayobjectToHtml(obj_summary['not_eligible_list'], 'NOT_ELIGIBLE_AGENT_LIST', 'Agent list who are NOT eligible for lead allocation', ['agent_lead_url']);
                            res_report += '</body></html>';
                            objModelEmail.send('noreply@policyboss.com', config.environment.notification_email, sub, res_report, '', '', '');
                            return res.send('<pre>' + JSON.stringify(obj_summary, undefined, 2) + '</pre>');
                        } else {
                            return res.send('No_Eligible_Data');
                        }
                    } catch (e) {
                        res.send(e.stack);
                    }
                });
            } else {
                return res.send('Data_Sync_Err');
            }
        });
    });
    app.get('/sync_contacts/set_lead_data_agent', agent_details_pre, function (req, res, next) {
        try {
            var today = moment().utcOffset("+05:30").startOf('Day');
            let lead_start_date = moment(today).add(14, 'days').format("YYYY-MM-DD");

            var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
            let Condi_Sync_Contanct_Lead = {
                'Is_Lead_Created': 0,
                'Is_Valid': 1,
                'policy_expiry_date': {$gte: lead_start_date}
            };
            let ss_id = null;
            let fba_id = null;
            if (req.query.hasOwnProperty('ss_id') && req.query['ss_id'] !== '' && req.query.hasOwnProperty('fba_id') && req.query['fba_id'] !== '') {
                ss_id = req.query['ss_id'] - 0;
                fba_id = req.query['fba_id'] - 0;
                Condi_Sync_Contanct_Lead['ss_id'] = ss_id;
                Condi_Sync_Contanct_Lead['fba_id'] = fba_id;
            }
            let op = (req.query.hasOwnProperty('op') && req.query['op'] !== '') ? req.query['op'] : 'preview';
            var Email = require('../models/email');
            var objModelEmail = new Email();
            var lead_res = {
                'Condi': Condi_Sync_Contanct_Lead,
                'Op': op,
                "Mode": 'agent',
                "On": '',
                "Status": "",
                "Msg": "",
                "totalcount": 0,
                "Data_Processed": [],
                "Data_Exception": [],
                "Data_Inner_Exception": [],
                'Agent_Summary': {},
                'date_slab_summary': {
                    'Expiring_Today': {'slab': 'Expiring_Today', 'count': 0},
                    'Expiring_in_within_3_Days': {'slab': 'Expiring_in_within_3_Days', 'count': 0},
                    'Expiring_in_Next_3_to_7_Days': {'slab': 'Expiring_in_Next_3_to_7_Days', 'count': 0},
                    'Expiring_in_Next_7_to_15_Days': {'slab': 'Expiring_in_Next_7_to_15_Days', 'count': 0},
                    'Expiring_in_Next_15_to_30_Days': {'slab': 'Expiring_in_Next_15_to_30_Days', 'count': 0},
                    'Expiring_beyond_30_Days': {'slab': 'Expiring_beyond_30_Days', 'count': 0},
                    'ALL': {'slab': 'ALL', 'count': 0}
                }
            };
            var limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 2000;
            var channel = '';
            let agent_details = {};
            lead_res['Agent_Summary'] = {
                'profile': null,
                'lead_list': [],
                'lead_count': 0
            };
            channel = req.agent['channel'];
            if (req.agent['user_type'] === 'POSP') {
                agent_details = {
                    'type': req.agent['user_type'],
                    'agent_name': req.agent['POSP']['First_Name'] + ' ' + req.agent['POSP']['Last_Name'],
                    'agent_email': req.agent['POSP']['Email_Id'],
                    'ss_id': ss_id,
                    'fba_id': fba_id,
                    'erp_code': req.agent['POSP']['Erp_Id'],
                    'rm_name': req.agent['POSP']['Reporting_Agent_Name'],
                    'rm_uid': req.agent['POSP']['Reporting_Agent_Uid'],
                    'rm_email': req.agent['POSP']['Reporting_Email_ID']
                };
            }
            if (req.agent['user_type'] === 'FOS') {
                agent_details = {
                    'type': req.agent['user_type'],
                    'agent_name': req.agent['EMP']['Emp_Name'],
                    'agent_email': req.agent['EMP']['Email_Id'],
                    'ss_id': ss_id,
                    'fba_id': fba_id,
                    'erp_code': req.agent['EMP']['VendorCode'],
                    'rm_name': req.agent['EMP']['Reporting_UID_Name'],
                    'rm_uid': req.agent['EMP']['UID'],
                    'rm_email': req.agent['EMP']['Reporting_Email_ID']
                };
            }
            if (req.agent['user_type'] === 'EMP') {
                agent_details = {
                    'type': req.agent['user_type'],
                    'agent_name': req.agent['EMP']['Emp_Name'],
                    'agent_email': req.agent['EMP']['Email_Id'],
                    'ss_id': ss_id,
                    'fba_id': fba_id,
                    'erp_code': req.agent['EMP']['UID'],
                    'rm_name': '',
                    'rm_uid': '',
                    'rm_email': ''
                };
            }
            lead_res['Agent_Summary']['profile'] = agent_details;
            let mode = 'agent';
            let obj_link_schema = {
                'Expiring_Today': 0,
                'Expiring_in_within_3_Days': 3,
                'Expiring_in_Next_3_to_7_Days': 7,
                'Expiring_in_Next_7_to_15_Days': 15,
                'Expiring_in_Next_15_to_30_Days': 60,
                'Expiring_beyond_30_Days': 300
            };
            if (op === 'count') {
                sync_contact_erp_data.count(Condi_Sync_Contanct_Lead).sort({policy_expiry_date: 1}).exec(function (err, leadCount) {
                    var objSummary = {
                        'Condi': Condi_Sync_Contanct_Lead,
                        'Count': leadCount
                    };
                    return res.send('<pre>' + JSON.stringify(objSummary, undefined, 2) + '</pre>');
                });
            } else {
                sync_contact_erp_data.find(Condi_Sync_Contanct_Lead).sort({policy_expiry_date: 1}).limit(limit).exec(function (err, quote_data) {
                    if (quote_data.length > 0) {
                        var Lead = require('../models/leads');
                        let Client = require('node-rest-client').Client;
                        let client = new Client();
                        for (let k in quote_data) {
                            let rwnluserData = quote_data[k]._doc;
                            try {
                                let arg = {};

                                let Policy_Expiry_Date = moment(rwnluserData['policy_expiry_date']).utcOffset("+05:30").startOf('Day');
                                let days_diff = Policy_Expiry_Date.diff(today, 'days');
                                days_diff = days_diff - 0;
                                let follow_slab = 'Expiring_beyond_30_Days';
                                for (let j in obj_link_schema) {
                                    if (days_diff <= obj_link_schema[j]) {
                                        follow_slab = j;
                                        break;
                                    }
                                }
                                lead_res['date_slab_summary'][follow_slab]['count']++;
                                lead_res['date_slab_summary']['ALL']['count']++;
                                lead_res['totalcount']++;

                                if (mode === 'agent') {
                                    let policy_expiry_date = rwnluserData['policy_expiry_date'];
                                    let yom = rwnluserData['yom'];
                                    let vehicle_registration_date = yom + '-' + moment(policy_expiry_date).add(1, 'days').format("MM-DD");
                                    let vehicle_manf_date = yom + '-01-10';
                                    lead_res['Agent_Summary']['lead_list'].push({
                                        'Contact_Id': rwnluserData['Sync_Contact_Erp_Data_Id'],
                                        "Customer_Name": rwnluserData['name'],
                                        "Product": rwnluserData['product'],
                                        "Policy_Expiry_Date": rwnluserData['policy_expiry_date'],
                                        "Registration_No": rwnluserData['registration_no']
                                    });
                                    arg = {
                                        "PB_CRN": "",
                                        "User_Data_Id": "",
                                        "ss_id": rwnluserData['ss_id'],
                                        "fba_id": rwnluserData['fba_id'],
                                        "channel": channel,
                                        "Created_On": new Date(),
                                        "Modified_On": new Date(),
                                        "Product_Id": 1,
                                        "previous_policy_number": "",
                                        "prev_policy_start_date": "",
                                        "policy_expiry_date": rwnluserData['policy_expiry_date'],
                                        "engine_number": "",
                                        "chassis_number": "",
                                        "company_name": "",
                                        "Customer_Name": rwnluserData['name'],
                                        "Customer_Address": "",
                                        "mobile": rwnluserData['mobile'],
                                        "email": "",
                                        "mobile2": "", //ErpqtRqst['__communication_address__'],
                                        "vehicle_insurance_type": "individual", //ErpqtRqst['__vehicle_insurance_type__'] === "new" ? "N" : "R",
                                        "issued_by_username": "", //to be ask
                                        "registration_no": rwnluserData['registration_no_processed'],
                                        "registration_no_processed": rwnluserData['registration_no_processed'],
                                        "nil_dept": "", //ErpqtRqst['__addon_zero_dep_cover__'] === "yes" ? "Yes" : "No",
                                        "rti": "", //to be ask
                                        "Make_Name": rwnluserData['make'],
                                        "Model_ID": "", //ErpqtRqst['__pb_model_id__'],
                                        "Model_Name": rwnluserData['model'], //ErpqtRqst['__pb_model_name__'],
                                        "Variant_Name": rwnluserData['variant'], //ErpqtRqst['__pb_variant_name__'],
                                        "Vehicle_ID": "", //ErpqtRqst['__vehicle_id__'],
                                        "Fuel_ID": "", //ErpqtRqst['__pb_fuel_id__'],
                                        "Fuel_Name": "", //ErpqtRqst['__pb_fuel_name__'],
                                        "RTO_City": rwnluserData['rto_city'], //ErpqtRqst['__pb_rto_city__'],
                                        "RTO_State": rwnluserData['rto_state'], //ErpqtRqst['__pb_rto_city__'],
                                        "VehicleCity_Id": "", //ErpqtRqst['__pb_vehiclecity_id__'],
                                        "VehicleCity_RTOCode": "", //ErpqtRqst['__pb_vehiclecity_rtocode__'],
                                        "vehicle_registration_date": vehicle_registration_date, //ErpqtRqst['__vehicle_registration_date__'],
                                        "vehicle_manf_date": vehicle_manf_date, //ErpqtRqst['__vehicle_manf_date__'],
                                        "prev_insurer_id": 0, //ErpqtRqst['__insurer_id__'],
                                        "vehicle_ncb_current": "", //rwnluserData.Premium_List.Summary.Request_Product['vehicle_ncb_next'],
                                        "is_claim_exists": "", //ErpqtRqst['__is_claim_exists__'],
                                        "is_renewal_proceed": "no",
                                        "lead_type": "sync_contacts",
                                        "lead_status": "pending",
										"lead_assigned_uid": 114575,
                                        "lead_assigned_name": "Sumeet Rajesh Rai",
                                        "lead_assigned_ssid": 28892,
                                        "lead_assigned_on": new Date(),
                                        'agent_details': agent_details
                                    };
                                    lead_res['Data_Processed'].push(rwnluserData['Sync_Contact_Erp_Data_Id']);
                                    if (op === 'execute') {
                                        let condi_update_sync = {'Sync_Contact_Erp_Data_Id': rwnluserData['Sync_Contact_Erp_Data_Id']};
                                        console.error('Exception', 'Lead_Add', 'Sync_Update', condi_update_sync);
                                        sync_contact_erp_data.update(condi_update_sync, {$set: {'Is_Lead_Created': 1}}, function (err, numAffected) {
                                            if (err)
                                            {
                                                console.error('Exception', 'Lead_Add', 'Sync_Update', err);
                                            } else {
                                                let objModelLead = new Lead(arg);
                                                objModelLead.save(function (err, objDbLead) {
                                                    if (err)
                                                    {
                                                        console.error('Exception', 'Lead_Add', 'Lead_Allocate', err, arg);
                                                    }
                                                });
                                            }
                                        });
                                    }
                                }
                            } catch (e) {
                                lead_res['Data_Exception'].push({
                                    'id': rwnluserData['Sync_Contact_Erp_Data_Id'],
                                    'msg': e.stack
                                });
                            }
                        }
                    }
                    lead_res['On'] = moment().format('YYYY-MM-DD_HH:mm:ss');
                    lead_res['Msg'] = "Data Uploaded Successfylly in Lead";
                    var today = new Date();
                    var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
                    var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                    fs.appendFile(appRoot + "/tmp/log/sync_contact_lead_allocate_" + log_file_name + ".log", JSON.stringify(lead_res) + '\r\n', function (err) {

                    });
                    if (mode === 'agent' && lead_res.Agent_Summary['lead_list'].length > 0) {
                        lead_res.Agent_Summary['lead_count'] = lead_res.Agent_Summary['lead_list'].length;
                        let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        res_report += '<p><h1>SYNC CONTACT LEAD ALLOCATION REPORT :: Total Lead-' + lead_res.Agent_Summary['lead_count'] + ' :: SSID-' + ss_id + ' :: ' + today_str + '</h1></p>';
                        res_report += '<p><h1>Details</h1>' + objectToHtml(lead_res.Agent_Summary['profile']) + '</p>';
                        res_report += '<p><h1>Date Range Summary</h1>';
                        res_report += arrayobjectToHtml(lead_res['date_slab_summary']);
                        res_report += '<p><h1>List</h1>';
                        res_report += arrayobjectToHtml(lead_res.Agent_Summary['lead_list'], 'Lead Allocation List', '', ['Registration_No']);
                        res_report += '</p>';
                        res_report += '</body></html>';
                        let sub = '[SCHEDULER]LEAD_SYNC_CONTACT_AGENT - Total Lead - ' + lead_res.Agent_Summary['lead_count'] + ' :: SSID-' + ss_id + ' :: ' + moment().format('YYYYMMDD_HH:mm:ss');
                        let to = config.environment.notification_email;
                        let cc = '';
                        let bcc = '';
                        if (req.query['op'] === 'execute' && req.query['email_agent'] === 'yes') {
                            to = lead_res.Agent_Summary['profile']['agent_email'];
                            cc = lead_res.Agent_Summary['profile']['rm_email'];
                            bcc = config.environment.notification_email;
                        }
                        objModelEmail.send('customercare@policyboss.com', to, sub, res_report, cc, bcc, '');
                    }
                    return res.json(lead_res);
                });
            }
        } catch (err) {
            lead_res['Data_Exception'].push({
                'msg': err.stack
            });
            res.json(lead_res);
        }
    });
    app.get('/sync_contacts/set_lead_data', agent_details_pre, function (req, res, next) {
        try {
            var today = moment().utcOffset("+05:30").startOf('Day');
            var followup_t_today = moment(today).format("YYYY-MM-DD");
            var followup_t_end = '';
            if (req.query.hasOwnProperty('dateto') && req.query['dateto'] !== '') {
                followup_t_end = req.query['dateto'];
                var t_date = moment(followup_t_end, 'YYYY-MM-DD', true);
                if (t_date.isValid() === false) {
                    return res.json('Invalid End Date Range');
                }
            } else {
                followup_t_end = moment(today).add(30, 'days').format("YYYY-MM-DD");
            }
            req.query['dateto'] = followup_t_end;
            let Condi_Sync_Contanct_Lead = {
                'Is_Lead_Created': 0,
                'Is_Valid': 1,
                'policy_expiry_date': {$gte: followup_t_today, $lte: followup_t_end}
            };
            let mode = (req.query.hasOwnProperty('mode') && req.query['mode'] !== '') ? req.query['mode'] : 'all';
            let ss_id = null;
            let fba_id = null;
            if (mode === 'agent') {
                if (req.query.hasOwnProperty('ss_id') && req.query['ss_id'] !== '' && req.query.hasOwnProperty('fba_id') && req.query['fba_id'] !== '') {
                    ss_id = req.query['ss_id'] - 0;
                    fba_id = req.query['fba_id'] - 0;
                    Condi_Sync_Contanct_Lead['ss_id'] = ss_id;
                    Condi_Sync_Contanct_Lead['fba_id'] = fba_id;
                }
            }
            var Email = require('../models/email');
            var objModelEmail = new Email();
            var lead_res = {
                'Op': (req.query.hasOwnProperty('op') && req.query['op'] !== '') ? req.query['op'] : 'preview',
                "Mode": mode,
                "On": '',
                "Status": "",
                "Msg": "",
                "totalcount": 0,
                "Data_Processed": [],
                "Data_Exception": [],
                "Data_Inner_Exception": [],
                'Agent_Summary': {},
                'date_slab_summary': {
                    'Expiring_Today': {'slab': 'Expiring_Today', 'count': 0},
                    'Expiring_in_within_3_Days': {'slab': 'Expiring_in_within_3_Days', 'count': 0},
                    'Expiring_in_Next_3_to_7_Days': {'slab': 'Expiring_in_Next_3_to_7_Days', 'count': 0},
                    'Expiring_in_Next_7_to_15_Days': {'slab': 'Expiring_in_Next_7_to_15_Days', 'count': 0},
                    'Expiring_in_Next_15_to_30_Days': {'slab': 'Expiring_in_Next_15_to_30_Days', 'count': 0},
                    'ALL': {'slab': 'ALL', 'count': 0}
                }
            };
            var limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 2000;
            var channel = '';
            let agent_details = {};
            if (mode === 'agent') {
                lead_res['Agent_Summary'] = {
                    'profile': null,
                    'lead_list': [],
                    'lead_count': 0
                };
                channel = req.agent['channel'];
                if (req.agent['user_type'] === 'POSP') {
                    agent_details = {
                        'type': req.agent['user_type'],
                        'agent_name': req.agent['POSP']['First_Name'] + ' ' + req.agent['POSP']['Last_Name'],
                        'agent_email': req.agent['POSP']['Email_Id'],
                        'ss_id': ss_id,
                        'fba_id': fba_id,
                        'erp_code': req.agent['POSP']['Erp_Id'],
                        'rm_name': req.agent['POSP']['Reporting_Agent_Name'],
                        'rm_uid': req.agent['POSP']['Reporting_Agent_Uid'],
                        'rm_email': req.agent['POSP']['Reporting_Email_ID']
                    };
                }
                if (req.agent['user_type'] === 'FOS') {
                    agent_details = {
                        'type': req.agent['user_type'],
                        'agent_name': req.agent['EMP']['Emp_Name'],
                        'agent_email': req.agent['EMP']['Email_Id'],
                        'ss_id': ss_id,
                        'fba_id': fba_id,
                        'erp_code': req.agent['EMP']['VendorCode'],
                        'rm_name': req.agent['EMP']['Reporting_UID_Name'],
                        'rm_uid': req.agent['EMP']['UID'],
                        'rm_email': req.agent['EMP']['Reporting_Email_ID']
                    };
                }
                if (req.agent['user_type'] === 'EMP') {
                    agent_details = {
                        'type': req.agent['user_type'],
                        'agent_name': req.agent['EMP']['Emp_Name'],
                        'agent_email': req.agent['EMP']['Email_Id'],
                        'ss_id': ss_id,
                        'fba_id': fba_id,
                        'erp_code': req.agent['EMP']['UID'],
                        'rm_name': '',
                        'rm_uid': '',
                        'rm_email': ''
                    };
                }
                lead_res['Agent_Summary']['profile'] = agent_details;
            }
            let obj_link_schema = {
                'Expiring_Today': 0,
                'Expiring_in_within_3_Days': 3,
                'Expiring_in_Next_3_to_7_Days': 7,
                'Expiring_in_Next_7_to_15_Days': 15,
                'Expiring_in_Next_15_to_30_Days': 60
            };
            if (req.query['op'] === 'count') {
                sync_contact_erp_data.count(Condi_Sync_Contanct_Lead).sort({policy_expiry_date: 1}).exec(function (err, leadCount) {
                    var objSummary = {
                        'Condi': Condi_Sync_Contanct_Lead,
                        'Count': leadCount
                    };
                    return res.send('<pre>' + JSON.stringify(objSummary, undefined, 2) + '</pre>');
                });
            } else {
                sync_contact_erp_data.find(Condi_Sync_Contanct_Lead).sort({policy_expiry_date: 1}).limit(limit).exec(function (err, quote_data) {
                    if (quote_data.length > 0) {
                        var Lead = require('../models/leads');
                        let Client = require('node-rest-client').Client;
                        let client = new Client();
                        for (let k in quote_data) {
                            let rwnluserData = quote_data[k]._doc;
                            try {
                                let arg = {};
                                if (rwnluserData.hasOwnProperty('policy_expiry_date') && rwnluserData['policy_expiry_date'] !== '') {
                                    let Policy_Expiry_Date = moment(rwnluserData['policy_expiry_date']).utcOffset("+05:30").startOf('Day');
                                    let days_diff = Policy_Expiry_Date.diff(today, 'days');
                                    days_diff = days_diff - 0;
                                    let follow_slab = 'Pending';
                                    for (let j in obj_link_schema) {
                                        if (days_diff <= obj_link_schema[j]) {
                                            follow_slab = j;
                                            break;
                                        }
                                    }
                                    let key_agent = rwnluserData['ss_id'] + '_' + rwnluserData['fba_id'];
                                    lead_res['date_slab_summary'][follow_slab]['count']++;
                                    lead_res['date_slab_summary']['ALL']['count']++;
                                    lead_res['totalcount']++;

                                    if (mode === 'all') {
                                        if (lead_res['Agent_Summary'].hasOwnProperty(key_agent) === false) {
                                            lead_res['Agent_Summary'][key_agent] = {
                                                'key_agent': key_agent,
                                                'lead_count': 0,
                                                'lead_list': []
                                            };
                                            if (mode === 'all') {
                                                client.get(config.environment.weburl + '/sync_contacts/set_lead_data?op=' + req.query['op'] + '&dateto=' + req.query['dateto'] + '&mode=agent&email_agent=' + req.query['email_agent'] + '&ss_id=' + rwnluserData['ss_id'] + '&fba_id=' + rwnluserData['fba_id'], {}, function (data, response) {
                                                });
                                            }
                                        }
                                        lead_res['Agent_Summary'][key_agent]['lead_list'].push(rwnluserData['Sync_Contact_Erp_Data_Id']);
                                        lead_res['Agent_Summary'][key_agent]['lead_count']++;
                                    }
                                    if (mode === 'agent') {
                                        let policy_expiry_date = rwnluserData['policy_expiry_date'];
                                        let yom = rwnluserData['yom'];
                                        let vehicle_registration_date = yom + '-' + moment(policy_expiry_date).add(1, 'days').format("MM-DD");
                                        let vehicle_manf_date = yom + '-01-10';
                                        lead_res['Agent_Summary']['lead_list'].push({
                                            'Contact_Id': rwnluserData['Sync_Contact_Erp_Data_Id'],
                                            "Customer_Name": rwnluserData['name'],
                                            "Product": rwnluserData['product'],
                                            "Policy_Expiry_Date": rwnluserData['policy_expiry_date'],
                                            "Registration_No": rwnluserData['registration_no']
                                        });
                                        arg = {
                                            "PB_CRN": "",
                                            "User_Data_Id": "",
                                            "ss_id": rwnluserData['ss_id'],
                                            "fba_id": rwnluserData['fba_id'],
                                            "channel": channel,
                                            "Created_On": new Date(),
                                            "Modified_On": new Date(),
                                            "Product_Id": 1,
                                            "previous_policy_number": "",
                                            "prev_policy_start_date": "",
                                            "policy_expiry_date": rwnluserData['policy_expiry_date'],
                                            "engine_number": "",
                                            "chassis_number": "",
                                            "company_name": "",
                                            "Customer_Name": rwnluserData['name'],
                                            "Customer_Address": "",
                                            "mobile": rwnluserData['mobile'],
                                            "email": "",
                                            "mobile2": "", //ErpqtRqst['__communication_address__'],
                                            "vehicle_insurance_type": "individual", //ErpqtRqst['__vehicle_insurance_type__'] === "new" ? "N" : "R",
                                            "issued_by_username": "", //to be ask
                                            "registration_no": rwnluserData['registration_no_processed'],
                                            "registration_no_processed": rwnluserData['registration_no_processed'],
                                            "nil_dept": "", //ErpqtRqst['__addon_zero_dep_cover__'] === "yes" ? "Yes" : "No",
                                            "rti": "", //to be ask
                                            "Make_Name": rwnluserData['make'],
                                            "Model_ID": "", //ErpqtRqst['__pb_model_id__'],
                                            "Model_Name": rwnluserData['model'], //ErpqtRqst['__pb_model_name__'],
                                            "Variant_Name": rwnluserData['variant'], //ErpqtRqst['__pb_variant_name__'],
                                            "Vehicle_ID": "", //ErpqtRqst['__vehicle_id__'],
                                            "Fuel_ID": "", //ErpqtRqst['__pb_fuel_id__'],
                                            "Fuel_Name": "", //ErpqtRqst['__pb_fuel_name__'],
                                            "RTO_City": rwnluserData['rto_city'], //ErpqtRqst['__pb_rto_city__'],
                                            "RTO_State": rwnluserData['rto_state'], //ErpqtRqst['__pb_rto_city__'],
                                            "VehicleCity_Id": "", //ErpqtRqst['__pb_vehiclecity_id__'],
                                            "VehicleCity_RTOCode": "", //ErpqtRqst['__pb_vehiclecity_rtocode__'],
                                            "vehicle_registration_date": vehicle_registration_date, //ErpqtRqst['__vehicle_registration_date__'],
                                            "vehicle_manf_date": vehicle_manf_date, //ErpqtRqst['__vehicle_manf_date__'],
                                            "prev_insurer_id": 0, //ErpqtRqst['__insurer_id__'],
                                            "vehicle_ncb_current": "", //rwnluserData.Premium_List.Summary.Request_Product['vehicle_ncb_next'],
                                            "is_claim_exists": "", //ErpqtRqst['__is_claim_exists__'],
                                            "is_renewal_proceed": "no",
                                            "lead_type": "sync_contacts",
                                            "lead_status": "pending",
                                            'agent_details': agent_details
                                        };
                                        lead_res['Data_Processed'].push(rwnluserData['Sync_Contact_Erp_Data_Id']);
                                        if (req.query['op'] === 'execute') {
                                            let condi_update_sync = {'Sync_Contact_Erp_Data_Id': rwnluserData['Sync_Contact_Erp_Data_Id']};
                                            console.error('Exception', 'Lead_Add', 'Sync_Update', condi_update_sync);
                                            sync_contact_erp_data.update(condi_update_sync, {$set: {'Is_Lead_Created': 1}}, function (err, numAffected) {
                                                if (err)
                                                {
                                                    console.error('Exception', 'Lead_Add', 'Sync_Update', err);
                                                } else {
                                                    let objModelLead = new Lead(arg);
                                                    objModelLead.save(function (err, objDbLead) {
                                                        if (err)
                                                        {
                                                            console.error('Exception', 'Lead_Add', 'Lead_Allocate', err, arg);
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    }
                                }
                            } catch (e) {
                                lead_res['Data_Exception'].push({
                                    'id': rwnluserData['Sync_Contact_Erp_Data_Id'],
                                    'msg': e.stack
                                });
                            }
                        }
                    }
                    lead_res['On'] = moment().format('YYYY-MM-DD_HH:mm:ss');
                    lead_res['Msg'] = "Data Uploaded Successfylly in Lead";
                    var today = new Date();
                    var log_file_name = today.toISOString().substring(0, 10).toString().replace(/-/g, '');
                    fs.appendFile(appRoot + "/tmp/log/sync_contact_lead_allocate_" + log_file_name + ".log", JSON.stringify(lead_res) + '\r\n', function (err) {

                    });
                    var today_str = moment().utcOffset("+05:30").startOf('Day').format("YYYY-MM-DD");
                    if (mode == 'all') {
                        let sub = '[SCHEDULER]INFO-LEAD_SYNC_CONTACT-Total:' + lead_res['totalcount'] + '-' + moment().format('YYYYMMDD_HH:mm:ss');
                        let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        res_report += '<p><h1>SYNC CONTACT LEAD ALLOCATION REPORT :: Total Lead - ' + lead_res['totalcount'] + ' :: ' + today_str + '</h1></p>';
                        res_report += '<p><h1>Date Range Summary From : ' + followup_t_today + ' ,  To : ' + followup_t_end + '</h1>';
                        res_report += arrayobjectToHtml(lead_res['date_slab_summary']);
                        res_report += '<p><h1>List</h1>';
                        res_report += arrayobjectToHtml(lead_res.Agent_Summary);
                        res_report += '</p>';
                        res_report += '</body></html>';
                        objModelEmail.send('customercare@policyboss.com', config.environment.notification_email, sub, res_report, '', '', '');
                    }
                    if (mode === 'agent' && lead_res.Agent_Summary['lead_list'].length > 0) {
                        lead_res.Agent_Summary['lead_count'] = lead_res.Agent_Summary['lead_list'].length;
                        let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        res_report += '<p><h1>SYNC CONTACT LEAD ALLOCATION REPORT :: Total Lead-' + lead_res.Agent_Summary['lead_count'] + ' :: SSID-' + ss_id + ' :: ' + today_str + '</h1></p>';
                        res_report += '<p><h1>Details</h1>' + objectToHtml(lead_res.Agent_Summary['profile']) + '</p>';
                        res_report += '<p><h1>Date Range Summary From : ' + followup_t_today + ' ,  To : ' + followup_t_end + '</h1>';
                        res_report += arrayobjectToHtml(lead_res['date_slab_summary']);
                        res_report += '<p><h1>List</h1>';
                        res_report += arrayobjectToHtml(lead_res.Agent_Summary['lead_list'], 'Lead Allocation List', '', ['Registration_No']);
                        res_report += '</p>';
                        res_report += '</body></html>';
                        let sub = '[SCHEDULER]LEAD_SYNC_CONTACT_AGENT - Total Lead - ' + lead_res.Agent_Summary['lead_count'] + ' :: SSID-' + ss_id + ' :: ' + moment().format('YYYYMMDD_HH:mm:ss');
                        let to = config.environment.notification_email;
                        let cc = '';
                        let bcc = '';
                        if (req.query['op'] === 'execute' && req.query['email_agent'] === 'yes') {
                            to = lead_res.Agent_Summary['profile']['agent_email'];
                            cc = lead_res.Agent_Summary['profile']['rm_email'];
                            bcc = config.environment.notification_email;
                        }
                        objModelEmail.send('customercare@policyboss.com', to, sub, res_report, cc, bcc, '');
                    }
                    return res.json(lead_res);
                });
            }
        } catch (err) {
            lead_res['Data_Exception'].push({
                'msg': err.stack
            });
            res.json(lead_res);
        }
    });
    app.get('/sync_contacts/synced_data_behaviour', function (req, res, next) {
        try {
            let arr_channel = ['ALL', 'PBS', 'RBS', 'DC', 'GS', 'SM', 'EM', 'LA'];
            let Condi_Sync_Contanct_Lead = {
                'Is_Customer_Data': {$exists: false}
            };
            let cache = (req.query.hasOwnProperty('cache') && req.query['cache'] !== '') ? req.query['cache'] : 'yes';
            let cache_key = 'sync_contact_data_behavour';
            if (cache === 'yes') {
                if (fs.existsSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log")) {
                    var cache_content = fs.readFileSync(appRoot + "/tmp/cachemaster/" + cache_key + ".log").toString();
                    var obj_cache_content = JSON.parse(cache_content);
                    return res.json(obj_cache_content);
                } else {
                    return res.json({});
                }
            } else {
                let obj_response = {
                    'Exception': []
                };
                for (let channel of arr_channel) {
                    obj_response[channel] = {
                        'make': {},
                        'state': {},
                        'yom': {},
                        'expiry_month': {}
                    };
                    for (let m = 0; m <= 11; m++) {
                        let curr_month = moment().add(m, 'months').format('MMMM');
                        obj_response[channel]['expiry_month'][curr_month] = 0;
                    }
                }
                sync_contact_erp_data.find(Condi_Sync_Contanct_Lead).exec(function (err, dbSyncDatas) {
                    if (err) {
                        return res.send(err);
                    }
                    if (dbSyncDatas && dbSyncDatas.length > 0) {
                        for (let k in dbSyncDatas) {
                            let SyncData = dbSyncDatas[k]._doc;
                            try {
                                let expiry_month = (SyncData['policy_expiry_date'] !== '') ? moment(SyncData['policy_expiry_date']).format('MMMM') : '';
                                SyncData['expiry_month'] = expiry_month;
                                SyncData['state'] = SyncData['rto_state'];
                                for (let j of Object.keys(obj_response['ALL'])) {
                                    if (SyncData.hasOwnProperty(j) && SyncData[j] !== null && SyncData[j] !== '') {
                                        let data_val = SyncData[j];
                                        if (obj_response['ALL'][j].hasOwnProperty(data_val) === false) {
                                            obj_response['ALL'][j][data_val] = 0;
                                        }
                                        obj_response['ALL'][j][data_val]++;
                                    }
                                }
                                let channel = SyncData['channel'];
                                if (obj_response.hasOwnProperty(channel)) {
                                    for (let j of Object.keys(obj_response[channel])) {
                                        if (SyncData.hasOwnProperty(j) && SyncData[j] !== null && SyncData[j] !== '') {
                                            let data_val = SyncData[j];
                                            if (obj_response[channel][j].hasOwnProperty(data_val) === false) {
                                                obj_response[channel][j][data_val] = 0;
                                            }
                                            obj_response[channel][j][data_val]++;
                                        }
                                    }
                                }
                            } catch (e) {
                                let obj_err = {
                                    'type': 'loop',
                                    'id': SyncData['erp_qt'],
                                    'err': e.stack
                                };
                                obj_response['Exception'].push(obj_err);
                            }
                        }
                        for (let x of arr_channel) {
                            obj_response[x]['make'] = sortObjectByVal(obj_response[x]['make']);
                            obj_response[x]['state'] = sortObjectByVal(obj_response[x]['state']);
                        }
                        fs.writeFile(appRoot + "/tmp/cachemaster/" + cache_key + ".log", JSON.stringify(obj_response), function (err) {});
                        res.json(obj_response);
                    }
                });
            }
        } catch (e) {
            let obj_response = {
                'type': 'main',
                'err': e.stack
            }
            return res.json(obj_response);
        }
    });
    app.get('/sync_contacts/data_count', function (req, res, next) {
        try {
            let arr_agent_summary = {};
            let arr_Cond = [
                {"$match": {}},
                {$group: {
                        _id: {'ss_id': "$ss_id", 'fba_id': "$fba_id", 'channel': "$channel"},
                        contact: {$sum: 1},
                        sync: {$sum: "$Is_Synced"},
                        found: {$sum: "$Is_Found"},
                        rsa_visited: {$sum: "$is_rsa_visited"},
                        rsa_issued: {$sum: "$is_rsa_issued"}
                    }},
                {$project: {_id: 0, ss_id: '$_id.ss_id', fba_id: '$_id.fba_id', channel: '$_id.channel', contact: 1, sync: 1, found: 1, rsa_visited: 1, rsa_issued: 1}},
                {$sort: {'contact': -1}}
            ];
            Sync_Contact.aggregate(arr_Cond).exec(function (err, dbSyncs) {
                for (let k in dbSyncs) {
                    let sync = dbSyncs[k]['sync'] || 0;
                    let found = dbSyncs[k]['found'] || 0;
                    arr_agent_summary[dbSyncs[k]['ss_id']] = {
                        'channel': dbSyncs[k]['channel'] || 'NA',
                        'ss_id': dbSyncs[k]['ss_id'] || 0,
                        'fba_id': dbSyncs[k]['fba_id'] || 0,
                        'contact': dbSyncs[k]['contact'],
                        'sync': dbSyncs[k]['sync'] || 0,
                        'found': dbSyncs[k]['found'] || 0,
                        'valid': 0,
                        'lead': 0,
                        'sale': 0,
                        'found_rate': (sync > 0) ? Math.round((found / sync) * 100) : 0,
                        'lead_bal': 0,
                        'rsa_visited': dbSyncs[k]['rsa_visited'] || 0,
                        'rsa_issued': dbSyncs[k]['rsa_issued'] || 0
                    };
                }
                arr_Cond = [
                    {"$match": {}},
                    {$group: {
                            _id: {'ss_id': "$ss_id"},
                            valid: {$sum: "$Is_Valid"},
                            lead: {$sum: "$Is_Lead_Created"},
                            sale: {$sum: "$Is_Sale"}
                        }},
                    {$project: {_id: 0, ss_id: '$_id.ss_id', valid: 1, lead: 1, sale: 1}},
                    {$sort: {'valid': -1}}
                ];
                sync_contact_erp_data.aggregate(arr_Cond).exec(function (err, dbSyncDatas) {
                    let arr_agent_summary_final = [];
                    for (let k in dbSyncDatas) {
                        //arr_agent_summary[dbSyncDatas[k]['ss_id']]['found'] = dbSyncDatas[k]['found'] || 0;
                        arr_agent_summary[dbSyncDatas[k]['ss_id']]['valid'] = dbSyncDatas[k]['valid'] || 0;
                        arr_agent_summary[dbSyncDatas[k]['ss_id']]['lead'] = dbSyncDatas[k]['lead'] || 0;
                        arr_agent_summary[dbSyncDatas[k]['ss_id']]['sale'] = dbSyncDatas[k]['sale'] || 0;

                        let dataval = dbSyncDatas[k]['valid'] || 0;
                        let lead = dbSyncDatas[k]['lead'] || 0;
                        let data_bal = dataval - lead;
                        let lead_bal = 0;
                        if (data_bal > const_free_lead) {
                            lead_bal = const_free_lead - lead;
                        } else {
                            lead_bal = data_bal;
                        }
                        arr_agent_summary[dbSyncDatas[k]['ss_id']]['lead_bal'] = lead_bal;

                    }
                    arr_agent_summary_final = Object.values(arr_agent_summary);
                    if (req.query['sync_summary'] === 'yes') {
                        var Sync_Contact_Summary = require('../models/sync_contact_summary');
                        Sync_Contact_Summary.remove({}, function (err, DbSync_Contact_Summary) {
                            Sync_Contact_Summary.insertMany(arr_agent_summary_final, function (err, DbSync_Contact_Summary) {
                                console.error('DBG', 'DbSync_Contact_Summary', 'save', err);
                                res.send('sync_done');
                            });
                        });
                    } else {
                        let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
                        res_report += '<p><h1>CONTACT ERP SYNC REPORT</h1></p>';
                        res_report += arrayobjectToHtml(arr_agent_summary_final, 'Contact Report', '', []);
                        res_report += '</p>';
                        res_report += '</body></html>';
                        res.send(res_report);
                    }
                });
            });
        } catch (e) {
            res.send(e.stack);
        }
    });
    app.get('/sync_contacts/sync_contact_dashboard/:ss_id/:fba_id', agent_details_pre, function (req, res, next) {
        var Ss_Id = req.params.ss_id - 0;
        var Fba_Id = req.params.fba_id - 0;
        Sync_Contact.find({ss_id: Ss_Id, fba_id: Fba_Id}, function (err, dbSync_Contacts) {
            let objAgent = {
                'Name': "",
                "Mobile": ""
            };
            if (req.hasOwnProperty('agent')) {
                if (req.agent['user_type'] === 'POSP') {
                    objAgent['Name'] = req.agent['POSP']['First_Name'] + ' ' + req.agent['POSP']['First_Name'];
                } else {
                    objAgent['Name'] = req.agent['EMP']['Emp_Name'];
                }
            }

            var contact_res = {
                "Profile": objAgent,
                "Total_Contact_Count": 0,
                "LandMark_Count": 0,
                "Landmark_Policy_Count": 0,
                "Sync_Count": 0,
                "Lead_Count": 0,
                "Month_Count": {},
                "Data_Exception": [],
                "Data_Inner_Exception": []
            };
            for (var m = 0; m <= 11; m++) {
                var curr_month = moment().add(m, 'months').format('MMMM YYYY');
                contact_res['Month_Count'][curr_month] = {
                    "count": 0,
                    "data": [],
                    "lead_count": 0,
                    "lead_list": []
                };
            }
            var landmark_count = 0;
            if (dbSync_Contacts.length > 0) {
                contact_res['Total_Contact_Count'] = dbSync_Contacts.length;
                for (let x in dbSync_Contacts) {
                    if (dbSync_Contacts[x]._doc.hasOwnProperty('erp_core_response') && dbSync_Contacts[x]._doc['erp_core_response'] !== '') {
                        landmark_count++;
                    }
                }
                sync_contact_erp_data.find({ss_id: Ss_Id, fba_id: Fba_Id, 'product': 'MOTOR', 'Is_Valid': 1}).sort({'policy_expiry_date': 1}).exec(function (err, dbSync_contact_erp_datas) {
                    let data = dbSync_contact_erp_datas;
                    var sync_count = 0;
                    var lead_count = 0;
                    for (let i in data) {
                        let sync_contact_date = data[i]['_doc'];
                        var ErpqtRqst = sync_contact_date;
                        try {
                            if (ErpqtRqst['Is_Lead_Created'] === 1) {
                                lead_count++;
                            }
                            if (ErpqtRqst.hasOwnProperty('product') && ErpqtRqst['product'] === 'MOTOR' && ErpqtRqst.hasOwnProperty('policy_expiry_date') && ErpqtRqst['policy_expiry_date'] !== '') {
                                var t_date = moment(ErpqtRqst['policy_expiry_date'], 'YYYY-MM-DD', true);
                                if (t_date.isValid() === true) {
                                    var policy_expiry_month = moment(ErpqtRqst['policy_expiry_date']).format('MMMM') + ' ';
                                    //for year
                                    let mon = moment(ErpqtRqst['policy_expiry_date']).format('M') - 0;
                                    let cur_mon = moment().format('M') - 0;
                                    let yr = moment().format('YYYY');
                                    if (mon < cur_mon) {
                                        yr = (yr - 0) + 1;
                                    }
                                    let arr_exp = ErpqtRqst['policy_expiry_date'].split('-');
                                    arr_exp[0] = yr;
                                    ErpqtRqst['policy_expiry_date'] = arr_exp.join('-');
                                    policy_expiry_month += yr;
                                    //for year
                                    if (contact_res['Month_Count'].hasOwnProperty(policy_expiry_month))
                                    {
                                        sync_count++;
                                        contact_res['Month_Count'][policy_expiry_month]['count']++;
                                        //contact_res['Month_Count'][policy_expiry_month]['data'].push(ErpqtRqst);
                                        if (ErpqtRqst['Is_Lead_Created'] === 1) {
                                            contact_res['Month_Count'][policy_expiry_month]['lead_count']++;
                                            contact_res['Month_Count'][policy_expiry_month]['lead_list'].push(ErpqtRqst);
                                        }
                                    }
                                } else {
                                    contact_res['Data_Inner_Exception'].push({
                                        'id': ErpqtRqst['Sync_Contact_Erp_Data_Id'],
                                        'mob': ErpqtRqst['erp_entry'],
                                        'msg': 'Invalid Expiry Date',
                                        'data': ErpqtRqst
                                    });
                                }
                            } else {
                                contact_res['Data_Inner_Exception'].push({
                                    'id': ErpqtRqst['Sync_Contact_Erp_Data_Id'],
                                    'mob': ErpqtRqst['erp_entry'],
                                    'msg': 'No Expiry Date',
                                    'data': ErpqtRqst
                                });
                            }
                        } catch (e1) {
                            contact_res['Data_Inner_Exception'].push({
                                'id': ErpqtRqst['Sync_Contact_Erp_Data_Id'],
                                'mob': sync_contact_date['mobileno'],
                                'msg': e1.stack,
                                'data': ErpqtRqst
                            });
                        }
                    }
                    contact_res['Landmark_Policy_Count'] = sync_count;
                    contact_res['LandMark_Count'] = landmark_count;
                    contact_res['Sync_Count'] = sync_count;
                    contact_res['Lead_Count'] = lead_count;
                    var sync_contact_agreement = require('../models/sync_contact_agreement');
                    sync_contact_agreement.count({'ss_id': Ss_Id}).exec(function (err, dataSyncAgreeCount) {
                        contact_res['is_tele_support'] = (dataSyncAgreeCount > 0) ? 'yes' : 'no';
                        res.json(contact_res);
                    });
                });
            } else {
                res.json(contact_res);
            }
        });
    });
    app.get('/sync_contacts/process_date_reg', function (req, res, next) {
        var limit = (req.query.hasOwnProperty('limit')) ? req.query['limit'] - 0 : 1000;
        sync_contact_erp_data.find({'Is_Date_Reg': {$exists: false}}).limit(limit).exec(function (err, dataSync) {
            let obj_sum = {
                'proc': 0,
                'notproc': 0,
                'err': 0,
                'err_list': []
            };
            for (let i in dataSync) {
                let id = dataSync[i]._doc['Sync_Contact_Erp_Data_Id'];
                try {
                    let obj_data = {
                        'Is_Date_Reg': 'no'
                    };
                    let policy_expiry_date = dataSync[i]._doc['policy_expiry_date'];
                    if (typeof policy_expiry_date !== 'undefined' && policy_expiry_date !== null && policy_expiry_date !== '' &&
                            (policy_expiry_date.indexOf('2017') > -1 || policy_expiry_date.indexOf('2018') > -1 || policy_expiry_date.indexOf('2019') > -1)) {
                        let policy_expiry_date_processed = policy_expiry_date.replace('2017', '2020').replace('2018', '2020').replace('2019', '2020');
                        obj_data['policy_expiry_date'] = policy_expiry_date_processed;
                        obj_data['Is_Date_Reg'] = 'yes';
                    }
                    let registration_no = dataSync[i]._doc['registration_no'];
                    if (typeof registration_no !== 'undefined' && registration_no !== null && registration_no !== '' && registration_no !== 'APPLIEDFOR' && registration_no.indexOf('-') === -1) {
                        let registration_no_processed = reg_no_format(registration_no);
                        obj_data['registration_no_processed'] = registration_no_processed;
                        obj_data['Is_Date_Reg'] = 'yes';
                    }
                    if (obj_data['Is_Date_Reg'] === 'yes') {
                        obj_sum['proc']++;

                    } else {
                        obj_sum['notproc']++;
                    }
                    sync_contact_erp_data.update({'Sync_Contact_Erp_Data_Id': id}, {$set: obj_data}, {multi: false}, function (err, numAffected) {

                    });
                } catch (e) {
                    obj_sum['err']++;
                    obj_sum['err_list'].push(id + '--' + e.stack);
                }
            }
            res.send('<pre>' + JSON.stringify(obj_sum, undefined, 2) + '</pre>');

        });
    });
    app.post('/sync_contacts/online_agreement', function (req, res) {
        var online_agreement = require('../models/sync_contact_agreement');
        req.body = JSON.parse(JSON.stringify(req.body));
        var objonline_agreement = new online_agreement();
        for (var key in req.body) {
            objonline_agreement[key] = req.body[key];
        }
        objonline_agreement.Created_On = new Date();
        objonline_agreement.Modified_On = new Date();
        objonline_agreement.save(function (err1) {
            if (err1) {
                res.json({'Status': "Failure", "data": req.body});
            } else {
                res.json({'Status': "Success", "data": req.body});
            }
        });
    });
    app.get('/sync_contacts/get_sync_erp_data/:ss_id/:fba_id/:lead_type?', function (req, res, next) {
        try {
            var Ss_Id = req.params.ss_id - 0;
            var fba_id = req.params.fba_id - 0;
            var lead_type = (req.params.lead_type !== "" && req.params.lead_type !== undefined) ? req.params.lead_type : "";
            var Condition = {
                "ss_id": Ss_Id,
                "fba_id": fba_id
            };
            if (lead_type !== "") {
                Condition["lead_type"] = lead_type;
            }
            var lead = require('../models/leads');
            lead.find(Condition).exec(function (err, dblead) {
                console.log(dblead);
                res.json(dblead);
            });
        } catch (e) {

        }
    });
    app.post('/sync_contacts/get_lead_data', LoadSession, function (req, res, next) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);

            var optionPaginate = {
                select: 'User_Data_Id Modified_On Lead_Id Customer_Name Product_Id mobile policy_expiry_date Created_On Make_Name Model_Name Variant_Name VehicleCity_RTOCode lead_type lead_disposition_assigned_on lead_disposition lead_subdisposition PB_CRN renewal_data.erp_qt lead_assigned_uid lead_assigned_name lead_assigned_ssid lead_assigned_on',
                sort: {'Lead_Id': -1},
                lean: true,
                page: 1,
                limit: 10
            };

            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;
            console.error('HorizonLeadList', filter, req.body);
            var ObjRequest = req.body;

            
            if (req.obj_session.user.role_detail.role.indexOf('SuperAdmin') > -1) {
            } else if (req.obj_session.user.role_detail.role.indexOf('ChannelHead') > -1) {
                var arr_ch_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                channel = req.obj_session.user.role_detail.channel;
                filter['$or'] = [
                    {'channel': channel},
                    {'ss_id': {$in: arr_ch_ssid}}
                ];
            } else {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);

                }
                arr_ssid.push(req.obj_session.user.ss_id);
                //filter['ss_id'] = {$in: arr_ssid};
				filter['$or'] = [
                    {'lead_assigned_ssid': {$in: arr_ssid}},
                    {'ss_id': {$in: arr_ssid}}
                ];
            }

            var fromDate = ObjRequest["from_date"] !== undefined ? ObjRequest["from_date"] : "";
            var toDate = ObjRequest["to_date"] !== undefined ? ObjRequest["to_date"] : "";

            if (ObjRequest.lead_type !== "" && ObjRequest.lead_type !== undefined) {
                filter["lead_type"] = ObjRequest.lead_type;
            }
            if (ObjRequest.lead_assigned !== "" && ObjRequest.lead_assigned !== undefined) {
                filter["lead_assigned"] = ObjRequest.lead_assigned;
            }
            if (ObjRequest.lead_disposition !== "" && ObjRequest.lead_disposition !== undefined) {
                filter["lead_disposition"] = ObjRequest.lead_disposition;
                if (filter["lead_disposition"] === 'PENDING') {
                    filter["lead_disposition"] = {$exists: false};
                }
                if (filter["lead_disposition"] === 'DISPOSED') {
                    filter["lead_disposition"] = {$exists: true};
                }
            }
            if (ObjRequest.lead_subdisposition !== "" && ObjRequest.lead_subdisposition !== undefined) {
                filter["lead_subdisposition"] = ObjRequest.lead_subdisposition;
            }
            if (ObjRequest.lead_status !== "" && ObjRequest.lead_status !== undefined) {
                filter["lead_status"] = ObjRequest.lead_status;
            }
            if (ObjRequest.src_ssid !== "" && ObjRequest.src_ssid !== undefined) {
                filter["ss_id"] = ObjRequest.src_ssid - 0;
            }
            if (ObjRequest.name !== "" && ObjRequest.name !== undefined) {
                filter["Customer_Name"] = new RegExp(req.body.name, 'i');
            }
            if (ObjRequest.mobile !== "" && ObjRequest.mobile !== undefined) {
                filter["mobile"] = req.body.mobile - 0;
            }
            if (ObjRequest.src_crn !== "" && ObjRequest.src_crn !== undefined) {
                filter["PB_CRN"] = req.body.src_crn - 0;
            }
			if (ObjRequest.erp_qt !== "" && ObjRequest.erp_qt !== undefined) {
                filter["renewal_data.erp_qt"] = req.body.erp_qt.toString();
            }
            if (fromDate !== "" && toDate !== "") {
                let StartDate = moment(fromDate).utcOffset("+05:30").startOf('Day');
                let EndDate = moment(toDate).utcOffset("+05:30").endOf('Day');
                filter["Modified_On"] = {$gte: StartDate, $lte: EndDate};
            }
			if (typeof req.body['expiry_identifier'] !== 'undefined' && req.body['expiry_identifier'] !== '') {
                let expiry_start = null;
                let expiry_end = null;
                if (req.body['expiry_identifier'] === 'EXPIRED_3') {
                    expiry_start = moment().add(-3, 'days').utcOffset("+05:30").startOf('Day');
                    expiry_end = moment().add(-1, 'days').utcOffset("+05:30").endOf('Day');
                }
                if (req.body['expiry_identifier'] === 'TODAY') {
                    expiry_start = moment().utcOffset("+05:30").startOf('Day');
                    expiry_end = moment().utcOffset("+05:30").endOf('Day');
                }
                if (req.body['expiry_identifier'] === 'TOMORROW') {
                    expiry_start = moment().add(1, 'days').utcOffset("+05:30").startOf('Day');
                    expiry_end = moment().add(1, 'days').utcOffset("+05:30").endOf('Day');
                }
                if (req.body['expiry_identifier'] === 'NEXT_2_7') {
                    expiry_start = moment().add(2, 'days').utcOffset("+05:30").startOf('Day');
                    expiry_end = moment().add(7, 'days').utcOffset("+05:30").endOf('Day');
                }
                if (req.body['expiry_identifier'] === 'NEXT_8_15') {
                    expiry_start = moment().add(8, 'days').utcOffset("+05:30").startOf('Day');
                    expiry_end = moment().add(15, 'days').utcOffset("+05:30").endOf('Day');
                }
                if (req.body['expiry_identifier'] === 'NEXT_16_30') {
                    expiry_start = moment().add(16, 'days').utcOffset("+05:30").startOf('Day');
                    expiry_end = moment().add(30, 'days').utcOffset("+05:30").endOf('Day');
                }
                filter['policy_expiry_date'] = {'$gte': expiry_start.format("YYYY-MM-DD"), '$lte': expiry_end.format("YYYY-MM-DD")};
            }
            var lead = require('../models/leads');
            console.error('HorizonLeadList', filter, req.body);
            lead.paginate(filter, optionPaginate).then(function (user_datas) {
                res.json(user_datas);
            });
        } catch (e) {
            console.error(e);
            res.json({'Msg': 'error', 'Status': 'fail'});
        }
    });

    app.post('/sync_contacts/get_lead_sync_data', LoadSession, function (req, res, next) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);

            var optionPaginate = {
                select: 'Sync_Contact_Erp_Data_Id Modified_On erp_qt name product_id mobile policy_expiry_date make model variant rto_id Created_On',
                sort: {'Created_On': -1},
                lean: true,
                page: 1,
                limit: 10
            };

            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;

            var ObjRequest = req.body;

            filter["ss_id"] = ObjRequest.ss_id - 0;
            filter["fba_id"] = ObjRequest.fba_id - 0;

            var fromDate = ObjRequest["from_date"] !== undefined ? ObjRequest["from_date"] : "";
            var toDate = ObjRequest["to_date"] !== undefined ? ObjRequest["to_date"] : "";

            if (ObjRequest.src_ssid !== "" && ObjRequest.src_ssid !== undefined) {
                filter["ss_id"] = parseInt(ObjRequest.src_ssid);
            }
            if (ObjRequest.name !== "" && ObjRequest.name !== undefined) {
                filter["name"] = new RegExp(req.body.name, 'i');
            }
            if (ObjRequest.mobile !== "" && ObjRequest.mobile !== undefined) {
                filter["mobile"] = req.body.mobile;
            }
            if (ObjRequest.erp_qt !== "" && ObjRequest.erp_qt !== undefined) {
                filter["erp_qt"] = req.body.erp_qt;
            }            
            if (fromDate !== "" && toDate !== "") {
                filter["policy_expiry_date"] = {$gte: fromDate, $lt: toDate};
            }
            var sync_erp_data = require('../models/sync_contact_erp_data');
            console.error('HorizonLeadList', filter, req.body);
            sync_erp_data.paginate(filter, optionPaginate).then(function (user_datas) {
                res.json(user_datas);
            });
        } catch (e) {
            console.log(e);
            res.json({'Msg': 'error', 'Status': 'fail'});
        }
    });

    app.post('/sync_contacts/save_lead_tele_support', function (req, res) {
        try {
            var lead_tele_support = require('../models/lead_tele_support');
            req.body = JSON.parse(JSON.stringify(req.body));
            var objlead_tele_support = new lead_tele_support();
            for (var key in req.body) {
                objlead_tele_support[key] = req.body[key];
            }
            objlead_tele_support.Created_On = new Date();
            objlead_tele_support.Modified_On = new Date();
            objlead_tele_support.save(function (err1) {
                if (err1) {
                    res.json({'Msg': '', Status: 'Fail'});
                } else {
                    res.json({'Msg': 'Saved Succesfully!!!', Status: 'Success'});
                }
            });


        } catch (errex) {
            res.json({'Msg': 'error', Error_Msg: errex.stack, Status: 'Fail'});
        }
    });
    app.get('/scr/:Short_Code', function (req, res, next) {
        var sync_contact_id = (req.params.hasOwnProperty('Short_Code')) ? req.params['Short_Code'] : "";
        Sync_Contact.find({'Short_Code': sync_contact_id}).limit(1).exec(function (err, dataSync) {
            if (dataSync[0]._doc.hasOwnProperty('is_rsa_issued') && dataSync[0]._doc['is_rsa_issued'] == 1) {
                res.send('Msg : RSA Certificate already issued.');
            } else {
                Sync_Contact.find({'mobileno': dataSync[0]._doc['mobileno'], 'is_rsa_issued': 1}).count().exec(function (err, SyncCount) {
                    if (SyncCount > 0) {
                        res.send('Msg : RSA Certificate already issued.');
                    } else {
                        let obj_res = {
                            'err': 0,
                            'err_list': []
                        };
                        try {
                            let is_rsa_camp = (dataSync[0]._doc.hasOwnProperty('is_rsa_camp_visited')) ? dataSync[0]._doc['is_rsa_camp_visited'] - 0 : 0;
                            let obj_is_rsa_camp = {
                                "is_rsa_camp_visited": is_rsa_camp + 1
                            };
                            let url_click = "";
                            if (config.environment.name === 'Production') {
                                url_click = "https://www.policyboss.com/RSA_Unlocking/index.html?sync_contact_id=" + sync_contact_id;
                            } else {
                                url_click = "http://qa.policyboss.com/RSA_Unlocking/index.html?sync_contact_id=" + sync_contact_id;
                            }
                            Sync_Contact.update({'Short_Code': sync_contact_id}, {$set: obj_is_rsa_camp}, function (err, numAffected) {
                                console.log(err);
                                return res.redirect(url_click);
                            });
                        } catch (e) {
                            obj_res['err']++;
                            obj_res['err_list'].push(e.stack);
                        }
                    }
                });
            }
            //res.send(obj_res);
        });
    });
    app.get('/sync_contacts/rsa', function (req, res, next) {
        var sync_contact_id = (req.query.hasOwnProperty('sync_contact_id')) ? req.query['sync_contact_id'] : "";
        var ipaddress = (req.query.hasOwnProperty('ip_address')) ? req.query['ip_address'] : "0.0.0.0";
        Sync_Contact.find({'Short_Code': sync_contact_id}).limit(1).exec(function (err, dataSync) {
            Sync_Contact.find({'mobileno': dataSync[0]._doc['mobileno'], 'is_rsa_issued': 1}).count().exec(function (err, SyncCount) {
                let obj_res = {
                    'mobileno': 0,
                    'err': 0,
                    'err_list': []
                };
                if (SyncCount > 0) {
                    obj_res['err'] = 3;
                    obj_res['err_list'].push({'Msg': 'RSA Certificate already issued for this mobile number.'});
                } else {
                    if (dataSync[0]._doc.hasOwnProperty('is_rsa_issued') && dataSync[0]._doc['is_rsa_issued'] == 1) {
                        obj_res['err'] = 3;
                        obj_res['err_list'].push({'Msg': 'RSA Certificate already issued for this mobile number.'});
                    } else {
                        try {
                            let mobileno = (dataSync[0]._doc.hasOwnProperty('mobileno')) ? dataSync[0]._doc['mobileno'] - 0 : 0;
                            obj_res['mobileno'] = mobileno;
                            let obj_is_rsa_camp = {
                                "rsa_link_history": []
                            };
                            if (dataSync[0]._doc.hasOwnProperty('rsa_link_history')) {
                                dataSync[0]._doc['rsa_link_history'].push({"ipaddress": ipaddress, "date_time": new Date()});
                                obj_is_rsa_camp['rsa_link_history'] = dataSync[0]._doc['rsa_link_history'];
                            } else {
                                obj_is_rsa_camp['rsa_link_history'].push({"ipaddress": ipaddress, "date_time": new Date()});
                            }

                            Sync_Contact.update({'Short_Code': sync_contact_id}, {$set: obj_is_rsa_camp}, function (err, numAffected) {
                                console.log(err);
                            });
                        } catch (e) {
                            obj_res['err']++;
                            obj_res['err_list'].push(e.stack);
                        }

                    }
                }
                res.send(obj_res);
            });
        });
    });
    app.post('/sync_contacts/rsa_data', function (req, res, next) {
        try {
            let sync_contact_id = (req.body.hasOwnProperty('sync_contact_id')) ? req.body['sync_contact_id'] : "";
            let ipaddress = (req.body.hasOwnProperty('ip_address')) ? req.body['ip_address'] : "0.0.0.0";
            let reg_no = (req.body.hasOwnProperty('reg_no')) ? req.body['reg_no'] : "";
            let name = (req.body.hasOwnProperty('name')) ? req.body['name'] : "";
            let mobile_no = (req.body.hasOwnProperty('mobile_no')) ? req.body['mobile_no'] : "";
            let email = (req.body.hasOwnProperty('email')) ? req.body['email'] : "";
            let state_city = (req.body.hasOwnProperty('state_city')) ? req.body['state_city'] : "";
            var today = moment().utcOffset("+05:30");
            var today_str = moment(today).format("YYYYMMDDHHmmss");
            console.log('today_str - ' + today_str);
            obj_RsaData = {
                "sync_contact_id": sync_contact_id,
                "ipaddress": ipaddress,
                "reg_no": reg_no,
                "name": name,
                "mobile_no": mobile_no,
                "email": email,
                "state_city": state_city,
                "rsa_request": {
                    "TransactionID": today_str,
                    "Token": ((config.environment.name === "Production") ? "globs_$prodvnt" : "globsjks_%qwrwr"),
                    "UserID": ((config.environment.name === "Production") ? "dmluZWV0LmFnZ2Fyd2FsQHJ1cGVlYm9zcy5jb20=" : "Z2F1cmF2LmFyb3JhQGdsb2JhbGFzc3VyZS5jb20="),
                    "Password": ((config.environment.name === "Production") ? "QXNzaXN0QDEyMw==" : "QXNzaXN0QDEyMw=="),
                    "CustomerName": name,
                    "CustomerEmail": email,
                    "MobileNo": mobile_no,
                    "RegistrationNo": reg_no,
                    "State": state_city.split('_')[0].replace(/-/g, ' '),
                    "City": state_city.split('_')[1].replace(/-/g, ' ')
                }
            };
            var args = {
                data: obj_RsaData['rsa_request'],
                headers: {
                    "Content-Type": "application/json"
                }
            };
            console.log(obj_RsaData['rsa_request']);
            //sync_contact_id = sync_contact_id;
            var url_api = '';
            if (config.environment.name === 'Production') {
                url_api = 'https://rsa.globalassure.com/API/RSA/APISaveCertificate';
            } else {
                url_api = 'https://uatrsa.globalassure.com/API/RSA/APISaveCertificate';
            }
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.post(url_api, args, function (data, response) {
                console.log(data);
                let obj_res = {
                    "rsa_response": {},
                    "rsa_request": obj_RsaData['rsa_request'],
                    "is_rsa_issued": 0
                };
                obj_res['rsa_response'] = data;
                if (data.status === "Success") {
                    var pdf_file_name = "RSA_" + data.CertificateNo + ".pdf";
                    var pdf_sys_loc_horizon = appRoot + "/tmp/pdf/" + pdf_file_name;
                    var pdf_web_path_portal = config.environment.downloadurl + config.pb_config.pdf_web_loc + pdf_file_name;
                    obj_res['is_rsa_issued'] = 1;
                    obj_res['rsa_url'] = pdf_web_path_portal;
                    //obj_res['rsa_url'] = "http://ci.landmarkerp.com/RBServices.svc/GenerateQT?ClientName=" + obj_RsaData['name'] + "&Mobile=" + obj_RsaData['mobile_no'] + "&Email=" + obj_RsaData['email'] + "&RegistrationNo=" + obj_RsaData['reg_no'] + "&ExpiryDate=&RegistrationDate=&YOM=&RegistrationCity=" + obj_RsaData['state_city'].split('_')[1].replace(/-/g, ' ') + "&RegistrationState=" + obj_RsaData['state_city'].split('_')[0].replace(/-/g, ' ') + "&AgentID=&Make=&Model=";
                    Sync_Contact.update({'Short_Code': obj_RsaData['sync_contact_id']}, {$set: obj_res}, function (err, numAffected) {
                        console.log(err);
                    });
                    obj_res['err'] = 0;
                    var binary = new Buffer(data.CertificateFile, 'base64');
                    fs.writeFileSync(pdf_sys_loc_horizon, binary);
                    obj_res['rsa_response']['CertificateFile'] = pdf_web_path_portal;
                    var Email = require('../models/email');
                    var objModelEmail = new Email();
                    var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-PolicyBoss.com - RSA Certificate Number:' + data.CertificateNo;
                    email_body = '<html><body><p>Hi,</p><BR/><p>Please find the attachment of RSA Certificate File.</p>'
                            + '<BR><p>Certificate Number : ' + data.CertificateNo + '</p><BR><p>RSA Certificate File: ' + pdf_web_path_portal + ' </p></body></html>';
                    if (config.environment.name === 'Production') {
                        //objModelEmail.send('noreply@landmarkinsurance.co.in', obj_RsaData['email'], sub, email_body, '', config.environment.notification_email, '');
                    } else {
                        objModelEmail.send('noreply@landmarkinsurance.co.in', obj_RsaData['email'], sub, email_body, '', '', '');
                    }
                } else {
                    Sync_Contact.update({'Short_Code': obj_RsaData['sync_contact_id']}, {$set: obj_res}, function (err, numAffected) {
                        console.log(err);
                    });
                    obj_res['err'] = 1;
                }
                res.send(obj_res);
                ////Sync_Contact.update({'sync_contact_id': sync_contact_id_new}, {$set: obj_is_rsa_camp}, function (err, numAffected) {
                //console.log(data);
                //});
            });
        } catch (e) {
            let obj_res = {
                'err': 1,
                'err_list': e.stack
            };
            res.send(obj_res);
        }

    });

    app.post('/sync_contacts/get_sync_all_data', LoadSession, function (req, res) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);
            var optionPaginate = {
                select: 'mobileno name Created_On ss_id fba_id channel sync_date contact_group',
                sort: {'Created_On': -1},
                lean: true,
                page: 1,
                limit: 20
            };

            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;
            var ObjRequest = req.body;


            if (req.obj_session.user.role_detail.role.indexOf('SuperAdmin') > -1) {
            } else if (req.obj_session.user.role_detail.role.indexOf('ChannelHead') > -1) {
                var arr_ch_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                channel = req.obj_session.user.role_detail.channel;
                filter['$or'] = [
                    {'channel': channel},
                    {'ss_id': {$in: arr_ch_ssid}}
                ];
            } else {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);

                }
                arr_ssid.push(req.obj_session.user.ss_id);
                filter['ss_id'] = {$in: arr_ssid};
            }
            //filter['Is_Found'] = 0;

            if (typeof req.body['Contact_Type'] !== 'undefined' && req.body['Contact_Type'] !== '') {
                if (req.body['Contact_Type'] === 'lead_allocated') {
                    optionPaginate.select = 'sync_Mobile name Created_On ss_id fba_id channel sync_date contact_group';
                    filter['Is_Lead_Created'] = 1;
                    if (typeof ObjRequest.mobile !== 'undefined' && ObjRequest.mobile !== "") {
                        filter["sync_Mobile"] = ObjRequest.mobileno;
                    }
                    console.error('Horizonsync_all_data', filter, req.body);
                    sync_contact_erp_data.paginate(filter, optionPaginate).then(function (user_datas) {
                        res.json(user_datas);
                    });
                } else if (req.body['Contact_Type'] === 'unmatched_contact' || req.body['Contact_Type'] === 'rsa_visited' || req.body['Contact_Type'] === 'rsa_issued') {
                    if (req.body['Contact_Type'] === 'unmatched_contact') {
                        filter['Is_Found'] = 0;
                    }
                    if (req.body['Contact_Type'] === 'rsa_visited') {
                        filter['is_rsa_camp_visited'] = {'$gt': 0};
                    }
                    if (req.body['Contact_Type'] === 'rsa_issued') {
                        filter['is_rsa_issued'] = 1;
                    }
                    if (typeof ObjRequest.mobile !== 'undefined' && ObjRequest.mobile !== "") {
                        filter["mobileno"] = ObjRequest.mobileno;
                    }
                    console.error('Horizonsync_all_data', filter, req.body);
                    Sync_Contact.paginate(filter, optionPaginate).then(function (user_datas) {
                        res.json(user_datas);
                    });
                }
            } else {
                if (typeof ObjRequest.mobile !== 'undefined' && ObjRequest.mobile !== "") {
                    filter["mobileno"] = ObjRequest.mobileno;
                }
                console.error('Horizonsync_all_data', filter, req.body);
                Sync_Contact.paginate(filter, optionPaginate).then(function (user_datas) {
                    res.json(user_datas);
                });
            }

        } catch (e) {
            console.error(e.stack);
            res.json({"Msg": "error", 'Details': e.stack});
        }
    });
    app.post('/sync_contacts/agent_summary_list', LoadSession, function (req, res) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);
            var optionPaginate = {
                select: '',
                sort: {'contact': -1},
                lean: true,
                page: 1,
                limit: 25
            };

            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;
            var ObjRequest = req.body;


            if (req.obj_session.user.role_detail.role.indexOf('SuperAdmin') > -1) {
            } else if (req.obj_session.user.role_detail.role.indexOf('ChannelHead') > -1) {
                var arr_ch_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    arr_ch_ssid = req.obj_session.users_assigned.Team.CSE;
                }
                arr_ch_ssid.push(req.obj_session.user.ss_id);
                channel = req.obj_session.user.role_detail.channel;
                filter['$or'] = [
                    {'channel': channel},
                    {'ss_id': {$in: arr_ch_ssid}}
                ];
            } else {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);

                }
                arr_ssid.push(req.obj_session.user.ss_id);
                filter['ss_id'] = {$in: arr_ssid};
            }
            let Sync_Contact_Summary = require('../models/sync_contact_summary');
            Sync_Contact_Summary.paginate(filter, optionPaginate).then(function (user_datas) {
                var Posp = require('../models/posp');
                let arr_ss_id = [];
                for (let k in  user_datas.docs) {
                    arr_ss_id.push(user_datas.docs[k]['ss_id']);
                }
                Posp.find({"Ss_Id": {$in: arr_ss_id}, 'Is_Active': true}).select('Ss_Id First_Name Last_Name Sources Reporting_Agent_Name Reporting_Agent_Uid Agent_City').exec(function (err, dbPosp) {
                    let obj_posp = {};
                    if (dbPosp) {
                        for (let k in  dbPosp) {
                            obj_posp[dbPosp[k]._doc['Ss_Id']] = dbPosp[k]._doc;
                        }
                    }
                    for (let k in  user_datas.docs) {
                        let ss_id = user_datas.docs[k]['ss_id'];

                        if (obj_posp.hasOwnProperty(ss_id)) {
                            user_datas.docs[k]['Name'] = obj_posp[ss_id]['First_Name'] + ' ' + obj_posp[ss_id]['Last_Name'];
                            user_datas.docs[k]['Channel'] = config.channel.Const_POSP_Channel.hasOwnProperty(obj_posp[ss_id]['Sources'] - 0);
                            user_datas.docs[k]['RM'] = obj_posp[ss_id]['Reporting_Agent_Name'] + '::UID-' + obj_posp[ss_id]['Reporting_Agent_Uid'];
                            user_datas.docs[k]['City'] = obj_posp[ss_id]['Agent_City'];
                        } else {
                            user_datas.docs[k]['Name'] = 'NA';
                            user_datas.docs[k]['Channel'] = 'NA'; //config.channel.Const_POSP_Channel.hasOwnProperty(dbPosp['Sources'] - 0)
                            user_datas.docs[k]['RM'] = 'NA'; //config.channel.Const_POSP_Channel.hasOwnProperty(dbPosp['Sources'] - 0)
                            user_datas.docs[k]['City'] = 'NA'; //config.channel.Const_POSP_Channel.hasOwnProperty(dbPosp['Sources'] - 0)
                        }

                    }

                    res.json(user_datas);
                });
            });

        } catch (e) {
            console.error(e.stack);
            res.json({"Msg": "error", 'Details': e.stack});
        }
    });
    app.post('/sync_contacts/update_contact_group', function (req, res) {
        try {
            var ss_id = req.body['ss_id'] - 0;
            var mobile = req.body['mobile'].toString();
            var group = req.body['group'];
            if (ss_id > 0 && mobile !== '') {
                Sync_Contact.update({'ss_id': ss_id, 'mobileno': mobile}, {$set: {'contact_group': group}}, function (err, result) {
                    if (err)
                    {
                        res.json({'status': 'ERR', 'details': err});
                    } else {
                        sync_contact_erp_data.update({'ss_id': ss_id, 'mobile': mobile}, {$set: {'contact_group': group}}, {multi: true}, function (err, result) {
                            ;

                        });
                        res.json({'status': 'SUCCESS', 'details': result});
                    }
                });
            } else {
                res.json({'status': 'ERR', 'details': 'EMPTY_ID'});
            }
        } catch (e) {
            res.json({'status': 'ERR', 'details': e.stack});
        }
    });
    app.post('/sync_contacts/get_sync_match_data', LoadSession, function (req, res) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);
            var optionPaginate = {
                select: 'mobile name policy_expiry_date make model erp_qt rto_city registration_no Created_On',
                sort: {'Created_On': 1},
                lean: true,
                page: 1,
                limit: 10
            };

            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;

            var ObjRequest = req.body;

            filter["ss_id"] = ObjRequest.ss_id - 0;
            filter["fba_id"] = ObjRequest.fba_id - 0;
            filter["Is_Lead_Created"] = 1;

            if (ObjRequest.mobile !== undefined && ObjRequest.mobile !== "") {
                filter["mobile"] = ObjRequest.mobile;
            }
            var sync_contact_erp_data = require('../models/sync_contact_erp_data');
            console.error('Horizonsync_match_data', filter, req.body);
            sync_contact_erp_data.paginate(filter, optionPaginate).then(function (user_datas) {
                //console.error('UserDataSearch', filter, optionPaginate, user_datas);
                res.json(user_datas);
            });
        } catch (e) {
            console.error(e);
            res.json({"Msg": "error"});
        }
    });
    app.post('/sync_contacts/razor_payment_data', LoadSession, function (req, res) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);
            var optionPaginate = {
                select: 'mobile name policy_expiry_date make model erp_qt rto_city registration_no Created_On',
                sort: {'Created_On': 1},
                lean: true,
                page: 1,
                limit: 10
            };

            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;

            var ObjRequest = req.body;

            filter["ss_id"] = ObjRequest.ss_id - 0;
            filter["fba_id"] = ObjRequest.fba_id - 0;
            filter["Is_Lead_Created"] = 1;

            if (ObjRequest.mobile !== undefined && ObjRequest.mobile !== "") {
                filter["mobile"] = ObjRequest.mobile;
            }
            var sync_contact_erp_data = require('../models/sync_contact_erp_data');
            console.error('Horizonsync_match_data', filter, req.body);
            sync_contact_erp_data.paginate(filter, optionPaginate).then(function (user_datas) {
                //console.error('UserDataSearch', filter, optionPaginate, user_datas);
                res.json(user_datas);
            });
        } catch (e) {
            console.error(e);
            res.json({"Msg": "error"});
        }
    });

    app.get('/sync_contacts/get_lead_disposition_data/:lead_id', function (req, res) {
        try {
            var lead_id = parseInt(req.params.lead_id);
            var lead_disposition = require('../models/lead_disposition');

            lead_disposition.find({"Lead_Id": lead_id}, function (err, dblead) {
                if (err) {
                    res.json(err);
                } else {
                    res.json(dblead);
                }
            });

        } catch (e) {

        }
    });

    app.post('/sync_contacts/lead_disposition_save', LoadSession, function (req, res) {
        try {
            var lead_disposition = require('../models/lead_disposition');

            var formidable = require('formidable');
            var form = new formidable.IncomingForm();
            var fs = require('fs');
            form.parse(req, function (err, fields, files) {
                console.error(fields);
                var pdf_web_path = "";
                if (files.hasOwnProperty('disposition_file')) {

                    var pdf_file_name = files['disposition_file'].name;
                    var path = appRoot + "/tmp/disposition/";
                    var pdf_sys_loc_horizon = path + fields["lead_id"] + '/' + pdf_file_name;
                    pdf_web_path = config.environment.downloadurl + "/disposition/" + fields["lead_id"] + '/' + pdf_file_name;
                    var oldpath = files.disposition_file.path;
                    if (fs.existsSync(path + fields["lead_id"]))
                    {

                    } else
                    {
                        fs.mkdirSync(path + fields["lead_id"]);
                    }
                    fs.readFile(oldpath, function (err, data) {
                        if (err) {
                            console.error('Read', err);
                        }
                        console.log('File read!');

                        // Write the file
                        fs.writeFile(pdf_sys_loc_horizon, data, function (err) {
                            if (err) {
                                console.error('Write', err);
                            }
                        });
                        // Delete the file
                        fs.unlink(oldpath, function (err) {
                            if (err)
                                throw err;
                            console.log('File deleted!');
                        });
                    });
                }
                var arg = {
                    Lead_Id: fields["lead_id"],
                    Status: fields["dsp_status"],
                    Sub_Status: fields["dsp_substatus"],
                    Created_On: new Date(),
                    Modified_On: new Date(),
                    Remark: fields["dsp_remarks"],
                    ss_id: req.obj_session.user.ss_id,
                    Is_Latest: 1,
                    fba_id: req.obj_session.user.fba_id,
                    File_Name: pdf_web_path,
                    Lead_Status: fields["Lead_Status"],
                    Customer_Name: fields["Customer_Name"],
                    Customer_Mobile: fields["Customer_Mobile"],
                    Policy_Expiry_Date: fields["Policy_expiry_date"],
                    Next_Call_Date: fields["Next_Call_Date"]
                };
                console.error(arg);
                var dispositionObj = new lead_disposition(arg);
                dispositionObj.save(function (err) {
                    console.error(err);
                    if (err)
                        throw err;


                    res.json({'Msg': 'Success'});
                });
            });
        } catch (e) {
            console.error(e);
            res.json({'Msg': 'Fail'});
        }
    });
    app.post('/sync_contacts/razor_payment_history', LoadSession, function (req, res) {
        try {
            var Base = require('../libs/Base');
            var objBase = new Base();
            var obj_pagination = objBase.jqdt_paginate_process(req.body);
            var optionPaginate = {
                select: 'Lead_Count Total_Premium Email Mobile Name Transaction_Status Created_On Ss_Id Fba_ID Plan',
                sort: {'Created_On': -1},
                lean: true,
                page: 1,
                limit: 25
            };
            if (obj_pagination) {
                optionPaginate['page'] = obj_pagination.paginate.page;
                optionPaginate['limit'] = parseInt(obj_pagination.paginate.limit);

            }
            var filter = obj_pagination.filter;
            if (req.obj_session.user.role_detail.role.indexOf('SuperAdmin') > -1) {
            } else {
                var arr_ssid = [];
                if (req.obj_session.hasOwnProperty('users_assigned')) {
                    var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                    arr_ssid = combine_arr.split(',').filter(Number).map(Number);

                }
                arr_ssid.push(req.obj_session.user.ss_id);
                filter['Ss_Id'] = {$in: arr_ssid};
            }
            
			if (req.body.Transaction_Status !== undefined && req.body.Transaction_Status !== '') {
                filter["Transaction_Status"] = req.body.Transaction_Status;
            }			
            if (req.body.name !== undefined) {
                filter["Name"] = new RegExp(req.body.name, 'i');
            }

            var razorpay_payment = require('../models/razorpay_payment');
            console.error('Horizonrazorpay_payment', filter, req.body);
            razorpay_payment.paginate(filter, optionPaginate).then(function (razorpay_payment) {
                //console.error('UserDataSearch', filter, optionPaginate, user_datas);
                res.json(razorpay_payment);
            });
        } catch (e) {
            console.error(e);
            res.json({"Msg": "error"});
        }
    });
    function agent_activity_summary_handler(req, res, data) {
        try {
            if (
                    data.sync !== null &&
                    data.obj_sync_analysis_summary !== null
                    ) {
                var obj_final_response = {
                    'obj_sync_summary': {},
                    'obj_sync_analysis_summary': {}
                };
                let dbsyncs = data.sync;
                let obj_sync_summary = {
                    'All': {
                        'Contact': 0,
                        'Channel': {},
                        'Sync_Count': 0,
                        'Found_Count': 0,
                        'Match_Count': 0,
                        'Agent': 0,
                        'Agent_List': [],
                        'Lead_Count': 0,
                        'Sale_Count': 0,
                    },
                    'Range': {
                        'Contact': 0,
                        'Channel': {},
                        'Sync_Count': 0,
                        'Found_Count': 0,
                        'Match_Count': 0,
                        'Agent': 0,
                        'Agent_List': [],
                        'Lead_Count': 0,
                        'Sale_Count': 0
                    }
                };
                obj_sync_summary['All'].Agent = dbsyncs.all.length;
                obj_sync_summary['Range'].Agent = dbsyncs.range.length;
                let SyncType = 'All';
                for (let k in dbsyncs[SyncType.toLowerCase()]) {
                    try {
                        let Sync = dbsyncs[SyncType.toLowerCase()][k]._doc;
                        obj_sync_summary[SyncType].Contact += Sync['contact'];
                        obj_sync_summary[SyncType].Sync_Count += Sync['sync'];
                        obj_sync_summary[SyncType].Found_Count += Sync['found'];
                        obj_sync_summary[SyncType].Match_Count += Sync['valid'];
                        obj_sync_summary[SyncType].Lead_Count += Sync['lead'];
                        obj_sync_summary[SyncType].Sale_Count += Sync['sale'];
                        obj_sync_summary[SyncType].Agent_List.push(Sync);
                        if (obj_sync_summary[SyncType].Channel.hasOwnProperty(Sync['channel']) === false) {
                            obj_sync_summary[SyncType].Channel[Sync['channel']] = {
                                'Channel': Sync['channel'],
                                'Agent': 0,
                                'Contact': 0,
                                'Sync_Contact': 0,
                                'Found_Contact': 0,
                                'Match_Contact': 0,
                                'Lead_Contact': 0,
                                'Sale_Contact': 0
                            };
                        }
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Agent']++;
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Contact'] += Sync['contact'];
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Sync_Contact'] += Sync['sync'];
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Found_Contact'] += Sync['found'];
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Match_Contact'] += Sync['valid'];
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Lead_Contact'] += Sync['lead'];
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Sale_Contact'] += Sync['sale'];
                    } catch (e) {
                    }
                }
                SyncType = 'Range';
                for (let k in dbsyncs[SyncType.toLowerCase()]) {
                    try {
                        let Sync = dbsyncs[SyncType.toLowerCase()][k];
                        obj_sync_summary[SyncType].Contact += Sync['agent_contact_count'] - 0;
                        obj_sync_summary[SyncType].Sync_Count += Sync['sync_contact_count'] - 0;
                        obj_sync_summary[SyncType].Found_Count += Sync['found_contact_count'] - 0;
                        obj_sync_summary[SyncType].Match_Count += Sync['match_contact_count'] - 0;
                        obj_sync_summary[SyncType].Sale_Count += Sync['sale_contact_count'] - 0;
                        obj_sync_summary[SyncType].Agent_List.push(Sync);
                        if (obj_sync_summary[SyncType].Channel.hasOwnProperty(Sync['channel']) === false) {
                            obj_sync_summary[SyncType].Channel[Sync['channel']] = {
                                'Channel': Sync['channel'],
                                'Agent': 0,
                                'Contact': 0,
                                'Sync_Contact': 0,
                                'Found_Contact': 0,
                                'Match_Contact': 0,
                                'Sale_Contact': 0,
                            };
                        }
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Agent']++;
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Contact'] += Sync['agent_contact_count'] - 0;
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Sync_Contact'] += Sync['sync_contact_count'] - 0;
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Found_Contact'] += Sync['found_contact_count'] - 0;
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Match_Contact'] += Sync['match_contact_count'] - 0;
                        obj_sync_summary[SyncType].Channel[Sync['channel']]['Sale_Contact'] += Sync['sale_contact_count'] - 0;
                    } catch (e) {
                    }
                }
                obj_sync_analysis_summary = data.obj_sync_analysis_summary;

                obj_final_response['obj_sync_summary'] = obj_sync_summary;
                obj_final_response['obj_sync_analysis_summary'] = obj_sync_analysis_summary;
                res.json(obj_final_response);
            }
        } catch (e) {
            res.send(e.stack);
        }

    }
    app.get('/sync_contacts/db_dashboard', LoadSession, function (req, res, next) {
//console.log('Start', this.constructor.name, 'quick_report');
        try {
            var today = moment().utcOffset("+05:30").startOf('Day');
            var arrFrom = req.query['datefrom'].split('-');
            var dateFrom = new Date(arrFrom[0] - 0, arrFrom[1] - 0 - 1, arrFrom[2] - 0);
            var arrTo = req.query['dateto'].split('-');
            var dateTo = new Date(arrTo[0] - 0, arrTo[1] - 0 - 1, arrTo[2] - 0);
            dateTo.setDate(dateTo.getDate() + 1);
            var data = {
                'sync': null,
                'obj_sync_analysis_summary': null,
                'exec_time': {},
            };
            var cond_sync = {'ss_id': {$ne: 0}, 'channel': {$ne: null}};
            var arr_ssid = [];
            if (req.obj_session.hasOwnProperty('users_assigned')) {
                var combine_arr = req.obj_session.users_assigned.Team.POSP.join(',') + ',' + req.obj_session.users_assigned.Team.DSA.join(',') + ',' + req.obj_session.users_assigned.Team.CSE.join(',');
                arr_ssid = combine_arr.split(',').filter(Number).map(Number);
            }
            arr_ssid.push(req.obj_session.user.ss_id);
            if (req.query.hasOwnProperty('page_action') && req.query['page_action'] != '') {
                if (req.query['page_action'] === 'all_daily') {
                } else if (req.query['page_action'] === 'ch_all_daily') {
                    if (req.query.hasOwnProperty('channel') && req.query['channel'] != '') {
                        channel = req.query['channel'];
                    } else {
                        channel = req.obj_session.user.role_detail.channel;
                    }
                    cond_sync['channel'] = channel;
                } else if (req.query['page_action'] === 'my_daily') {
                    cond_sync['ss_id'] = {$in: arr_ssid};
                }

                let Sync_Contact = require('../models/sync_contact');
                let Sync_Contact_Summary = require('../models/sync_contact_summary');
                console.error('Agent_Summary', 'cond_sync', cond_sync);
                var summary;
                Sync_Contact_Summary.find(cond_sync).exec(function (err, dbSyncContactsAll) {
                    summary = {
                        'all': dbSyncContactsAll,
                        'range': null
                    };
                    let cond_sync_range = cond_sync;
                    cond_sync_range.Created_On = {"$gte": dateFrom, "$lte": dateTo};
                    var sync_agg = [
                        {"$match": cond_sync_range},
                        {$group: {
                                _id: {ss_id: "$ss_id", fba_id: "$fba_id", 'channel': "$channel"},
                                agent_contact_count: {$sum: 1},
                                sync_contact_count: {$sum: "$Is_Synced"},
                                found_contact_count: {$sum: "$Is_Found"},
                                match_contact_count: {$sum: "$valid_count"}
                            }},
                        {$project: {_id: 0, ss_id: "$_id.ss_id", fba_id: "$_id.fba_id", channel: '$_id.channel', agent_contact_count: 1, sync_contact_count: 1, found_contact_count: 1, match_contact_count: 1}},
                        {$sort: {'agent_contact_count': -1}}
                    ];
                    Sync_Contact.aggregate(sync_agg).exec(function (err, dbSyncContactsRange) {
                        summary.range = dbSyncContactsRange;
                        data.sync = summary;
                        agent_activity_summary_handler(req, res, data);
                    });
                });

                let args = {
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                var Client = require('node-rest-client').Client;
                var client = new Client();
                client.get(config.environment.weburl + '/sync_contacts/synced_data_behaviour?cache=yes', args, function (dataRest, response) {
                    data.obj_sync_analysis_summary = dataRest;
                    agent_activity_summary_handler(req, res, data);
                });
            }
        } catch (e) {
            res.send(e.stack);
        }
    });
    app.post('/sync_contact_import', agent_details_pre_form, function (req, res) {
        try {
            const vCardFiles = req.files['sync_file'].path;//appRoot + "/tmp/" + "2020-08-19 12-36-59.vcf";   
            var vcard = require('vcard-json');
            var sync_contact = require('../models/sync_contact');
            var syncPospSummary = {
                'Message': '',
                'Status': '',
                'StatusNo': 0,
                'Inserted_Count': 0
            };

            let syncContact = [];
            let ss_id = req.agent['EMP'].Emp_Id;
            let fba_id = req.agent['EMP'].FBA_ID;
            let mobile_list = [];
            let exist_contact = [];

            vcard.parseVcardFile(vCardFiles, function (err, vcard) {
                console.log(vcard);
                if (ss_id > 0 && ss_id !== 5)
                {
                    for (let i in vcard)
                    {
                        if (vcard[i].phone.length > 0) {
                            for (let j in vcard[i].phone) {
                                mobile_list.push(vcard[i].phone[j].value.replace(/-/g, '').slice(-10));
                            }
                        }
                    }
                    let cond = {
                        "mobileno": {
                            "$in": mobile_list
                        },
                        'ss_id': ss_id
                    };

                    MongoClient.connect(config.db.connection + ':27017/' + config.db.name, function (err1, db) {
                        var sync_contacts = db.collection('sync_contacts');
                        sync_contacts.find(cond).toArray(function (err2, dbItems) {
                            if (err2) {
                                syncPospSummary.Message = err2;
                                syncPospSummary.Status = 'Error';
                                syncPospSummary.StatusNo = 1;
                                res.json(syncPospSummary);
                            } else {
                                for (let i in dbItems) {
                                    exist_contact.push(dbItems[i]['mobileno']);
                                }
                                for (let i in vcard) {
                                    try {

                                        for (let j in vcard[i].phone) {
                                            let objRequest = {};
                                            let mobileno = vcard[i].phone[j].value.replace(/-/g, '').slice(-10).toString();
                                            let name = vcard[i].fullname.toString();
                                            let index = syncContact.findIndex(x => x.mobileno === mobileno);
                                            let is_duplicate = "";
                                            if (syncContact.length > 0 && index > 0) {
                                                is_duplicate = syncContact[index]['mobileno'];
                                            }
                                            if (is_duplicate === "") {
                                                if (exist_contact.indexOf(mobileno) > -1)
                                                {
                                                    objRequest['name'] = name;
                                                    objRequest['Modified_On'] = new Date();
                                                    objRequest['raw_data'] = vcard[i];
                                                    let myquery = {mobileno: mobileno, ss_id: ss_id};
                                                    let newvalues = {$set: objRequest};
                                                    Sync_Contact.update(myquery, newvalues, {multi: false}, function (err, numAffected) {
                                                        if (err)
                                                        {
                                                            console.error('Exception', 'Contact_Sync_Save_Err', err);
                                                        }
                                                    });

                                                } else {
                                                    objRequest['mobileno'] = mobileno;
                                                    objRequest['name'] = name;
                                                    objRequest['ss_id'] = ss_id;
                                                    objRequest['fba_id'] = fba_id;
                                                    objRequest['channel'] = req.agent['channel'];
                                                    objRequest['Created_On'] = new Date();
                                                    objRequest['Modified_On'] = new Date();
                                                    objRequest['Short_Code'] = randomString(10);
                                                    objRequest['raw_data'] = vcard[i];
                                                    objRequest['source'] = "horizon";
                                                    syncContact.push(objRequest);
                                                }
                                            }
                                        }
                                    } catch (e) {
                                        console.error('Exception', 'sync_contact', 'data_process_loop', e.stack);
                                    }
                                }
                            }
                            if (syncContact.length > 0) {
                                sync_contact.insertMany(syncContact, function (err, users) {
                                    if (err) {
                                        syncPospSummary.Message = err;
                                        syncPospSummary.Status = 'Error';
                                        syncPospSummary.StatusNo = 1;
                                        syncPospSummary.Inserted_Count = users.length;
                                        res.json(syncPospSummary);
                                    } else {
                                        syncPospSummary.Message = 'Contact Added Successfully.';
                                        syncPospSummary.Status = 'success';
                                        syncPospSummary.StatusNo = 0;
                                        syncPospSummary.Inserted_Count = users.length;
                                        res.json(syncPospSummary);
                                    }
                                });
                            } else {
                                syncPospSummary.Message = 'No record added';
                                syncPospSummary.Status = 'Error';
                                syncPospSummary.StatusNo = 1;
                                syncPospSummary.Inserted_Count = 0;
                                res.json(syncPospSummary);
                            }
                        });
                    });
                }
            });
        } catch (e) {
            console.error(e);
        }
    });

    app.get('/protectme/:UID', function (req, res, next) {
        try {
            var User_Data_Id = req.params['UID'] - 0;
            var protect_me_well = require('../models/protect_me_well_detail');

            var Client = require('node-rest-client').Client;
            var client = new Client();
            var ip_address = "";
            var url_click = "http://localhost:8080";
            http.get('http://bot.whatismyipaddress.com', function (res, req) {
                res.setEncoding('utf8');
                var bodyChunks = [];
                res.on('data', function (chunk) {
                    // You can process streamed parts here...
                    ip_address = chunk;
                });

                client.get(config.environment.weburl + '/user_datas/view/' + User_Data_Id, function (data, err) {
                    if (data.length > 0) {
                        data = data['0'];
                        var objData = {
                            "User_Data_Id": data["User_Data_Id"],
                            "Request_Unique_Id": data["Request_Unique_Id"],
                            "Name": data["Proposal_Request_Core"]["first_name"] + " " + data["Proposal_Request_Core"]["middle_name"] + " " + data["Proposal_Request_Core"]["last_name"],
                            "Mobile": data["Proposal_Request_Core"]["mobile"],
                            "Email": data["Proposal_Request_Core"]["email"],
                            "Age": data["Proposal_Request_Core"]["birth_date"],
                            "DOB": data["Proposal_Request_Core"]["birth_date"],
                            "Address": data["Proposal_Request_Core"]["permanent_address_1"] + " " + data["Proposal_Request_Core"]["permanent_address_2"] + " " + data["Proposal_Request_Core"]["permanent_address_3"] + " " + data["Proposal_Request_Core"]["locality"] + " " + data["Proposal_Request_Core"]["permanent_pincode"] + " " + data["Proposal_Request_Core"]["district"],
                            "is_protect_me_visited": 1,
                            "is_protect_issued": 0,
                            "Created_On": new Date(),
                            "Modified_On": new Date()

                        };

                        protect_me_well.findOne({"User_Data_Id": User_Data_Id}, function (err, dbData) {
                            if (err) {

                            } else {
                                if (dbData)
                                {
                                    var obj_res = {};

                                    let obj_visted_history = {
                                        "ip_address": ip_address,
                                        "date_time": new Date()
                                    };
                                    obj_res["protect_me_link_history"] = obj_visted_history;
                                    protect_me_well.updateOne({'User_Data_Id': User_Data_Id}, {$set: {'is_protect_me_visited': parseInt(dbData._doc["is_protect_me_visited"]) + 1}}, function (err, numAffected) {
                                        console.log(err);
                                    });
                                    protect_me_well.updateOne({'User_Data_Id': User_Data_Id}, {$addToSet: obj_res}, function (err, numAffected) {
                                        console.log(err);
                                        return res.redirect(url_click);
                                    });
                                } else {
                                    let obj_visted_history = [{
                                            "ip_address": ip_address,
                                            "date_time": new Date()
                                        }];
                                    objData["protect_me_link_history"] = obj_visted_history;

                                    protect_me_well.insertMany(objData, function (err, users) {
                                        if (err) {
                                            res.json({'Msg': '', Status: 'Fail'});
                                        } else {
                                            return res.redirect(url_click);
                                            //res.json({'Msg': 'Saved Succesfully!!!', Status: 'Success'});
                                        }
                                    });
                                }
                            }
                        });
                    }

                });
            });
        } catch (e) {
            res.send(e.stack);
        }
    });
    app.get('/protectme_pdf/:UID', function (req, res, next) {
        try {
            var User_Data_Id = req.params['UID'] - 0;
            var protect_me_well = require('../models/protect_me_well_detail');
            protect_me_well.findOne({"User_Data_Id": User_Data_Id}, function (err, dbData) {
                if (err) {
                    res.json({msg: 'fail', url: ''});
                } else {
                    var url = dbData._doc.protect_me_link_url;
                    res.json({msg: 'success', url: url});
                }
            });
        } catch (e) {
            res.json({msg: 'fail', url: '', error: e});
        }
    });
    app.post('protect_initiate', function (req, res, next) {
        try {
            var User_Data_Id = 196023;
            var protect_me_well = require('../models/protect_me_well_detail');
            var Client = require('node-rest-client').Client;
            var client = new Client();
            var ObjResponse1 = {};
            var ObjResponse2 = {};
            http.get('http://bot.whatismyipaddress.com', function (res, req) {
                res.setEncoding('utf8');
                var bodyChunks = [];
                res.on('data', function (chunk) {
                    // You can process streamed parts here...
                    ip_address = chunk;
                });
                var obj = {"agree": "Y", "name": "Jane Doe", "email": "name@mail.com", "mobile": "9848022338", "gender": "F", "location": "Bengaluru", "starting_age": 35, "education": "M", "marital_status": "M", "retirement_age": 60, "mother_age": 0, "father_age": 0, "spouse_age": 31, "mother_dependent": "N", "father_dependent": "N", "spouse_dependent": "Y", "occupation_self": "S", "home_purchase_age": 30, "annual_income_self": 1000000, "annual_income_spouse": 0, "annual_income_other": 0, "current_household_expenses": 500000, "current_investment_for_retirement": 0, "home_owned": "Y", "home_loan_availed": "Y", "other_loans_availed": "Y", "total_financial_assets": 500000, "total_real_estate_assets": 5000000, "occupation_spouse": "S", "dependent_children": 0, "dependent_children_ages": "", "dependent_parents": "N"};
                var arg = {"headers": {'X-API-KEY': '1ccf9d6c4ef087ee54c43ba8f2b0651d'}};

                client.post("https://api.protectmewell.com/index.php/api/v1/get_recommendation" + "?" + obj, arg, function (data, response) {
                    data = {
                        "status": 200,
                        "message": "Success",
                        "data": {
                            "recommended_portfolio": {
                                "term_plan": {
                                    "tp_duration": 30,
                                    "tp_start": 25,
                                    "tp_cover_size": 82500000,
                                    "premium_ns": "",
                                    "premium_s": ""
                                },
                                "critical_illness": {
                                    "ci_duration": 30,
                                    "ci_starting_age": 25,
                                    "ci_cover_size": 52000000,
                                    "ci_horizon_for_cover": 30
                                },
                                "health_insurance": {"hi_annual_health_cover": 2500000},
                                "annuity_funds": {
                                    "af_start_age": 55,
                                    "af_corpus": 280500000,
                                    "af_annual_payout": 14018200,
                                    "retirement_expenses": 32023500,
                                    "monthly_investment": 169300,
                                    "monthly_epf_investment": 44100,
                                    "additional_monthly_epf_investment": 125300,
                                    "annual_investment_percent": 18
                                }
                            },
                            "current_portfolio": {
                                "term_plan": {"tp_risk_cover_score": 6},
                                "critical_illness": {"ci_risk_cover_score": 0},
                                "health_insurance": {"hi_risk_cover_score": 10},
                                "annuity_funds": {"af_risk_cover_score": 0}
                            },
                            "hash": "5cd7503cca974087b531380dffbee28a"
                        }
                    };
                    ObjResponse1 = data;
                    if (ObjResponse1.status === 200 && ObjResponse1.message === "Success") {
                        var service_method_url = "https://api.protectmewell.com/index.php/api/v1/get_pdf_url";

                        const request = require('request');
                        request.post({
                            url: service_method_url,
                            form: {
                                hash: ObjResponse1.data.status
                            }
                        }, function (err, httpResponse, body) {
                            ObjResponse2 = body;
                            if (ObjResponse2.status === 200 && ObjResponse2.message === "Success") {

                                protect_me_well.findOne({"User_Data_Id": User_Data_Id}, function (err, dbData) {
                                    if (err) {

                                    } else {
                                        if (dbData)
                                        {
                                            var obj_res = {};
                                            let obj_visted_history = {
                                                "ip_address": ip_address,
                                                "date_time": new Date()
                                            };
                                            obj_res["protect_me_link_history"] = obj_visted_history;
                                            var obj_req = {"protect_me_link_url": ObjResponse2.data['pdf_url'],
                                                "Service_Response_1": ObjResponse1,
                                                "Service_Response_2": ObjResponse2
                                            };
                                            obj_res["protect_me_link_url"] = ObjResponse2.data['pdf_url'];
                                            obj_res["Service_Response_2"] = ObjResponse2;
                                            protect_me_well.updateOne({'User_Data_Id': User_Data_Id}, {$set: obj_req}, function (err, numAffected) {
                                                console.log(err);
                                            });
                                            protect_me_well.updateOne({'User_Data_Id': User_Data_Id}, {$addToSet: obj_res}, function (err, numAffected) {
                                                console.log(err);
                                            });
                                        }
                                    }
                                });
                            }

                        });
                    }
                });

            });
        } catch (e) {
            res.send(e.stack);
        }
    });
};
function LoadSession(req, res, next) {
    try {
        var objRequestCore = req.body;
        if (req.method === "GET") {
            objRequestCore = req.query;
        }
        objRequestCore = JSON.parse(JSON.stringify(objRequestCore));
        if (objRequestCore.hasOwnProperty('session_id') && objRequestCore['session_id'] !== '') {
            var Session = require('../models/session');
            Session.findOne({"_id": objRequestCore['session_id']}, function (err, dbSession) {
                if (err) {
                    res.send(err);
                } else {
                    if (dbSession) {
                        dbSession = dbSession._doc;
                        var obj_session = JSON.parse(dbSession['session']);
                        req.obj_session = obj_session;
                        return next();
                    } else {
                        return res.status(401).json({'Msg': 'Session Expired.Not Authorized'});
                    }
                }
            });
        } else {
            return next();
        }
    } catch (e) {
        console.error('Exception', 'GetReportingAssignedAgent', e);
        return next();

    }
}
function reg_no_format(Registration_Num) {

    if ([9, 10, 11].indexOf(Registration_Num.length) > -1) {
        var lastfour = Registration_Num.substr(Registration_Num.length - 4);
        var lastdigit = lastfour.match(/\d/g);
        if (lastdigit !== null) {
            lastdigit = lastdigit.join("");
            if (lastdigit.toString().length > 0) {
                if (lastdigit.toString().length < 4) {
                    var lastdigitnumber = lastdigit - 0;
                    var lastdigitpadzero = pad(lastdigitnumber, 4);
                    Registration_Num = Registration_Num.replace(lastdigit, lastdigitpadzero);
                }
                if (Registration_Num.length === 11) {
                    Registration_Num = Registration_Num.substring(0, 2) + '-' + Registration_Num.substring(2, 4) + '-' + Registration_Num.substring(4, 7) + '-' + Registration_Num.substring(7, 11);
                }
                if (Registration_Num.length === 10) {
                    Registration_Num = Registration_Num.substring(0, 2) + '-' + Registration_Num.substring(2, 4) + '-' + Registration_Num.substring(4, 6) + '-' + Registration_Num.substring(6, 10);
                }
                if (Registration_Num.length === 9) {
                    Registration_Num = Registration_Num.substring(0, 2) + '-' + Registration_Num.substring(2, 4) + '-' + Registration_Num.substring(4, 5) + '-' + Registration_Num.substring(5, 9);
                }
            }
        }
    }
    return Registration_Num;
}
function agent_details_pre(req, res, next) {
    var ss_id = 0;
    if (req.query.hasOwnProperty('ss_id') && req.query['ss_id'] > 0) {
        ss_id = req.query['ss_id'] - 0;
    } else {
        if (typeof req.body['ssid'] !== 'undefined' && req.body['ssid'] > 0) {
            ss_id = req.body['ssid'] - 0;
        }
    }

    if (req.params.hasOwnProperty('ss_id') && (req.params.ss_id - 0) > 0) {
        ss_id = req.params.ss_id - 0;
    }

    if (ss_id > 0) {
        var Client = require('node-rest-client').Client;
        var client = new Client();
        client.get(config.environment.weburl + '/posps/dsas/view/' + ss_id.toString(), {}, function (data, response) {
            if (data['status'] === 'SUCCESS') {
                req.agent = data;
            } else {
                //res.send('AGENT_NOT_EXIST<br>' + '<pre>' + JSON.stringify(req.query, undefined, 2) + '</pre>');
            }
            return next();
        });
    } else {
        return next();
    }
}
function pad(str, width) {
    while (str.length < width)
        str = "0" + str;
    return str;
}
function arrayobjectToHtml(objSummary, Title = 'Report', SubTitle = '', ColumnToExclude = []) {
    var msg = '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;font-weight:bold">' + Title + '</span>';
    if (SubTitle !== '') {
        msg += '<span  style="font-family:\'Google Sans\' ,tahoma;font-size:12px;">' + SubTitle + '</span>';
    }
    msg += '<table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
    var row_inc = 0;
    for (var k in objSummary) {
        if (row_inc === 0) {
            msg += '<tr>';
            for (var k_head in objSummary[k]) {
                if (ColumnToExclude.indexOf(k_head) < 0) {
                    msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01;text-align:center;"  align="center">' + k_head + '</th>';
                }
            }
            msg += '</tr>';
        }
        msg += '<tr>';
        for (var k_row in objSummary[k]) {
            if (ColumnToExclude.indexOf(k_row) < 0) {
                msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;;text-align:center;" align="center">' + objSummary[k][k_row] + '</td>';
            }
        }
        msg += '</tr>';
        row_inc++;
    }
    msg += '</table></div>';
    return msg;
}
function objectToHtml(objSummary) {

    var msg = '<div class="report" ><span  style="font-family:\'Google Sans\' ,tahoma;font-size:14px;">Report</span><table style="-moz-box-shadow: 1px 1px 3px 2px #d3d3d3;-webkit-box-shadow: 1px 1px 3px 2px #d3d3d3;  box-shadow:         1px 1px 3px 2px #d3d3d3;" border="0" cellpadding="3" cellspacing="0" width="95%"  >';
    var row_inc = 0;
    for (var k in objSummary) {
        if (row_inc === 0) {
            msg += '<tr>';
            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Details</th>';
            msg += '<th style="font-size:12px;font-family:\'Google Sans\' ,tahoma;background-color: #d7df01">Value</th>';
            msg += '</tr>';
        }
        msg += '<tr>';
        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + k + '</td>';
        msg += '<td style="font-size:12px;font-family:\'Google Sans\' ,tahoma;" align="center">' + objSummary[k] + '</td>';
        msg += '</tr>';
        row_inc++;
    }
    msg += '</table></div>';
    return msg;
}
function sync_contact_email(objCallSummary) {
    try {
        if (objCallSummary.main.done_job === objCallSummary.main.total_job)
        {
            var today = moment().utcOffset("+05:30");
            var today_str = moment(today).format("YYYYMMD");
            var objRequest = {
                'dt': today.toLocaleString(),
                'resp': objCallSummary
            };
            fs.appendFile(appRoot + "/tmp/log/contact_syncing_" + today_str + ".log", JSON.stringify(objRequest) + "\r\n", function (err) {
                if (err) {
                    return console.log(err);
                }
            });
            objCallSummary.main.success_job_cnt = objCallSummary.success_job.length;
            objCallSummary.main.fail_job_cnt = objCallSummary.fail_job.length;
            objCallSummary.main.nodetail_job_cnt = objCallSummary.nodetail_job.length;
            var Email = require('../models/email');

            var objModelEmail = new Email();
            var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-SYNC_CONTACT-' + moment().format('YYYY-MM-DD_HH:mm:ss');
            let res_report = '<!DOCTYPE html><html><head><style>body,*,html{font-family:\'Google Sans\' ,tahoma;font-size:14px;}</style><title>Followup List</title><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body>';
            res_report += '<p><h1>CONTACT ERP SYNC REPORT</h1></p>';
            res_report += '<p><h1>Details</h1>' + objectToHtml(objCallSummary.main) + '</p>';
            res_report += arrayobjectToHtml(objCallSummary['success_job'], 'Success Job', '', ['url', 'error', 'status']);
            //res_report += arrayobjectToHtml(objCallSummary['nodetail_job'], 'NoDetail Jon', '', ['url']);
            res_report += arrayobjectToHtml(objCallSummary['fail_job'], 'Fail Job', '', ['url']);
            res_report += '</p>';
            res_report += '</body></html>';
            objModelEmail.send('notifications@policyboss.com', config.environment.notification_email, sub, res_report, '', '', '');
        }
    } catch (e) {
        console.error('Exception', 'sync_contact_email', e.stack);
    }
}
function sortObjectByVal(obj) {
    //var list = {"you": 100, "me": 75, "foo": 116, "bar": 15};
    var keysSorted = Object.keys(obj).sort(function (a, b) {
        return obj[b] - obj[a]
    });
    var newObj = {};
    for (var x of keysSorted) {
        newObj[x] = obj[x];
    }
    return newObj;

}
function randomString(length, chars) {
    chars = chars || '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var result = '';
    for (var i = length; i > 0; --i)
        result += chars[Math.floor(Math.random() * chars.length)];
    return result;
}
function agent_details_pre_form(req, res, next) {
    var formidable = require('formidable');
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
        var ss_id = 0;
        if (fields.hasOwnProperty('ss_id') && fields['ss_id'] > 0) {
            ss_id = fields['ss_id'] - 0;
        }

        if (ss_id > 0) {
            var Client = require('node-rest-client').Client;
            var client = new Client();
            client.get(config.environment.weburl + '/posps/dsas/view/' + ss_id.toString(), {}, function (data, response) {
                if (data['status'] === 'SUCCESS') {
                    req.agent = data;
                    req.files = files;
                } else {
                    //res.send('AGENT_NOT_EXIST<br>' + '<pre>' + JSON.stringify(req.query, undefined, 2) + '</pre>');
                }
                return next();
            });
        } else {
            return next();
        }
    });
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
var config = require('config');
var mongoose = require('mongoose');
var moment = require('moment');
var path = require('path');
var appRoot = path.dirname(path.dirname(require.main.filename)); 

mongoose.Promise = global.Promise;
mongoose.connect(config.db.connection + ':27017/' + config.db.name, {useMongoClient: true}); // connect to our database
var standalon_payment = require('../models/standalone_payment');
module.exports.controller = function (app) {
    app.post('/standalone_payments/customer_data', function (req, res) {
    try {
        var standalon_payment = require('../models/standalone_payment');
        let objReq = req.body;
        if (objReq) {
            standalon_payment.findOne({'vehicle_reg_no': objReq.vehicle_reg_no}, function (err, objDbData) {
                if (err) {
                    res.json({
                        Status: 'Error',
                        Msg: err.stack
                    });
                } else {
                    if (objDbData && objDbData.status && objDbData.status === "Success") {
                        res.json({
                            Status: 'Fail',
                            Msg: 'Payment Already Completed'
                        });
                    } else {
                        if (objDbData && objDbData._doc) {
                            objDbData['cc'] = objReq.cc;
                            objDbData['premium_amount'] = objReq.premium_amount;
                            objDbData['name'] = objReq.name;
                            objDbData['mobile'] = objReq.mobile;
                            objDbData['email'] = objReq.email;
                            objDbData['address'] = objReq.address;
                            objDbData['Modefied_On'] = new Date();
                            objReq = objDbData;
                        } else {
                            objReq.status = 'Pending';
                            objReq.insurer_id = 46;
                            objReq.product_id = 10;
                            objReq.Created_On = new Date();
                            objReq.Modefied_On = new Date();
                        }
                        var spObj = new standalon_payment(objReq);
                        spObj.save(function (err, spData) {
                            if (err) {
                                res.json({
                                    Status: 'Error',
                                    Msg: err.stack
                                });
                            }
                            if (spData && spData._doc) {
                                var Payment = {};
                                var merchant_key = ((config.environment.name === 'Production') ? 'o7LxX9fJ' : 'BC50nb');
                                var salt = ((config.environment.name === 'Production') ? 'c6ob2Q7Wb4' : 'Bwxo1cPe');
                                var merchant_id = ((config.environment.name === 'Production') ? '6756734' : '4825050');
                                var amount = spData.premium_amount;
                                var productinfo = {paymentParts: [{name: 'splitId1', merchantId: merchant_id, value: amount, commission: '0.00', description: 'splitId1 summary'}]};
                                var hashSequence = 'key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10';
                                var str = hashSequence.split('|');
                                var txnid = spData.vehicle_reg_no;
                                var hash_string = '';
                                for (var hash_var in str) {
                                    if (str[hash_var] === "key")
                                    {
                                        hash_string = hash_string + merchant_key;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "txnid")
                                    {
                                        hash_string = hash_string + txnid;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "amount")
                                    {
                                        hash_string = hash_string + amount;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "productinfo")
                                    {
                                        hash_string = hash_string + JSON.stringify(productinfo);
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "firstname")
                                    {
                                        hash_string = hash_string + spData.name;
                                        hash_string = hash_string + '|';
                                    } else if (str[hash_var] === "email")
                                    {
                                        hash_string = hash_string + spData.email;
                                        hash_string = hash_string + '|';
                                    } else
                                    {
                                        hash_string = hash_string + '';
                                        hash_string = hash_string + '|';
                                    }
                                }
                                hash_string = hash_string + salt;
                                var crypto = require('crypto');
                                var hash = crypto.createHash("sha512").update(hash_string).digest("hex").toLowerCase();
                                var pg_data = {
                                    'firstname': spData.name,
                                    'lastname': '',
                                    'surl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/standalone_payment_status/' + txnid + '/' + spData.standalone_payment_id, //
                                    'phone': spData.mobile,
                                    'key': merchant_key,
                                    'hash': hash,
                                    'curl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/standalone_payment_status/' + txnid + '/' + spData.standalone_payment_id, //
                                    'furl': ((config.environment.name === 'Production') ? 'http://horizon.policyboss.com' : 'http://qa-horizon.policyboss.com') + '/standalone_payment_status/' + txnid + '/' + spData.standalone_payment_id, //
                                    'txnid': txnid,
                                    'productinfo': JSON.stringify(productinfo),
                                    'amount': amount,
                                    'email': spData.email,
                                    'SALT': salt,
                                    'service_provider': "payu_paisa"
                                };
                                Payment.pg_data = pg_data;
                                Payment.pg_url = ((config.environment.name === 'Production') ? 'https://secure.payu.in/_payment' : 'https://test.payu.in/_payment');
                                Payment.pg_redirect_mode = 'POST';
                                standalon_payment.update({'vehicle_reg_no': txnid, 'standalone_payment_id': spData.standalone_payment_id}, {$set: {'pg_data': Payment}}, {multi: false}, function (err, numAffected) {

                                });
                                res.json({
                                    Status: 'Success',
                                    Msg: Payment
                                });
                            } else {
                                res.json({
                                    Status: 'Fail',
                                    Msg: spData
                                });
                            }
                        });
                    }
                }
            });
        } else {
            res.json({
                Status: 'Fail',
                Msg: ''
            });
        }
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }

});
    app.post('/standalone_payments/pg', function (req, res) {
    try {
        let objReq = req.body;
        let reg_no = objReq.reg_no;
        let pg_id = objReq.pg_id - 0;

        this.objReq = objReq;
        var standalon_payment = require('../models/standalone_payment');
        standalon_payment.findOne({'vehicle_reg_no': reg_no, 'standalone_payment_id': pg_id}, function (err, dataSP) {
            try {
                if (dataSP && dataSP._doc && dataSP._doc.hasOwnProperty('Horizon_Status') && (dataSP._doc['Horizon_Status'] === "PAYMENT_SUCCESS" || dataSP._doc['Horizon_Status'] === "FASTLANE_DONE"
                        || dataSP._doc['Horizon_Status'] === "PREMIUM_INITIATE" || dataSP._doc['Horizon_Status'] === "PROPOSAL_INITIATE" || dataSP._doc['Horizon_Status'] === "VERIFICATION_INITIATE" )) {
                    res.json({
                        Status: 'Success',
                        Msg: ''
                    });
                } else {
                    var objRequset = this.objReq;
                    var reg_no = objRequset.reg_no;
                    var pg_id = objRequset.pg_id - 0;
                    var pg_status = "PAYMENT_FAIL";
                    if (objRequset && objRequset.pg_post && objRequset.pg_post.status && objRequset.pg_post.status === "success") {
                        pg_status = "PAYMENT_SUCCESS";
                    }
                    standalon_payment.update({'vehicle_reg_no': reg_no, 'standalone_payment_id': pg_id}, {$set: {'pg_get': objRequset.pg_get, 'pg_post': objRequset.pg_post, 'status': 'Success', Horizon_Status: pg_status}}, {multi: false}, function (err, numAffected) {
                        if (err) {
                            res.json({
                                Status: 'Error',
                                Msg: err.stack
                            });
                        } else {
                            if (numAffected && numAffected.nModified > 0) {
                                res.json({
                                    Status: 'Success',
                                    Msg: numAffected
                                });
                            } else {
                                res.json({
                                    Status: 'Fail',
                                    Msg: numAffected
                                });
                            }
                        }
                    });
                }

            } catch (e) {
                res.json({
                    Status: 'Error',
                    Msg: e.stack
                });
            }
        });
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }

});
    app.get('/standalone_payments/data/:pg_id', function (req, res) {
    try {
        var pg_id = req.params['pg_id'] ? req.params['pg_id'] - 0 : 0;
        if (isNaN(pg_id) === false && pg_id > 0) {
            var standalon_payment = require('../models/standalone_payment');
            standalon_payment.findOne({'standalone_payment_id': pg_id}, function (err, dbSP) {
                if (err) {
                    res.json({
                        Status: 'Error',
                        Msg: err.stack
                    });
                } else {
                    if (dbSP) {
                        res.json({
                            Status: 'Success',
                            Msg: dbSP
                        });
                    } else {
                        res.json({
                            Status: 'Fail',
                            Msg: 'pg id is not valid'
                        });
                    }
                }
            });
        } else {
            res.json({
                Status: 'Fail',
                Msg: pg_id
            });
        }
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }
});
    app.post('/standalone_payments/save_logs', function (req, res) {
    try {
        var pg_id = req.body['standalone_payment_id'] ? req.body['standalone_payment_id'] - 0 : 0;
        var reg_no = req.body['vehicle_reg_no'] ? req.body['vehicle_reg_no'] : "";
        if (isNaN(pg_id) === false && pg_id > 0 && reg_no !== "") {
			if (req.body && req.body.is_fastlane === false && req.body.email) {
                var Email = require('../models/email');
                var objModelEmail = new Email();
                var sub = '[' + config.environment.name.toString().toUpperCase() + ']INFO-PolicyBoss.com-' + reg_no + ' EDELWEISS TWO WHEELER SATP QUICK ';
                email_body = '<html><body><p>Hi,</p><BR/><p>Please find the below URL to fill the rquired data to proceed further</p>'
                        + '<BR><p>URL : ' + (config.environment.portalurl) + '/TwoWheeler/vehicleDetails.html?pg_id=' + pg_id + ' </p></body></html>';
                objModelEmail.send('noreply@policyboss.com', req.body.email, sub, email_body, '', '', ''); //UAT
            }
            var standalon_payment = require('../models/standalone_payment');
            standalon_payment.update({'vehicle_reg_no': reg_no, 'standalone_payment_id': pg_id}, {$set: req.body}, {multi: false}, function (err, numAffected) {
                if (err) {
                    res.json({
                        Status: 'Error',
                        Msg: err.stack
                    });
                } else {
                    if (numAffected && numAffected.nModified > 0) {
                        res.json({
                            Status: 'Success',
                            Msg: numAffected
                        });
                    } else {
                        res.json({
                            Status: 'Fail',
                            Msg: numAffected
                        });
                    }
                }
            });
        } else {
            res.json({
                Status: 'Fail',
                Msg: pg_id
            });
        }
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }
});
    app.get('/standalone_payments/registration_no/:registration_no', function (req, res) {
    try {
        var User_Data = require(appRoot + '/models/user_data');
        var month = (req.query.hasOwnProperty('month')) ? req.query.month - 0 : 9;
        var start_date = moment().subtract(month, "months").format('YYYY-MM-DD');
        start_date = new Date(start_date + "T06:00:00Z");
        var end_date = moment().format('YYYY-MM-DD');
        end_date = new Date(end_date + "T05:59:59Z");
        var reg_no = (req.params.hasOwnProperty('registration_no')) ? req.params.registration_no : "";
        var ud_cond = {
            "Erp_Qt_Request_Core.___registration_no___": reg_no,
            "Modified_On": {"$gte": start_date, "$lte": end_date},
            "Last_Status": {$in: ['TRANS_SUCCESS_WO_POLICY', 'TRANS_SUCCESS_WITH_POLICY']}
        };
        User_Data.findOne(ud_cond, function (err, dbUserData) {
            if (err) {
                res.json({
                    Status: 'Error',
                    Msg: err.stack
                });
            } else {
                if (dbUserData) {
                    res.json({
                        Status: 'Success',
                        Msg: ''
                    });
                } else {
                    res.json({
                        Status: 'Fail',
                        Msg: ''
                    });
                }
            }
        });
    } catch (e) {
        res.json({
            Status: 'Error',
            Msg: e.stack
        });
    }
});

};
